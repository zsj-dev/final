{"task_id": "Java/0", "generation": "        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                double diff = Math.abs(numbers.get(i) - numbers.get(j));\n                if (diff < threshold) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Double> numbers = new ArrayList<>();\n        numbers.add(1.5);\n        numbers.add(2.5);\n        numbers.add(4.0);\n\n        double threshold = 0.5;\n\n        boolean result = solution.hasCloseElements(numbers, threshold);\n        System.out.println(result);\n    }\n}"}
{"task_id": "Java/1", "generation": "        List<String> result = new ArrayList<>();\n        int open = 0;\n        int start = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                open++;\n            } else if (paren_string.charAt(i) == ')') {\n                open--;\n            }\n            if (open == 0) {\n                result.add(paren_string.substring(start, i + 1));\n                start = i + 1;\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/2", "generation": "        double integerPart = Math.floor(number);\n        return number - integerPart;\n    }\n}"}
{"task_id": "Java/3", "generation": "        int balance = 0;\n        \n        for(int operation : operations){\n            balance += operation;\n            if(balance < 0){\n                return true;\n            }\n        }\n        \n        return false;\n    }\n}"}
{"task_id": "Java/4", "generation": "        int n = numbers.size();\n        if (n == 0) {\n            return 0;\n        }\n        \n        // Calculate the mean of the numbers\n        double sum = 0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / n;\n        \n        // Calculate the mean absolute deviation\n        double mad = 0;\n        for (double num : numbers) {\n            mad += Math.abs(num - mean);\n        }\n        mad /= n;\n        \n        return mad;\n    }\n\n    public static void main(String[] args) {\n        List<Double> numbers = new ArrayList<>();\n        numbers.add(1.0);\n        numbers.add(2.0);\n        numbers.add(3.0);\n        numbers.add(4.0);\n        numbers.add(5.0);\n        \n        Solution solution = new Solution();\n        double mad = solution.meanAbsoluteDeviation(numbers);\n        System.out.println(\"Mean Absolute Deviation: \" + mad);\n    }\n}"}
{"task_id": "Java/5", "generation": "        List<Integer> result = new ArrayList<>();\n        for(int i=0; i<numbers.size(); i++){\n            result.add(numbers.get(i));\n            if(i<numbers.size()-1){\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/6", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (String group : paren_string.split(\" \")) {\n            int maxDepth = 0;\n            int currentDepth = 0;\n            \n            for (char c : group.toCharArray()) {\n                if (c == '(') {\n                    currentDepth++;\n                    if (currentDepth > maxDepth) {\n                        maxDepth = currentDepth;\n                    }\n                } else if (c == ')') {\n                    currentDepth--;\n                }\n            }\n            \n            result.add(maxDepth);\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        String test1 = \"(()) () ((())) (()())\";\n        System.out.println(solution.parseNestedParens(test1));  // Output should be [1, 0, 3, 1]\n        \n        String test2 = \"() () ()\";\n        System.out.println(solution.parseNestedParens(test2));  // Output should be [1, 1, 1]\n        \n        String test3 = \"((())) (()()) ((()))\";\n        System.out.println(solution.parseNestedParens(test3));  // Output should be [3, 2, 3]\n    }\n}"}
{"task_id": "Java/7", "generation": "        List<String> result = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                result.add(str);\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/8", "generation": "        List<Integer> result = new ArrayList<>();\n        if (numbers == null || numbers.isEmpty()) {\n            result.add(0);\n            result.add(1);\n            return result;\n        }\n        \n        int sum = 0;\n        int product = 1;\n        \n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n        \n        result.add(sum);\n        result.add(product);\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> numbers = new ArrayList<>();\n        numbers.add(2);\n        numbers.add(3);\n        numbers.add(4);\n        \n        List<Integer> result = solution.sumProduct(numbers);\n        System.out.println(\"Sum: \" + result.get(0) + \", Product: \" + result.get(1));\n    }\n}"}
{"task_id": "Java/9", "generation": "List<Integer> result = new ArrayList<>();\n        \n        Deque<Integer> deque = new LinkedList<>();\n        \n        for(int i=0; i<numbers.size(); i++){\n            // Remove elements from the deque that are smaller than the current element\n            while(!deque.isEmpty() && numbers.get(i) > deque.peekLast()){\n                deque.pollLast();\n            }\n            \n            // Add the current element to the deque\n            deque.offer(numbers.get(i));\n            \n            // Add the maximum element to the result list\n            result.add(deque.peekFirst());\n            \n            // Remove elements that are outside the rolling window\n            if(i >= numbers.size() - 3){\n                deque.pollFirst();\n            }\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/10", "generation": "    String palindrome = string;\n        int i = 0;\n        for (i = string.length(); i >= 0; i--) {\n            if (isPalindrome(string.substring(i))) {\n                break;\n            }\n        }\n        String prefix = string.substring(0, i);\n        StringBuilder sb = new StringBuilder(string);\n        sb.append(new StringBuilder(prefix).reverse().toString());\n        palindrome = sb.toString();\n        return palindrome;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String testString = \"hello\";\n        String palindrome = solution.makePalindrome(testString);\n        System.out.println(\"Shortest Palindrome for given string: \" + palindrome);\n    }\n}"}
{"task_id": "Java/11", "generation": "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n                sb.append(\"0\");\n            } else {\n                sb.append(\"1\");\n            }\n        }\n        return sb.toString();\n    }\n}"}
{"task_id": "Java/12", "generation": "        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        String longestString = strings.get(0);\n        \n        for (String str : strings) {\n            if (str.length() > longestString.length()) {\n                longestString = str;\n            }\n        }\n        \n        return Optional.of(longestString);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<String> strings = new ArrayList<>();\n        strings.add(\"apple\");\n        strings.add(\"banana\");\n        strings.add(\"orange\");\n        \n        System.out.println(solution.longest(strings)); // Output: Optional[banana]\n        \n        strings.clear();\n        System.out.println(solution.longest(strings)); // Output: Optional.empty\n    }\n}"}
{"task_id": "Java/13", "generation": "        if (b == 0) {\n            return a;\n        } else {\n            return greatestCommonDivisor(b, a % b);\n        }\n    }\n}"}
{"task_id": "Java/14", "generation": "        List<String> prefixes = new ArrayList<>();\n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        return prefixes;\n    }\n}"}
{"task_id": "Java/15", "generation": "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n        }\n        return sb.toString().trim();\n    }\n}"}
{"task_id": "Java/16", "generation": "        // Convert the input string to lowercase to ignore case\n        string = string.toLowerCase();\n        \n        // Create a set to store distinct characters\n        Set<Character> charSet = new HashSet<>();\n        \n        // Iterate through the characters of the string and add them to the set\n        for (int i = 0; i < string.length(); i++) {\n            charSet.add(string.charAt(i));\n        }\n        \n        // Return the size of the set which represents the count of distinct characters\n        return charSet.size();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        String string = \"Hello World\";\n        \n        int count = solution.countDistinctCharacters(string);\n        System.out.println(\"Distinct characters count: \" + count);\n    }\n}"}
{"task_id": "Java/17", "generation": "List<Integer> beats = new ArrayList<>();\n\n        String[] notes = string.split(\"\\\\s+\");\n\n        for (String note : notes) {\n            switch (note) {\n                case \"o\":\n                    beats.add(4);\n                    break;\n                case \"o|\":\n                    beats.add(2);\n                    break;\n                case \".|\":\n                    beats.add(1);\n                    break;\n                default:\n                    beats.add(0);\n                    break;\n            }\n        }\n\n        return beats;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String input = \"o o| .| o .|\";\n        List<Integer> result = solution.parseMusic(input);\n        for (int beat : result) {\n            System.out.print(beat + \" \");\n        }\n    }\n}"}
{"task_id": "Java/18", "generation": "        // Edge case: if the substring is empty, return 0\n        if (substring.isEmpty()) {\n            return 0;\n        }\n        \n        int count = 0;\n        int index = 0;\n        \n        // Loop through the original string and check for each occurence of the substring\n        while (index < string.length()) {\n            index = string.indexOf(substring, index);\n            if (index != -1) {\n                count++;\n                index = index + 1;\n            } else {\n                break;\n            }\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        String string1 = \"abababab\";\n        String substring1 = \"ab\";\n        System.out.println(solution.howManyTimes(string1, substring1)); // Output: 4\n        \n        String string2 = \"aaaaa\";\n        String substring2 = \"aa\";\n        System.out.println(solution.howManyTimes(string2, substring2)); // Output: 4\n        \n        String string3 = \"abcde\";\n        String substring3 = \"f\";\n        System.out.println(solution.howManyTimes(string3, substring3)); // Output: 0\n    }\n}"}
{"task_id": "Java/19", "generation": "        // Create a map to store the mapping of number words to their corresponding integer values\n        Map<String, Integer> numberMap = new HashMap<>();\n        numberMap.put(\"zero\", 0);\n        numberMap.put(\"one\", 1);\n        numberMap.put(\"two\", 2);\n        numberMap.put(\"three\", 3);\n        numberMap.put(\"four\", 4);\n        numberMap.put(\"five\", 5);\n        numberMap.put(\"six\", 6);\n        numberMap.put(\"seven\", 7);\n        numberMap.put(\"eight\", 8);\n        numberMap.put(\"nine\", 9);\n        \n        // Split the input string by spaces to get an array of number words\n        String[] numberWords = numbers.split(\" \");\n        \n        // Create a list to store the integer values of the number words\n        List<Integer> numberValues = new ArrayList<>();\n        \n        // Convert each number word to its integer value using the map and add it to the list\n        for (String numberWord : numberWords) {\n            numberValues.add(numberMap.get(numberWord));\n        }\n        \n        // Sort the list of integer values\n        Collections.sort(numberValues);\n        \n        // Create a StringBuilder to build the result string\n        StringBuilder result = new StringBuilder();\n        \n        // Convert each integer value back to its number word form and append it to the result string\n        for (int numberValue : numberValues) {\n            for (Map.Entry<String, Integer> entry : numberMap.entrySet()) {\n                if (entry.getValue() == numberValue) {\n                    result.append(entry.getKey()).append(\" \");\n                    break;\n                }\n            }\n        }\n        \n        // Remove the last space from the result string and return it\n        return result.toString().trim();\n    } \n\n     public static void main(String[] args) {\n        Solution s = new Solution();\n\n        // Test cases\n        System.out.println(s.sortNumbers(\"five seven two zero one three\"));\n        // Expected output: zero one two three five seven\n        \n        System.out.println(s.sortNumbers(\"four eight six five three zero two one\"));\n        // Expected output: zero one two three four five six eight\n        \n        System.out.println(s.sortNumbers(\"nine three seven six eight two five four zero one\"));\n        // Expected output: zero one two three four five six seven eight nine\n    }\n}"}
{"task_id": "Java/20", "generation": "        if (numbers == null || numbers.size() < 2) {\n            throw new IllegalArgumentException(\"Invalid input\");\n        }\n        \n        Collections.sort(numbers);\n        \n        double minDiff = Double.MAX_VALUE;\n        int num1 = 0, num2 = 1;\n        \n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = Math.abs(numbers.get(i) - numbers.get(i + 1));\n            if (diff < minDiff) {\n                minDiff = diff;\n                num1 = i;\n                num2 = i + 1;\n            }\n        }\n        \n        List<Double> result = new ArrayList<>();\n        result.add(numbers.get(num1));\n        result.add(numbers.get(num2));\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Double> numbers = Arrays.asList(1.0, 5.0, 3.0, 9.0, 2.0);\n        Solution solution = new Solution();\n        List<Double> closestElements = solution.findClosestElements(numbers);\n        System.out.println(closestElements); // Output: [1.0, 2.0]\n    }\n}"}
{"task_id": "Java/21", "generation": "        List<Double> result = new ArrayList<>();\n        \n        // Find the minimum and maximum numbers in the list\n        double minNum = Collections.min(numbers);\n        double maxNum = Collections.max(numbers);\n        \n        // Calculate the range of the numbers\n        double range = maxNum - minNum;\n        \n        // Rescale each number to the unit range\n        for (Double num : numbers) {\n            double rescaled = (num - minNum) / range;\n            result.add(rescaled);\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/22", "generation": "\n        List<Integer> integers = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                integers.add((Integer) value);\n            }\n        }\n        return integers;\n    }\n}"}
{"task_id": "Java/23", "generation": "return string.length();\n    }\n\n    public String reverseString(String string) {\n    /**\n        Return the reverse of the given string\n         */\n        StringBuilder sb = new StringBuilder(string);\n        return sb.reverse().toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test the strlen method\n        String str1 = \"Hello\";\n        System.out.println(\"Length of '\" + str1 + \"': \" + solution.strlen(str1));\n\n        String str2 = \"World\";\n        System.out.println(\"Length of '\" + str2 + \"': \" + solution.strlen(str2));\n\n        // Test the reverseString method\n        String str3 = \"Java\";\n        System.out.println(\"Reverse of '\" + str3 + \"': \" + solution.reverseString(str3));\n\n        String str4 = \"Programming\";\n        System.out.println(\"Reverse of '\" + str4 + \"': \" + solution.reverseString(str4));\n    }\n}"}
{"task_id": "Java/24", "generation": "        if (n == 0 || n == 1) {\n            return 0;\n        }\n        \n        int largestDivisor = 0;\n        \n        for (int i = 1; i < n; i++) {\n            if (n % i == 0) {\n                largestDivisor = i;\n            }\n        }\n        \n        return largestDivisor;\n    }\n}"}
{"task_id": "Java/25", "generation": "        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i*i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        int n1 = 12;\n        System.out.println(solution.factorize(n1));  // [2, 2, 3]\n        \n        int n2 = 84;\n        System.out.println(solution.factorize(n2));  // [2, 2, 3, 7]\n        \n        int n3 = 120;\n        System.out.println(solution.factorize(n3));  // [2, 2, 2, 3, 5]\n    }\n}"}
{"task_id": "Java/26", "generation": "        Set<Integer> set = new HashSet<>();\n        List<Integer> result = new ArrayList<>();\n\n        for (Integer num : numbers) {\n            if (!set.contains(num)) {\n                set.add(num);\n                result.add(num);\n            }\n        }\n\n        return result;\n    }\n}"}
{"task_id": "Java/27", "generation": "        StringBuilder sb = new StringBuilder();\n        \n        for(char c : string.toCharArray()) {\n            if(Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n            } else if(Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n            } else {\n                sb.append(c);\n            }\n        }\n        \n        return sb.toString();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        \n        String string = \"Hello World!\";\n        System.out.println(\"Original String: \" + string);\n        \n        String flippedString = sol.flipCase(string);\n        System.out.println(\"Flipped Case String: \" + flippedString);\n    }\n}"}
{"task_id": "Java/28", "generation": "        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n    \n    public List<String> generateSubstrings(String s) {\n    /**\n        Generate all possible substrings of a given string\n         */\n        \n        List<String> substrings = new ArrayList<>();\n        for (int i = 0; i < s.length(); i++) {\n            for (int j = i + 1; j <= s.length(); j++) {\n                substrings.add(s.substring(i, j));\n            }\n        }\n        return substrings;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<String> strings = new ArrayList<>(Arrays.asList(\"Hello\", \"World\", \"Java\"));\n        String concatenatedString = solution.concatenate(strings);\n        System.out.println(\"Concatenated String: \" + concatenatedString);\n        \n        String s = \"abc\";\n        List<String> substrings = solution.generateSubstrings(s);\n        System.out.println(\"Substrings of \\\"\" + s + \"\\\": \" + substrings);\n    }\n}"}
{"task_id": "Java/29", "generation": "        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<String> strings = Arrays.asList(\"apple\", \"banana\", \"orange\", \"blueberry\", \"cherry\");\n        String prefix = \"b\";\n\n        List<String> filteredStrings = solution.filterByPrefix(strings, prefix);\n\n        System.out.println(filteredStrings);\n    }\n}"}
{"task_id": "Java/30", "generation": "        List<Integer> result = l.stream()\n                            .filter(num -> num > 0)\n                            .collect(Collectors.toList());\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = new ArrayList<>(Arrays.asList(3, -5, 7, -2, 9, -1));\n\n        Solution solution = new Solution();\n        List<Integer> positiveNumbers = solution.getPositive(numbers);\n\n        System.out.println(\"Original Numbers: \" + numbers);\n        System.out.println(\"Positive Numbers: \" + positiveNumbers);\n    }\n}"}
{"task_id": "Java/31", "generation": "        if (n <= 1) {\n            return false;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.isPrime(5)); // true\n        System.out.println(solution.isPrime(10)); // false\n        System.out.println(solution.isPrime(17)); // true\n        System.out.println(solution.isPrime(20)); // false\n    }\n}"}
{"task_id": "Java/32", "generation": "\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"Input list must have an even number of coefficients.\");\n        }\n        \n        int degree = xs.size() - 1;\n        double maxValue = xs.get(degree);\n        double minValue = -maxValue;\n        \n        double left = minValue;\n        double right = maxValue;\n        double mid = 0.0;\n        \n        while (Math.abs(right - left) > 1e-9) {\n            mid = (left + right) / 2;\n            if (poly(xs, left) * poly(xs, mid) < 0) {\n                right = mid;\n            } else {\n                left = mid;\n            }\n        }\n        \n        return mid;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Double> coefficients = Arrays.asList(1.0, -3.0, 2.0); // x^2 - 3x + 2\n        double zero = solution.findZero(coefficients);\n        System.out.println(\"Zero of the polynomial: \" + zero);\n    }\n}"}
{"task_id": "Java/33", "generation": "        List<Integer> sortedList = new ArrayList<>(l);\n        \n        // Find all indices that are divisible by three\n        List<Integer> divisibleByThreeIndices = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                divisibleByThreeIndices.add(i);\n            }\n        }\n        \n        // Sort the values at indices that are divisible by three\n        for (int index : divisibleByThreeIndices) {\n            int value = l.get(index);\n            sortedList.set(index, value);\n        }\n        \n        return sortedList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> l = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9));\n        List<Integer> result = solution.sortThird(l);\n        \n        System.out.println(result);\n    }\n}"}
{"task_id": "Java/34", "generation": "         Set<Integer> uniqueSet = new HashSet<>(l);\n        List<Integer> uniqueList = new ArrayList<>(uniqueSet);\n        Collections.sort(uniqueList);\n        \n        return uniqueList;\n    }\n}"}
{"task_id": "Java/35", "generation": "        if (l == null || l.isEmpty()) {\n            return Integer.MIN_VALUE;\n        }\n        \n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        \n        return max;\n    }\n}"}
{"task_id": "Java/36", "generation": "        int count = 0;\n        \n        for (int i = 1; i < n; i++) {\n            if ((i % 11 == 0 || i % 13 == 0) && String.valueOf(i).contains(\"7\")) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the fizzBuzz method\n        int n = 100;\n        System.out.println(solution.fizzBuzz(n)); // Output should be 2\n    }\n}"}
{"task_id": "Java/37", "generation": "\n        List<Integer> evenValues = new ArrayList<>();\n        List<Integer> oddValues = new ArrayList<>();\n        \n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                evenValues.add(l.get(i));\n            } else {\n                oddValues.add(l.get(i));\n            }\n        }\n        \n        Collections.sort(evenValues);\n        \n        List<Integer> sortedEvenList = new ArrayList<>();\n        \n        int evenIndex = 0;\n        int oddIndex = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                sortedEvenList.add(evenValues.get(evenIndex));\n                evenIndex++;\n            } else {\n                sortedEvenList.add(oddValues.get(oddIndex));\n                oddIndex++;\n            }\n        }\n        \n        return sortedEvenList;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> l = new ArrayList<>(Arrays.asList(3, 8, 1, 6, 9, 2));\n        List<Integer> sortedEvenList = solution.sortEven(l);\n        \n        System.out.println(\"Original List: \" + l);\n        System.out.println(\"Sorted Even List: \" + sortedEvenList);\n    }\n}"}
{"task_id": "Java/38", "generation": "        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group back. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the encodeCyclic method\n        String encoded = solution.encodeCyclic(\"abcde\");\n        System.out.println(\"Encoded: \" + encoded); // should print \"bcdde\"\n\n        // Test the decodeCyclic method\n        String decoded = solution.decodeCyclic(\"bcdde\");\n        System.out.println(\"Decoded: \" + decoded); // should print \"abcde\"\n    }\n}"}
{"task_id": "Java/39", "generation": "        if (n <= 0) {\n            return -1;\n        }\n        \n        int count = 0;\n        int num = 2;\n        \n        while (count < n) {\n            if (isPrime(num) && isFibonacci(num)) {\n                count++;\n            }\n            num++;\n        }\n        \n        return num - 1;\n    }\n    \n    public boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n    \n    public boolean isFibonacci(int num) {\n        if (num == 0 || num == 1) {\n            return true;\n        }\n        \n        int a = 0;\n        int b = 1;\n        int c = 0;\n        \n        while (c < num) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        \n        return c == num;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the primeFib method\n        int n = 5;\n        System.out.println(\"The \" + n + \"-th prime Fibonacci number is: \" + solution.primeFib(n));\n    }\n}"}
{"task_id": "Java/40", "generation": " if (l.size() < 3) {\n            return false;\n        }\n\n        for (int i = 0; i < l.size() - 2; i++) {\n            for (int j = i + 1; j < l.size() - 1; j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> test1 = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5));\n        List<Integer> test2 = new ArrayList<>(Arrays.asList(-1, 2, -2, 3, 4));\n        List<Integer> test3 = new ArrayList<>(Arrays.asList(-1, 0, 1, 2, -2));\n\n        System.out.println(solution.triplesSumToZero(test1)); // should return false\n        System.out.println(solution.triplesSumToZero(test2)); // should return true\n        System.out.println(solution.triplesSumToZero(test3)); // should return true\n    }\n}"}
{"task_id": "Java/41", "generation": "     int totalCollisions = 0;\n     \n     // Calculate the total number of possible collisions\n     totalCollisions = n * (n - 1) / 2;\n     \n     return totalCollisions;\n    }\n}"}
{"task_id": "Java/42", "generation": "        return l.stream()\n                .map(num -> num + 1)\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        List<Integer> list = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5));\n        Solution solution = new Solution();\n        List<Integer> result = solution.incrList(list);\n        System.out.println(result);\n    }\n}"}
{"task_id": "Java/43", "generation": "\n        Set<Integer> set = new HashSet<>();\n        \n        for (int num : l) {\n            if (set.contains(num) || set.contains(-num)) {\n                return true;\n            }\n            set.add(num);\n        }\n        \n        return false;\n    }\n    \n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        \n        List<Integer> l1 = Arrays.asList(1, 2, 3, 4, -2);\n        System.out.println(sol.pairsSumToZero(l1)); // Output: true\n        \n        List<Integer> l2 = Arrays.asList(1, 2, 3, 4, 5);\n        System.out.println(sol.pairsSumToZero(l2)); // Output: false\n    }\n}"}
{"task_id": "Java/44", "generation": "        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n            sb.insert(0, x % base);\n            x /= base;\n        }\n        return sb.toString();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.changeBase(10, 2)); // Output: 1010\n        System.out.println(sol.changeBase(15, 16)); // Output: F\n        System.out.println(sol.changeBase(26, 3)); // Output: 1001\n    }\n}"}
{"task_id": "Java/45", "generation": "        return 0.5 * a * h;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        \n        // Test case 1\n        double a1 = 5.0;\n        double h1 = 8.0;\n        System.out.println(\"Area of triangle with side length \" + a1 + \" and height \" + h1 + \" is: \" + sol.triangleArea(a1, h1));\n        \n        // Test case 2\n        double a2 = 10.0;\n        double h2 = 12.0;\n        System.out.println(\"Area of triangle with side length \" + a2 + \" and height \" + h2 + \" is: \" + sol.triangleArea(a2, h2));\n    }\n}"}
{"task_id": "Java/46", "generation": "        if (n == 0 || n == 1) {\n            return 0;\n        }\n        \n        int[] fib = new int[n + 1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 2;\n        fib[3] = 0;\n        \n        for (int i = 4; i <= n; i++) {\n            fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n        }\n        \n        return fib[n];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fib4(0)); // 0\n        System.out.println(solution.fib4(1)); // 0\n        System.out.println(solution.fib4(2)); // 2\n        System.out.println(solution.fib4(3)); // 0\n        System.out.println(solution.fib4(4)); // 2\n        System.out.println(solution.fib4(5)); // 4\n    }\n}"}
{"task_id": "Java/47", "generation": "\n        Collections.sort(l);\n        int n = l.size();\n        \n        if (n % 2 == 0) {\n            return (double) (l.get(n/2 - 1) + l.get(n/2)) / 2;\n        } else {\n            return (double) l.get(n/2);\n        }\n    }\n}"}
{"task_id": "Java/48", "generation": "\n        text = text.toLowerCase();\n        text = text.replaceAll(\"[^a-zA-Z0-9]\", \"\");\n        \n        int left = 0;\n        int right = text.length() - 1;\n        \n        while (left < right) {\n            if (text.charAt(left) != text.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "Java/49", "generation": "        if (n == 0) {\n            return 1 % p;\n        }\n\n        long res = 1;\n        long base = 2 % p;\n        while (n > 0) {\n            if (n % 2 != 0) {\n                res = (res * base) % p;\n            }\n            base = (base * base) % p;\n            n /= 2;\n        }\n        \n        return (int) res;\n    }\n}"}
{"task_id": "Java/50", "generation": "        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 5 - 'a' + 26) % 26)));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String input = \"hello\";\n        String encoded = solution.encodeShift(input);\n        System.out.println(\"Encoded: \" + encoded);\n\n        String decoded = solution.decodeShift(encoded);\n        System.out.println(\"Decoded: \" + decoded);\n    }\n}"}
{"task_id": "Java/51", "generation": "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (!(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\n                    c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')) {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}"}
{"task_id": "Java/52", "generation": "        for (int num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/53", "generation": "        while (y != 0) {\n            int carry = x & y;\n            x = x ^ y;\n            y = carry << 1;\n        }\n        return x;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.add(2, 3)); // Output: 5\n        System.out.println(solution.add(-2, 3)); // Output: 1\n        System.out.println(solution.add(-5, -3)); // Output: -8\n        System.out.println(solution.add(0, 0)); // Output: 0\n    }\n}"}
{"task_id": "Java/54", "generation": "\n        // Convert the strings to character arrays\n        char[] charArray0 = s0.toCharArray();\n        char[] charArray1 = s1.toCharArray();\n        \n        // Sort the character arrays\n        Arrays.sort(charArray0);\n        Arrays.sort(charArray1);\n        \n        // Check if the sorted character arrays are equal\n        return Arrays.equals(charArray0, charArray1);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        String s0 = \"hello\";\n        String s1 = \"llohe\";\n        \n        if (solution.sameChars(s0, s1)) {\n            System.out.println(\"The words have the same characters.\");\n        } else {\n            System.out.println(\"The words do not have the same characters.\");\n        }\n        \n        String s2 = \"world\";\n        String s3 = \"dlrow\";\n        \n        if (solution.sameChars(s2, s3)) {\n            System.out.println(\"The words have the same characters.\");\n        } else {\n            System.out.println(\"The words do not have the same characters.\");\n        }\n    }\n}"}
{"task_id": "Java/55", "generation": "\n        if (n <= 1) {\n            return n;\n        }\n        \n        int a = 0;\n        int b = 1;\n        int c = 0;\n        \n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        \n        return c;\n    }\n}"}
{"task_id": "Java/56", "generation": "\n        Stack<Character> stack = new Stack<>();\n        \n        for(char bracket : brackets.toCharArray()){\n            if(bracket == '<'){\n                stack.push(bracket);\n            }else if(bracket == '>'){\n                if(stack.isEmpty()){\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n} \n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.correctBracketing(\"<><><>\")); // true\n        System.out.println(solution.correctBracketing(\"<><><>>\")); // false\n        System.out.println(solution.correctBracketing(\"<<>>\")); // true\n        System.out.println(solution.correctBracketing(\"<><<><\")); // false\n    }\n}"}
{"task_id": "Java/57", "generation": "        boolean increasing = true;\n        boolean decreasing = true;\n        \n        for(int i=1; i<l.size(); i++) {\n            if(l.get(i) < l.get(i-1)) {\n                increasing = false;\n            }\n            if(l.get(i) > l.get(i-1)) {\n                decreasing = false;\n            }\n        }\n        \n        return increasing || decreasing;\n    }\n}\n\nclass Main {\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        \n        List<Integer> list1 = Arrays.asList(1, 2, 3, 4, 5);\n        List<Integer> list2 = Arrays.asList(5, 4, 3, 2, 1);\n        List<Integer> list3 = Arrays.asList(1, 3, 2, 4, 5);\n        \n        System.out.println(sol.monotonic(list1)); // True\n        System.out.println(sol.monotonic(list2)); // True\n        System.out.println(sol.monotonic(list3)); // False\n    }\n}"}
{"task_id": "Java/58", "generation": "        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        \n        List<Integer> result = new ArrayList<>();\n        \n        for (int num : set1) {\n            if (set2.contains(num)) {\n                result.add(num);\n            }\n        }\n        \n        Collections.sort(result);\n        \n        return result;\n    }\n}"}
{"task_id": "Java/59", "generation": "       int largestPrime = 2;\n       \n       while (n % 2 == 0) {\n           n = n / 2;\n       }\n       \n       for (int i = 3; i <= Math.sqrt(n); i = i + 2) {\n           while (n % i == 0) {\n               largestPrime = i;\n               n = n / i;\n           }\n       }\n       \n       if (n > 2) {\n           largestPrime = n;\n       }\n       \n       return largestPrime;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int n = 24;\n        System.out.println(solution.largestPrimeFactor(n)); // Output: 3\n    }\n}"}
{"task_id": "Java/60", "generation": "        // base case: if n is 1, return 1\n        if (n == 1) {\n            return 1;\n        }\n        \n        // recursive case: add n to sumToN(n-1)\n        return n + sumToN(n-1);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        int n = 5;\n        int sum = solution.sumToN(n);\n        \n        System.out.println(\"The sum of numbers from 1 to \" + n + \" is: \" + sum);\n    }\n}"}
{"task_id": "Java/61", "generation": "        Stack<Character> stack = new Stack<>();\n\n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '(') {\n                stack.push(bracket);\n            } else if (bracket == ')') {\n                if (stack.isEmpty() || stack.pop() != '(') {\n                    return false;\n                }\n            }\n        }\n\n        return stack.isEmpty();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        String brackets1 = \"()\";\n        String brackets2 = \"()()\";\n        String brackets3 = \"(())\";\n        String brackets4 = \"))((()\";\n\n        System.out.println(solution.correctBracketing(brackets1)); // True\n        System.out.println(solution.correctBracketing(brackets2)); // True\n        System.out.println(solution.correctBracketing(brackets3)); // True\n        System.out.println(solution.correctBracketing(brackets4)); // False\n    }\n}"}
{"task_id": "Java/62", "generation": "        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/63", "generation": "        if (n <= 1) {\n            return 0;\n        } else if (n == 2) {\n            return 1;\n        }\n        \n        int[] fibfib = new int[n + 1];\n        fibfib[0] = 0;\n        fibfib[1] = 0;\n        fibfib[2] = 1;\n        \n        for (int i = 3; i <= n; i++) {\n            fibfib[i] = fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3];\n        }\n        \n        return fibfib[n];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.fibfib(0)); // 0\n        System.out.println(solution.fibfib(1)); // 0\n        System.out.println(solution.fibfib(2)); // 1\n        System.out.println(solution.fibfib(3)); // 1\n        System.out.println(solution.fibfib(4)); // 2\n        System.out.println(solution.fibfib(5)); // 3\n    }\n}"}
{"task_id": "Java/64", "generation": "        s = s.toLowerCase();\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            } else if (i == s.length() - 1 && c == 'y') {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        \n        // Test cases\n        String s1 = \"hello\";\n        String s2 = \"world\";\n        String s3 = \"banana\";\n        \n        System.out.println(sol.vowelsCount(s1)); // Output: 2\n        System.out.println(sol.vowelsCount(s2)); // Output: 1\n        System.out.println(sol.vowelsCount(s3)); // Output: 3\n    }\n}"}
{"task_id": "Java/65", "generation": "\n        if (x < 0) {\n            throw new IllegalArgumentException(\"Invalid input: x must be a positive integer\");\n        }\n\n        String strX = String.valueOf(x);\n\n        if (shift > strX.length()) {\n            StringBuilder sb = new StringBuilder(strX);\n            return sb.reverse().toString();\n        }\n\n        shift = shift % strX.length();\n        StringBuilder sb = new StringBuilder();\n\n        for (int i = strX.length() - shift; i < strX.length(); i++) {\n            sb.append(strX.charAt(i));\n        }\n\n        for (int i = 0; i < strX.length() - shift; i++) {\n            sb.append(strX.charAt(i));\n        }\n\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.circularShift(123456, 2)); // Output: 561234\n        System.out.println(solution.circularShift(123456, 6)); // Output: 654321\n        System.out.println(solution.circularShift(123456, 8)); // Output: 654321\n    }\n}"}
{"task_id": "Java/66", "generation": "    int sum = 0;\n    for (char c : s.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            sum += (int) c;\n        }\n    }\n    return sum;\n}"}
{"task_id": "Java/67", "generation": "        // Split the string to extract the number of apples and oranges\n        String[] parts = s.split(\"\\\\s+\");\n        int numApples = Integer.parseInt(parts[0]);\n        int numOranges = Integer.parseInt(parts[3]);\n        \n        // Calculate the number of mango fruits in the basket\n        int totalFruits = n;\n        int mangoFruits = totalFruits - numApples - numOranges;\n        \n        return mangoFruits;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.fruitDistribution(\"5 apples and 6 oranges\", 19)); // 8\n        System.out.println(solution.fruitDistribution(\"0 apples and 1 oranges\", 3)); // 2\n        System.out.println(solution.fruitDistribution(\"2 apples and 3 oranges\", 100)); // 95\n        System.out.println(solution.fruitDistribution(\"100 apples and 1 oranges\", 120)); // 1\n    }\n}"}
{"task_id": "Java/68", "generation": "        List<Integer> result = new ArrayList<>();\n        int minEvenValue = Integer.MAX_VALUE;\n        int minEvenIndex = Integer.MAX_VALUE;\n\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0 && arr.get(i) < minEvenValue) {\n                minEvenValue = arr.get(i);\n                minEvenIndex = i;\n            }\n        }\n\n        if (minEvenValue != Integer.MAX_VALUE && minEvenIndex != Integer.MAX_VALUE) {\n            result.add(minEvenValue);\n            result.add(minEvenIndex);\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> arr = new ArrayList<>(Arrays.asList(3, 6, 7, 8, 2, 3, 4));\n        List<Integer> result = solution.pluck(arr);\n        System.out.println(result);\n    }\n}"}
{"task_id": "Java/69", "generation": "        Map<Integer, Integer> freqMap = new HashMap<>();\n        \n        // Count the frequency of each integer in the list\n        for (int num : lst) {\n            freqMap.put(num, freqMap.getOrDefault(num, 0) + 1);\n        }\n        \n        // Iterate through the map to find the greatest integer fulfilling the conditions\n        int maxNum = -1;\n        for (Map.Entry<Integer, Integer> entry : freqMap.entrySet()) {\n            int num = entry.getKey();\n            int freq = entry.getValue();\n            if (num > 0 && freq >= num) {\n                maxNum = Math.max(maxNum, num);\n            }\n        }\n        \n        return maxNum;\n    }\n}"}
{"task_id": "Java/70", "generation": "        List<Integer> sortedList = new ArrayList<>();\n        \n        Collections.sort(lst);\n        \n        int startIndex = 0;\n        int endIndex = lst.size() - 1;\n        \n        while (startIndex <= endIndex) {\n            sortedList.add(lst.get(startIndex));\n            if(startIndex != endIndex) {\n                sortedList.add(lst.get(endIndex));\n            }\n            startIndex++;\n            endIndex--;\n        }\n        \n        return sortedList;\n    }\n}"}
{"task_id": "Java/71", "generation": "        if (a + b > c && b + c > a && a + c > b) {\n            double s = (a + b + c) / 2;\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            return Math.round(area * 100.0) / 100.0;\n        } else {\n            return -1;\n        }\n    }\n}"}
{"task_id": "Java/72", "generation": "        List<Integer> reversed = new ArrayList<>(q);\n        Collections.reverse(reversed);\n        \n        return q.equals(reversed) && q.stream().reduce(0, Integer::sum) <= w;\n    }\n}"}
{"task_id": "Java/73", "generation": "        // Initialize a 2D array dp to store the minimum number of changes needed for each subarray\n        int n = arr.size();\n        int[][] dp = new int[n][n];\n\n        // Initialize the base case\n        for (int i = 0; i < n; i++) {\n            dp[i][i] = 0;\n        }\n\n        // Fill in the dp array\n        for (int len = 2; len <= n; len++) {\n            for (int start = 0; start <= n - len; start++) {\n                int end = start + len - 1;\n                if (arr.get(start) == arr.get(end)) {\n                    dp[start][end] = dp[start + 1][end - 1];\n                } else {\n                    dp[start][end] = 1 + Math.min(dp[start + 1][end], dp[start][end - 1]);\n                }\n            }\n        }\n\n        // The minimum number of changes needed for the whole array is stored in dp[0][n-1]\n        return dp[0][n - 1];\n    }\n}"}
{"task_id": "Java/74", "generation": "List<String> result = new ArrayList<>();\n        \n        int totalCharsList1 = getTotalChars(lst1);\n        int totalCharsList2 = getTotalChars(lst2);\n        \n        if (totalCharsList1 < totalCharsList2) {\n            result.addAll(lst1);\n        } else {\n            result.addAll(lst2);\n        }\n        \n        return result;\n    }\n    \n    private int getTotalChars(List<String> lst) {\n        int totalChars = 0;\n        for (String str : lst) {\n            totalChars += str.length();\n        }\n        return totalChars;\n    }\n}"}
{"task_id": "Java/75", "generation": "        // Check if the number is less than 6, as it can't be expressed as the product of 3 prime numbers\n        if (a < 6) {\n            return false;\n        }\n        \n        // List to store prime numbers less than the given number\n        List<Integer> primes = new ArrayList<>();\n        \n        // Loop to find all prime numbers less than the given number\n        for (int i = 2; i < a; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        \n        // Nested loop to find 3 prime numbers whose product is equal to the given number\n        for (int i = 0; i < primes.size(); i++) {\n            for (int j = i+1; j < primes.size(); j++) {\n                for (int k = j+1; k < primes.size(); k++) {\n                    if (primes.get(i) * primes.get(j) * primes.get(k) == a) {\n                        return true;\n                    }\n                }\n            }\n        }\n        \n        return false;\n    }\n    \n    // Function to check if a number is prime\n    public boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.isMultiplyPrime(6)); // true\n        System.out.println(solution.isMultiplyPrime(10)); // false\n        System.out.println(solution.isMultiplyPrime(30)); // true\n        System.out.println(solution.isMultiplyPrime(27)); // false\n    }\n}"}
{"task_id": "Java/76", "generation": "\n        if (x == 1) {\n            return true;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(x); i++) {\n            double power = Math.log(x) / Math.log(i);\n            if (Math.abs(power - Math.round(power)) < 0.000001) {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.isSimplePower(27, 3)); // true\n        System.out.println(solution.isSimplePower(25, 5)); // true\n        System.out.println(solution.isSimplePower(16, 2)); // true\n        System.out.println(solution.isSimplePower(12, 2)); // false\n    }\n}"}
{"task_id": "Java/77", "generation": "        double cubeRoot = Math.cbrt(a);\n        int nearest = (int) Math.round(cubeRoot);\n        return (Math.pow(nearest, 3) == a);\n    }\n}"}
{"task_id": "Java/78", "generation": "        Set<Character> primes = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n        \n        int count = 0;\n        for (char c : num.toCharArray()) {\n            if (primes.contains(c)) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.hexKey(\"1A2B3C4D5E6F\")); // Output: 2\n        System.out.println(solution.hexKey(\"FFFF\")); // Output: 0\n        System.out.println(solution.hexKey(\"123456789ABCDEF\")); // Output: 3\n        System.out.println(solution.hexKey(\"BBBBBBBBBBBBBBBB\")); // Output: 4\n    }\n}"}
{"task_id": "Java/79", "generation": "        if (decimal == 0) {\n            return \"db0\";\n        }\n\n        StringBuilder binary = new StringBuilder();\n        \n        while (decimal > 0) {\n            binary.insert(0, decimal % 2);\n            decimal = decimal / 2;\n        }\n        \n        binary.insert(0, \"db\");\n        binary.append(\"db\");\n        \n        return binary.toString();\n    }\n}"}
{"task_id": "Java/80", "generation": "        if (s.length() < 3) {\n            return false;\n        }\n        \n        for (int i = 0; i <= s.length() - 3; i++) {\n            char c1 = s.charAt(i);\n            char c2 = s.charAt(i + 1);\n            char c3 = s.charAt(i + 2);\n            \n            if (c1 != c2 && c1 != c3 && c2 != c3) {\n                continue;\n            } else {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "Java/81", "generation": "        List<String> result = new ArrayList<>();\n        \n        for (double grade : grades) {\n            if (grade == 4.0) {\n                result.add(\"A+\");\n            } else if (grade > 3.7) {\n                result.add(\"A\");\n            } else if (grade > 3.3) {\n                result.add(\"A-\");\n            } else if (grade > 3.0) {\n                result.add(\"B+\");\n            } else if (grade > 2.7) {\n                result.add(\"B\");\n            } else if (grade > 2.3) {\n                result.add(\"B-\");\n            } else if (grade > 2.0) {\n                result.add(\"C+\");\n            } else if (grade > 1.7) {\n                result.add(\"C\");\n            } else if (grade > 1.3) {\n                result.add(\"C-\");\n            } else if (grade > 1.0) {\n                result.add(\"D+\");\n            } else if (grade > 0.7) {\n                result.add(\"D\");\n            } else if (grade > 0.0) {\n                result.add(\"D-\");\n            } else {\n                result.add(\"E\");\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Double> grades = new ArrayList<>(Arrays.asList(3.8, 2.5, 4.0, 1.9, 0.5));\n        Solution solution = new Solution();\n        List<String> letterGrades = solution.numericalLetterGrade(grades);\n        System.out.println(letterGrades);\n    }\n}"}
{"task_id": "Java/82", "generation": "        if(string == null || string.isEmpty()){\n            return false;\n        }\n        \n        int length = string.length();\n        \n        if(length <= 1){\n            return false;\n        }\n        \n        // Check if length is a prime number\n        for(int i=2; i*i<=length; i++){\n            if(length % i == 0){\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n\n        // Test cases\n        System.out.println(sol.primeLength(\"abc\"));  // false\n        System.out.println(sol.primeLength(\"xyz\"));  // true\n        System.out.println(sol.primeLength(\"hello\")); // false\n        System.out.println(sol.primeLength(\"world\")); // true\n    }\n}"}
{"task_id": "Java/83", "generation": "\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            count += Math.pow(10, i);\n        }\n        return count * 2 - (n-1);\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        int n1 = 1;\n        int n2 = 2;\n        int n3 = 3;\n        System.out.println(solution.startsOneEnds(n1)); // 1 \n        System.out.println(solution.startsOneEnds(n2)); // 20\n        System.out.println(solution.startsOneEnds(n3)); // 270\n    }\n}"}
{"task_id": "Java/84", "generation": "        int sum = 0;\n        \n        while(N > 0){\n            sum += N % 2;\n            N /= 2;\n        }\n        \n        return String.valueOf(sum);\n    }\n}"}
{"task_id": "Java/85", "generation": "        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/86", "generation": "\n        String[] words = s.split(\" \");\n        StringBuilder res = new StringBuilder();\n        \n        for (int i = 0; i < words.length; i++) {\n            char[] chars = words[i].toCharArray();\n            Arrays.sort(chars);\n            res.append(chars);\n            if (i < words.length - 1) {\n                res.append(\" \");\n            }\n        }\n        \n        return res.toString();\n    }\n}"}
{"task_id": "Java/87", "generation": "        List<List<Integer>> result = new ArrayList<>();\n        \n        for(int i=0; i<lst.size(); i++){\n            List<Integer> row = lst.get(i);\n            for(int j=0; j<row.size(); j++){\n                if(row.get(j) == x){\n                    List<Integer> coord = new ArrayList<>();\n                    coord.add(i);\n                    coord.add(j);\n                    result.add(coord);\n                }\n            }\n        }\n        \n        Collections.sort(result, new Comparator<List<Integer>>(){\n            public int compare(List<Integer> c1, List<Integer> c2){\n                if(c1.get(0) == c2.get(0)){\n                    return c2.get(1) - c1.get(1);\n                }\n                return c1.get(0) - c2.get(0);\n            }\n        });\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<List<Integer>> lst = new ArrayList<>();\n        lst.add(Arrays.asList(1, 2, 3));\n        lst.add(Arrays.asList(4, 5));\n        lst.add(Arrays.asList(6, 7, 8));\n        \n        Solution solution = new Solution();\n        List<List<Integer>> result = solution.getRow(lst, 5);\n        \n        for(List<Integer> coord : result){\n            System.out.println(coord.toString());\n        }\n    }\n}"}
{"task_id": "Java/88", "generation": "        // Calculate the sum of the first and last index values\n        int sum = array.get(0) + array.get(array.size() - 1);\n        \n        List<Integer> sortedArray = new ArrayList<>(array);\n        \n        // Sort the array based on the sum being even or odd\n        if (sum % 2 == 0) {\n            Collections.sort(sortedArray, Collections.reverseOrder());\n        } else {\n            Collections.sort(sortedArray);\n        }\n        \n        return sortedArray;\n    }\n}"}
{"task_id": "Java/89", "generation": "        StringBuilder sb = new StringBuilder();\n        \n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            \n            if (Character.isLowerCase(c)) {\n                char encryptedChar = (char) ((c - 'a' + 2) % 26 + 'a');\n                sb.append(encryptedChar);\n            } else if (Character.isUpperCase(c)) {\n                char encryptedChar = (char) ((c - 'A' + 2) % 26 + 'A');\n                sb.append(encryptedChar);\n            } else {\n                sb.append(c);\n            }\n        }\n        \n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        String s = \"Hello, World!\";\n        System.out.println(\"Original String: \" + s);\n        \n        String encryptedString = solution.encrypt(s);\n        System.out.println(\"Encrypted String: \" + encryptedString);\n    }\n}"}
{"task_id": "Java/90", "generation": "        Set<Integer> set = new TreeSet<>(lst);\n        if (set.size() < 2) {\n            return Optional.empty();\n        }\n        Iterator<Integer> iterator = set.iterator();\n        iterator.next();\n        return Optional.of(iterator.next());\n    }\n}"}
{"task_id": "Java/91", "generation": "        int count = 0;\n        boolean flag = false;\n\n        String[] sentences = S.split(\"[.!?]\");\n\n        for (String sentence : sentences) {\n            String[] words = sentence.split(\" \");\n            for (String word : words) {\n                if (word.equals(\"I\") && !flag) {\n                    count++;\n                    flag = true;\n                } else if (word.equals(\"I\") && flag) {\n                    flag = false;\n                }\n            }\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        String S1 = \"I am bored. I am not bored. I am bored!\";\n        // There are 3 boredoms in this string.\n        System.out.println(solution.isBored(S1));\n\n        // Test case 2\n        String S2 = \"I am not bored. I am bored? How are you?\";\n        // There are 1 boredom in this string.\n        System.out.println(solution.isBored(S2));\n\n        // Test case 3\n        String S3 = \"I am not bored. I am bored. I am not bored.\";\n        // There are 1 boredom in this string.\n        System.out.println(solution.isBored(S3));\n    }\n}"}
{"task_id": "Java/92", "generation": "        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int a = (int) x;\n            int b = (int) y;\n            int c = (int) z;\n            \n            return (a == b + c || b == a + c || c == a + b);\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.anyInt(1, 2, 3)); // false\n        System.out.println(solution.anyInt(2, 3, 5)); // true\n        System.out.println(solution.anyInt(3, 2, 1)); // false\n        System.out.println(solution.anyInt(5, 3, 2)); // true\n    }\n}"}
{"task_id": "Java/93", "generation": "        StringBuilder encodedMessage = new StringBuilder();\n        \n        for(char c : message.toCharArray()) {\n            if(Character.isUpperCase(c)) {\n                encodedMessage.append(Character.toLowerCase(c));\n            } else if(Character.isLowerCase(c)) {\n                encodedMessage.append(Character.toUpperCase(c));\n            } else {\n                switch(c) {\n                    case 'a':\n                        encodedMessage.append('c');\n                        break;\n                    case 'e':\n                        encodedMessage.append('g');\n                        break;\n                    case 'i':\n                        encodedMessage.append('k');\n                        break;\n                    case 'o':\n                        encodedMessage.append('q');\n                        break;\n                    case 'u':\n                        encodedMessage.append('w');\n                        break;\n                    default:\n                        encodedMessage.append(c);\n                }\n            }\n        }\n        \n        return encodedMessage.toString();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        String message = \"Hello, World!\";\n        System.out.println(solution.encode(message)); // Output: jIKKQ, wPRMD!\n        \n        message = \"How are you?\";\n        System.out.println(solution.encode(message)); // Output: gqWq kICW?\n    }\n}"}
{"task_id": "Java/94", "generation": "int maxPrime = 0;\n        for (int num : lst) {\n            if (isPrime(num) && num > maxPrime) {\n                maxPrime = num;\n            }\n        }\n        \n        int sum = 0;\n        while (maxPrime > 0) {\n            sum += maxPrime % 10;\n            maxPrime /= 10;\n        }\n        \n        return sum;\n    }\n    \n    public boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "Java/95", "generation": "\n        if (dict.isEmpty()) {\n            return false;\n        }\n        \n        boolean isLower = true;\n        boolean isUpper = true;\n        \n        for (Object key : dict.keySet()) {\n            if (key instanceof String) {\n                String keyStr = (String) key;\n                if (!keyStr.equals(keyStr.toLowerCase())) {\n                    isLower = false;\n                }\n                if (!keyStr.equals(keyStr.toUpperCase())) {\n                    isUpper = false;\n                }\n            } else {\n                return false;\n            }\n        }\n        \n        return isLower || isUpper;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        Map<Object, Object> dict1 = new HashMap<>();\n        dict1.put(\"key1\", \"value1\");\n        dict1.put(\"key2\", \"value2\");\n\n        Map<Object, Object> dict2 = new HashMap<>();\n        dict2.put(\"Key1\", \"value1\");\n        dict2.put(\"key2\", \"value2\");\n\n        Map<Object, Object> dict3 = new HashMap<>();\n        dict3.put(\"KEY1\", \"value1\");\n        dict3.put(\"KEY2\", \"value2\");\n\n        System.out.println(solution.checkDictCase(dict1));  // True\n        System.out.println(solution.checkDictCase(dict2));  // False\n        System.out.println(solution.checkDictCase(dict3));  // True\n    }\n}"}
{"task_id": "Java/96", "generation": "        List<Integer> primes = new ArrayList<>();\n        int count = 0;\n        \n        for(int i=2; count<n; i++){\n            if(isPrime(i)){\n                primes.add(i);\n                count++;\n            }\n        }\n        \n        return primes;\n    }\n    \n    public boolean isPrime(int num){\n        if(num <= 1){\n            return false;\n        }\n        for(int i=2; i<=Math.sqrt(num); i++){\n            if(num % i == 0){\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/97", "generation": "        return (a % 10) * (b % 10);\n    }\n}"}
{"task_id": "Java/98", "generation": "        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            char c = s.charAt(i);\n            if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n                count++;\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/99", "generation": "        double num = Double.parseDouble(value);\n        int floor = (int) Math.floor(num);\n        int ceil = (int) Math.ceil(num);\n\n        return Math.abs(num - floor) < Math.abs(num - ceil) ? floor : ceil;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        String value1 = \"5.5\";\n        System.out.println(solution.countUpper(value1)); // Output: 6\n\n        String value2 = \"6.49\";\n        System.out.println(solution.countUpper(value2)); // Output: 6\n\n        String value3 = \"7.51\";\n        System.out.println(solution.countUpper(value3)); // Output: 8\n\n        String value4 = \"-5.5\";\n        System.out.println(solution.countUpper(value4)); // Output: -6\n\n        String value5 = \"8\";\n        System.out.println(solution.countUpper(value5)); // Output: 8\n    }\n}"}
{"task_id": "Java/100", "generation": "        List<Integer> result = new ArrayList<>();\n        result.add(n);\n        \n        while(n > 1) {\n            if(n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = (n / 2) + 1;\n            }\n            result.add(n);\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.makeAPile(5));  // [5, 3, 2, 1]\n        System.out.println(solution.makeAPile(6));  // [6, 4, 2, 1]\n        System.out.println(solution.makeAPile(8));  // [8, 5, 3, 2, 1]\n    }\n}"}
{"task_id": "Java/101", "generation": "        List<String> wordList = new ArrayList<>();\n        \n        String[] words = s.split(\"[,\\\\s]+\");\n        \n        for(String word : words) {\n            wordList.add(word);\n        }\n        \n        return wordList;\n    }\n}"}
{"task_id": "Java/102", "generation": "        int maxEven = -1;\n        \n        for (int i = y; i >= x; i--) {\n            if (i % 2 == 0) {\n                maxEven = i;\n                break;\n            }\n        }\n        \n        return maxEven;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        \n        int x = 5;\n        int y = 10;\n        \n        System.out.println(sol.chooseNum(x, y)); // Output: 10\n        \n        x = 7;\n        y = 9;\n        \n        System.out.println(sol.chooseNum(x, y)); // Output: 8\n    }\n}"}
{"task_id": "Java/103", "generation": "\n        if (n > m) {\n            return -1;\n        }\n\n        // calculate the sum of integers from n to m\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n\n        // calculate the average\n        int avg = sum / (m - n + 1);\n\n        // round the average to the nearest integer\n        int roundedAvg = Math.round(avg);\n\n        // convert the rounded average to binary\n        String binaryAvg = Integer.toBinaryString(roundedAvg);\n\n        return binaryAvg;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        // read inputs n and m\n        int n = scanner.nextInt();\n        int m = scanner.nextInt();\n\n        Solution solution = new Solution();\n        Object result = solution.roundedAvg(n, m);\n        System.out.println(result);\n    }\n}"}
{"task_id": "Java/104", "generation": "List<Integer> result = new ArrayList<>();\n\n        for (int num : x) {\n            int temp = num;\n            boolean hasEvenDigit = false;\n\n            while (temp > 0) {\n                int digit = temp % 10;\n                if (digit % 2 == 0) {\n                    hasEvenDigit = true;\n                    break;\n                }\n                temp /= 10;\n            }\n\n            if (!hasEvenDigit) {\n                result.add(num);\n            }\n        }\n\n        Collections.sort(result);\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> x = new ArrayList<>(Arrays.asList(34, 56, 78, 12, 45, 23, 78, 90));\n        List<Integer> result = solution.uniqueDigits(x);\n        System.out.println(result);\n    }\n}"}
{"task_id": "Java/105", "generation": "        List<Integer> nums = new ArrayList<>();\n        for(int num : arr){\n            if(num >= 1 && num <= 9){\n                nums.add(num);\n            }\n        }\n        \n        Collections.sort(nums);\n        Collections.reverse(nums);\n        \n        List<String> result = new ArrayList<>();\n        String[] names = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n        \n        for(int num : nums){\n            result.add(names[num-1]);\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> arr = new ArrayList<>(Arrays.asList(6, 3, 9, 1, 5, 2, 4, 8));\n        List<String> result = solution.byLength(arr);\n        \n        System.out.println(result);\n    }\n}"}
{"task_id": "Java/106", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for(int i=1; i<=n; i++){\n            if(i%2 == 0){\n                result.add(factorial(i));\n            } else {\n                result.add(sum(i));\n            }\n        }\n        \n        return result;\n    }\n    \n    public int factorial(int n){\n        if(n == 0){\n            return 1;\n        }\n        return n * factorial(n-1);\n    }\n    \n    public int sum(int n){\n        return (n * (n+1))/2;\n    }\n}\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tSolution solution = new Solution();\n\t\tList<Integer> result = solution.f(5);\n\t\tSystem.out.println(result);\n\t}\n}"}
{"task_id": "Java/107", "generation": "        int even = 0;\n        int odd = 0;\n        \n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        \n        List<Integer> result = new ArrayList<>();\n        result.add(even);\n        result.add(odd);\n        \n        return result;\n    }\n    \n    public boolean isPalindrome(int num) {\n        String str = String.valueOf(num);\n        int left = 0;\n        int right = str.length() - 1;\n        \n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "Java/108", "generation": "        int count = 0;\n        \n        for(int num : arr){\n            int sum = 0;\n            boolean negative = false;\n            String strNum = String.valueOf(num);\n            \n            for(int i=0; i<strNum.length(); i++){\n                char c = strNum.charAt(i);\n                if(c == '-'){\n                    negative = true;\n                } else if(Character.isDigit(c)){\n                    sum += Integer.parseInt(String.valueOf(c));\n                }\n            }\n            \n            if((negative && sum < 0) || (!negative && sum > 0)){\n                count++;\n            }\n        }\n        \n        return count;\n    } \n    \n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        \n        List<Integer> arr = new ArrayList<>();\n        arr.add(123);\n        arr.add(-123);\n        arr.add(456);\n        arr.add(-1);\n        \n        System.out.println(sol.countNums(arr)); // Output: 3\n    }\n}"}
{"task_id": "Java/109", "generation": "int n = arr.size();\n        \n        for (int i = 0; i < n - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "Java/110", "generation": "\n        // Count the number of odds in each list\n        int count1 = 0;\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                count1++;\n            }\n        }\n        \n        int count2 = 0;\n        for (int num : lst2) {\n            if (num % 2 != 0) {\n                count2++;\n            }\n        }\n        \n        // If the number of odds in lst1 is equal to the difference between the length of lst1 and lst2\n        // or less, then it is possible to exchange elements to make lst1 all even\n        if (count1 <= Math.abs(lst1.size() - lst2.size())) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}"}
{"task_id": "Java/111", "generation": "        Map<String, Integer> map = new HashMap<>();\n        String[] tokens = test.split(\" \");\n\n        Map<String, Integer> counts = new HashMap<>();\n\n        for (String token : tokens) {\n            int count = counts.getOrDefault(token, 0);\n            counts.put(token, count + 1);\n        }\n\n        int maxCount = 0;\n        for (int count : counts.values()) {\n            if (count > maxCount) {\n                maxCount = count;\n            }\n        }\n\n        for (String key : counts.keySet()) {\n            if (counts.get(key) == maxCount) {\n                map.put(key, maxCount);\n            }\n        }\n\n        return map;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        String test1 = \"a b c a a b c\";\n        System.out.println(solution.histogram(test1));\n\n        // Test case 2\n        String test2 = \"x y z x x y z z z\";\n        System.out.println(solution.histogram(test2));\n\n        // Test case 3\n        String test3 = \"hello world hello hello world\";\n        System.out.println(solution.histogram(test3));\n    }\n}"}
{"task_id": "Java/112", "generation": "        // Convert the strings to StringBuilder for easier manipulation\n        StringBuilder sb = new StringBuilder(s);\n        StringBuilder cb = new StringBuilder(c);\n        \n        // Iterate through each character in c\n        for (int i = 0; i < cb.length(); i++) {\n            // Delete all occurrences of the character in s\n            while (sb.indexOf(Character.toString(cb.charAt(i))) != -1) {\n                int index = sb.indexOf(Character.toString(cb.charAt(i)));\n                sb.deleteCharAt(index);\n            }\n        }\n        \n        // Check if the resulting string is a palindrome\n        String result = sb.toString();\n        boolean isPalindrome = checkPalindrome(result);\n        \n        // Return the result and the check as a list\n        List<Object> output = new ArrayList<>();\n        output.add(result);\n        output.add(isPalindrome);\n        \n        return output;\n    }\n    \n    // Helper method to check if a string is a palindrome\n    private boolean checkPalindrome(String str) {\n        int left = 0;\n        int right = str.length() - 1;\n        \n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test with example inputs\n        String s = \"hello\";\n        String c = \"l\";\n        List<Object> output = solution.reverseDelete(s, c);\n        System.out.println(\"Result: \" + output.get(0));\n        System.out.println(\"Is Palindrome: \" + output.get(1));\n    }\n}"}
{"task_id": "Java/113", "generation": "        List<String> result = new ArrayList<>();\n        for(String str : lst) {\n            int oddCount = 0;\n            for(int i = 0; i < str.length(); i++) {\n                char c = str.charAt(i);\n                if(Character.isDigit(c) && (c - '0') % 2 != 0) {\n                    oddCount++;\n                }\n            }\n            result.add(String.valueOf(oddCount));\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/114", "generation": "        // Initialize variables to keep track of the minimum sum and the current sum\n        int minSum = Integer.MAX_VALUE;\n        int curSum = 0;\n        \n        // Loop through the array\n        for (int i = 0; i < nums.size(); i++) {\n            // Update the current sum by adding the current element\n            curSum += nums.get(i);\n            \n            // Check if the current sum is less than the minimum sum\n            if (curSum < minSum) {\n                minSum = curSum;\n            }\n            \n            // If the current sum becomes negative, reset it to 0\n            if (curSum < 0) {\n                curSum = 0;\n            }\n        }\n        \n        // Return the minimum sum\n        return minSum;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> nums = new ArrayList<>(Arrays.asList(3, -4, 2, -3, -1, 7, -5));\n        \n        int result = solution.minSubArraySum(nums);\n        System.out.println(result); // Output: -4\n    }\n}"}
{"task_id": "Java/115", "generation": "        int count = 0;\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n        int[] wellHeights = new int[cols];\n        \n        for(int i=0; i<rows; i++){\n            for(int j=0; j<cols; j++){\n                wellHeights[j] = Math.max(wellHeights[j], grid.get(i).get(j));\n            }\n        }\n        \n        Arrays.sort(wellHeights);\n        \n        int maxHeight = wellHeights[cols-1];\n        int buckets = capacity;\n        int currentHeight = 0;\n        \n        for(int i=maxHeight; i>0; i--){\n            for(int j=0; j<cols; j++){\n                if(grid.get(j).get(j) >= i){\n                    currentHeight++;\n                }\n            }\n            \n            if(currentHeight == 0){\n                continue;\n            }\n            \n            int emptyBuckets = buckets - currentHeight;\n            if(emptyBuckets >= 0){\n                buckets = emptyBuckets;\n            }else{\n                count++;\n                buckets = capacity - currentHeight;\n            }\n            \n            currentHeight = 0;\n        }\n        \n        return count;\n    }\n}"}
{"task_id": "Java/116", "generation": "// Custom comparator to compare the number of ones in the binary representation\n        // of two integers\n        Comparator<Integer> comparator = new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                int count1 = Integer.bitCount(o1); // Number of ones in binary representation of o1\n                int count2 = Integer.bitCount(o2); // Number of ones in binary representation of o2\n                \n                if (count1 != count2) {\n                    return count1 - count2; // Sort by number of ones\n                } else {\n                    return o1 - o2; // If equal number of ones, sort by decimal value\n                }\n            }\n        };\n        \n        // Sort the array using the custom comparator\n        arr.sort(comparator);\n        \n        return arr;\n    }\n}\n"}
{"task_id": "Java/117", "generation": "\n        List<String> words = new ArrayList<>();\n        StringBuilder sb = new StringBuilder();\n        int consonantCount = 0;\n\n        for (int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n            if (ch == ' ') {\n                if (consonantCount == n) {\n                    words.add(sb.toString());\n                }\n                sb.setLength(0);\n                consonantCount = 0;\n            } else if (Character.isLetter(ch)) {\n                if (!isVowel(ch)) {\n                    consonantCount++;\n                }\n                sb.append(ch);\n            }\n        }\n\n        if (consonantCount == n) {\n            words.add(sb.toString());\n        }\n\n        return words;\n    }\n\n    private boolean isVowel(char ch) {\n        ch = Character.toLowerCase(ch);\n        return ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u';\n    }\n}\n"}
{"task_id": "Java/118", "generation": "        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        char[] chars = word.toCharArray();\n        \n        for (int i = chars.length - 4; i > 0; i--) {\n            if (!isVowel(chars[i]) && !isVowel(chars[i-1]) && isVowel(chars[i-2])) {\n                return String.valueOf(getClosestVowel(chars[i], vowels));\n            }\n        }\n        \n        return \"\";\n    }\n    \n    public char getClosestVowel(char c, char[] vowels) {\n        char closestVowel = ' ';\n        int minDistance = Integer.MAX_VALUE;\n        \n        for (char v : vowels) {\n            int distance = Math.abs(c - v);\n            if (distance < minDistance) {\n                minDistance = distance;\n                closestVowel = v;\n            }\n        }\n        \n        return closestVowel;\n    }\n    \n    public boolean isVowel(char c) {\n        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String word = \"hello\";\n        System.out.println(solution.getClosestVowel(word)); // Output: \"o\"\n    }\n}"}
{"task_id": "Java/119", "generation": "        // Create a stack to store open parentheses \"(\"\n        Stack<Character> stack = new Stack<>();\n\n        for (String str : lst) {\n            for (char c : str.toCharArray()) {\n                if (c == '(') {\n                    stack.push(c);\n                } else {\n                    // If stack is empty or top of stack is not \"(\"\n                    if (stack.isEmpty() || stack.peek() != '(') {\n                        return \"No\";\n                    } else {\n                        // Pop the top of stack\n                        stack.pop();\n                    }\n                }\n            }\n        }\n\n        // If stack is empty, all parentheses are balanced\n        if (stack.isEmpty()) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<String> lst1 = Arrays.asList(\"(((\", \")))\");\n        System.out.println(solution.matchParens(lst1)); // Output: Yes\n\n        List<String> lst2 = Arrays.asList(\"()(\", \")))\");\n        System.out.println(solution.matchParens(lst2)); // Output: No\n    }\n}"}
{"task_id": "Java/120", "generation": "\n        List<Integer> result = new ArrayList<>();\n        \n        // Edge case\n        if (arr == null || arr.size() == 0 || k <= 0) {\n            return result;\n        }\n        \n        // Sorting the array in descending order\n        Collections.sort(arr, Collections.reverseOrder());\n        \n        // Adding the first k elements to the result list\n        for (int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n        }\n        \n        return result;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> arr = new ArrayList<>(Arrays.asList(3, 7, 2, 8, 4, 1));\n        int k = 3;\n        \n        List<Integer> result = solution.maximum(arr, k);\n        \n        // Printing the result\n        for (int num : result) {\n            System.out.print(num + \" \");\n        }\n    }\n}"}
{"task_id": "Java/121", "generation": "        int sum = 0;\n        \n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        \n        return sum;\n    }\n}"}
{"task_id": "Java/122", "generation": "        int sum = 0;\n        for (int i = 0; i < Math.min(arr.size(), k); i++) {\n            if (Math.abs(arr.get(i)) >= 10 && Math.abs(arr.get(i)) < 100) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> arr = new ArrayList<>(Arrays.asList(12, 45, -89, 100, 234, -7));\n        int k = 5;\n        System.out.println(solution.addElements(arr, k)); // Output: 67\n    }\n}"}
{"task_id": "Java/123", "generation": "\n        List<Integer> result = new ArrayList<>();\n        \n        while (n != 1) {\n            if (n % 2 != 0) {\n                result.add(n);\n            }\n            n = (n % 2 == 0) ? n / 2 : 3 * n + 1;\n        }\n        \n        if (n == 1) {\n            result.add(1);\n        }\n        \n        Collections.sort(result);\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        int n1 = 12;\n        List<Integer> result1 = solution.getOddCollatz(n1);\n        System.out.println(\"The odd numbers in Collatz sequence for \" + n1 + \" are: \" + result1);\n\n        // Test case 2\n        int n2 = 19;\n        List<Integer> result2 = solution.getOddCollatz(n2);\n        System.out.println(\"The odd numbers in Collatz sequence for \" + n2 + \" are: \" + result2);\n    }\n}"}
{"task_id": "Java/124", "generation": "        // Check if the date string is empty\n        if (date == null || date.length() == 0) {\n            return false;\n        }\n        \n        // Split the date string into day, month, and year\n        String[] dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n            return false;\n        }\n        \n        int month = Integer.parseInt(dateParts[0]);\n        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n        \n        // Check if month is valid\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        \n        // Check if day is valid based on month\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        \n        // Check for months that have 30 days\n        if ((month == 4 || month == 6 || month == 9 || month == 11) && day > 30) {\n            return false;\n        }\n        \n        // Check for February\n        if (month == 2) {\n            if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) {\n                if (day > 29) {\n                    return false;\n                }\n            } else {\n                if (day > 28) {\n                    return false;\n                }\n            }\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "Java/125", "generation": "        List<String> words = new ArrayList<>();\n        String[] tokens = txt.split(\"\\\\s+\");\n\n        if (tokens.length == 1) {\n            tokens = txt.split(\",\");\n        }\n\n        if (tokens.length > 1) {\n            for (String token : tokens) {\n                words.add(token);\n            }\n        } else {\n            int count = 0;\n            for (int i = 0; i < txt.length(); i++) {\n                char c = txt.charAt(i);\n                if (Character.isLetter(c) && Character.isLowerCase(c)) {\n                    int order = c - 'a';\n                    if (order % 2 == 1) {\n                        count++;\n                    }\n                }\n            }\n            return count;\n        }\n\n        return words;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test case 1: Split on whitespace\n        String txt1 = \"Hello World\";\n        System.out.println(Arrays.toString(solution.splitWords(txt1).toArray())); // Output: [Hello, World]\n        \n        // Test case 2: Split on comma\n        String txt2 = \"Apple,Orange,Banana\";\n        System.out.println(Arrays.toString(solution.splitWords(txt2).toArray())); // Output: [Apple, Orange, Banana]\n        \n        // Test case 3: Count lower-case letters with odd order\n        String txt3 = \"abcxyz\";\n        System.out.println(solution.splitWords(txt3)); // Output: 3\n    }\n}"}
{"task_id": "Java/126", "generation": "        List<Integer> sortedList = new ArrayList<>(lst);\n        Collections.sort(sortedList);\n        \n        for (int i = 0; i < sortedList.size(); i++) {\n            if (sortedList.get(i) != lst.get(i)) {\n                return false;\n            }\n        }\n        \n        Set<Integer> set = new HashSet<>(lst);\n        for (int num : set) {\n            if (Collections.frequency(lst, num) > 1) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "Java/127", "generation": "        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n        \n        int start = Math.max(start1, start2);\n        int end = Math.min(end1, end2);\n        \n        if (start > end) {\n            return \"No intersection\";\n        }\n        \n        int length = end - start + 1;\n        \n        if (isPrime(length)) {\n            return \"Length of intersection is prime\";\n        } else {\n            return \"Length of intersection is not prime\";\n        }\n    }\n    \n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/128", "generation": "        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        int signProduct = 1;\n        int sum = 0;\n        \n        for (int num : arr) {\n            sum += Math.abs(num);\n            if (num < 0) {\n                signProduct *= -1;\n            } else if (num == 0) {\n                return Optional.of(0);\n            }\n        }\n        \n        return Optional.of(sum * signProduct);\n    }\n}"}
{"task_id": "Java/129", "generation": "        // Convert grid to a 2D array\n        int n = grid.size();\n        int[][] gridArray = new int[n][n];\n        for (int i = 0; i < n; i++) {\n            List<Integer> row = grid.get(i);\n            for (int j = 0; j < n; j++) {\n                gridArray[i][j] = row.get(j);\n            }\n        }\n        \n        // Initialize variables\n        int[][] dp = new int[n][n];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0][0] = gridArray[0][0];\n        \n        // Initialize priority queue for Dijkstra's algorithm with custom comparator\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[2] - b[2]);\n        pq.offer(new int[]{0, 0, gridArray[0][0]});\n        \n        // Define neighbors directions\n        int[][] dirs = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n        \n        // Dijkstra's algorithm to find the minimum path\n        while (!pq.isEmpty()) {\n            int[] curr = pq.poll();\n            int row = curr[0];\n            int col = curr[1];\n            if (curr[2] >= k) {\n                break;\n            }\n            for (int[] dir : dirs) {\n                int newRow = row + dir[0];\n                int newCol = col + dir[1];\n                if (newRow >= 0 && newRow < n && newCol >= 0 && newCol < n && \n                    Math.min(dp[row][col], gridArray[newRow][newCol]) < dp[newRow][newCol]) {\n                    dp[newRow][newCol] = Math.min(dp[row][col], gridArray[newRow][newCol]);\n                    pq.offer(new int[]{newRow, newCol, dp[newRow][newCol]});\n                }\n            }\n        }\n        \n        // Reconstruct the path\n        List<Integer> path = new ArrayList<>();\n        int currRow = n - 1, currCol = n - 1;\n        while (currRow != 0 || currCol != 0) {\n            path.add(0, gridArray[currRow][currCol]);\n            for (int[] dir : dirs) {\n                int newRow = currRow - dir[0];\n                int newCol = currCol - dir[1];\n                if (newRow >= 0 && newRow < n && newCol >= 0 && newCol < n &&\n                    dp[newRow][newCol] == dp[currRow][currCol] - 1) {\n                    currRow = newRow;\n                    currCol = newCol;\n                    break;\n                }\n            }\n        }\n        path.add(0, gridArray[0][0]);\n        \n        return path;\n    }\n} \n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<List<Integer>> grid1 = new ArrayList<>();\n        grid1.add(Arrays.asList(1, 2, 3));\n        grid1.add(Arrays.asList(4, 5, 6));\n        grid1.add(Arrays.asList(7, 8, 9));\n        int k1 = 5;\n        System.out.println(solution.minPath(grid1, k1)); // Output: [1, 2, 3, 4, 5]\n\n        // Test case 2\n        List<List<Integer>> grid2 = new ArrayList<>();\n        grid2.add(Arrays.asList(1, 2, 3));\n        grid2.add(Arrays.asList(6, 5, 4));\n        grid2.add(Arrays.asList(7, 8, 9));\n        int k2 = 6;\n        System.out.println(solution.minPath(grid2, k2)); // Output: [1, 6, 5, 4, 3, 2]\n    }\n}"}
{"task_id": "Java/130", "generation": "List<Integer> result = new ArrayList<>();\n        \n        if (n == 0) {\n            return result;\n        }\n        \n        if (n >= 1) {\n            result.add(0);\n        }\n        if (n >= 2) {\n            result.add(1);\n        }\n        if (n >= 3) {\n            result.add(1);\n        }\n        \n        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(1 + i / 2);\n            } else {\n                result.add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the example cases\n        System.out.println(solution.tri(2)); // Output: [0, 1, 2]\n        System.out.println(solution.tri(4)); // Output: [0, 1, 1, 3, 1]\n        System.out.println(solution.tri(3)); // Output: [0, 1, 1, 3]\n    }\n}"}
{"task_id": "Java/131", "generation": "        int product = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n            }\n            n /= 10;\n        }\n        \n        if (product == 1) {\n            return 0;\n        } else {\n            return product;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        int n1 = 12345; // Product = 1*3*5 = 15\n        int n2 = 246810; // All even digits\n        int n3 = 13579; // Product = 1*3*5*7*9 = 945\n        \n        System.out.println(solution.digits(n1)); // Output: 15\n        System.out.println(solution.digits(n2)); // Output: 0\n        System.out.println(solution.digits(n3)); // Output: 945\n    }\n}"}
{"task_id": "Java/132", "generation": "        Stack<Character> stack = new Stack<>();\n        \n        for(char c : string.toCharArray()) {\n            if(c == '[') {\n                stack.push(c);\n            } else if(c == ']' && !stack.isEmpty()) {\n                stack.pop();\n            }\n        }\n        \n        return stack.size() >= 2;\n    }\n}\n\nclass Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.isNested(\"[[]]\")); // true\n        System.out.println(solution.isNested(\"[]]]]]]][[[[[]\")); // false\n        System.out.println(solution.isNested(\"[][]\")); // false\n        System.out.println(solution.isNested(\"[]\")); // false\n        System.out.println(solution.isNested(\"[[][]]\")); // true\n        System.out.println(solution.isNested(\"[[]][\")); // true\n    }\n}"}
{"task_id": "Java/133", "generation": "        int sum = 0;\n        for (Double num : lst) {\n            int roundedNum = (int) Math.ceil(num);\n            sum += (roundedNum * roundedNum);\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/134", "generation": "        if(txt.isEmpty()){\n            return false;\n       }\n        char lastChar = txt.charAt(txt.length() - 1);\n        if(Character.isLetter(lastChar)){\n            if(txt.length()>1){\n                char secondLastChar = txt.charAt(txt.length() - 2);\n                if(Character.isLetter(secondLastChar)){\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.checkIfLastCharIsALetter(\"hello\")); // false\n        System.out.println(solution.checkIfLastCharIsALetter(\"hello \")); // false\n        System.out.println(solution.checkIfLastCharIsALetter(\"hello world\")); // false\n        System.out.println(solution.checkIfLastCharIsALetter(\"hello world!\")); // false\n        System.out.println(solution.checkIfLastCharIsALetter(\"hello world! \")); // false\n        System.out.println(solution.checkIfLastCharIsALetter(\"hello world! A\")); // true\n        System.out.println(solution.checkIfLastCharIsALetter(\"hello world! A \")); // true\n   }\n}"}
{"task_id": "Java/135", "generation": "        int n = arr.size();\n        int maxIndex = -1;\n        \n        for (int i = 1; i < n; i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                maxIndex = i - 1;\n            }\n        }\n        \n        return maxIndex;\n    }\n}"}
{"task_id": "Java/136", "generation": " List<Integer> negativeIntegers = new ArrayList<>();\n        List<Integer> positiveIntegers = new ArrayList<>();\n        \n        for (Integer num : lst) {\n            if (num < 0){\n                negativeIntegers.add(num);\n            } else if (num > 0){\n                positiveIntegers.add(num);\n            }\n        }\n        \n        Optional<Integer> maxNegative = negativeIntegers.stream().max(Comparator.naturalOrder());\n        Optional<Integer> minPositive = positiveIntegers.stream().min(Comparator.naturalOrder());\n        \n        List<Optional<Integer>> result = new ArrayList<>();\n        result.add(maxNegative.isPresent() ? maxNegative : Optional.empty());\n        result.add(minPositive.isPresent() ? minPositive : Optional.empty());\n        \n        return result;\n    }\n}"}
{"task_id": "Java/137", "generation": "        // Check if both inputs are of the same type\n        if (a.getClass() == b.getClass()) {\n            if (a instanceof Integer) {\n                Integer intA = (Integer) a;\n                Integer intB = (Integer) b;\n                \n                if (intA > intB) {\n                    return Optional.of(a);\n                } else if (intB > intA) {\n                    return Optional.of(b);\n                }\n            } else if (a instanceof Double) {\n                Double doubleA = (Double) a;\n                Double doubleB = (Double) b;\n                \n                if (doubleA > doubleB) {\n                    return Optional.of(a);\n                } else if (doubleB > doubleA) {\n                    return Optional.of(b);\n                }\n            } else if (a instanceof String) {\n                String strA = (String) a;\n                String strB = (String) b;\n                \n                try {\n                    Double dblA = Double.parseDouble(strA.replace(\",\", \".\"));\n                    Double dblB = Double.parseDouble(strB.replace(\",\", \".\"));\n                    \n                    if (dblA > dblB) {\n                        return Optional.of(a);\n                    } else if (dblB > dblA) {\n                        return Optional.of(b);\n                    }\n                } catch (NumberFormatException e) {\n                    return Optional.of(a);\n                }\n            }\n        }\n        \n        return Optional.empty();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.compareOne(1, 2.5)); // Optional.of(2.5)\n        System.out.println(solution.compareOne(1, \"2,3\")); // Optional.of(\"2,3\")\n        System.out.println(solution.compareOne(\"5,1\", \"6\")); // Optional.of(\"6\")\n        System.out.println(solution.compareOne(\"1\", 1)); // Optional.empty()\n    }\n}"}
{"task_id": "Java/138", "generation": "\n        // Check if the number is non-negative\n        if (n < 0) {\n            return false;\n        }\n\n        // Check if the number is greater than or equal to 8 (minimum sum is 2+2+2+2 = 8)\n        if (n < 8) {\n            return false;\n        }\n\n        // Check if the number can be written as the sum of exactly 4 positive even numbers\n        for (int i = 2; i <= n/2; i += 2) {\n            for (int j = i; j <= n/2; j += 2) {\n                for (int k = j; k <= n/2; k += 2) {\n                    for (int l = k; l <= n/2; l += 2) {\n                        if (i + j + k + l == n) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.isEqualToSumEven(8));   // true (2 + 2 + 2 + 2)\n        System.out.println(solution.isEqualToSumEven(12));  // true (2 + 2 + 4 + 4)\n        System.out.println(solution.isEqualToSumEven(15));  // false\n        System.out.println(solution.isEqualToSumEven(20));  // true (2 + 2 + 8 + 8)\n    }\n}"}
{"task_id": "Java/139", "generation": "        long result = 1;\n        for (int i = n; i > 0; i--) {\n            long factorial = factorial(i);\n            result *= factorial;\n        }\n        return result;\n    }\n    \n    private long factorial(int n) {\n        long result = 1;\n        for (int i = n; i > 0; i--) {\n            result *= i;\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int n = 5;\n        long result = solution.specialFactorial(n);\n        System.out.println(result); // Output: 10321920\n    }\n}"}
{"task_id": "Java/140", "generation": "StringBuilder result = new StringBuilder();\n\n    int consecutiveSpaces = 0;\n    for (int i = 0; i < text.length(); i++) {\n        char c = text.charAt(i);\n        \n        if (c == ' ') {\n            consecutiveSpaces++;\n        } else {\n            if (consecutiveSpaces <= 2) {\n                for (int j = 0; j < consecutiveSpaces; j++) {\n                    result.append('_');\n                }\n            } else {\n                result.append('-');\n            }\n            \n            result.append(c);\n            consecutiveSpaces = 0;\n        }\n    }\n    \n    if (consecutiveSpaces <= 2) {\n        for (int j = 0; j < consecutiveSpaces; j++) {\n            result.append('_');\n        }\n    } else {\n        result.append('-');\n    }\n\n    return result.toString();\n}"}
{"task_id": "Java/141", "generation": "        // Check if the file name contains more than three digits\n        int digitCount = 0;\n        for (char c : file_name.toCharArray()) {\n            if (Character.isDigit(c)) {\n                digitCount++;\n            }\n        }\n        \n        if (digitCount > 3) {\n            return \"No\";\n        }\n        \n        // Check if the file name contains exactly one dot\n        int dotCount = 0;\n        for (char c : file_name.toCharArray()) {\n            if (c == '.') {\n                dotCount++;\n            }\n        }\n        \n        if (dotCount != 1) {\n            return \"No\";\n        }\n        \n        // Split the file name into two parts based on the dot\n        String[] parts = file_name.split(\"\\\\.\");\n        if (parts.length != 2) {\n            return \"No\";\n        }\n        \n        // Check if the first part is non-empty and starts with a letter\n        String first = parts[0];\n        if (first.isEmpty() || !Character.isLetter(first.charAt(0))) {\n            return \"No\";\n        }\n        \n        // Check if the second part is one of [\"txt\", \"exe\", \"dll\"]\n        String second = parts[1];\n        List<String> validExtensions = Arrays.asList(\"txt\", \"exe\", \"dll\");\n        if (!validExtensions.contains(second)) {\n            return \"No\";\n        }\n        \n        return \"Yes\";\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.filenameCheck(\"myfile.txt\")); // Yes\n        System.out.println(solution.filenameCheck(\"file.exe\")); // Yes\n        System.out.println(solution.filenameCheck(\"file_1.dll\")); // Yes\n        System.out.println(solution.filenameCheck(\"file_1234.exe\")); // No\n        System.out.println(solution.filenameCheck(\"file\")); // No\n        System.out.println(solution.filenameCheck(\"file..exe\")); // No\n        System.out.println(solution.filenameCheck(\"file.txtdll\")); // No\n    }\n}"}
{"task_id": "Java/142", "generation": "int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                lst.set(i, lst.get(i) * lst.get(i));\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                lst.set(i, lst.get(i) * lst.get(i) * lst.get(i));\n            }\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        List<Integer> lst = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9));\n        System.out.println(sol.sumSquares(lst)); // Output: 133\n    }\n}"}
{"task_id": "Java/143", "generation": "        if (sentence == null || sentence.length() == 0) {\n            return \"\";\n        }\n\n        String[] words = sentence.split(\" \");\n        StringBuilder result = new StringBuilder();\n\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                result.append(word).append(\" \");\n            }\n        }\n\n        return result.toString().trim();\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test case 1\n        String sentence1 = \"This is a sample sentence with some words of prime length\";\n        System.out.println(solution.wordsInSentence(sentence1)); // Output: is a some words prime\n\n        // Test case 2\n        String sentence2 = \"How are you doing today\";\n        System.out.println(solution.wordsInSentence(sentence2)); // Output: How you\n\n        // Test case 3\n        String sentence3 = \"Hello world\";\n        System.out.println(solution.wordsInSentence(sentence3)); // Output: Hello\n\n        // Test case 4\n        String sentence4 = \"\";\n        System.out.println(solution.wordsInSentence(sentence4)); // Output: \n\n        // Test case 5\n        String sentence5 = null;\n        System.out.println(solution.wordsInSentence(sentence5)); // Output: \n    }\n}"}
{"task_id": "Java/144", "generation": "        // Get the numerators and denominators of both fractions\n        int numerator1 = Integer.parseInt(x.split(\"/\")[0]);\n        int denominator1 = Integer.parseInt(x.split(\"/\")[1]);\n        int numerator2 = Integer.parseInt(n.split(\"/\")[0]);\n        int denominator2 = Integer.parseInt(n.split(\"/\")[1]);\n        \n        // Calculate the product of the fractions\n        double result = (double) (numerator1 * numerator2) / (denominator1 * denominator2);\n        \n        // Check if the result is a whole number\n        return result == (int) result;\n    }\n}"}
{"task_id": "Java/145", "generation": "        // Create a map to store the list of integers based on their digit sum\n        Map<Integer, List<Integer>> map = new HashMap<>();\n        \n        // Iterate through the list of integers and calculate the digit sum for each number\n        for(int i = 0; i < nums.size(); i++) {\n            int num = nums.get(i);\n            int sum = 0;\n            while(num > 0) {\n                sum += num % 10;\n                num = num / 10;\n            }\n            // Add the number to the map based on its digit sum\n            if(map.containsKey(sum)) {\n                map.get(sum).add(nums.get(i));\n            } else {\n                List<Integer> list = new ArrayList<>();\n                list.add(nums.get(i));\n                map.put(sum, list);\n            }\n        }\n        \n        // Sort the map based on the sum of digits\n        List<Integer> result = new ArrayList<>();\n        for(int key : map.keySet()) {\n            List<Integer> list = map.get(key);\n            Collections.sort(list);\n            result.addAll(list);\n        }\n        \n        // Return the sorted list\n        return result;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> nums = new ArrayList<>(Arrays.asList(55, 222, 122, 1111, 456, 999));\n        List<Integer> result = solution.orderByPoints(nums);\n        \n        System.out.println(\"Original List: \" + nums);\n        System.out.println(\"Sorted List: \" + result);\n    }\n}"}
{"task_id": "Java/146", "generation": "        int count = 0;\n        \n        for (int num : nums) {\n            if (num > 10 && isOdd(num) && isFirstAndLastOdd(num)) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n    \n    private boolean isOdd(int num) {\n        return num % 2 != 0;\n    }\n    \n    private boolean isFirstAndLastOdd(int num) {\n        String numStr = String.valueOf(num);\n        \n        int firstDigit = Character.getNumericValue(numStr.charAt(0));\n        int lastDigit = Character.getNumericValue(numStr.charAt(numStr.length() - 1));\n        \n        return isOdd(firstDigit) && isOdd(lastDigit);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> nums = new ArrayList<>();\n        nums.add(12345);\n        nums.add(24639);\n        nums.add(75989);\n        \n        int result = solution.specialFilter(nums);\n        System.out.println(result);  // Output: 2\n    }\n}"}
{"task_id": "Java/147", "generation": "        int count = 0;\n        \n        for(int i=1; i<=n; i++){\n            int val = i*i - i + 1;\n            for(int j=i+1; j<=n; j++){\n                int val1 = j*j - j + 1;\n                for(int k=j+1; k<=n; k++){\n                    int val2 = k*k - k + 1;\n                    if((val + val1 + val2) % 3 == 0){\n                        count++;\n                    }\n                }\n            }\n        }\n        \n        return count;\n    }\n}"}
{"task_id": "Java/148", "generation": "        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        List<String> result = new ArrayList<>();\n        \n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n        \n        if (index1 == -1 || index2 == -1) {\n            return result;\n        }\n        \n        int start = Math.min(index1, index2);\n        int end = Math.max(index1, index2);\n        \n        for (int i = start + 1; i < end; i++) {\n            result.add(planets.get(i));\n        }\n        \n        return result;\n    }\n}\n\nclass Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.bf(\"Mercury\", \"Mars\")); // [Venus, Earth]\n        System.out.println(solution.bf(\"Jupiter\", \"Earth\")); // [Mars, Venus]\n        System.out.println(solution.bf(\"Pluto\", \"Venus\")); // []\n    }\n}"}
{"task_id": "Java/149", "generation": "        List<String> result = new ArrayList<>();\n        \n        for (String str : lst) {\n            if (str.length() % 2 == 0) {\n                result.add(str);\n            }\n        }\n        \n        Collections.sort(result, (a, b) -> {\n            if (a.length() != b.length()) {\n                return a.length() - b.length();\n            } else {\n                return a.compareTo(b);\n            }\n        });\n        \n        return result;\n    }\n}\n\n// Test the function\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<String> lst = new ArrayList<>();\n        lst.add(\"banana\");\n        lst.add(\"apple\");\n        lst.add(\"peach\");\n        lst.add(\"cherry\");\n        \n        List<String> result = solution.listSort(lst);\n        \n        for (String str : result) {\n            System.out.println(str);\n        }\n    }\n}"}
{"task_id": "Java/150", "generation": "     if (n <= 1) {\n            return y;\n        }\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.xOrY(5, 2, 3)); // Output should be 2 since 5 is a prime number\n        System.out.println(solution.xOrY(6, 2, 3)); // Output should be 3 since 6 is not a prime number\n        System.out.println(solution.xOrY(1, 2, 3)); // Output should be 3 since 1 is not a prime number\n    }\n}"}
{"task_id": "Java/151", "generation": "        int sum = 0;\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int num = (int) obj;\n                if (num > 0 && num % 2 != 0) {\n                    sum += num * num;\n                }\n            }\n        }\n        return sum;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.doubleTheDifference(Arrays.asList(1, 3, 2, 0))); // Output: 10\n        System.out.println(solution.doubleTheDifference(Arrays.asList(-1, -2, 0))); // Output: 0\n        System.out.println(solution.doubleTheDifference(Arrays.asList(9, -2))); // Output: 81\n        System.out.println(solution.doubleTheDifference(Arrays.asList(0))); // Output: 0\n    }\n}"}
{"task_id": "Java/152", "generation": "List<Integer> result = new ArrayList<>();\n        \n        for (int i = 0; i < game.size(); i++) {\n            int diff = Math.abs(game.get(i) - guess.get(i));\n            result.add(diff);\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/153", "generation": "        Map<String, Double> strengthMap = new HashMap<>();\n        \n        for (String extension : extensions) {\n            int CAP = 0;\n            int SM = 0;\n            \n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    CAP++;\n                } else if (Character.isLowerCase(c)) {\n                    SM++;\n                }\n            }\n            \n            double strength = (double) CAP - SM;\n            strengthMap.put(extension, strength);\n        }\n        \n        String strongestExtension = \"\";\n        double maxStrength = Double.MIN_VALUE;\n        \n        for (String extension : extensions) {\n            if (strengthMap.get(extension) > maxStrength) {\n                strongestExtension = extension;\n                maxStrength = strengthMap.get(extension);\n            }\n        }\n        \n        return class_name + \".\" + strongestExtension;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        String class_name = \"Slices\";\n        List<String> extensions = new ArrayList<>(Arrays.asList(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"));\n        \n        System.out.println(solution.StrongestExtension(class_name, extensions));\n    }\n}"}
{"task_id": "Java/154", "generation": "        if (a.length() != b.length()) {\n            return false;\n        }\n        \n        String concat = a + a;\n        return concat.contains(b);\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        \n        String a1 = \"abcd\";\n        String b1 = \"abd\";\n        System.out.println(sol.cycpatternCheck(a1, b1)); // false\n        \n        String a2 = \"hello\";\n        String b2 = \"ell\";\n        System.out.println(sol.cycpatternCheck(a2, b2)); // true\n        \n        String a3 = \"whassup\";\n        String b3 = \"psus\";\n        System.out.println(sol.cycpatternCheck(a3, b3)); // false\n        \n        String a4 = \"abab\";\n        String b4 = \"baa\";\n        System.out.println(sol.cycpatternCheck(a4, b4)); // true\n        \n        String a5 = \"efef\";\n        String b5 = \"eeff\";\n        System.out.println(sol.cycpatternCheck(a5, b5)); // false\n        \n        String a6 = \"himenss\";\n        String b6 = \"simen\";\n        System.out.println(sol.cycpatternCheck(a6, b6)); // true\n    }\n}"}
{"task_id": "Java/155", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        if(num < 0) {\n            num = Math.abs(num);\n        }\n        \n        int evenCount = 0;\n        int oddCount = 0;\n        \n        while(num > 0) {\n            int digit = num % 10;\n            if(digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n            num /= 10;\n        }\n        \n        result.add(evenCount);\n        result.add(oddCount);\n        \n        return result;\n    }\n    \n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        int num = 12345;\n        List<Integer> result = sol.evenOddCount(num);\n        System.out.println(\"Even Count: \" + result.get(0));\n        System.out.println(\"Odd Count: \" + result.get(1));\n    }\n}"}
{"task_id": "Java/156", "generation": "        if(number < 1 || number > 1000){\n            return \"Number out of range\";\n        }\n\n        String[] romans = {\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"};\n        int[] values = {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n\n        StringBuilder sb = new StringBuilder();\n\n        int i = values.length - 1;\n        while(number > 0){\n            if(number >= values[i]){\n                sb.append(romans[i]);\n                number -= values[i];\n            } else {\n                i--;\n            }\n        }\n\n        return sb.toString().toLowerCase();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.intToMiniRoman(3)); // Expected output: \"iii\"\n        System.out.println(solution.intToMiniRoman(58)); // Expected output: \"lviii\"\n        System.out.println(solution.intToMiniRoman(1994)); // Expected output: \"Mcmxciv\"\n        System.out.println(solution.intToMiniRoman(1001)); // Expected output: \"Number out of range\"\n    }\n}"}
{"task_id": "Java/157", "generation": "        // Calculate square of sides\n        int aSquare = a * a;\n        int bSquare = b * b;\n        int cSquare = c * c;\n        \n        // Check for Pythagorean theorem\n        if (aSquare == bSquare + cSquare || bSquare == aSquare + cSquare || cSquare == aSquare + bSquare) {\n            return true;\n        }\n        \n        return false;\n    }\n}"}
{"task_id": "Java/158", "generation": "        // Check for empty input\n        if (words == null || words.isEmpty()) {\n            return \"\";\n        }\n        \n        String maxUniqueWord = \"\";\n        int maxUniqueChars = 0;\n        \n        for (String word : words) {\n            Set<Character> uniqueChars = new HashSet<>();\n            for (int i = 0; i < word.length(); i++) {\n                uniqueChars.add(word.charAt(i));\n            }\n            \n            if (uniqueChars.size() > maxUniqueChars || \n                (uniqueChars.size() == maxUniqueChars && word.compareTo(maxUniqueWord) < 0)) {\n                maxUniqueWord = word;\n                maxUniqueChars = uniqueChars.size();\n            }\n        }\n        \n        return maxUniqueWord;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        List<String> words1 = Arrays.asList(\"name\", \"of\", \"string\");\n        System.out.println(solution.findMax(words1)); // Output should be \"string\"\n        \n        List<String> words2 = Arrays.asList(\"name\", \"enam\", \"game\");\n        System.out.println(solution.findMax(words2)); // Output should be \"enam\"\n        \n        List<String> words3 = Arrays.asList(\"aaaaaaa\", \"bb\", \"cc\");\n        System.out.println(solution.findMax(words3)); // Output should be \"aaaaaaa\"\n    }\n}"}
{"task_id": "Java/159", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        int totalCarrots = number + need;\n        if (totalCarrots >= remaining) {\n            totalCarrots = remaining;\n            remaining = 0;\n        } else {\n            remaining -= need;\n        }\n        \n        result.add(totalCarrots);\n        result.add(remaining);\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.eat(5, 3, 10)); // [8, 2]\n        System.out.println(solution.eat(7, 5, 3)); // [8, 0]\n        System.out.println(solution.eat(2, 5, 5)); // [7, 0]\n    }\n}"}
{"task_id": "Java/160", "generation": "        if (operator.size() == 0 || operand.size() == 0 || operator.size() != operand.size() - 1) {\n            return Integer.MIN_VALUE;\n        }\n\n        Stack<Integer> stack = new Stack<>();\n        stack.push(operand.get(0));\n\n        for (int i = 0; i < operator.size(); i++) {\n            String op = operator.get(i);\n            int num = operand.get(i + 1);\n\n            if (op.equals(\"+\")) {\n                stack.push(num);\n            } else if (op.equals(\"-\")) {\n                stack.push(-num);\n            } else if (op.equals(\"*\")) {\n                stack.push(stack.pop() * num);\n            } else if (op.equals(\"/\")) {\n                stack.push(stack.pop() / num);\n            } else if (op.equals(\"**\")) {\n                stack.push((int) Math.pow(stack.pop(), num));\n            }\n        }\n\n        int sum = 0;\n        while (!stack.isEmpty()) {\n            sum += stack.pop();\n        }\n\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<String> operator = Arrays.asList(\"+\", \"-\", \"*\", \"/\");\n        List<Integer> operand = Arrays.asList(5, 3, 2, 6, 1);\n\n        int result = solution.doAlgebra(operator, operand);\n        System.out.println(result); // Output: 6\n    }\n}"}
{"task_id": "Java/161", "generation": "        char[] arr = s.toCharArray();\n        int n = arr.length;\n        int left = 0, right = n - 1;\n        \n        while (left < right) {\n            if (!Character.isAlphabetic(arr[left])) {\n                left++;\n            } else if (!Character.isAlphabetic(arr[right])) {\n                right--;\n            } else {\n                char temp = arr[left];\n                arr[left] = Character.isUpperCase(temp) ? Character.toLowerCase(temp) : Character.toUpperCase(temp);\n                temp = arr[right];\n                arr[right] = Character.isUpperCase(temp) ? Character.toLowerCase(temp) : Character.toUpperCase(temp);\n                left++;\n                right--;\n            }\n        }\n        \n        return new String(arr);\n    }\n}\n\n// Test cases\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.solve(\"AbCdEfG123\")); // Output should be \"aBcDeFg123\"\n        System.out.println(solution.solve(\"123\")); // Output should be \"321\"\n        System.out.println(solution.solve(\"a\")); // Output should be \"A\"\n        System.out.println(solution.solve(\"A\")); // Output should be \"a\"\n    }\n}"}
{"task_id": "Java/162", "generation": "        // Check if the text is empty\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n\n        // Create a MessageDigest object for MD5\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n\n        // Update the MessageDigest with the text bytes\n        md.update(text.getBytes());\n\n        // Generate the MD5 hash as an array of bytes\n        byte[] digest = md.digest();\n\n        // Convert the bytes to a hex string\n        StringBuilder sb = new StringBuilder();\n        for (byte b : digest) {\n            sb.append(String.format(\"%02x\", b & 0xff));\n        }\n\n        return Optional.of(sb.toString());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        try {\n            System.out.println(solution.stringToMd5(\"Hello, World!\").orElse(\"Empty String!\"));\n            System.out.println(solution.stringToMd5(\"\").orElse(\"Empty String!\"));\n            System.out.println(solution.stringToMd5(\"1234567890\").orElse(\"Empty String!\"));\n        } catch (NoSuchAlgorithmException e) {\n            System.out.println(\"Exception caught: \" + e.getMessage());\n        }\n    }\n}"}
{"task_id": "Java/163", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for(int i=a; i<=b; i++) {\n            if(isEven(i)) {\n                result.add(i);\n            }\n        }\n        \n        return result;\n    }\n    \n    private boolean isEven(int num) {\n        String numStr = String.valueOf(num);\n        for(int i=0; i<numStr.length(); i++) {\n            if(Character.getNumericValue(numStr.charAt(i)) % 2 != 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
