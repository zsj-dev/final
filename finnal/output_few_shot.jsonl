{"task_id": "Java/0", "generation": "        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) <= threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/1", "generation": "        List<String> groups = new ArrayList<>();\n        int count = 0;\n        StringBuilder sb = new StringBuilder();\n        \n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                count++;\n            } else if (c == ')') {\n                count--;\n            }\n            \n            sb.append(c);\n            \n            if (count == 0) {\n                groups.add(sb.toString());\n                sb.setLength(0);\n            }\n        }\n        \n        return groups;\n"}
{"task_id": "Java/2", "generation": "        return number % 1.0;\n    }\n}\n"}
{"task_id": "Java/3", "generation": "        for (int operation : operations) {\n            if (operation >= 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/4", "generation": "        double sum = 0;\n        double mean = 0;\n        \n        for (double num : numbers) {\n            sum += num;\n        }\n        \n        mean = sum / numbers.size();\n        \n        double deviation = 0;\n        for (double num : numbers) {\n            deviation += Math.abs(num - mean);\n        }\n        \n        return deviation / numbers.size();\n    }\n}\n"}
{"task_id": "Java/5", "generation": "        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i != numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/6", "generation": "        List<Integer> result = new ArrayList<>();\n        int count = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                count++;\n            } else if (c == ')') {\n                count--;\n            }\n            result.add(count);\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/7", "generation": "        List<String> filteredStrings = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                filteredStrings.add(str);\n            }\n        }\n        return filteredStrings;\n    }\n}\n"}
{"task_id": "Java/8", "generation": "        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        int product = 1;\n        \n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n        \n        result.add(sum);\n        result.add(product);\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/9", "generation": "        List<Integer> maxList = new ArrayList<>();\n        for (int i = 1; i < numbers.size() - 1; i++) {\n            int max = Math.max(numbers.get(i - 1), Math.max(numbers.get(i), numbers.get(i + 1)));\n            maxList.add(max);\n        }\n        return maxList;\n    }\n}\n"}
{"task_id": "Java/10", "generation": "        StringBuilder sb = new StringBuilder(string);\n        sb.reverse();\n        return string + sb.toString();\n    }\n}\n"}
{"task_id": "Java/11", "generation": "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            sb.append((char) (a.charAt(i) ^ b.charAt(i)));\n        }\n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/12", "generation": "        return strings.stream()\n            .max(Comparator.comparingInt(String::length));\n    }\n}\n"}
{"task_id": "Java/13", "generation": "        if (b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(b, a % b);\n    }\n}\n"}
{"task_id": "Java/14", "generation": "        List<String> prefixes = new ArrayList<>();\n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        return prefixes;\n    }\n}\n"}
{"task_id": "Java/15", "generation": "        StringBuilder sb = new StringBuilder();\n        for (int i = 1; i <= n; i++) {\n            sb.append(String.valueOf(i));\n        }\n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/16", "generation": "        Set<Character> charSet = new HashSet<>();\n        for (char c : string.toCharArray()) {\n            charSet.add(c);\n        }\n        return charSet.size();\n"}
{"task_id": "Java/17", "generation": "        List<Integer> musicList = new ArrayList<>();\n        String[] musicArray = string.split(\",\");\n        for (String s : musicArray) {\n            musicList.add(Integer.parseInt(s));\n        }\n        return musicList;\n    }\n}\n"}
{"task_id": "Java/18", "generation": "        int count = 0;\n        int index = 0;\n        while ((index = string.indexOf(substring, index)) != -1) {\n            index++;\n            count++;\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/19", "generation": "        char[] chars = numbers.toCharArray();\n        Arrays.sort(chars);\n        return new String(chars);\n    }\n}\n"}
{"task_id": "Java/20", "generation": "        List<Double> closestElements = new ArrayList<>();\n        double minDiff = Double.MAX_VALUE;\n        for (Double num : numbers) {\n            double diff = Math.abs(num - 0.0);\n            if (diff < minDiff) {\n                closestElements.clear();\n                closestElements.add(num);\n                minDiff = diff;\n            } else if (diff == minDiff) {\n                closestElements.add(num);\n            }\n        }\n        return closestElements;\n    }\n}\n"}
{"task_id": "Java/21", "generation": "        List<Double> rescaledNumbers = new ArrayList<>();\n        double sum = 0.0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        for (double num : numbers) {\n            rescaledNumbers.add(num / sum);\n        }\n        return rescaledNumbers;\n    }\n}\n"}
{"task_id": "Java/22", "generation": "        List<Integer> integers = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                integers.add((Integer) value);\n            }\n        }\n        return integers;\n    }\n}\n"}
{"task_id": "Java/23", "generation": "        return string.length();\n    }\n}\n"}
{"task_id": "Java/24", "generation": "        int largest = 1;\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                largest = i;\n            }\n        }\n        return largest;\n    }\n}\n"}
{"task_id": "Java/25", "generation": "        List<Integer> factors = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (n % i == 0) {\n                factors.add(i);\n            }\n        }\n        return factors;\n    }\n}\n"}
{"task_id": "Java/26", "generation": "        return numbers.stream().distinct().collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/27", "generation": "        StringBuilder result = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                result.append(Character.toLowerCase(c));\n            } else if (Character.isLowerCase(c)) {\n                result.append(Character.toUpperCase(c));\n            } else {\n                result.append(c);\n            }\n        }\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/28", "generation": "        StringBuilder sb = new StringBuilder();\n        for (String str : strings) {\n            sb.append(str);\n        }\n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/29", "generation": "        return strings.stream()\n            .filter(s -> s.startsWith(prefix))\n            .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/30", "generation": "        return l.stream()\n                .filter(num -> num > 0)\n                .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/31", "generation": "        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/32", "generation": "        double x = 0.0;\n        while (poly(xs, x) != 0) {\n            x += 0.1;\n        }\n        return x;\n    }\n}\n"}
{"task_id": "Java/33", "generation": "        Collections.sort(l);\n        if (l.size() >= 3) {\n            return Arrays.asList(l.get(2));\n        } else {\n            return new ArrayList<>();\n        }\n    }\n}\n"}
{"task_id": "Java/34", "generation": "        Set<Integer> set = new HashSet<>(l);\n        return new ArrayList<>(set);\n    }\n}\n"}
{"task_id": "Java/35", "generation": "        int max = Integer.MIN_VALUE;\n        for (int num : l) {\n            if (num > max) {\n                max = num;\n            }\n        }\n        return max;\n    }\n}\n"}
{"task_id": "Java/36", "generation": "        if (n % 3 == 0 && n % 5 == 0) {\n            return 0;\n        } else if (n % 3 == 0) {\n            return 1;\n        } else if (n % 5 == 0) {\n            return 2;\n        } else {\n            return -1;\n        }\n    }\n}\n"}
{"task_id": "Java/37", "generation": "        List<Integer> evenNumbers = new ArrayList<>();\n        for (int num : l) {\n            if (num % 2 == 0) {\n                evenNumbers.add(num);\n            }\n        }\n        Collections.sort(evenNumbers);\n        return evenNumbers;\n"}
{"task_id": "Java/38", "generation": "        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}\n"}
{"task_id": "Java/39", "generation": "        if (n <= 0) {\n            return -1;\n        } else if (n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 1;\n        }\n\n        int a = 0, b = 1, c = 1;\n        for (int i = 3; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n\n        return c;\n    }\n}\n"}
{"task_id": "Java/40", "generation": "        for (int i = 0; i < l.size() - 2; i++) {\n            for (int j = i + 1; j < l.size() - 1; j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/41", "generation": "        return n * (n - 1) / 2;\n    }\n}\n"}
{"task_id": "Java/42", "generation": "        return l.stream()\n                .map(num -> num + 1)\n                .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/43", "generation": "        Set<Integer> set = new HashSet<>();\n        for (int num : l) {\n            if (set.contains(-num)) {\n                return true;\n            }\n            set.add(num);\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/44", "generation": "        return Integer.toString(x, base);\n    }\n}\n"}
{"task_id": "Java/45", "generation": "        return 0.5 * a * h;\n    }\n}\n"}
{"task_id": "Java/46", "generation": "        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else if (n == 2) {\n            return 1;\n        } else if (n == 3) {\n            return 2;\n        }\n        int a = 0, b = 1, c = 1, d = 2;\n        for (int i = 4; i <= n; i++) {\n            int sum = a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n            d = sum;\n        }\n        return d;\n    }\n}\n"}
{"task_id": "Java/47", "generation": "        Collections.sort(l);\n        int size = l.size();\n        if (size % 2 == 0) {\n            return (double) (l.get(size / 2 - 1) + l.get(size / 2)) / 2;\n        } else {\n            return (double) l.get(size / 2);\n        }\n    }\n}\n"}
{"task_id": "Java/48", "generation": "        String reversed = new StringBuilder(text).reverse().toString();\n        return text.equals(reversed);\n    }\n}\n"}
{"task_id": "Java/49", "generation": "        return n % p;\n    }\n}\n"}
{"task_id": "Java/50", "generation": "        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 5 - 'a' + 26) % 26));\n        }\n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/51", "generation": "        return text.replaceAll(\"[aeiouAEIOU]\", \"\");\n    }\n}\n"}
{"task_id": "Java/52", "generation": "        int sum = 0;\n        for (int num : l) {\n            sum += num;\n        }\n        return sum < t;\n    }\n}\n"}
{"task_id": "Java/53", "generation": "        return x + y;\n    }\n}\n"}
{"task_id": "Java/54", "generation": "        Set<Character> set0 = new HashSet<>();\n        Set<Character> set1 = new HashSet<>();\n        \n        for (char c : s0.toCharArray()) {\n            set0.add(c);\n        }\n        \n        for (char c : s1.toCharArray()) {\n            set1.add(c);\n        }\n        \n        return set0.equals(set1);\n    }\n}\n"}
{"task_id": "Java/55", "generation": "        if (n <= 1) {\n            return n;\n        }\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n"}
{"task_id": "Java/56", "generation": "        Stack<Character> stack = new Stack<>();\n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '(' || bracket == '[' || bracket == '{') {\n                stack.push(bracket);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if ((bracket == ')' && top != '(') || (bracket == ']' && top != '[') || (bracket == '}' && top != '{')) {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n"}
{"task_id": "Java/57", "generation": "        boolean increasing = true;\n        boolean decreasing = true;\n        \n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n                increasing = false;\n            }\n            if (l.get(i) > l.get(i - 1)) {\n                decreasing = false;\n            }\n        }\n        \n        return increasing || decreasing;\n    }\n}\n"}
{"task_id": "Java/58", "generation": "        List<Integer> commonList = new ArrayList<>();\n        for (Integer num : l1) {\n            if (l2.contains(num)) {\n                commonList.add(num);\n            }\n        }\n        return commonList;\n    }\n}\n"}
{"task_id": "Java/59", "generation": "        int maxPrime = -1;\n        while (n % 2 == 0) {\n            maxPrime = 2;\n            n /= 2;\n        }\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                maxPrime = i;\n                n /= i;\n            }\n        }\n        if (n > 2) {\n            maxPrime = n;\n        }\n        return maxPrime;\n"}
{"task_id": "Java/60", "generation": "        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/61", "generation": "        Stack<Character> stack = new Stack<>();\n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '(' || bracket == '[' || bracket == '{') {\n                stack.push(bracket);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if ((top == '(' && bracket != ')') || (top == '[' && bracket != ']') || (top == '{' && bracket != '}')) {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n"}
{"task_id": "Java/62", "generation": "        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/63", "generation": "        if (n <= 1) {\n            return n;\n        }\n        return fibfib(n - 1) + fibfib(n - 2);\n    }\n}\n"}
{"task_id": "Java/64", "generation": "        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = Character.toLowerCase(s.charAt(i));\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/65", "generation": "        String binary = Integer.toBinaryString(x);\n        int len = binary.length();\n        shift = shift % len;\n        String shiftedBinary = binary.substring(len - shift) + binary.substring(0, len - shift);\n        return Integer.parseInt(shiftedBinary, 2) + \"\";\n    }\n}\n"}
{"task_id": "Java/66", "generation": "        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isDigit(c)) {\n                sum += Character.getNumericValue(c);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/67", "generation": "        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a') {\n                count++;\n            }\n        }\n        return count * n;\n    }\n}\n"}
{"task_id": "Java/68", "generation": "        List<Integer> result = new ArrayList<>();\n        for (int num : arr) {\n            if (num % 2 == 0) {\n                result.add(num);\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/69", "generation": "        int sum = 0;\n        for (int num : lst) {\n            sum += num;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/70", "generation": "        Collections.sort(lst);\n        return lst;\n    }\n}\n"}
{"task_id": "Java/71", "generation": "        double s = (a + b + c) / 2;\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    }\n}\n"}
{"task_id": "Java/72", "generation": "        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n        return sum <= w;\n    }\n}\n"}
{"task_id": "Java/73", "generation": "        int min = Collections.min(arr);\n        int max = Collections.max(arr);\n        return max - min;\n    }\n}\n"}
{"task_id": "Java/74", "generation": "        List<String> result = new ArrayList<>();\n        for (String str1 : lst1) {\n            for (String str2 : lst2) {\n                if (str1.equals(str2)) {\n                    result.add(str1);\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/75", "generation": "        if (a <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(a); i++) {\n            if (a % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/76", "generation": "        if (x <= 0 || n <= 0) {\n            return false;\n        }\n        \n        double result = Math.pow(x, 1.0 / n);\n        return Math.abs(Math.round(result) - result) < 1e-9;\n    }\n}\n"}
{"task_id": "Java/77", "generation": "        double cubeRoot = Math.cbrt(a);\n        return cubeRoot == Math.round(cubeRoot);\n    }\n}\n"}
{"task_id": "Java/78", "generation": "        return Integer.parseInt(num, 16);\n    }\n}\n"}
{"task_id": "Java/79", "generation": "        return Integer.toBinaryString(decimal);\n    }\n}\n"}
{"task_id": "Java/80", "generation": "        Set<Integer> seen = new HashSet<>();\n        int sum = 0;\n        for (char c : s.toCharArray()) {\n            int digit = c - '0';\n            sum += digit * digit;\n        }\n        if (sum == 1) {\n            return true;\n        } else if (seen.contains(sum)) {\n            return false;\n        } else {\n            seen.add(sum);\n            return isHappy(Integer.toString(sum));\n        }\n    }\n}\n"}
{"task_id": "Java/81", "generation": "        List<String> letterGrades = new ArrayList<>();\n        for (double grade : grades) {\n            if (grade >= 90) {\n                letterGrades.add(\"A\");\n            } else if (grade >= 80) {\n                letterGrades.add(\"B\");\n            } else if (grade >= 70) {\n                letterGrades.add(\"C\");\n            } else if (grade >= 60) {\n                letterGrades.add(\"D\");\n            } else {\n                letterGrades.add(\"F\");\n            }\n        }\n        return letterGrades;\n    }\n}\n"}
{"task_id": "Java/82", "generation": "        int length = string.length();\n        if (length <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/83", "generation": "        return Integer.parseInt(String.valueOf(n).substring(0, 1) + String.valueOf(n).substring(String.valueOf(n).length() - 1));\n    }\n}\n"}
{"task_id": "Java/84", "generation": "        if (N % 2 == 0) {\n            return \"Even\";\n        } else {\n            return \"Odd\";\n        }\n    }\n}\n"}
{"task_id": "Java/85", "generation": "        int sum = 0;\n        for (int num : lst) {\n            sum += num;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/86", "generation": "        char[] chars = s.toCharArray();\n        Arrays.sort(chars);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 1; i < chars.length; i += 2) {\n            sb.append(chars[i]);\n        }\n        for (int i = 0; i < chars.length; i += 2) {\n            sb.append(chars[i]);\n        }\n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/87", "generation": "        List<List<Integer>> result = new ArrayList<>();\n        for (List<Integer> list : lst) {\n            List<Integer> newList = new ArrayList<>();\n            for (int num : list) {\n                newList.add(num + x);\n            }\n            result.add(newList);\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/88", "generation": "        Collections.sort(array);\n        return array;\n    }\n}\n"}
{"task_id": "Java/89", "generation": "        StringBuilder encrypted = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n                if (Character.isUpperCase(c)) {\n                    encrypted.append((char) ((c - 'A' + 3) % 26 + 'A'));\n                } else {\n                    encrypted.append((char) ((c - 'a' + 3) % 26 + 'a'));\n                }\n            } else {\n                encrypted.append(c);\n            }\n        }\n        return encrypted.toString();\n    }\n}\n"}
{"task_id": "Java/90", "generation": "        Optional<Integer> result = lst.stream()\n            .filter(num -> num < 0)\n            .min(Comparator.naturalOrder());\n        return result;\n"}
{"task_id": "Java/91", "generation": "        int count = 0;\n        for (int i = 0; i < S.length(); i++) {\n            if (S.charAt(i) == 'b' || S.charAt(i) == 'o' || S.charAt(i) == 'r' || S.charAt(i) == 'e' || S.charAt(i) == 'd') {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/92", "generation": "        return x instanceof Integer || y instanceof Integer || z instanceof Integer;\n    }\n}\n"}
{"task_id": "Java/93", "generation": "        StringBuilder encodedMessage = new StringBuilder();\n        for (int i = 0; i < message.length(); i++) {\n            char currentChar = message.charAt(i);\n            encodedMessage.append((char) (currentChar + 1));\n        }\n        return encodedMessage.toString();\n    }\n}\n"}
{"task_id": "Java/94", "generation": "        int sum = 0;\n        for (int num : lst) {\n            sum += num;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/95", "generation": "        for (Map.Entry<Object, Object> entry : dict.entrySet()) {\n            if (!(entry.getKey() instanceof String) || !(entry.getValue() instanceof String)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/96", "generation": "        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            result.add(i);\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/97", "generation": "        return a * b;\n    }\n}\n"}
{"task_id": "Java/98", "generation": "        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/99", "generation": "        int count = 0;\n        for (int i = 0; i < value.length(); i++) {\n            if (Character.isUpperCase(value.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/100", "generation": "        List<Integer> pile = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            pile.add(i);\n        }\n        return pile;\n    }\n}\n"}
{"task_id": "Java/101", "generation": "        List<String> wordList = new ArrayList<>();\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            wordList.add(word);\n        }\n        return wordList;\n    }\n}\n"}
{"task_id": "Java/102", "generation": "        return x > y ? x : y;\n    }\n}\n"}
{"task_id": "Java/103", "generation": "        return Math.round((n + m) / 2.0);\n    }\n}\n"}
{"task_id": "Java/104", "generation": "        Set<Integer> uniqueDigitsSet = new HashSet<>();\n        for (Integer num : x) {\n            while (num > 0) {\n                uniqueDigitsSet.add(num % 10);\n                num /= 10;\n            }\n        }\n        List<Integer> uniqueDigitsList = new ArrayList<>(uniqueDigitsSet);\n        return uniqueDigitsList;\n"}
{"task_id": "Java/105", "generation": "        List<String> result = new ArrayList<>();\n        for (int num : arr) {\n            result.add(String.valueOf(num));\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/106", "generation": "        List<Integer> list = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            list.add(i);\n        }\n        return list;\n    }\n}\n"}
{"task_id": "Java/107", "generation": "        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i) && i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n\n    private boolean isPalindrome(int num) {\n        String str = String.valueOf(num);\n        int left = 0;\n        int right = str.length() - 1;\n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/108", "generation": "        int count = 0;\n        for (int num : arr) {\n            if (num % 2 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/109", "generation": "        int sum = 0;\n        for (int num : arr) {\n            sum += num;\n        }\n        return sum % 2 == 0;\n    }\n}\n"}
{"task_id": "Java/110", "generation": "        List<Integer> temp = new ArrayList<>(lst1);\n        lst1.clear();\n        lst1.addAll(lst2);\n        lst2.clear();\n        lst2.addAll(temp);\n        return \"Lists exchanged successfully.\";\n    }\n}\n"}
{"task_id": "Java/111", "generation": "        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < test.length(); i++) {\n            String character = String.valueOf(test.charAt(i));\n            map.put(character, map.getOrDefault(character, 0) + 1);\n        }\n        return map;\n    }\n}\n"}
{"task_id": "Java/112", "generation": "        List<Object> list = new ArrayList<>();\n        list.add(new StringBuilder(s).reverse().toString());\n        list.add(s.replace(c, \"\"));\n        return list;\n    }\n}\n"}
{"task_id": "Java/113", "generation": "        List<String> result = new ArrayList<>();\n        for (String str : lst) {\n            if (str.length() % 2 != 0) {\n                result.add(str);\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/114", "generation": "        int minSum = Integer.MAX_VALUE;\n        int currentSum = 0;\n        \n        for (int num : nums) {\n            currentSum += num;\n            minSum = Math.min(minSum, currentSum);\n            if (currentSum > 0) {\n                currentSum = 0;\n            }\n        }\n        \n        return minSum;\n"}
{"task_id": "Java/115", "generation": "        int max = 0;\n        for (List<Integer> row : grid) {\n            int sum = 0;\n            for (int num : row) {\n                sum += num;\n            }\n            max = Math.max(max, sum);\n        }\n        return Math.min(max, capacity);\n    }\n}\n"}
{"task_id": "Java/116", "generation": "        Collections.sort(arr);\n        return arr;\n    }\n}\n"}
{"task_id": "Java/117", "generation": "        List<String> words = new ArrayList<>();\n        String[] splitWords = s.split(\" \");\n        for (String word : splitWords) {\n            if (word.length() == n) {\n                words.add(word);\n            }\n        }\n        return words;\n    }\n}\n"}
{"task_id": "Java/118", "generation": "        String vowels = \"aeiou\";\n        int minDistance = Integer.MAX_VALUE;\n        char closestVowel = ' ';\n        \n        for (char c : word.toCharArray()) {\n            if (vowels.indexOf(c) != -1) {\n                int distance = Math.abs(c - 'a');\n                if (distance < minDistance) {\n                    minDistance = distance;\n                    closestVowel = c;\n                }\n            }\n        }\n        \n        return String.valueOf(closestVowel);\n    }\n}\n"}
{"task_id": "Java/119", "generation": "        StringBuilder result = new StringBuilder();\n        for (String str : lst) {\n            if (str.contains(\"(\") && str.contains(\")\")) {\n                result.append(str);\n            }\n        }\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/120", "generation": "        List<Integer> result = new ArrayList<>();\n        Collections.sort(arr, Collections.reverseOrder());\n        for (int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/121", "generation": "        int sum = 0;\n        for (int num : lst) {\n            sum += num;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/122", "generation": "        int sum = 0;\n        for (int num : arr) {\n            sum += num;\n        }\n        return sum + k;\n    }\n}\n"}
{"task_id": "Java/123", "generation": "        List<Integer> collatzList = new ArrayList<>();\n        collatzList.add(n);\n        while (n != 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n            if (n % 2 != 0) {\n                collatzList.add(n);\n            }\n        }\n        return collatzList;\n"}
{"task_id": "Java/124", "generation": "        try {\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n            sdf.setLenient(false);\n            sdf.parse(date);\n            return true;\n        } catch (ParseException e) {\n            return false;\n        }\n    }\n}\n"}
{"task_id": "Java/125", "generation": "        return txt.split(\" \");\n    }\n}\n"}
{"task_id": "Java/126", "generation": "        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < lst.get(i - 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/127", "generation": "        Set<Integer> set1 = new HashSet<>(interval1);\n        Set<Integer> set2 = new HashSet<>(interval2);\n        set1.retainAll(set2);\n        List<Integer> intersection = new ArrayList<>(set1);\n        Collections.sort(intersection);\n        return intersection.toString();\n    }\n}\n"}
{"task_id": "Java/128", "generation": "        int product = arr.stream().reduce(1, (a, b) -> a * b);\n        return Optional.of(Integer.signum(product));\n    }\n}\n"}
{"task_id": "Java/129", "generation": "        List<Integer> result = new ArrayList<>();\n        if (grid == null || grid.isEmpty() || grid.get(0).isEmpty()) {\n            return result;\n        }\n        \n        int m = grid.size();\n        int n = grid.get(0).size();\n        \n        int[][] dp = new int[m][n];\n        dp[0][0] = grid.get(0).get(0);\n        \n        for (int i = 1; i < m; i++) {\n            dp[i][0] = dp[i - 1][0] + grid.get(i).get(0);\n        }\n        \n        for (int j = 1; j < n; j++) {\n            dp[0][j] = dp[0][j - 1] + grid.get(0).get(j);\n        }\n        \n        for (int i = 1; i < m; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid.get(i).get(j);\n            }\n        }\n        \n        int i = m - 1, j = n - 1;\n        while (i >= 0 && j >= 0) {\n            result.add(grid.get(i).get(j));\n            if (i == 0) {\n                j--;\n            } else if (j == 0) {\n                i--;\n            } else {\n                if (dp[i - 1][j] < dp[i][j - 1]) {\n                    i--;\n                } else {\n                    j--;\n                }\n            }\n        }\n        \n        Collections.reverse(result);\n        \n        if (result.size() > k) {\n            result = result.subList(0, k);\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/130", "generation": "        List<Integer> triangle = new ArrayList<>();\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n            triangle.add(sum);\n        }\n        return triangle;\n    }\n}\n"}
{"task_id": "Java/131", "generation": "        return String.valueOf(n).length();\n    }\n}\n"}
{"task_id": "Java/132", "generation": "        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.pop() != '(') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n"}
{"task_id": "Java/133", "generation": "        int sum = 0;\n        for (double num : lst) {\n            sum += num * num;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/134", "generation": "        char lastChar = txt.charAt(txt.length() - 1);\n        return Character.isLetter(lastChar);\n    }\n}\n"}
{"task_id": "Java/135", "generation": "        int count = 0;\n        for (int num : arr) {\n            if (num % 2 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/136", "generation": "        List<Optional<Integer>> result = new ArrayList<>();\n        if (lst.isEmpty()) {\n            result.add(Optional.empty());\n            result.add(Optional.empty());\n        } else {\n            Optional<Integer> max = lst.stream().max(Integer::compare);\n            Optional<Integer> min = lst.stream().min(Integer::compare);\n            result.add(max);\n            result.add(min);\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/137", "generation": "        if (a.equals(b)) {\n            return Optional.empty();\n        } else {\n            return Optional.of(a);\n        }\n    }\n}\n"}
{"task_id": "Java/138", "generation": "        int sum = 0;\n        while (n > 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n        return sum % 2 == 0;\n    }\n}\n"}
{"task_id": "Java/139", "generation": "        if (n == 0 || n == 1) {\n            return 1;\n        } else {\n            return n * specialFactorial(n - 2);\n        }\n    }\n}\n"}
{"task_id": "Java/140", "generation": "        return text.trim().replaceAll(\"\\\\s+\", \" \");\n    }\n}\n"}
{"task_id": "Java/141", "generation": "        if (file_name.endsWith(\".txt\")) {\n            return \"Text file\";\n        } else if (file_name.endsWith(\".java\")) {\n            return \"Java source file\";\n        } else {\n            return \"Unknown file type\";\n        }\n    }\n}\n"}
{"task_id": "Java/142", "generation": "        int sum = 0;\n        for (int num : lst) {\n            sum += num * num;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/143", "generation": "        String[] words = sentence.split(\" \");\n        return Arrays.toString(words);\n    }\n}\n"}
{"task_id": "Java/144", "generation": "        return x.equals(n);\n    }\n}\n"}
{"task_id": "Java/145", "generation": "        Collections.sort(nums);\n        return nums;\n    }\n}\n"}
{"task_id": "Java/146", "generation": "        int sum = 0;\n        for (int num : nums) {\n            if (num % 2 == 0) {\n                sum += num;\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/147", "generation": "        return n / 3 * 3;\n    }\n}\n"}
{"task_id": "Java/148", "generation": "        List<String> planets = new ArrayList<>();\n        planets.add(planet1);\n        planets.add(planet2);\n        return planets;\n    }\n}\n"}
{"task_id": "Java/149", "generation": "        Collections.sort(lst);\n        return lst;\n    }\n}\n"}
{"task_id": "Java/150", "generation": "        return (n ^ x) + (n ^ y);\n    }\n}\n"}
{"task_id": "Java/151", "generation": "        int sum = 0;\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                sum += (Integer) obj * 2;\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/152", "generation": "        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            if (game.get(i).equals(guess.get(i))) {\n                result.add(2);\n            } else if (guess.contains(game.get(i))) {\n                result.add(1);\n            } else {\n                result.add(0);\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/153", "generation": "        String strongestExtension = \"\";\n        int maxStrength = 0;\n        for (String extension : extensions) {\n            int strength = 0;\n            for (int i = 0; i < class_name.length(); i++) {\n                if (extension.contains(String.valueOf(class_name.charAt(i)))) {\n                    strength++;\n                }\n            }\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n        return strongestExtension;\n    }\n}\n"}
{"task_id": "Java/154", "generation": "        return (a + a).contains(b);\n    }\n}\n"}
{"task_id": "Java/155", "generation": "        List<Integer> result = new ArrayList<>();\n        int evenCount = 0;\n        int oddCount = 0;\n        \n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n            num /= 10;\n        }\n        \n        result.add(evenCount);\n        result.add(oddCount);\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/156", "generation": "        String[] romanNumerals = {\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"};\n        int[] values = {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n        StringBuilder sb = new StringBuilder();\n        \n        for (int i = values.length - 1; i >= 0; i--) {\n            while (number >= values[i]) {\n                sb.append(romanNumerals[i]);\n                number -= values[i];\n            }\n        }\n        \n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/157", "generation": "        return a * a + b * b == c * c || a * a + c * c == b * b || b * b + c * c == a * a;\n    }\n}\n"}
{"task_id": "Java/158", "generation": "        String max = \"\";\n        for (String word : words) {\n            if (word.compareTo(max) > 0) {\n                max = word;\n            }\n        }\n        return max;\n    }\n}\n"}
{"task_id": "Java/159", "generation": "        List<Integer> result = new ArrayList<>();\n        if (number >= need + remaining) {\n            result.add(need);\n            result.add(remaining);\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/160", "generation": "        int result = operand.get(0);\n        for (int i = 1; i < operand.size(); i++) {\n            if (operator.get(i - 1).equals(\"+\")) {\n                result += operand.get(i);\n            } else if (operator.get(i - 1).equals(\"-\")) {\n                result -= operand.get(i);\n            } else if (operator.get(i - 1).equals(\"*\")) {\n                result *= operand.get(i);\n            } else if (operator.get(i - 1).equals(\"/\")) {\n                result /= operand.get(i);\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/161", "generation": "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n            } else {\n                sb.append(Character.toUpperCase(c));\n            }\n        }\n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/162", "generation": "        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String md5 = bigInt.toString(16);\n        while (md5.length() < 32) {\n            md5 = \"0\" + md5;\n        }\n        return Optional.of(md5);\n    }\n}\n"}
{"task_id": "Java/163", "generation": "        List<Integer> list = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            list.add(i);\n        }\n        return list;\n    }\n}\n"}
