{"task_id": "Java/0", "generation": "        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) < threshold) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)); // false\n        System.out.println(solution.hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)); // true\n    }\n}"}
{"task_id": "Java/0", "generation": "        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) < threshold) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)); // false\n        System.out.println(solution.hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)); // true\n    }\n}"}
{"task_id": "Java/0", "generation": "        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) < threshold) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)); // false\n        System.out.println(solution.hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)); // true\n    }\n}"}
{"task_id": "Java/0", "generation": "        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) < threshold) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)); // false\n        System.out.println(solution.hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)); // true\n    }\n}"}
{"task_id": "Java/0", "generation": "        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) < threshold) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)); // false\n        System.out.println(solution.hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)); // true\n    }\n}"}
{"task_id": "Java/1", "generation": "        List<String> result = new ArrayList<>();\n        int count = 0;\n        StringBuilder sb = new StringBuilder();\n        \n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                count++;\n            } else if (c == ')') {\n                count--;\n            }\n            \n            sb.append(c);\n            \n            if (count == 0) {\n                result.add(sb.toString().replaceAll(\"\\\\s\", \"\"));\n                sb = new StringBuilder();\n            }\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/1", "generation": "        List<String> result = new ArrayList<>();\n        int count = 0;\n        StringBuilder sb = new StringBuilder();\n        \n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                count++;\n            } else if (c == ')') {\n                count--;\n            }\n            \n            sb.append(c);\n            \n            if (count == 0) {\n                result.add(sb.toString().replaceAll(\"\\\\s\", \"\"));\n                sb = new StringBuilder();\n            }\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/1", "generation": "        List<String> result = new ArrayList<>();\n        int count = 0;\n        StringBuilder sb = new StringBuilder();\n        \n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                count++;\n            } else if (c == ')') {\n                count--;\n            }\n            \n            sb.append(c);\n            \n            if (count == 0) {\n                result.add(sb.toString().replaceAll(\"\\\\s\", \"\"));\n                sb = new StringBuilder();\n            }\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/1", "generation": "        List<String> result = new ArrayList<>();\n        int count = 0;\n        StringBuilder sb = new StringBuilder();\n        \n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                count++;\n            } else if (c == ')') {\n                count--;\n            }\n            \n            sb.append(c);\n            \n            if (count == 0) {\n                result.add(sb.toString().replaceAll(\"\\\\s\", \"\"));\n                sb = new StringBuilder();\n            }\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/1", "generation": "        List<String> result = new ArrayList<>();\n        int count = 0;\n        StringBuilder sb = new StringBuilder();\n        \n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                count++;\n            } else if (c == ')') {\n                count--;\n            }\n            \n            sb.append(c);\n            \n            if (count == 0) {\n                result.add(sb.toString().replaceAll(\"\\\\s\", \"\"));\n                sb = new StringBuilder();\n            }\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/2", "generation": "        // Get the integer part of the number\n        int integerPart = (int) number;\n\n        // Get the decimal part of the number\n        double decimalPart = number - integerPart;\n\n        return decimalPart;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.truncateNumber(3.5)); // 0.5\n        System.out.println(solution.truncateNumber(6.75)); // 0.75\n        System.out.println(solution.truncateNumber(10.25)); // 0.25\n    }\n}"}
{"task_id": "Java/2", "generation": "        // Get the integer part of the number\n        int integerPart = (int) number;\n\n        // Get the decimal part of the number\n        double decimalPart = number - integerPart;\n\n        return decimalPart;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.truncateNumber(3.5)); // 0.5\n        System.out.println(solution.truncateNumber(6.75)); // 0.75\n        System.out.println(solution.truncateNumber(10.25)); // 0.25\n    }\n}"}
{"task_id": "Java/2", "generation": "        // Get the integer part of the number\n        int integerPart = (int) number;\n\n        // Get the decimal part of the number\n        double decimalPart = number - integerPart;\n\n        return decimalPart;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.truncateNumber(3.5)); // 0.5\n        System.out.println(solution.truncateNumber(6.75)); // 0.75\n        System.out.println(solution.truncateNumber(10.25)); // 0.25\n    }\n}"}
{"task_id": "Java/2", "generation": "        // Get the integer part of the number\n        int integerPart = (int) number;\n\n        // Get the decimal part of the number\n        double decimalPart = number - integerPart;\n\n        return decimalPart;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.truncateNumber(3.5)); // 0.5\n        System.out.println(solution.truncateNumber(6.75)); // 0.75\n        System.out.println(solution.truncateNumber(10.25)); // 0.25\n    }\n}"}
{"task_id": "Java/2", "generation": "        // Get the integer part of the number\n        int integerPart = (int) number;\n\n        // Get the decimal part of the number\n        double decimalPart = number - integerPart;\n\n        return decimalPart;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.truncateNumber(3.5)); // 0.5\n        System.out.println(solution.truncateNumber(6.75)); // 0.75\n        System.out.println(solution.truncateNumber(10.25)); // 0.25\n    }\n}"}
{"task_id": "Java/3", "generation": "        int balance = 0;\n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/3", "generation": "        int balance = 0;\n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/3", "generation": "        int balance = 0;\n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/3", "generation": "        int balance = 0;\n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/3", "generation": "        int balance = 0;\n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/4", "generation": "        // Calculate the mean of the dataset\n        double sum = 0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n\n        // Calculate the absolute differences and sum them up\n        double absDiffSum = 0;\n        for (double num : numbers) {\n            absDiffSum += Math.abs(num - mean);\n        }\n\n        // Calculate the Mean Absolute Deviation\n        double mad = absDiffSum / numbers.size();\n        return mad;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Double> numbers = Arrays.asList(1.0, 2.0, 3.0, 4.0);\n        System.out.println(solution.meanAbsoluteDeviation(numbers));\n    }\n}"}
{"task_id": "Java/4", "generation": "        // Calculate the mean of the dataset\n        double sum = 0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n\n        // Calculate the absolute differences and sum them up\n        double absDiffSum = 0;\n        for (double num : numbers) {\n            absDiffSum += Math.abs(num - mean);\n        }\n\n        // Calculate the Mean Absolute Deviation\n        double mad = absDiffSum / numbers.size();\n        return mad;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Double> numbers = Arrays.asList(1.0, 2.0, 3.0, 4.0);\n        System.out.println(solution.meanAbsoluteDeviation(numbers));\n    }\n}"}
{"task_id": "Java/4", "generation": "        // Calculate the mean of the dataset\n        double sum = 0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n\n        // Calculate the absolute differences and sum them up\n        double absDiffSum = 0;\n        for (double num : numbers) {\n            absDiffSum += Math.abs(num - mean);\n        }\n\n        // Calculate the Mean Absolute Deviation\n        double mad = absDiffSum / numbers.size();\n        return mad;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Double> numbers = Arrays.asList(1.0, 2.0, 3.0, 4.0);\n        System.out.println(solution.meanAbsoluteDeviation(numbers));\n    }\n}"}
{"task_id": "Java/4", "generation": "        // Calculate the mean of the dataset\n        double sum = 0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n\n        // Calculate the absolute differences and sum them up\n        double absDiffSum = 0;\n        for (double num : numbers) {\n            absDiffSum += Math.abs(num - mean);\n        }\n\n        // Calculate the Mean Absolute Deviation\n        double mad = absDiffSum / numbers.size();\n        return mad;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Double> numbers = Arrays.asList(1.0, 2.0, 3.0, 4.0);\n        System.out.println(solution.meanAbsoluteDeviation(numbers));\n    }\n}"}
{"task_id": "Java/4", "generation": "        // Calculate the mean of the dataset\n        double sum = 0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n\n        // Calculate the absolute differences and sum them up\n        double absDiffSum = 0;\n        for (double num : numbers) {\n            absDiffSum += Math.abs(num - mean);\n        }\n\n        // Calculate the Mean Absolute Deviation\n        double mad = absDiffSum / numbers.size();\n        return mad;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Double> numbers = Arrays.asList(1.0, 2.0, 3.0, 4.0);\n        System.out.println(solution.meanAbsoluteDeviation(numbers));\n    }\n}"}
{"task_id": "Java/5", "generation": "        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.intersperse(Arrays.asList(1, 2, 3), 4));\n    }\n}"}
{"task_id": "Java/5", "generation": "        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.intersperse(Arrays.asList(1, 2, 3), 4));\n    }\n}"}
{"task_id": "Java/5", "generation": "        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.intersperse(Arrays.asList(1, 2, 3), 4));\n    }\n}"}
{"task_id": "Java/5", "generation": "        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.intersperse(Arrays.asList(1, 2, 3), 4));\n    }\n}"}
{"task_id": "Java/5", "generation": "        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.intersperse(Arrays.asList(1, 2, 3), 4));\n    }\n}"}
{"task_id": "Java/6", "generation": "        List<Integer> result = new ArrayList<>();\n        String[] groups = paren_string.split(\" \");\n        \n        for (String group : groups) {\n            int maxDepth = 0;\n            int currentDepth = 0;\n            \n            for (char c : group.toCharArray()) {\n                if (c == '(') {\n                    currentDepth++;\n                    maxDepth = Math.max(maxDepth, currentDepth);\n                } else if (c == ')') {\n                    currentDepth--;\n                }\n            }\n            \n            result.add(maxDepth);\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/6", "generation": "        List<Integer> result = new ArrayList<>();\n        String[] groups = paren_string.split(\" \");\n        \n        for (String group : groups) {\n            int maxDepth = 0;\n            int currentDepth = 0;\n            \n            for (char c : group.toCharArray()) {\n                if (c == '(') {\n                    currentDepth++;\n                    maxDepth = Math.max(maxDepth, currentDepth);\n                } else if (c == ')') {\n                    currentDepth--;\n                }\n            }\n            \n            result.add(maxDepth);\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/6", "generation": "        List<Integer> result = new ArrayList<>();\n        String[] groups = paren_string.split(\" \");\n        \n        for (String group : groups) {\n            int maxDepth = 0;\n            int currentDepth = 0;\n            \n            for (char c : group.toCharArray()) {\n                if (c == '(') {\n                    currentDepth++;\n                    maxDepth = Math.max(maxDepth, currentDepth);\n                } else if (c == ')') {\n                    currentDepth--;\n                }\n            }\n            \n            result.add(maxDepth);\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/6", "generation": "        List<Integer> result = new ArrayList<>();\n        String[] groups = paren_string.split(\" \");\n        \n        for (String group : groups) {\n            int maxDepth = 0;\n            int currentDepth = 0;\n            \n            for (char c : group.toCharArray()) {\n                if (c == '(') {\n                    currentDepth++;\n                    maxDepth = Math.max(maxDepth, currentDepth);\n                } else if (c == ')') {\n                    currentDepth--;\n                }\n            }\n            \n            result.add(maxDepth);\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/6", "generation": "        List<Integer> result = new ArrayList<>();\n        String[] groups = paren_string.split(\" \");\n        \n        for (String group : groups) {\n            int maxDepth = 0;\n            int currentDepth = 0;\n            \n            for (char c : group.toCharArray()) {\n                if (c == '(') {\n                    currentDepth++;\n                    maxDepth = Math.max(maxDepth, currentDepth);\n                } else if (c == ')') {\n                    currentDepth--;\n                }\n            }\n            \n            result.add(maxDepth);\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/7", "generation": "        List<String> filteredStrings = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                filteredStrings.add(str);\n            }\n        }\n        return filteredStrings;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\"));\n    }\n}"}
{"task_id": "Java/7", "generation": "        List<String> filteredStrings = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                filteredStrings.add(str);\n            }\n        }\n        return filteredStrings;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\"));\n    }\n}"}
{"task_id": "Java/7", "generation": "        List<String> filteredStrings = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                filteredStrings.add(str);\n            }\n        }\n        return filteredStrings;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\"));\n    }\n}"}
{"task_id": "Java/7", "generation": "        List<String> filteredStrings = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                filteredStrings.add(str);\n            }\n        }\n        return filteredStrings;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\"));\n    }\n}"}
{"task_id": "Java/7", "generation": "        List<String> filteredStrings = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                filteredStrings.add(str);\n            }\n        }\n        return filteredStrings;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\"));\n    }\n}"}
{"task_id": "Java/8", "generation": "        int sum = 0;\n        int product = 1;\n        \n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n        \n        return Arrays.asList(sum, product);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.sumProduct(new ArrayList<>()));\n        System.out.println(solution.sumProduct(Arrays.asList(1, 2, 3, 4)));\n    }\n}"}
{"task_id": "Java/8", "generation": "        int sum = 0;\n        int product = 1;\n        \n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n        \n        return Arrays.asList(sum, product);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.sumProduct(new ArrayList<>()));\n        System.out.println(solution.sumProduct(Arrays.asList(1, 2, 3, 4)));\n    }\n}"}
{"task_id": "Java/8", "generation": "        int sum = 0;\n        int product = 1;\n        \n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n        \n        return Arrays.asList(sum, product);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.sumProduct(new ArrayList<>()));\n        System.out.println(solution.sumProduct(Arrays.asList(1, 2, 3, 4)));\n    }\n}"}
{"task_id": "Java/8", "generation": "        int sum = 0;\n        int product = 1;\n        \n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n        \n        return Arrays.asList(sum, product);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.sumProduct(new ArrayList<>()));\n        System.out.println(solution.sumProduct(Arrays.asList(1, 2, 3, 4)));\n    }\n}"}
{"task_id": "Java/8", "generation": "        int sum = 0;\n        int product = 1;\n        \n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n        \n        return Arrays.asList(sum, product);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.sumProduct(new ArrayList<>()));\n        System.out.println(solution.sumProduct(Arrays.asList(1, 2, 3, 4)));\n    }\n}"}
{"task_id": "Java/9", "generation": "        List<Integer> rollingMaxList = new ArrayList<>();\n        Deque<Integer> deque = new LinkedList<>();\n        \n        for (int i = 0; i < numbers.size(); i++) {\n            // Remove elements that are out of the current window\n            while (!deque.isEmpty() && deque.peekFirst() < i - 2) {\n                deque.pollFirst();\n            }\n            \n            // Remove elements smaller than the current element\n            while (!deque.isEmpty() && numbers.get(deque.peekLast()) < numbers.get(i)) {\n                deque.pollLast();\n            }\n            \n            deque.offerLast(i);\n            rollingMaxList.add(numbers.get(deque.peekFirst()));\n        }\n        \n        return rollingMaxList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> numbers = Arrays.asList(1, 2, 3, 2, 3, 4, 2);\n        List<Integer> rollingMaxList = solution.rollingMax(numbers);\n        \n        System.out.println(rollingMaxList);\n    }\n}"}
{"task_id": "Java/9", "generation": "        List<Integer> rollingMaxList = new ArrayList<>();\n        Deque<Integer> deque = new LinkedList<>();\n        \n        for (int i = 0; i < numbers.size(); i++) {\n            // Remove elements that are out of the current window\n            while (!deque.isEmpty() && deque.peekFirst() < i - 2) {\n                deque.pollFirst();\n            }\n            \n            // Remove elements smaller than the current element\n            while (!deque.isEmpty() && numbers.get(deque.peekLast()) < numbers.get(i)) {\n                deque.pollLast();\n            }\n            \n            deque.offerLast(i);\n            rollingMaxList.add(numbers.get(deque.peekFirst()));\n        }\n        \n        return rollingMaxList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> numbers = Arrays.asList(1, 2, 3, 2, 3, 4, 2);\n        List<Integer> rollingMaxList = solution.rollingMax(numbers);\n        \n        System.out.println(rollingMaxList);\n    }\n}"}
{"task_id": "Java/9", "generation": "        List<Integer> rollingMaxList = new ArrayList<>();\n        Deque<Integer> deque = new LinkedList<>();\n        \n        for (int i = 0; i < numbers.size(); i++) {\n            // Remove elements that are out of the current window\n            while (!deque.isEmpty() && deque.peekFirst() < i - 2) {\n                deque.pollFirst();\n            }\n            \n            // Remove elements smaller than the current element\n            while (!deque.isEmpty() && numbers.get(deque.peekLast()) < numbers.get(i)) {\n                deque.pollLast();\n            }\n            \n            deque.offerLast(i);\n            rollingMaxList.add(numbers.get(deque.peekFirst()));\n        }\n        \n        return rollingMaxList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> numbers = Arrays.asList(1, 2, 3, 2, 3, 4, 2);\n        List<Integer> rollingMaxList = solution.rollingMax(numbers);\n        \n        System.out.println(rollingMaxList);\n    }\n}"}
{"task_id": "Java/9", "generation": "        List<Integer> rollingMaxList = new ArrayList<>();\n        Deque<Integer> deque = new LinkedList<>();\n        \n        for (int i = 0; i < numbers.size(); i++) {\n            // Remove elements that are out of the current window\n            while (!deque.isEmpty() && deque.peekFirst() < i - 2) {\n                deque.pollFirst();\n            }\n            \n            // Remove elements smaller than the current element\n            while (!deque.isEmpty() && numbers.get(deque.peekLast()) < numbers.get(i)) {\n                deque.pollLast();\n            }\n            \n            deque.offerLast(i);\n            rollingMaxList.add(numbers.get(deque.peekFirst()));\n        }\n        \n        return rollingMaxList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> numbers = Arrays.asList(1, 2, 3, 2, 3, 4, 2);\n        List<Integer> rollingMaxList = solution.rollingMax(numbers);\n        \n        System.out.println(rollingMaxList);\n    }\n}"}
{"task_id": "Java/9", "generation": "        List<Integer> rollingMaxList = new ArrayList<>();\n        Deque<Integer> deque = new LinkedList<>();\n        \n        for (int i = 0; i < numbers.size(); i++) {\n            // Remove elements that are out of the current window\n            while (!deque.isEmpty() && deque.peekFirst() < i - 2) {\n                deque.pollFirst();\n            }\n            \n            // Remove elements smaller than the current element\n            while (!deque.isEmpty() && numbers.get(deque.peekLast()) < numbers.get(i)) {\n                deque.pollLast();\n            }\n            \n            deque.offerLast(i);\n            rollingMaxList.add(numbers.get(deque.peekFirst()));\n        }\n        \n        return rollingMaxList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> numbers = Arrays.asList(1, 2, 3, 2, 3, 4, 2);\n        List<Integer> rollingMaxList = solution.rollingMax(numbers);\n        \n        System.out.println(rollingMaxList);\n    }\n}"}
{"task_id": "Java/10", "generation": "        if (string == null || string.length() == 0) {\n            return \"\";\n        }\n        \n        int i = 0;\n        int j = string.length() - 1;\n        \n        // Find the longest palindromic suffix\n        while (i < j) {\n            if (string.charAt(i) == string.charAt(j)) {\n                i++;\n                j--;\n            } else {\n                j--;\n            }\n        }\n        \n        // Append the reverse of the prefix before the palindromic suffix\n        StringBuilder sb = new StringBuilder(string);\n        for (int k = j + 1; k < string.length(); k++) {\n            sb.insert(0, string.charAt(k));\n        }\n        \n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.makePalindrome(\"\")); // \"\"\n        System.out.println(solution.makePalindrome(\"cat\")); // \"catac\"\n        System.out.println(solution.makePalindrome(\"cata\")); // \"catac\"\n    }\n}"}
{"task_id": "Java/10", "generation": "        if (string == null || string.length() == 0) {\n            return \"\";\n        }\n        \n        int i = 0;\n        int j = string.length() - 1;\n        \n        // Find the longest palindromic suffix\n        while (i < j) {\n            if (string.charAt(i) == string.charAt(j)) {\n                i++;\n                j--;\n            } else {\n                j--;\n            }\n        }\n        \n        // Append the reverse of the prefix before the palindromic suffix\n        StringBuilder sb = new StringBuilder(string);\n        for (int k = j + 1; k < string.length(); k++) {\n            sb.insert(0, string.charAt(k));\n        }\n        \n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.makePalindrome(\"\")); // \"\"\n        System.out.println(solution.makePalindrome(\"cat\")); // \"catac\"\n        System.out.println(solution.makePalindrome(\"cata\")); // \"catac\"\n    }\n}"}
{"task_id": "Java/10", "generation": "        if (string == null || string.length() == 0) {\n            return \"\";\n        }\n        \n        int i = 0;\n        int j = string.length() - 1;\n        \n        // Find the longest palindromic suffix\n        while (i < j) {\n            if (string.charAt(i) == string.charAt(j)) {\n                i++;\n                j--;\n            } else {\n                j--;\n            }\n        }\n        \n        // Append the reverse of the prefix before the palindromic suffix\n        StringBuilder sb = new StringBuilder(string);\n        for (int k = j + 1; k < string.length(); k++) {\n            sb.insert(0, string.charAt(k));\n        }\n        \n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.makePalindrome(\"\")); // \"\"\n        System.out.println(solution.makePalindrome(\"cat\")); // \"catac\"\n        System.out.println(solution.makePalindrome(\"cata\")); // \"catac\"\n    }\n}"}
{"task_id": "Java/10", "generation": "        if (string == null || string.length() == 0) {\n            return \"\";\n        }\n        \n        int i = 0;\n        int j = string.length() - 1;\n        \n        // Find the longest palindromic suffix\n        while (i < j) {\n            if (string.charAt(i) == string.charAt(j)) {\n                i++;\n                j--;\n            } else {\n                j--;\n            }\n        }\n        \n        // Append the reverse of the prefix before the palindromic suffix\n        StringBuilder sb = new StringBuilder(string);\n        for (int k = j + 1; k < string.length(); k++) {\n            sb.insert(0, string.charAt(k));\n        }\n        \n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.makePalindrome(\"\")); // \"\"\n        System.out.println(solution.makePalindrome(\"cat\")); // \"catac\"\n        System.out.println(solution.makePalindrome(\"cata\")); // \"catac\"\n    }\n}"}
{"task_id": "Java/10", "generation": "        if (string == null || string.length() == 0) {\n            return \"\";\n        }\n        \n        int i = 0;\n        int j = string.length() - 1;\n        \n        // Find the longest palindromic suffix\n        while (i < j) {\n            if (string.charAt(i) == string.charAt(j)) {\n                i++;\n                j--;\n            } else {\n                j--;\n            }\n        }\n        \n        // Append the reverse of the prefix before the palindromic suffix\n        StringBuilder sb = new StringBuilder(string);\n        for (int k = j + 1; k < string.length(); k++) {\n            sb.insert(0, string.charAt(k));\n        }\n        \n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.makePalindrome(\"\")); // \"\"\n        System.out.println(solution.makePalindrome(\"cat\")); // \"catac\"\n        System.out.println(solution.makePalindrome(\"cata\")); // \"catac\"\n    }\n}"}
{"task_id": "Java/11", "generation": "        StringBuilder result = new StringBuilder();\n        \n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) != b.charAt(i)) {\n                result.append(\"1\");\n            } else {\n                result.append(\"0\");\n            }\n        }\n        \n        return result.toString();\n    }\n}"}
{"task_id": "Java/11", "generation": "        StringBuilder result = new StringBuilder();\n        \n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) != b.charAt(i)) {\n                result.append(\"1\");\n            } else {\n                result.append(\"0\");\n            }\n        }\n        \n        return result.toString();\n    }\n}"}
{"task_id": "Java/11", "generation": "        StringBuilder result = new StringBuilder();\n        \n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) != b.charAt(i)) {\n                result.append(\"1\");\n            } else {\n                result.append(\"0\");\n            }\n        }\n        \n        return result.toString();\n    }\n}"}
{"task_id": "Java/11", "generation": "        StringBuilder result = new StringBuilder();\n        \n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) != b.charAt(i)) {\n                result.append(\"1\");\n            } else {\n                result.append(\"0\");\n            }\n        }\n        \n        return result.toString();\n    }\n}"}
{"task_id": "Java/11", "generation": "        StringBuilder result = new StringBuilder();\n        \n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) != b.charAt(i)) {\n                result.append(\"1\");\n            } else {\n                result.append(\"0\");\n            }\n        }\n        \n        return result.toString();\n    }\n}"}
{"task_id": "Java/12", "generation": "        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        String longestString = strings.get(0);\n        for (String str : strings) {\n            if (str.length() > longestString.length()) {\n                longestString = str;\n            }\n        }\n        \n        return Optional.of(longestString);\n    }\n}"}
{"task_id": "Java/12", "generation": "        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        String longestString = strings.get(0);\n        for (String str : strings) {\n            if (str.length() > longestString.length()) {\n                longestString = str;\n            }\n        }\n        \n        return Optional.of(longestString);\n    }\n}"}
{"task_id": "Java/12", "generation": "        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        String longestString = strings.get(0);\n        for (String str : strings) {\n            if (str.length() > longestString.length()) {\n                longestString = str;\n            }\n        }\n        \n        return Optional.of(longestString);\n    }\n}"}
{"task_id": "Java/12", "generation": "        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        String longestString = strings.get(0);\n        for (String str : strings) {\n            if (str.length() > longestString.length()) {\n                longestString = str;\n            }\n        }\n        \n        return Optional.of(longestString);\n    }\n}"}
{"task_id": "Java/12", "generation": "        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        String longestString = strings.get(0);\n        for (String str : strings) {\n            if (str.length() > longestString.length()) {\n                longestString = str;\n            }\n        }\n        \n        return Optional.of(longestString);\n    }\n}"}
{"task_id": "Java/13", "generation": "        if (b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(b, a % b);\n    }\n}"}
{"task_id": "Java/13", "generation": "        if (b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(b, a % b);\n    }\n}"}
{"task_id": "Java/13", "generation": "        if (b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(b, a % b);\n    }\n}"}
{"task_id": "Java/13", "generation": "        if (b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(b, a % b);\n    }\n}"}
{"task_id": "Java/13", "generation": "        if (b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(b, a % b);\n    }\n}"}
{"task_id": "Java/14", "generation": "        List<String> prefixes = new ArrayList<>();\n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        return prefixes;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.allPrefixes(\"abc\"));\n    }\n}"}
{"task_id": "Java/14", "generation": "        List<String> prefixes = new ArrayList<>();\n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        return prefixes;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.allPrefixes(\"abc\"));\n    }\n}"}
{"task_id": "Java/14", "generation": "        List<String> prefixes = new ArrayList<>();\n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        return prefixes;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.allPrefixes(\"abc\"));\n    }\n}"}
{"task_id": "Java/14", "generation": "        List<String> prefixes = new ArrayList<>();\n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        return prefixes;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.allPrefixes(\"abc\"));\n    }\n}"}
{"task_id": "Java/14", "generation": "        List<String> prefixes = new ArrayList<>();\n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        return prefixes;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.allPrefixes(\"abc\"));\n    }\n}"}
{"task_id": "Java/15", "generation": "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.append(i);\n            if (i != n) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.stringSequence(0)); // \"0\"\n        System.out.println(solution.stringSequence(5)); // \"0 1 2 3 4 5\"\n    }\n}"}
{"task_id": "Java/15", "generation": "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.append(i);\n            if (i != n) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.stringSequence(0)); // \"0\"\n        System.out.println(solution.stringSequence(5)); // \"0 1 2 3 4 5\"\n    }\n}"}
{"task_id": "Java/15", "generation": "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.append(i);\n            if (i != n) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.stringSequence(0)); // \"0\"\n        System.out.println(solution.stringSequence(5)); // \"0 1 2 3 4 5\"\n    }\n}"}
{"task_id": "Java/15", "generation": "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.append(i);\n            if (i != n) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.stringSequence(0)); // \"0\"\n        System.out.println(solution.stringSequence(5)); // \"0 1 2 3 4 5\"\n    }\n}"}
{"task_id": "Java/15", "generation": "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.append(i);\n            if (i != n) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.stringSequence(0)); // \"0\"\n        System.out.println(solution.stringSequence(5)); // \"0 1 2 3 4 5\"\n    }\n}"}
{"task_id": "Java/16", "generation": "        // Convert the string to lowercase to ignore case\n        string = string.toLowerCase();\n        \n        // Use a set to store distinct characters\n        Set<Character> distinctChars = new HashSet<>();\n        \n        // Iterate through the string and add each character to the set\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            distinctChars.add(c);\n        }\n        \n        // Return the size of the set, which represents the number of distinct characters\n        return distinctChars.size();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.countDistinctCharacters(\"xyzXYZ\")); // Output: 3\n        System.out.println(solution.countDistinctCharacters(\"Jerry\")); // Output: 4\n    }\n}"}
{"task_id": "Java/16", "generation": "        // Convert the string to lowercase to ignore case\n        string = string.toLowerCase();\n        \n        // Use a set to store distinct characters\n        Set<Character> distinctChars = new HashSet<>();\n        \n        // Iterate through the string and add each character to the set\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            distinctChars.add(c);\n        }\n        \n        // Return the size of the set, which represents the number of distinct characters\n        return distinctChars.size();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.countDistinctCharacters(\"xyzXYZ\")); // Output: 3\n        System.out.println(solution.countDistinctCharacters(\"Jerry\")); // Output: 4\n    }\n}"}
{"task_id": "Java/16", "generation": "        // Convert the string to lowercase to ignore case\n        string = string.toLowerCase();\n        \n        // Use a set to store distinct characters\n        Set<Character> distinctChars = new HashSet<>();\n        \n        // Iterate through the string and add each character to the set\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            distinctChars.add(c);\n        }\n        \n        // Return the size of the set, which represents the number of distinct characters\n        return distinctChars.size();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.countDistinctCharacters(\"xyzXYZ\")); // Output: 3\n        System.out.println(solution.countDistinctCharacters(\"Jerry\")); // Output: 4\n    }\n}"}
{"task_id": "Java/16", "generation": "        // Convert the string to lowercase to ignore case\n        string = string.toLowerCase();\n        \n        // Use a set to store distinct characters\n        Set<Character> distinctChars = new HashSet<>();\n        \n        // Iterate through the string and add each character to the set\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            distinctChars.add(c);\n        }\n        \n        // Return the size of the set, which represents the number of distinct characters\n        return distinctChars.size();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.countDistinctCharacters(\"xyzXYZ\")); // Output: 3\n        System.out.println(solution.countDistinctCharacters(\"Jerry\")); // Output: 4\n    }\n}"}
{"task_id": "Java/16", "generation": "        // Convert the string to lowercase to ignore case\n        string = string.toLowerCase();\n        \n        // Use a set to store distinct characters\n        Set<Character> distinctChars = new HashSet<>();\n        \n        // Iterate through the string and add each character to the set\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            distinctChars.add(c);\n        }\n        \n        // Return the size of the set, which represents the number of distinct characters\n        return distinctChars.size();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.countDistinctCharacters(\"xyzXYZ\")); // Output: 3\n        System.out.println(solution.countDistinctCharacters(\"Jerry\")); // Output: 4\n    }\n}"}
{"task_id": "Java/17", "generation": "        List<Integer> beats = new ArrayList<>();\n        String[] notes = string.split(\" \");\n        \n        for (String note : notes) {\n            if (note.equals(\"o\")) {\n                beats.add(4);\n            } else if (note.equals(\"o|\")) {\n                beats.add(2);\n            } else if (note.equals(\".|\")) {\n                beats.add(1);\n            }\n        }\n        \n        return beats;\n    }\n}"}
{"task_id": "Java/17", "generation": "        List<Integer> beats = new ArrayList<>();\n        String[] notes = string.split(\" \");\n        \n        for (String note : notes) {\n            if (note.equals(\"o\")) {\n                beats.add(4);\n            } else if (note.equals(\"o|\")) {\n                beats.add(2);\n            } else if (note.equals(\".|\")) {\n                beats.add(1);\n            }\n        }\n        \n        return beats;\n    }\n}"}
{"task_id": "Java/17", "generation": "        List<Integer> beats = new ArrayList<>();\n        String[] notes = string.split(\" \");\n        \n        for (String note : notes) {\n            if (note.equals(\"o\")) {\n                beats.add(4);\n            } else if (note.equals(\"o|\")) {\n                beats.add(2);\n            } else if (note.equals(\".|\")) {\n                beats.add(1);\n            }\n        }\n        \n        return beats;\n    }\n}"}
{"task_id": "Java/17", "generation": "        List<Integer> beats = new ArrayList<>();\n        String[] notes = string.split(\" \");\n        \n        for (String note : notes) {\n            if (note.equals(\"o\")) {\n                beats.add(4);\n            } else if (note.equals(\"o|\")) {\n                beats.add(2);\n            } else if (note.equals(\".|\")) {\n                beats.add(1);\n            }\n        }\n        \n        return beats;\n    }\n}"}
{"task_id": "Java/17", "generation": "        List<Integer> beats = new ArrayList<>();\n        String[] notes = string.split(\" \");\n        \n        for (String note : notes) {\n            if (note.equals(\"o\")) {\n                beats.add(4);\n            } else if (note.equals(\"o|\")) {\n                beats.add(2);\n            } else if (note.equals(\".|\")) {\n                beats.add(1);\n            }\n        }\n        \n        return beats;\n    }\n}"}
{"task_id": "Java/18", "generation": "        if (string == null || substring == null || string.isEmpty() || substring.isEmpty()) {\n            return 0;\n        }\n        \n        int count = 0;\n        int index = 0;\n        \n        while (index < string.length()) {\n            index = string.indexOf(substring, index);\n            if (index == -1) {\n                break;\n            }\n            count++;\n            index++;\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.howManyTimes(\"\", \"a\")); // 0\n        System.out.println(solution.howManyTimes(\"aaa\", \"a\")); // 3\n        System.out.println(solution.howManyTimes(\"aaaa\", \"aa\")); // 3\n    }\n}"}
{"task_id": "Java/18", "generation": "        if (string == null || substring == null || string.isEmpty() || substring.isEmpty()) {\n            return 0;\n        }\n        \n        int count = 0;\n        int index = 0;\n        \n        while (index < string.length()) {\n            index = string.indexOf(substring, index);\n            if (index == -1) {\n                break;\n            }\n            count++;\n            index++;\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.howManyTimes(\"\", \"a\")); // 0\n        System.out.println(solution.howManyTimes(\"aaa\", \"a\")); // 3\n        System.out.println(solution.howManyTimes(\"aaaa\", \"aa\")); // 3\n    }\n}"}
{"task_id": "Java/18", "generation": "        if (string == null || substring == null || string.isEmpty() || substring.isEmpty()) {\n            return 0;\n        }\n        \n        int count = 0;\n        int index = 0;\n        \n        while (index < string.length()) {\n            index = string.indexOf(substring, index);\n            if (index == -1) {\n                break;\n            }\n            count++;\n            index++;\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.howManyTimes(\"\", \"a\")); // 0\n        System.out.println(solution.howManyTimes(\"aaa\", \"a\")); // 3\n        System.out.println(solution.howManyTimes(\"aaaa\", \"aa\")); // 3\n    }\n}"}
{"task_id": "Java/18", "generation": "        if (string == null || substring == null || string.isEmpty() || substring.isEmpty()) {\n            return 0;\n        }\n        \n        int count = 0;\n        int index = 0;\n        \n        while (index < string.length()) {\n            index = string.indexOf(substring, index);\n            if (index == -1) {\n                break;\n            }\n            count++;\n            index++;\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.howManyTimes(\"\", \"a\")); // 0\n        System.out.println(solution.howManyTimes(\"aaa\", \"a\")); // 3\n        System.out.println(solution.howManyTimes(\"aaaa\", \"aa\")); // 3\n    }\n}"}
{"task_id": "Java/18", "generation": "        if (string == null || substring == null || string.isEmpty() || substring.isEmpty()) {\n            return 0;\n        }\n        \n        int count = 0;\n        int index = 0;\n        \n        while (index < string.length()) {\n            index = string.indexOf(substring, index);\n            if (index == -1) {\n                break;\n            }\n            count++;\n            index++;\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.howManyTimes(\"\", \"a\")); // 0\n        System.out.println(solution.howManyTimes(\"aaa\", \"a\")); // 3\n        System.out.println(solution.howManyTimes(\"aaaa\", \"aa\")); // 3\n    }\n}"}
{"task_id": "Java/19", "generation": "        // Split the input string by spaces\n        String[] nums = numbers.split(\" \");\n        \n        // Create a map to store the mapping of numberals to numbers\n        Map<String, Integer> map = new HashMap<>();\n        map.put(\"zero\", 0);\n        map.put(\"one\", 1);\n        map.put(\"two\", 2);\n        map.put(\"three\", 3);\n        map.put(\"four\", 4);\n        map.put(\"five\", 5);\n        map.put(\"six\", 6);\n        map.put(\"seven\", 7);\n        map.put(\"eight\", 8);\n        map.put(\"nine\", 9);\n        \n        // Create a list to store the numbers\n        List<Integer> numList = new ArrayList<>();\n        \n        // Convert numberals to numbers and add them to the list\n        for (String num : nums) {\n            numList.add(map.get(num));\n        }\n        \n        // Sort the numbers\n        Collections.sort(numList);\n        \n        // Create a string to store the sorted numberals\n        StringBuilder sb = new StringBuilder();\n        \n        // Convert numbers back to numberals and append them to the string\n        for (int num : numList) {\n            for (Map.Entry<String, Integer> entry : map.entrySet()) {\n                if (entry.getValue() == num) {\n                    sb.append(entry.getKey()).append(\" \");\n                    break;\n                }\n            }\n        }\n        \n        // Remove the trailing space and return the string\n        return sb.toString().trim();\n    }\n}"}
{"task_id": "Java/19", "generation": "        // Split the input string by spaces\n        String[] nums = numbers.split(\" \");\n        \n        // Create a map to store the mapping of numberals to numbers\n        Map<String, Integer> map = new HashMap<>();\n        map.put(\"zero\", 0);\n        map.put(\"one\", 1);\n        map.put(\"two\", 2);\n        map.put(\"three\", 3);\n        map.put(\"four\", 4);\n        map.put(\"five\", 5);\n        map.put(\"six\", 6);\n        map.put(\"seven\", 7);\n        map.put(\"eight\", 8);\n        map.put(\"nine\", 9);\n        \n        // Create a list to store the numbers\n        List<Integer> numList = new ArrayList<>();\n        \n        // Convert numberals to numbers and add them to the list\n        for (String num : nums) {\n            numList.add(map.get(num));\n        }\n        \n        // Sort the numbers\n        Collections.sort(numList);\n        \n        // Create a string to store the sorted numberals\n        StringBuilder sb = new StringBuilder();\n        \n        // Convert numbers back to numberals and append them to the string\n        for (int num : numList) {\n            for (Map.Entry<String, Integer> entry : map.entrySet()) {\n                if (entry.getValue() == num) {\n                    sb.append(entry.getKey()).append(\" \");\n                    break;\n                }\n            }\n        }\n        \n        // Remove the trailing space and return the string\n        return sb.toString().trim();\n    }\n}"}
{"task_id": "Java/19", "generation": "        // Split the input string by spaces\n        String[] nums = numbers.split(\" \");\n        \n        // Create a map to store the mapping of numberals to numbers\n        Map<String, Integer> map = new HashMap<>();\n        map.put(\"zero\", 0);\n        map.put(\"one\", 1);\n        map.put(\"two\", 2);\n        map.put(\"three\", 3);\n        map.put(\"four\", 4);\n        map.put(\"five\", 5);\n        map.put(\"six\", 6);\n        map.put(\"seven\", 7);\n        map.put(\"eight\", 8);\n        map.put(\"nine\", 9);\n        \n        // Create a list to store the numbers\n        List<Integer> numList = new ArrayList<>();\n        \n        // Convert numberals to numbers and add them to the list\n        for (String num : nums) {\n            numList.add(map.get(num));\n        }\n        \n        // Sort the numbers\n        Collections.sort(numList);\n        \n        // Create a string to store the sorted numberals\n        StringBuilder sb = new StringBuilder();\n        \n        // Convert numbers back to numberals and append them to the string\n        for (int num : numList) {\n            for (Map.Entry<String, Integer> entry : map.entrySet()) {\n                if (entry.getValue() == num) {\n                    sb.append(entry.getKey()).append(\" \");\n                    break;\n                }\n            }\n        }\n        \n        // Remove the trailing space and return the string\n        return sb.toString().trim();\n    }\n}"}
{"task_id": "Java/19", "generation": "        // Split the input string by spaces\n        String[] nums = numbers.split(\" \");\n        \n        // Create a map to store the mapping of numberals to numbers\n        Map<String, Integer> map = new HashMap<>();\n        map.put(\"zero\", 0);\n        map.put(\"one\", 1);\n        map.put(\"two\", 2);\n        map.put(\"three\", 3);\n        map.put(\"four\", 4);\n        map.put(\"five\", 5);\n        map.put(\"six\", 6);\n        map.put(\"seven\", 7);\n        map.put(\"eight\", 8);\n        map.put(\"nine\", 9);\n        \n        // Create a list to store the numbers\n        List<Integer> numList = new ArrayList<>();\n        \n        // Convert numberals to numbers and add them to the list\n        for (String num : nums) {\n            numList.add(map.get(num));\n        }\n        \n        // Sort the numbers\n        Collections.sort(numList);\n        \n        // Create a string to store the sorted numberals\n        StringBuilder sb = new StringBuilder();\n        \n        // Convert numbers back to numberals and append them to the string\n        for (int num : numList) {\n            for (Map.Entry<String, Integer> entry : map.entrySet()) {\n                if (entry.getValue() == num) {\n                    sb.append(entry.getKey()).append(\" \");\n                    break;\n                }\n            }\n        }\n        \n        // Remove the trailing space and return the string\n        return sb.toString().trim();\n    }\n}"}
{"task_id": "Java/19", "generation": "        // Split the input string by spaces\n        String[] nums = numbers.split(\" \");\n        \n        // Create a map to store the mapping of numberals to numbers\n        Map<String, Integer> map = new HashMap<>();\n        map.put(\"zero\", 0);\n        map.put(\"one\", 1);\n        map.put(\"two\", 2);\n        map.put(\"three\", 3);\n        map.put(\"four\", 4);\n        map.put(\"five\", 5);\n        map.put(\"six\", 6);\n        map.put(\"seven\", 7);\n        map.put(\"eight\", 8);\n        map.put(\"nine\", 9);\n        \n        // Create a list to store the numbers\n        List<Integer> numList = new ArrayList<>();\n        \n        // Convert numberals to numbers and add them to the list\n        for (String num : nums) {\n            numList.add(map.get(num));\n        }\n        \n        // Sort the numbers\n        Collections.sort(numList);\n        \n        // Create a string to store the sorted numberals\n        StringBuilder sb = new StringBuilder();\n        \n        // Convert numbers back to numberals and append them to the string\n        for (int num : numList) {\n            for (Map.Entry<String, Integer> entry : map.entrySet()) {\n                if (entry.getValue() == num) {\n                    sb.append(entry.getKey()).append(\" \");\n                    break;\n                }\n            }\n        }\n        \n        // Remove the trailing space and return the string\n        return sb.toString().trim();\n    }\n}"}
{"task_id": "Java/20", "generation": "        Collections.sort(numbers);\n        double minDiff = Double.MAX_VALUE;\n        List<Double> result = new ArrayList<>();\n\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = Math.abs(numbers.get(i) - numbers.get(i + 1));\n            if (diff < minDiff) {\n                minDiff = diff;\n                result.clear();\n                result.add(numbers.get(i));\n                result.add(numbers.get(i + 1));\n            } else if (diff == minDiff) {\n                result.add(numbers.get(i));\n                result.add(numbers.get(i + 1));\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)));\n        System.out.println(solution.findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)));\n    }\n}"}
{"task_id": "Java/20", "generation": "        Collections.sort(numbers);\n        double minDiff = Double.MAX_VALUE;\n        List<Double> result = new ArrayList<>();\n\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = Math.abs(numbers.get(i) - numbers.get(i + 1));\n            if (diff < minDiff) {\n                minDiff = diff;\n                result.clear();\n                result.add(numbers.get(i));\n                result.add(numbers.get(i + 1));\n            } else if (diff == minDiff) {\n                result.add(numbers.get(i));\n                result.add(numbers.get(i + 1));\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)));\n        System.out.println(solution.findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)));\n    }\n}"}
{"task_id": "Java/20", "generation": "        Collections.sort(numbers);\n        double minDiff = Double.MAX_VALUE;\n        List<Double> result = new ArrayList<>();\n\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = Math.abs(numbers.get(i) - numbers.get(i + 1));\n            if (diff < minDiff) {\n                minDiff = diff;\n                result.clear();\n                result.add(numbers.get(i));\n                result.add(numbers.get(i + 1));\n            } else if (diff == minDiff) {\n                result.add(numbers.get(i));\n                result.add(numbers.get(i + 1));\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)));\n        System.out.println(solution.findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)));\n    }\n}"}
{"task_id": "Java/20", "generation": "        Collections.sort(numbers);\n        double minDiff = Double.MAX_VALUE;\n        List<Double> result = new ArrayList<>();\n\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = Math.abs(numbers.get(i) - numbers.get(i + 1));\n            if (diff < minDiff) {\n                minDiff = diff;\n                result.clear();\n                result.add(numbers.get(i));\n                result.add(numbers.get(i + 1));\n            } else if (diff == minDiff) {\n                result.add(numbers.get(i));\n                result.add(numbers.get(i + 1));\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)));\n        System.out.println(solution.findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)));\n    }\n}"}
{"task_id": "Java/20", "generation": "        Collections.sort(numbers);\n        double minDiff = Double.MAX_VALUE;\n        List<Double> result = new ArrayList<>();\n\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = Math.abs(numbers.get(i) - numbers.get(i + 1));\n            if (diff < minDiff) {\n                minDiff = diff;\n                result.clear();\n                result.add(numbers.get(i));\n                result.add(numbers.get(i + 1));\n            } else if (diff == minDiff) {\n                result.add(numbers.get(i));\n                result.add(numbers.get(i + 1));\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)));\n        System.out.println(solution.findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)));\n    }\n}"}
{"task_id": "Java/21", "generation": "        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        \n        List<Double> rescaled = new ArrayList<>();\n        \n        for (double num : numbers) {\n            double rescaledNum = (num - min) / (max - min);\n            rescaled.add(rescaledNum);\n        }\n        \n        return rescaled;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Double> numbers = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0);\n        List<Double> rescaledNumbers = solution.rescaleToUnit(numbers);\n        \n        System.out.println(rescaledNumbers);\n    }\n}"}
{"task_id": "Java/21", "generation": "        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        \n        List<Double> rescaled = new ArrayList<>();\n        \n        for (double num : numbers) {\n            double rescaledNum = (num - min) / (max - min);\n            rescaled.add(rescaledNum);\n        }\n        \n        return rescaled;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Double> numbers = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0);\n        List<Double> rescaledNumbers = solution.rescaleToUnit(numbers);\n        \n        System.out.println(rescaledNumbers);\n    }\n}"}
{"task_id": "Java/21", "generation": "        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        \n        List<Double> rescaled = new ArrayList<>();\n        \n        for (double num : numbers) {\n            double rescaledNum = (num - min) / (max - min);\n            rescaled.add(rescaledNum);\n        }\n        \n        return rescaled;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Double> numbers = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0);\n        List<Double> rescaledNumbers = solution.rescaleToUnit(numbers);\n        \n        System.out.println(rescaledNumbers);\n    }\n}"}
{"task_id": "Java/21", "generation": "        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        \n        List<Double> rescaled = new ArrayList<>();\n        \n        for (double num : numbers) {\n            double rescaledNum = (num - min) / (max - min);\n            rescaled.add(rescaledNum);\n        }\n        \n        return rescaled;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Double> numbers = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0);\n        List<Double> rescaledNumbers = solution.rescaleToUnit(numbers);\n        \n        System.out.println(rescaledNumbers);\n    }\n}"}
{"task_id": "Java/21", "generation": "        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        \n        List<Double> rescaled = new ArrayList<>();\n        \n        for (double num : numbers) {\n            double rescaledNum = (num - min) / (max - min);\n            rescaled.add(rescaledNum);\n        }\n        \n        return rescaled;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Double> numbers = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0);\n        List<Double> rescaledNumbers = solution.rescaleToUnit(numbers);\n        \n        System.out.println(rescaledNumbers);\n    }\n}"}
{"task_id": "Java/22", "generation": "        List<Integer> integers = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                integers.add((Integer) value);\n            }\n        }\n        return integers;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Object> test1 = Arrays.asList('a', 3.14, 5);\n        List<Object> test2 = Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of());\n\n        System.out.println(solution.filterIntergers(test1));\n        System.out.println(solution.filterIntergers(test2));\n    }\n}"}
{"task_id": "Java/22", "generation": "        List<Integer> integers = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                integers.add((Integer) value);\n            }\n        }\n        return integers;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Object> test1 = Arrays.asList('a', 3.14, 5);\n        List<Object> test2 = Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of());\n\n        System.out.println(solution.filterIntergers(test1));\n        System.out.println(solution.filterIntergers(test2));\n    }\n}"}
{"task_id": "Java/22", "generation": "        List<Integer> integers = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                integers.add((Integer) value);\n            }\n        }\n        return integers;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Object> test1 = Arrays.asList('a', 3.14, 5);\n        List<Object> test2 = Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of());\n\n        System.out.println(solution.filterIntergers(test1));\n        System.out.println(solution.filterIntergers(test2));\n    }\n}"}
{"task_id": "Java/22", "generation": "        List<Integer> integers = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                integers.add((Integer) value);\n            }\n        }\n        return integers;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Object> test1 = Arrays.asList('a', 3.14, 5);\n        List<Object> test2 = Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of());\n\n        System.out.println(solution.filterIntergers(test1));\n        System.out.println(solution.filterIntergers(test2));\n    }\n}"}
{"task_id": "Java/22", "generation": "        List<Integer> integers = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                integers.add((Integer) value);\n            }\n        }\n        return integers;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Object> test1 = Arrays.asList('a', 3.14, 5);\n        List<Object> test2 = Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of());\n\n        System.out.println(solution.filterIntergers(test1));\n        System.out.println(solution.filterIntergers(test2));\n    }\n}"}
{"task_id": "Java/23", "generation": "        return string.length();\n    }\n\n    /**\n    Reverse the given string\n    >>> reverseString(\"hello\")\n    \"olleh\"\n    >>> reverseString(\"abc123\")\n    \"321cba\"\n     */\n    public String reverseString(String string) {\n        StringBuilder reversed = new StringBuilder();\n        for (int i = string.length() - 1; i >= 0; i--) {\n            reversed.append(string.charAt(i));\n        }\n        return reversed.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases for strlen\n        System.out.println(solution.strlen(\"\")); // 0\n        System.out.println(solution.strlen(\"abc\")); // 3\n\n        // Test cases for reverseString\n        System.out.println(solution.reverseString(\"hello\")); // \"olleh\"\n        System.out.println(solution.reverseString(\"abc123\")); // \"321cba\"\n    }\n}"}
{"task_id": "Java/23", "generation": "        return string.length();\n    }\n\n    /**\n    Reverse the given string\n    >>> reverseString(\"hello\")\n    \"olleh\"\n    >>> reverseString(\"abc123\")\n    \"321cba\"\n     */\n    public String reverseString(String string) {\n        StringBuilder reversed = new StringBuilder();\n        for (int i = string.length() - 1; i >= 0; i--) {\n            reversed.append(string.charAt(i));\n        }\n        return reversed.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases for strlen\n        System.out.println(solution.strlen(\"\")); // 0\n        System.out.println(solution.strlen(\"abc\")); // 3\n\n        // Test cases for reverseString\n        System.out.println(solution.reverseString(\"hello\")); // \"olleh\"\n        System.out.println(solution.reverseString(\"abc123\")); // \"321cba\"\n    }\n}"}
{"task_id": "Java/23", "generation": "        return string.length();\n    }\n\n    /**\n    Reverse the given string\n    >>> reverseString(\"hello\")\n    \"olleh\"\n    >>> reverseString(\"abc123\")\n    \"321cba\"\n     */\n    public String reverseString(String string) {\n        StringBuilder reversed = new StringBuilder();\n        for (int i = string.length() - 1; i >= 0; i--) {\n            reversed.append(string.charAt(i));\n        }\n        return reversed.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases for strlen\n        System.out.println(solution.strlen(\"\")); // 0\n        System.out.println(solution.strlen(\"abc\")); // 3\n\n        // Test cases for reverseString\n        System.out.println(solution.reverseString(\"hello\")); // \"olleh\"\n        System.out.println(solution.reverseString(\"abc123\")); // \"321cba\"\n    }\n}"}
{"task_id": "Java/23", "generation": "        return string.length();\n    }\n\n    /**\n    Reverse the given string\n    >>> reverseString(\"hello\")\n    \"olleh\"\n    >>> reverseString(\"abc123\")\n    \"321cba\"\n     */\n    public String reverseString(String string) {\n        StringBuilder reversed = new StringBuilder();\n        for (int i = string.length() - 1; i >= 0; i--) {\n            reversed.append(string.charAt(i));\n        }\n        return reversed.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases for strlen\n        System.out.println(solution.strlen(\"\")); // 0\n        System.out.println(solution.strlen(\"abc\")); // 3\n\n        // Test cases for reverseString\n        System.out.println(solution.reverseString(\"hello\")); // \"olleh\"\n        System.out.println(solution.reverseString(\"abc123\")); // \"321cba\"\n    }\n}"}
{"task_id": "Java/23", "generation": "        return string.length();\n    }\n\n    /**\n    Reverse the given string\n    >>> reverseString(\"hello\")\n    \"olleh\"\n    >>> reverseString(\"abc123\")\n    \"321cba\"\n     */\n    public String reverseString(String string) {\n        StringBuilder reversed = new StringBuilder();\n        for (int i = string.length() - 1; i >= 0; i--) {\n            reversed.append(string.charAt(i));\n        }\n        return reversed.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases for strlen\n        System.out.println(solution.strlen(\"\")); // 0\n        System.out.println(solution.strlen(\"abc\")); // 3\n\n        // Test cases for reverseString\n        System.out.println(solution.reverseString(\"hello\")); // \"olleh\"\n        System.out.println(solution.reverseString(\"abc123\")); // \"321cba\"\n    }\n}"}
{"task_id": "Java/24", "generation": "        for (int i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return -1; // If no divisor found\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.print(\"Enter a number: \");\n        int n = scanner.nextInt();\n\n        int result = solution.largestDivisor(n);\n        System.out.println(\"Largest divisor of \" + n + \" is: \" + result);\n    }\n}"}
{"task_id": "Java/24", "generation": "        for (int i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return -1; // If no divisor found\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.print(\"Enter a number: \");\n        int n = scanner.nextInt();\n\n        int result = solution.largestDivisor(n);\n        System.out.println(\"Largest divisor of \" + n + \" is: \" + result);\n    }\n}"}
{"task_id": "Java/24", "generation": "        for (int i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return -1; // If no divisor found\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.print(\"Enter a number: \");\n        int n = scanner.nextInt();\n\n        int result = solution.largestDivisor(n);\n        System.out.println(\"Largest divisor of \" + n + \" is: \" + result);\n    }\n}"}
{"task_id": "Java/24", "generation": "        for (int i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return -1; // If no divisor found\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.print(\"Enter a number: \");\n        int n = scanner.nextInt();\n\n        int result = solution.largestDivisor(n);\n        System.out.println(\"Largest divisor of \" + n + \" is: \" + result);\n    }\n}"}
{"task_id": "Java/24", "generation": "        for (int i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return -1; // If no divisor found\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.print(\"Enter a number: \");\n        int n = scanner.nextInt();\n\n        int result = solution.largestDivisor(n);\n        System.out.println(\"Largest divisor of \" + n + \" is: \" + result);\n    }\n}"}
{"task_id": "Java/25", "generation": "        List<Integer> factors = new ArrayList<>();\n        \n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        \n        return factors;\n    }\n}"}
{"task_id": "Java/25", "generation": "        List<Integer> factors = new ArrayList<>();\n        \n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        \n        return factors;\n    }\n}"}
{"task_id": "Java/25", "generation": "        List<Integer> factors = new ArrayList<>();\n        \n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        \n        return factors;\n    }\n}"}
{"task_id": "Java/25", "generation": "        List<Integer> factors = new ArrayList<>();\n        \n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        \n        return factors;\n    }\n}"}
{"task_id": "Java/25", "generation": "        List<Integer> factors = new ArrayList<>();\n        \n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        \n        return factors;\n    }\n}"}
{"task_id": "Java/26", "generation": "        Set<Integer> set = new HashSet<>();\n        List<Integer> result = new ArrayList<>();\n\n        for (Integer num : numbers) {\n            if (!set.contains(num)) {\n                result.add(num);\n                set.add(num);\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 2, 4);\n        List<Integer> result = solution.removeDuplicates(numbers);\n\n        System.out.println(result);\n    }\n}"}
{"task_id": "Java/26", "generation": "        Set<Integer> set = new HashSet<>();\n        List<Integer> result = new ArrayList<>();\n\n        for (Integer num : numbers) {\n            if (!set.contains(num)) {\n                result.add(num);\n                set.add(num);\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 2, 4);\n        List<Integer> result = solution.removeDuplicates(numbers);\n\n        System.out.println(result);\n    }\n}"}
{"task_id": "Java/26", "generation": "        Set<Integer> set = new HashSet<>();\n        List<Integer> result = new ArrayList<>();\n\n        for (Integer num : numbers) {\n            if (!set.contains(num)) {\n                result.add(num);\n                set.add(num);\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 2, 4);\n        List<Integer> result = solution.removeDuplicates(numbers);\n\n        System.out.println(result);\n    }\n}"}
{"task_id": "Java/26", "generation": "        Set<Integer> set = new HashSet<>();\n        List<Integer> result = new ArrayList<>();\n\n        for (Integer num : numbers) {\n            if (!set.contains(num)) {\n                result.add(num);\n                set.add(num);\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 2, 4);\n        List<Integer> result = solution.removeDuplicates(numbers);\n\n        System.out.println(result);\n    }\n}"}
{"task_id": "Java/26", "generation": "        Set<Integer> set = new HashSet<>();\n        List<Integer> result = new ArrayList<>();\n\n        for (Integer num : numbers) {\n            if (!set.contains(num)) {\n                result.add(num);\n                set.add(num);\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 2, 4);\n        List<Integer> result = solution.removeDuplicates(numbers);\n\n        System.out.println(result);\n    }\n}"}
{"task_id": "Java/27", "generation": "        char[] chars = string.toCharArray();\n        \n        for (int i = 0; i < chars.length; i++) {\n            char c = chars[i];\n            if (Character.isLowerCase(c)) {\n                chars[i] = Character.toUpperCase(c);\n            } else if (Character.isUpperCase(c)) {\n                chars[i] = Character.toLowerCase(c);\n            }\n        }\n        \n        return new String(chars);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the flipCase method\n        System.out.println(solution.flipCase(\"Hello\")); // Output: \"hELLO\"\n        System.out.println(solution.flipCase(\"WORLD\")); // Output: \"world\"\n        System.out.println(solution.flipCase(\"HeLLo WoRLd\")); // Output: \"hEllO wOrlD\"\n    }\n}"}
{"task_id": "Java/27", "generation": "        char[] chars = string.toCharArray();\n        \n        for (int i = 0; i < chars.length; i++) {\n            char c = chars[i];\n            if (Character.isLowerCase(c)) {\n                chars[i] = Character.toUpperCase(c);\n            } else if (Character.isUpperCase(c)) {\n                chars[i] = Character.toLowerCase(c);\n            }\n        }\n        \n        return new String(chars);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the flipCase method\n        System.out.println(solution.flipCase(\"Hello\")); // Output: \"hELLO\"\n        System.out.println(solution.flipCase(\"WORLD\")); // Output: \"world\"\n        System.out.println(solution.flipCase(\"HeLLo WoRLd\")); // Output: \"hEllO wOrlD\"\n    }\n}"}
{"task_id": "Java/27", "generation": "        char[] chars = string.toCharArray();\n        \n        for (int i = 0; i < chars.length; i++) {\n            char c = chars[i];\n            if (Character.isLowerCase(c)) {\n                chars[i] = Character.toUpperCase(c);\n            } else if (Character.isUpperCase(c)) {\n                chars[i] = Character.toLowerCase(c);\n            }\n        }\n        \n        return new String(chars);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the flipCase method\n        System.out.println(solution.flipCase(\"Hello\")); // Output: \"hELLO\"\n        System.out.println(solution.flipCase(\"WORLD\")); // Output: \"world\"\n        System.out.println(solution.flipCase(\"HeLLo WoRLd\")); // Output: \"hEllO wOrlD\"\n    }\n}"}
{"task_id": "Java/27", "generation": "        char[] chars = string.toCharArray();\n        \n        for (int i = 0; i < chars.length; i++) {\n            char c = chars[i];\n            if (Character.isLowerCase(c)) {\n                chars[i] = Character.toUpperCase(c);\n            } else if (Character.isUpperCase(c)) {\n                chars[i] = Character.toLowerCase(c);\n            }\n        }\n        \n        return new String(chars);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the flipCase method\n        System.out.println(solution.flipCase(\"Hello\")); // Output: \"hELLO\"\n        System.out.println(solution.flipCase(\"WORLD\")); // Output: \"world\"\n        System.out.println(solution.flipCase(\"HeLLo WoRLd\")); // Output: \"hEllO wOrlD\"\n    }\n}"}
{"task_id": "Java/27", "generation": "        char[] chars = string.toCharArray();\n        \n        for (int i = 0; i < chars.length; i++) {\n            char c = chars[i];\n            if (Character.isLowerCase(c)) {\n                chars[i] = Character.toUpperCase(c);\n            } else if (Character.isUpperCase(c)) {\n                chars[i] = Character.toLowerCase(c);\n            }\n        }\n        \n        return new String(chars);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the flipCase method\n        System.out.println(solution.flipCase(\"Hello\")); // Output: \"hELLO\"\n        System.out.println(solution.flipCase(\"WORLD\")); // Output: \"world\"\n        System.out.println(solution.flipCase(\"HeLLo WoRLd\")); // Output: \"hEllO wOrlD\"\n    }\n}"}
{"task_id": "Java/28", "generation": "        StringBuilder sb = new StringBuilder();\n        for (String str : strings) {\n            sb.append(str);\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.concatenate(List.of())); // \"\"\n        System.out.println(solution.concatenate(Arrays.asList(\"a\", \"b\", \"c\"))); // \"abc\"\n    }\n}"}
{"task_id": "Java/28", "generation": "        StringBuilder sb = new StringBuilder();\n        for (String str : strings) {\n            sb.append(str);\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.concatenate(List.of())); // \"\"\n        System.out.println(solution.concatenate(Arrays.asList(\"a\", \"b\", \"c\"))); // \"abc\"\n    }\n}"}
{"task_id": "Java/28", "generation": "        StringBuilder sb = new StringBuilder();\n        for (String str : strings) {\n            sb.append(str);\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.concatenate(List.of())); // \"\"\n        System.out.println(solution.concatenate(Arrays.asList(\"a\", \"b\", \"c\"))); // \"abc\"\n    }\n}"}
{"task_id": "Java/28", "generation": "        StringBuilder sb = new StringBuilder();\n        for (String str : strings) {\n            sb.append(str);\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.concatenate(List.of())); // \"\"\n        System.out.println(solution.concatenate(Arrays.asList(\"a\", \"b\", \"c\"))); // \"abc\"\n    }\n}"}
{"task_id": "Java/28", "generation": "        StringBuilder sb = new StringBuilder();\n        for (String str : strings) {\n            sb.append(str);\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.concatenate(List.of())); // \"\"\n        System.out.println(solution.concatenate(Arrays.asList(\"a\", \"b\", \"c\"))); // \"abc\"\n    }\n}"}
{"task_id": "Java/29", "generation": "        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.filterByPrefix(List.of(), \"a\")); // []\n        System.out.println(solution.filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")); // [\"abc\", \"array\"]\n    }\n}"}
{"task_id": "Java/29", "generation": "        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.filterByPrefix(List.of(), \"a\")); // []\n        System.out.println(solution.filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")); // [\"abc\", \"array\"]\n    }\n}"}
{"task_id": "Java/29", "generation": "        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.filterByPrefix(List.of(), \"a\")); // []\n        System.out.println(solution.filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")); // [\"abc\", \"array\"]\n    }\n}"}
{"task_id": "Java/29", "generation": "        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.filterByPrefix(List.of(), \"a\")); // []\n        System.out.println(solution.filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")); // [\"abc\", \"array\"]\n    }\n}"}
{"task_id": "Java/29", "generation": "        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.filterByPrefix(List.of(), \"a\")); // []\n        System.out.println(solution.filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")); // [\"abc\", \"array\"]\n    }\n}"}
{"task_id": "Java/30", "generation": "        return l.stream()\n                .filter(num -> num > 0)\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> test1 = Arrays.asList(-1, 2, -4, 5, 6);\n        List<Integer> test2 = Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\n\n        System.out.println(solution.getPositive(test1)); // [2, 5, 6]\n        System.out.println(solution.getPositive(test2)); // [5, 3, 2, 3, 9, 123, 1]\n    }\n}"}
{"task_id": "Java/30", "generation": "        return l.stream()\n                .filter(num -> num > 0)\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> test1 = Arrays.asList(-1, 2, -4, 5, 6);\n        List<Integer> test2 = Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\n\n        System.out.println(solution.getPositive(test1)); // [2, 5, 6]\n        System.out.println(solution.getPositive(test2)); // [5, 3, 2, 3, 9, 123, 1]\n    }\n}"}
{"task_id": "Java/30", "generation": "        return l.stream()\n                .filter(num -> num > 0)\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> test1 = Arrays.asList(-1, 2, -4, 5, 6);\n        List<Integer> test2 = Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\n\n        System.out.println(solution.getPositive(test1)); // [2, 5, 6]\n        System.out.println(solution.getPositive(test2)); // [5, 3, 2, 3, 9, 123, 1]\n    }\n}"}
{"task_id": "Java/30", "generation": "        return l.stream()\n                .filter(num -> num > 0)\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> test1 = Arrays.asList(-1, 2, -4, 5, 6);\n        List<Integer> test2 = Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\n\n        System.out.println(solution.getPositive(test1)); // [2, 5, 6]\n        System.out.println(solution.getPositive(test2)); // [5, 3, 2, 3, 9, 123, 1]\n    }\n}"}
{"task_id": "Java/30", "generation": "        return l.stream()\n                .filter(num -> num > 0)\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> test1 = Arrays.asList(-1, 2, -4, 5, 6);\n        List<Integer> test2 = Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\n\n        System.out.println(solution.getPositive(test1)); // [2, 5, 6]\n        System.out.println(solution.getPositive(test2)); // [5, 3, 2, 3, 9, 123, 1]\n    }\n}"}
{"task_id": "Java/31", "generation": "        if (n <= 1) {\n            return false;\n        }\n        if (n <= 3) {\n            return true;\n        }\n        if (n % 2 == 0 || n % 3 == 0) {\n            return false;\n        }\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.isPrime(6)); // false\n        System.out.println(solution.isPrime(101)); // true\n        System.out.println(solution.isPrime(11)); // true\n        System.out.println(solution.isPrime(13441)); // true\n        System.out.println(solution.isPrime(61)); // true\n        System.out.println(solution.isPrime(4)); // false\n        System.out.println(solution.isPrime(1)); // false\n    }\n}"}
{"task_id": "Java/31", "generation": "        if (n <= 1) {\n            return false;\n        }\n        if (n <= 3) {\n            return true;\n        }\n        if (n % 2 == 0 || n % 3 == 0) {\n            return false;\n        }\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.isPrime(6)); // false\n        System.out.println(solution.isPrime(101)); // true\n        System.out.println(solution.isPrime(11)); // true\n        System.out.println(solution.isPrime(13441)); // true\n        System.out.println(solution.isPrime(61)); // true\n        System.out.println(solution.isPrime(4)); // false\n        System.out.println(solution.isPrime(1)); // false\n    }\n}"}
{"task_id": "Java/31", "generation": "        if (n <= 1) {\n            return false;\n        }\n        if (n <= 3) {\n            return true;\n        }\n        if (n % 2 == 0 || n % 3 == 0) {\n            return false;\n        }\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.isPrime(6)); // false\n        System.out.println(solution.isPrime(101)); // true\n        System.out.println(solution.isPrime(11)); // true\n        System.out.println(solution.isPrime(13441)); // true\n        System.out.println(solution.isPrime(61)); // true\n        System.out.println(solution.isPrime(4)); // false\n        System.out.println(solution.isPrime(1)); // false\n    }\n}"}
{"task_id": "Java/31", "generation": "        if (n <= 1) {\n            return false;\n        }\n        if (n <= 3) {\n            return true;\n        }\n        if (n % 2 == 0 || n % 3 == 0) {\n            return false;\n        }\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.isPrime(6)); // false\n        System.out.println(solution.isPrime(101)); // true\n        System.out.println(solution.isPrime(11)); // true\n        System.out.println(solution.isPrime(13441)); // true\n        System.out.println(solution.isPrime(61)); // true\n        System.out.println(solution.isPrime(4)); // false\n        System.out.println(solution.isPrime(1)); // false\n    }\n}"}
{"task_id": "Java/31", "generation": "        if (n <= 1) {\n            return false;\n        }\n        if (n <= 3) {\n            return true;\n        }\n        if (n % 2 == 0 || n % 3 == 0) {\n            return false;\n        }\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.isPrime(6)); // false\n        System.out.println(solution.isPrime(101)); // true\n        System.out.println(solution.isPrime(11)); // true\n        System.out.println(solution.isPrime(13441)); // true\n        System.out.println(solution.isPrime(61)); // true\n        System.out.println(solution.isPrime(4)); // false\n        System.out.println(solution.isPrime(1)); // false\n    }\n}"}
{"task_id": "Java/32", "generation": "        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"Number of coefficients must be even\");\n        }\n        \n        double maxNonZeroCoefficient = 0;\n        for (double coeff : xs) {\n            if (coeff != 0 && Math.abs(coeff) > Math.abs(maxNonZeroCoefficient)) {\n                maxNonZeroCoefficient = coeff;\n            }\n        }\n        \n        List<Double> normalizedCoeffs = new ArrayList<>();\n        for (double coeff : xs) {\n            normalizedCoeffs.add(coeff / maxNonZeroCoefficient);\n        }\n        \n        double epsilon = 1e-6;\n        double x = 1.0;\n        double step = 0.1;\n        \n        while (Math.abs(poly(normalizedCoeffs, x)) > epsilon) {\n            x += step;\n        }\n        \n        return x;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.findZero(Arrays.asList(1.0, 2.0))); // Expected output: -0.5\n        System.out.println(solution.findZero(Arrays.asList(-6.0, 11.0, -6.0, 1.0))); // Expected output: 1.0\n    }\n}"}
{"task_id": "Java/32", "generation": "        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"Number of coefficients must be even\");\n        }\n        \n        double maxNonZeroCoefficient = 0;\n        for (double coeff : xs) {\n            if (coeff != 0 && Math.abs(coeff) > Math.abs(maxNonZeroCoefficient)) {\n                maxNonZeroCoefficient = coeff;\n            }\n        }\n        \n        List<Double> normalizedCoeffs = new ArrayList<>();\n        for (double coeff : xs) {\n            normalizedCoeffs.add(coeff / maxNonZeroCoefficient);\n        }\n        \n        double epsilon = 1e-6;\n        double x = 1.0;\n        double step = 0.1;\n        \n        while (Math.abs(poly(normalizedCoeffs, x)) > epsilon) {\n            x += step;\n        }\n        \n        return x;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.findZero(Arrays.asList(1.0, 2.0))); // Expected output: -0.5\n        System.out.println(solution.findZero(Arrays.asList(-6.0, 11.0, -6.0, 1.0))); // Expected output: 1.0\n    }\n}"}
{"task_id": "Java/32", "generation": "        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"Number of coefficients must be even\");\n        }\n        \n        double maxNonZeroCoefficient = 0;\n        for (double coeff : xs) {\n            if (coeff != 0 && Math.abs(coeff) > Math.abs(maxNonZeroCoefficient)) {\n                maxNonZeroCoefficient = coeff;\n            }\n        }\n        \n        List<Double> normalizedCoeffs = new ArrayList<>();\n        for (double coeff : xs) {\n            normalizedCoeffs.add(coeff / maxNonZeroCoefficient);\n        }\n        \n        double epsilon = 1e-6;\n        double x = 1.0;\n        double step = 0.1;\n        \n        while (Math.abs(poly(normalizedCoeffs, x)) > epsilon) {\n            x += step;\n        }\n        \n        return x;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.findZero(Arrays.asList(1.0, 2.0))); // Expected output: -0.5\n        System.out.println(solution.findZero(Arrays.asList(-6.0, 11.0, -6.0, 1.0))); // Expected output: 1.0\n    }\n}"}
{"task_id": "Java/32", "generation": "        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"Number of coefficients must be even\");\n        }\n        \n        double maxNonZeroCoefficient = 0;\n        for (double coeff : xs) {\n            if (coeff != 0 && Math.abs(coeff) > Math.abs(maxNonZeroCoefficient)) {\n                maxNonZeroCoefficient = coeff;\n            }\n        }\n        \n        List<Double> normalizedCoeffs = new ArrayList<>();\n        for (double coeff : xs) {\n            normalizedCoeffs.add(coeff / maxNonZeroCoefficient);\n        }\n        \n        double epsilon = 1e-6;\n        double x = 1.0;\n        double step = 0.1;\n        \n        while (Math.abs(poly(normalizedCoeffs, x)) > epsilon) {\n            x += step;\n        }\n        \n        return x;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.findZero(Arrays.asList(1.0, 2.0))); // Expected output: -0.5\n        System.out.println(solution.findZero(Arrays.asList(-6.0, 11.0, -6.0, 1.0))); // Expected output: 1.0\n    }\n}"}
{"task_id": "Java/32", "generation": "        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"Number of coefficients must be even\");\n        }\n        \n        double maxNonZeroCoefficient = 0;\n        for (double coeff : xs) {\n            if (coeff != 0 && Math.abs(coeff) > Math.abs(maxNonZeroCoefficient)) {\n                maxNonZeroCoefficient = coeff;\n            }\n        }\n        \n        List<Double> normalizedCoeffs = new ArrayList<>();\n        for (double coeff : xs) {\n            normalizedCoeffs.add(coeff / maxNonZeroCoefficient);\n        }\n        \n        double epsilon = 1e-6;\n        double x = 1.0;\n        double step = 0.1;\n        \n        while (Math.abs(poly(normalizedCoeffs, x)) > epsilon) {\n            x += step;\n        }\n        \n        return x;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.findZero(Arrays.asList(1.0, 2.0))); // Expected output: -0.5\n        System.out.println(solution.findZero(Arrays.asList(-6.0, 11.0, -6.0, 1.0))); // Expected output: 1.0\n    }\n}"}
{"task_id": "Java/33", "generation": "        List<Integer> result = new ArrayList<>(l);\n        \n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                List<Integer> sublist = new ArrayList<>();\n                for (int j = i; j < l.size(); j += 3) {\n                    sublist.add(l.get(j));\n                }\n                Collections.sort(sublist);\n                int index = 0;\n                for (int j = i; j < l.size(); j += 3) {\n                    result.set(j, sublist.get(index));\n                    index++;\n                }\n            }\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/33", "generation": "        List<Integer> result = new ArrayList<>(l);\n        \n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                List<Integer> sublist = new ArrayList<>();\n                for (int j = i; j < l.size(); j += 3) {\n                    sublist.add(l.get(j));\n                }\n                Collections.sort(sublist);\n                int index = 0;\n                for (int j = i; j < l.size(); j += 3) {\n                    result.set(j, sublist.get(index));\n                    index++;\n                }\n            }\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/33", "generation": "        List<Integer> result = new ArrayList<>(l);\n        \n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                List<Integer> sublist = new ArrayList<>();\n                for (int j = i; j < l.size(); j += 3) {\n                    sublist.add(l.get(j));\n                }\n                Collections.sort(sublist);\n                int index = 0;\n                for (int j = i; j < l.size(); j += 3) {\n                    result.set(j, sublist.get(index));\n                    index++;\n                }\n            }\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/33", "generation": "        List<Integer> result = new ArrayList<>(l);\n        \n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                List<Integer> sublist = new ArrayList<>();\n                for (int j = i; j < l.size(); j += 3) {\n                    sublist.add(l.get(j));\n                }\n                Collections.sort(sublist);\n                int index = 0;\n                for (int j = i; j < l.size(); j += 3) {\n                    result.set(j, sublist.get(index));\n                    index++;\n                }\n            }\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/33", "generation": "        List<Integer> result = new ArrayList<>(l);\n        \n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                List<Integer> sublist = new ArrayList<>();\n                for (int j = i; j < l.size(); j += 3) {\n                    sublist.add(l.get(j));\n                }\n                Collections.sort(sublist);\n                int index = 0;\n                for (int j = i; j < l.size(); j += 3) {\n                    result.set(j, sublist.get(index));\n                    index++;\n                }\n            }\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/34", "generation": "        Set<Integer> set = new HashSet<>(l);\n        List<Integer> uniqueList = new ArrayList<>(set);\n        Collections.sort(uniqueList);\n        return uniqueList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> list = Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123);\n        List<Integer> uniqueList = solution.unique(list);\n        System.out.println(uniqueList);\n    }\n}"}
{"task_id": "Java/34", "generation": "        Set<Integer> set = new HashSet<>(l);\n        List<Integer> uniqueList = new ArrayList<>(set);\n        Collections.sort(uniqueList);\n        return uniqueList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> list = Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123);\n        List<Integer> uniqueList = solution.unique(list);\n        System.out.println(uniqueList);\n    }\n}"}
{"task_id": "Java/34", "generation": "        Set<Integer> set = new HashSet<>(l);\n        List<Integer> uniqueList = new ArrayList<>(set);\n        Collections.sort(uniqueList);\n        return uniqueList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> list = Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123);\n        List<Integer> uniqueList = solution.unique(list);\n        System.out.println(uniqueList);\n    }\n}"}
{"task_id": "Java/34", "generation": "        Set<Integer> set = new HashSet<>(l);\n        List<Integer> uniqueList = new ArrayList<>(set);\n        Collections.sort(uniqueList);\n        return uniqueList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> list = Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123);\n        List<Integer> uniqueList = solution.unique(list);\n        System.out.println(uniqueList);\n    }\n}"}
{"task_id": "Java/34", "generation": "        Set<Integer> set = new HashSet<>(l);\n        List<Integer> uniqueList = new ArrayList<>(set);\n        Collections.sort(uniqueList);\n        return uniqueList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> list = Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123);\n        List<Integer> uniqueList = solution.unique(list);\n        System.out.println(uniqueList);\n    }\n}"}
{"task_id": "Java/35", "generation": "        int max = Integer.MIN_VALUE;\n        for (int num : l) {\n            if (num > max) {\n                max = num;\n            }\n        }\n        return max;\n    }\n}"}
{"task_id": "Java/35", "generation": "        int max = Integer.MIN_VALUE;\n        for (int num : l) {\n            if (num > max) {\n                max = num;\n            }\n        }\n        return max;\n    }\n}"}
{"task_id": "Java/35", "generation": "        int max = Integer.MIN_VALUE;\n        for (int num : l) {\n            if (num > max) {\n                max = num;\n            }\n        }\n        return max;\n    }\n}"}
{"task_id": "Java/35", "generation": "        int max = Integer.MIN_VALUE;\n        for (int num : l) {\n            if (num > max) {\n                max = num;\n            }\n        }\n        return max;\n    }\n}"}
{"task_id": "Java/35", "generation": "        int max = Integer.MIN_VALUE;\n        for (int num : l) {\n            if (num > max) {\n                max = num;\n            }\n        }\n        return max;\n    }\n}"}
{"task_id": "Java/36", "generation": "        int count = 0;\n        \n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String numStr = String.valueOf(i);\n                for (int j = 0; j < numStr.length(); j++) {\n                    if (numStr.charAt(j) == '7') {\n                        count++;\n                    }\n                }\n            }\n        }\n        \n        return count;\n    }\n}"}
{"task_id": "Java/36", "generation": "        int count = 0;\n        \n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String numStr = String.valueOf(i);\n                for (int j = 0; j < numStr.length(); j++) {\n                    if (numStr.charAt(j) == '7') {\n                        count++;\n                    }\n                }\n            }\n        }\n        \n        return count;\n    }\n}"}
{"task_id": "Java/36", "generation": "        int count = 0;\n        \n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String numStr = String.valueOf(i);\n                for (int j = 0; j < numStr.length(); j++) {\n                    if (numStr.charAt(j) == '7') {\n                        count++;\n                    }\n                }\n            }\n        }\n        \n        return count;\n    }\n}"}
{"task_id": "Java/36", "generation": "        int count = 0;\n        \n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String numStr = String.valueOf(i);\n                for (int j = 0; j < numStr.length(); j++) {\n                    if (numStr.charAt(j) == '7') {\n                        count++;\n                    }\n                }\n            }\n        }\n        \n        return count;\n    }\n}"}
{"task_id": "Java/36", "generation": "        int count = 0;\n        \n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String numStr = String.valueOf(i);\n                for (int j = 0; j < numStr.length(); j++) {\n                    if (numStr.charAt(j) == '7') {\n                        count++;\n                    }\n                }\n            }\n        }\n        \n        return count;\n    }\n}"}
{"task_id": "Java/37", "generation": "        List<Integer> sortedEven = new ArrayList<>();\n        List<Integer> evenIndices = new ArrayList<>();\n        \n        // Get the values at even indices\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                evenIndices.add(l.get(i));\n            }\n        }\n        \n        // Sort the values at even indices\n        Collections.sort(evenIndices);\n        \n        // Populate the sorted list\n        int evenIndex = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                sortedEven.add(evenIndices.get(evenIndex));\n                evenIndex++;\n            } else {\n                sortedEven.add(l.get(i));\n            }\n        }\n        \n        return sortedEven;\n    }\n}"}
{"task_id": "Java/37", "generation": "        List<Integer> sortedEven = new ArrayList<>();\n        List<Integer> evenIndices = new ArrayList<>();\n        \n        // Get the values at even indices\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                evenIndices.add(l.get(i));\n            }\n        }\n        \n        // Sort the values at even indices\n        Collections.sort(evenIndices);\n        \n        // Populate the sorted list\n        int evenIndex = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                sortedEven.add(evenIndices.get(evenIndex));\n                evenIndex++;\n            } else {\n                sortedEven.add(l.get(i));\n            }\n        }\n        \n        return sortedEven;\n    }\n}"}
{"task_id": "Java/37", "generation": "        List<Integer> sortedEven = new ArrayList<>();\n        List<Integer> evenIndices = new ArrayList<>();\n        \n        // Get the values at even indices\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                evenIndices.add(l.get(i));\n            }\n        }\n        \n        // Sort the values at even indices\n        Collections.sort(evenIndices);\n        \n        // Populate the sorted list\n        int evenIndex = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                sortedEven.add(evenIndices.get(evenIndex));\n                evenIndex++;\n            } else {\n                sortedEven.add(l.get(i));\n            }\n        }\n        \n        return sortedEven;\n    }\n}"}
{"task_id": "Java/37", "generation": "        List<Integer> sortedEven = new ArrayList<>();\n        List<Integer> evenIndices = new ArrayList<>();\n        \n        // Get the values at even indices\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                evenIndices.add(l.get(i));\n            }\n        }\n        \n        // Sort the values at even indices\n        Collections.sort(evenIndices);\n        \n        // Populate the sorted list\n        int evenIndex = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                sortedEven.add(evenIndices.get(evenIndex));\n                evenIndex++;\n            } else {\n                sortedEven.add(l.get(i));\n            }\n        }\n        \n        return sortedEven;\n    }\n}"}
{"task_id": "Java/37", "generation": "        List<Integer> sortedEven = new ArrayList<>();\n        List<Integer> evenIndices = new ArrayList<>();\n        \n        // Get the values at even indices\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                evenIndices.add(l.get(i));\n            }\n        }\n        \n        // Sort the values at even indices\n        Collections.sort(evenIndices);\n        \n        // Populate the sorted list\n        int evenIndex = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                sortedEven.add(evenIndices.get(evenIndex));\n                evenIndex++;\n            } else {\n                sortedEven.add(l.get(i));\n            }\n        }\n        \n        return sortedEven;\n    }\n}"}
{"task_id": "Java/38", "generation": "        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String input = \"abcde\";\n        String encoded = solution.encodeCyclic(input);\n        System.out.println(\"Encoded: \" + encoded);\n        String decoded = solution.decodeCyclic(encoded);\n        System.out.println(\"Decoded: \" + decoded);\n    }\n}"}
{"task_id": "Java/38", "generation": "        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String input = \"abcde\";\n        String encoded = solution.encodeCyclic(input);\n        System.out.println(\"Encoded: \" + encoded);\n        String decoded = solution.decodeCyclic(encoded);\n        System.out.println(\"Decoded: \" + decoded);\n    }\n}"}
{"task_id": "Java/38", "generation": "        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String input = \"abcde\";\n        String encoded = solution.encodeCyclic(input);\n        System.out.println(\"Encoded: \" + encoded);\n        String decoded = solution.decodeCyclic(encoded);\n        System.out.println(\"Decoded: \" + decoded);\n    }\n}"}
{"task_id": "Java/38", "generation": "        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String input = \"abcde\";\n        String encoded = solution.encodeCyclic(input);\n        System.out.println(\"Encoded: \" + encoded);\n        String decoded = solution.decodeCyclic(encoded);\n        System.out.println(\"Decoded: \" + decoded);\n    }\n}"}
{"task_id": "Java/38", "generation": "        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String input = \"abcde\";\n        String encoded = solution.encodeCyclic(input);\n        System.out.println(\"Encoded: \" + encoded);\n        String decoded = solution.decodeCyclic(encoded);\n        System.out.println(\"Decoded: \" + decoded);\n    }\n}"}
{"task_id": "Java/39", "generation": "        int count = 0;\n        int num = 2;\n        \n        while (count < n) {\n            if (isFibonacci(num) && isPrime(num)) {\n                count++;\n            }\n            num++;\n        }\n        \n        return num - 1;\n    }\n    \n    public boolean isFibonacci(int num) {\n        int a = 0;\n        int b = 1;\n        \n        while (a <= num) {\n            if (a == num) {\n                return true;\n            }\n            int temp = a + b;\n            a = b;\n            b = temp;\n        }\n        \n        return false;\n    }\n    \n    public boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.primeFib(1));\n        System.out.println(solution.primeFib(2));\n        System.out.println(solution.primeFib(3));\n        System.out.println(solution.primeFib(4));\n        System.out.println(solution.primeFib(5));\n    }\n}"}
{"task_id": "Java/39", "generation": "        int count = 0;\n        int num = 2;\n        \n        while (count < n) {\n            if (isFibonacci(num) && isPrime(num)) {\n                count++;\n            }\n            num++;\n        }\n        \n        return num - 1;\n    }\n    \n    public boolean isFibonacci(int num) {\n        int a = 0;\n        int b = 1;\n        \n        while (a <= num) {\n            if (a == num) {\n                return true;\n            }\n            int temp = a + b;\n            a = b;\n            b = temp;\n        }\n        \n        return false;\n    }\n    \n    public boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.primeFib(1));\n        System.out.println(solution.primeFib(2));\n        System.out.println(solution.primeFib(3));\n        System.out.println(solution.primeFib(4));\n        System.out.println(solution.primeFib(5));\n    }\n}"}
{"task_id": "Java/39", "generation": "        int count = 0;\n        int num = 2;\n        \n        while (count < n) {\n            if (isFibonacci(num) && isPrime(num)) {\n                count++;\n            }\n            num++;\n        }\n        \n        return num - 1;\n    }\n    \n    public boolean isFibonacci(int num) {\n        int a = 0;\n        int b = 1;\n        \n        while (a <= num) {\n            if (a == num) {\n                return true;\n            }\n            int temp = a + b;\n            a = b;\n            b = temp;\n        }\n        \n        return false;\n    }\n    \n    public boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.primeFib(1));\n        System.out.println(solution.primeFib(2));\n        System.out.println(solution.primeFib(3));\n        System.out.println(solution.primeFib(4));\n        System.out.println(solution.primeFib(5));\n    }\n}"}
{"task_id": "Java/39", "generation": "        int count = 0;\n        int num = 2;\n        \n        while (count < n) {\n            if (isFibonacci(num) && isPrime(num)) {\n                count++;\n            }\n            num++;\n        }\n        \n        return num - 1;\n    }\n    \n    public boolean isFibonacci(int num) {\n        int a = 0;\n        int b = 1;\n        \n        while (a <= num) {\n            if (a == num) {\n                return true;\n            }\n            int temp = a + b;\n            a = b;\n            b = temp;\n        }\n        \n        return false;\n    }\n    \n    public boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.primeFib(1));\n        System.out.println(solution.primeFib(2));\n        System.out.println(solution.primeFib(3));\n        System.out.println(solution.primeFib(4));\n        System.out.println(solution.primeFib(5));\n    }\n}"}
{"task_id": "Java/39", "generation": "        int count = 0;\n        int num = 2;\n        \n        while (count < n) {\n            if (isFibonacci(num) && isPrime(num)) {\n                count++;\n            }\n            num++;\n        }\n        \n        return num - 1;\n    }\n    \n    public boolean isFibonacci(int num) {\n        int a = 0;\n        int b = 1;\n        \n        while (a <= num) {\n            if (a == num) {\n                return true;\n            }\n            int temp = a + b;\n            a = b;\n            b = temp;\n        }\n        \n        return false;\n    }\n    \n    public boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.primeFib(1));\n        System.out.println(solution.primeFib(2));\n        System.out.println(solution.primeFib(3));\n        System.out.println(solution.primeFib(4));\n        System.out.println(solution.primeFib(5));\n    }\n}"}
{"task_id": "Java/40", "generation": "        Collections.sort(l);\n        int n = l.size();\n        for (int i = 0; i < n - 2; i++) {\n            int left = i + 1;\n            int right = n - 1;\n            while (left < right) {\n                int sum = l.get(i) + l.get(left) + l.get(right);\n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.triplesSumToZero(Arrays.asList(1, 3, 5, 0))); // false\n        System.out.println(solution.triplesSumToZero(Arrays.asList(1, 3, -2, 1))); // true\n        System.out.println(solution.triplesSumToZero(Arrays.asList(1, 2, 3, 7))); // false\n        System.out.println(solution.triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))); // true\n        System.out.println(solution.triplesSumToZero(Arrays.asList(1))); // false\n    }\n}"}
{"task_id": "Java/40", "generation": "        Collections.sort(l);\n        int n = l.size();\n        for (int i = 0; i < n - 2; i++) {\n            int left = i + 1;\n            int right = n - 1;\n            while (left < right) {\n                int sum = l.get(i) + l.get(left) + l.get(right);\n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.triplesSumToZero(Arrays.asList(1, 3, 5, 0))); // false\n        System.out.println(solution.triplesSumToZero(Arrays.asList(1, 3, -2, 1))); // true\n        System.out.println(solution.triplesSumToZero(Arrays.asList(1, 2, 3, 7))); // false\n        System.out.println(solution.triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))); // true\n        System.out.println(solution.triplesSumToZero(Arrays.asList(1))); // false\n    }\n}"}
{"task_id": "Java/40", "generation": "        Collections.sort(l);\n        int n = l.size();\n        for (int i = 0; i < n - 2; i++) {\n            int left = i + 1;\n            int right = n - 1;\n            while (left < right) {\n                int sum = l.get(i) + l.get(left) + l.get(right);\n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.triplesSumToZero(Arrays.asList(1, 3, 5, 0))); // false\n        System.out.println(solution.triplesSumToZero(Arrays.asList(1, 3, -2, 1))); // true\n        System.out.println(solution.triplesSumToZero(Arrays.asList(1, 2, 3, 7))); // false\n        System.out.println(solution.triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))); // true\n        System.out.println(solution.triplesSumToZero(Arrays.asList(1))); // false\n    }\n}"}
{"task_id": "Java/40", "generation": "        Collections.sort(l);\n        int n = l.size();\n        for (int i = 0; i < n - 2; i++) {\n            int left = i + 1;\n            int right = n - 1;\n            while (left < right) {\n                int sum = l.get(i) + l.get(left) + l.get(right);\n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.triplesSumToZero(Arrays.asList(1, 3, 5, 0))); // false\n        System.out.println(solution.triplesSumToZero(Arrays.asList(1, 3, -2, 1))); // true\n        System.out.println(solution.triplesSumToZero(Arrays.asList(1, 2, 3, 7))); // false\n        System.out.println(solution.triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))); // true\n        System.out.println(solution.triplesSumToZero(Arrays.asList(1))); // false\n    }\n}"}
{"task_id": "Java/40", "generation": "        Collections.sort(l);\n        int n = l.size();\n        for (int i = 0; i < n - 2; i++) {\n            int left = i + 1;\n            int right = n - 1;\n            while (left < right) {\n                int sum = l.get(i) + l.get(left) + l.get(right);\n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.triplesSumToZero(Arrays.asList(1, 3, 5, 0))); // false\n        System.out.println(solution.triplesSumToZero(Arrays.asList(1, 3, -2, 1))); // true\n        System.out.println(solution.triplesSumToZero(Arrays.asList(1, 2, 3, 7))); // false\n        System.out.println(solution.triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))); // true\n        System.out.println(solution.triplesSumToZero(Arrays.asList(1))); // false\n    }\n}"}
{"task_id": "Java/41", "generation": "        // Total number of collisions\n        int collisions = 0;\n        \n        // Calculate the number of collisions\n        collisions = n * (n - 1) / 2;\n        \n        return collisions;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.carRaceCollision(3)); // Output: 3\n        System.out.println(solution.carRaceCollision(5)); // Output: 10\n        System.out.println(solution.carRaceCollision(0)); // Output: 0\n        System.out.println(solution.carRaceCollision(1)); // Output: 0\n    }\n}"}
{"task_id": "Java/41", "generation": "        // Total number of collisions\n        int collisions = 0;\n        \n        // Calculate the number of collisions\n        collisions = n * (n - 1) / 2;\n        \n        return collisions;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.carRaceCollision(3)); // Output: 3\n        System.out.println(solution.carRaceCollision(5)); // Output: 10\n        System.out.println(solution.carRaceCollision(0)); // Output: 0\n        System.out.println(solution.carRaceCollision(1)); // Output: 0\n    }\n}"}
{"task_id": "Java/41", "generation": "        // Total number of collisions\n        int collisions = 0;\n        \n        // Calculate the number of collisions\n        collisions = n * (n - 1) / 2;\n        \n        return collisions;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.carRaceCollision(3)); // Output: 3\n        System.out.println(solution.carRaceCollision(5)); // Output: 10\n        System.out.println(solution.carRaceCollision(0)); // Output: 0\n        System.out.println(solution.carRaceCollision(1)); // Output: 0\n    }\n}"}
{"task_id": "Java/41", "generation": "        // Total number of collisions\n        int collisions = 0;\n        \n        // Calculate the number of collisions\n        collisions = n * (n - 1) / 2;\n        \n        return collisions;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.carRaceCollision(3)); // Output: 3\n        System.out.println(solution.carRaceCollision(5)); // Output: 10\n        System.out.println(solution.carRaceCollision(0)); // Output: 0\n        System.out.println(solution.carRaceCollision(1)); // Output: 0\n    }\n}"}
{"task_id": "Java/41", "generation": "        // Total number of collisions\n        int collisions = 0;\n        \n        // Calculate the number of collisions\n        collisions = n * (n - 1) / 2;\n        \n        return collisions;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.carRaceCollision(3)); // Output: 3\n        System.out.println(solution.carRaceCollision(5)); // Output: 10\n        System.out.println(solution.carRaceCollision(0)); // Output: 0\n        System.out.println(solution.carRaceCollision(1)); // Output: 0\n    }\n}"}
{"task_id": "Java/42", "generation": "        return l.stream()\n                .map(num -> num + 1)\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> test1 = Arrays.asList(1, 2, 3);\n        List<Integer> test2 = Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123);\n\n        System.out.println(solution.incrList(test1));\n        System.out.println(solution.incrList(test2));\n    }\n}"}
{"task_id": "Java/42", "generation": "        return l.stream()\n                .map(num -> num + 1)\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> test1 = Arrays.asList(1, 2, 3);\n        List<Integer> test2 = Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123);\n\n        System.out.println(solution.incrList(test1));\n        System.out.println(solution.incrList(test2));\n    }\n}"}
{"task_id": "Java/42", "generation": "        return l.stream()\n                .map(num -> num + 1)\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> test1 = Arrays.asList(1, 2, 3);\n        List<Integer> test2 = Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123);\n\n        System.out.println(solution.incrList(test1));\n        System.out.println(solution.incrList(test2));\n    }\n}"}
{"task_id": "Java/42", "generation": "        return l.stream()\n                .map(num -> num + 1)\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> test1 = Arrays.asList(1, 2, 3);\n        List<Integer> test2 = Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123);\n\n        System.out.println(solution.incrList(test1));\n        System.out.println(solution.incrList(test2));\n    }\n}"}
{"task_id": "Java/42", "generation": "        return l.stream()\n                .map(num -> num + 1)\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> test1 = Arrays.asList(1, 2, 3);\n        List<Integer> test2 = Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123);\n\n        System.out.println(solution.incrList(test1));\n        System.out.println(solution.incrList(test2));\n    }\n}"}
{"task_id": "Java/43", "generation": "        Set<Integer> set = new HashSet<>();\n        for (int num : l) {\n            if (set.contains(-num)) {\n                return true;\n            }\n            set.add(num);\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/43", "generation": "        Set<Integer> set = new HashSet<>();\n        for (int num : l) {\n            if (set.contains(-num)) {\n                return true;\n            }\n            set.add(num);\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/43", "generation": "        Set<Integer> set = new HashSet<>();\n        for (int num : l) {\n            if (set.contains(-num)) {\n                return true;\n            }\n            set.add(num);\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/43", "generation": "        Set<Integer> set = new HashSet<>();\n        for (int num : l) {\n            if (set.contains(-num)) {\n                return true;\n            }\n            set.add(num);\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/43", "generation": "        Set<Integer> set = new HashSet<>();\n        for (int num : l) {\n            if (set.contains(-num)) {\n                return true;\n            }\n            set.add(num);\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/44", "generation": "        if (base < 2 || base > 9) {\n            return \"Invalid base\";\n        }\n        \n        StringBuilder sb = new StringBuilder();\n        \n        while (x > 0) {\n            sb.insert(0, x % base);\n            x /= base;\n        }\n        \n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.changeBase(8, 3)); // \"22\"\n        System.out.println(solution.changeBase(8, 2)); // \"1000\"\n        System.out.println(solution.changeBase(7, 2)); // \"111\"\n    }\n}"}
{"task_id": "Java/44", "generation": "        if (base < 2 || base > 9) {\n            return \"Invalid base\";\n        }\n        \n        StringBuilder sb = new StringBuilder();\n        \n        while (x > 0) {\n            sb.insert(0, x % base);\n            x /= base;\n        }\n        \n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.changeBase(8, 3)); // \"22\"\n        System.out.println(solution.changeBase(8, 2)); // \"1000\"\n        System.out.println(solution.changeBase(7, 2)); // \"111\"\n    }\n}"}
{"task_id": "Java/44", "generation": "        if (base < 2 || base > 9) {\n            return \"Invalid base\";\n        }\n        \n        StringBuilder sb = new StringBuilder();\n        \n        while (x > 0) {\n            sb.insert(0, x % base);\n            x /= base;\n        }\n        \n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.changeBase(8, 3)); // \"22\"\n        System.out.println(solution.changeBase(8, 2)); // \"1000\"\n        System.out.println(solution.changeBase(7, 2)); // \"111\"\n    }\n}"}
{"task_id": "Java/44", "generation": "        if (base < 2 || base > 9) {\n            return \"Invalid base\";\n        }\n        \n        StringBuilder sb = new StringBuilder();\n        \n        while (x > 0) {\n            sb.insert(0, x % base);\n            x /= base;\n        }\n        \n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.changeBase(8, 3)); // \"22\"\n        System.out.println(solution.changeBase(8, 2)); // \"1000\"\n        System.out.println(solution.changeBase(7, 2)); // \"111\"\n    }\n}"}
{"task_id": "Java/44", "generation": "        if (base < 2 || base > 9) {\n            return \"Invalid base\";\n        }\n        \n        StringBuilder sb = new StringBuilder();\n        \n        while (x > 0) {\n            sb.insert(0, x % base);\n            x /= base;\n        }\n        \n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.changeBase(8, 3)); // \"22\"\n        System.out.println(solution.changeBase(8, 2)); // \"1000\"\n        System.out.println(solution.changeBase(7, 2)); // \"111\"\n    }\n}"}
{"task_id": "Java/45", "generation": "        return 0.5 * a * h;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.println(\"Enter the length of the side of the triangle:\");\n        double side = scanner.nextDouble();\n\n        System.out.println(\"Enter the height of the triangle:\");\n        double height = scanner.nextDouble();\n\n        double area = solution.triangleArea(side, height);\n        System.out.println(\"The area of the triangle is: \" + area);\n\n        scanner.close();\n    }\n}"}
{"task_id": "Java/45", "generation": "        return 0.5 * a * h;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.println(\"Enter the length of the side of the triangle:\");\n        double side = scanner.nextDouble();\n\n        System.out.println(\"Enter the height of the triangle:\");\n        double height = scanner.nextDouble();\n\n        double area = solution.triangleArea(side, height);\n        System.out.println(\"The area of the triangle is: \" + area);\n\n        scanner.close();\n    }\n}"}
{"task_id": "Java/45", "generation": "        return 0.5 * a * h;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.println(\"Enter the length of the side of the triangle:\");\n        double side = scanner.nextDouble();\n\n        System.out.println(\"Enter the height of the triangle:\");\n        double height = scanner.nextDouble();\n\n        double area = solution.triangleArea(side, height);\n        System.out.println(\"The area of the triangle is: \" + area);\n\n        scanner.close();\n    }\n}"}
{"task_id": "Java/45", "generation": "        return 0.5 * a * h;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.println(\"Enter the length of the side of the triangle:\");\n        double side = scanner.nextDouble();\n\n        System.out.println(\"Enter the height of the triangle:\");\n        double height = scanner.nextDouble();\n\n        double area = solution.triangleArea(side, height);\n        System.out.println(\"The area of the triangle is: \" + area);\n\n        scanner.close();\n    }\n}"}
{"task_id": "Java/45", "generation": "        return 0.5 * a * h;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.println(\"Enter the length of the side of the triangle:\");\n        double side = scanner.nextDouble();\n\n        System.out.println(\"Enter the height of the triangle:\");\n        double height = scanner.nextDouble();\n\n        double area = solution.triangleArea(side, height);\n        System.out.println(\"The area of the triangle is: \" + area);\n\n        scanner.close();\n    }\n}"}
{"task_id": "Java/46", "generation": "        if (n == 0 || n == 1) {\n            return 0;\n        }\n        \n        if (n == 2) {\n            return 2;\n        }\n        \n        if (n == 3) {\n            return 0;\n        }\n        \n        int[] fib4 = new int[n+1];\n        fib4[0] = 0;\n        fib4[1] = 0;\n        fib4[2] = 2;\n        fib4[3] = 0;\n        \n        for (int i = 4; i <= n; i++) {\n            fib4[i] = fib4[i-1] + fib4[i-2] + fib4[i-3] + fib4[i-4];\n        }\n        \n        return fib4[n];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fib4(5)); // Output: 4\n        System.out.println(solution.fib4(6)); // Output: 8\n        System.out.println(solution.fib4(7)); // Output: 14\n    }\n}"}
{"task_id": "Java/46", "generation": "        if (n == 0 || n == 1) {\n            return 0;\n        }\n        \n        if (n == 2) {\n            return 2;\n        }\n        \n        if (n == 3) {\n            return 0;\n        }\n        \n        int[] fib4 = new int[n+1];\n        fib4[0] = 0;\n        fib4[1] = 0;\n        fib4[2] = 2;\n        fib4[3] = 0;\n        \n        for (int i = 4; i <= n; i++) {\n            fib4[i] = fib4[i-1] + fib4[i-2] + fib4[i-3] + fib4[i-4];\n        }\n        \n        return fib4[n];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fib4(5)); // Output: 4\n        System.out.println(solution.fib4(6)); // Output: 8\n        System.out.println(solution.fib4(7)); // Output: 14\n    }\n}"}
{"task_id": "Java/46", "generation": "        if (n == 0 || n == 1) {\n            return 0;\n        }\n        \n        if (n == 2) {\n            return 2;\n        }\n        \n        if (n == 3) {\n            return 0;\n        }\n        \n        int[] fib4 = new int[n+1];\n        fib4[0] = 0;\n        fib4[1] = 0;\n        fib4[2] = 2;\n        fib4[3] = 0;\n        \n        for (int i = 4; i <= n; i++) {\n            fib4[i] = fib4[i-1] + fib4[i-2] + fib4[i-3] + fib4[i-4];\n        }\n        \n        return fib4[n];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fib4(5)); // Output: 4\n        System.out.println(solution.fib4(6)); // Output: 8\n        System.out.println(solution.fib4(7)); // Output: 14\n    }\n}"}
{"task_id": "Java/46", "generation": "        if (n == 0 || n == 1) {\n            return 0;\n        }\n        \n        if (n == 2) {\n            return 2;\n        }\n        \n        if (n == 3) {\n            return 0;\n        }\n        \n        int[] fib4 = new int[n+1];\n        fib4[0] = 0;\n        fib4[1] = 0;\n        fib4[2] = 2;\n        fib4[3] = 0;\n        \n        for (int i = 4; i <= n; i++) {\n            fib4[i] = fib4[i-1] + fib4[i-2] + fib4[i-3] + fib4[i-4];\n        }\n        \n        return fib4[n];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fib4(5)); // Output: 4\n        System.out.println(solution.fib4(6)); // Output: 8\n        System.out.println(solution.fib4(7)); // Output: 14\n    }\n}"}
{"task_id": "Java/46", "generation": "        if (n == 0 || n == 1) {\n            return 0;\n        }\n        \n        if (n == 2) {\n            return 2;\n        }\n        \n        if (n == 3) {\n            return 0;\n        }\n        \n        int[] fib4 = new int[n+1];\n        fib4[0] = 0;\n        fib4[1] = 0;\n        fib4[2] = 2;\n        fib4[3] = 0;\n        \n        for (int i = 4; i <= n; i++) {\n            fib4[i] = fib4[i-1] + fib4[i-2] + fib4[i-3] + fib4[i-4];\n        }\n        \n        return fib4[n];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fib4(5)); // Output: 4\n        System.out.println(solution.fib4(6)); // Output: 8\n        System.out.println(solution.fib4(7)); // Output: 14\n    }\n}"}
{"task_id": "Java/47", "generation": "        Collections.sort(l);\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (double)(l.get(n/2) + l.get(n/2 - 1)) / 2;\n        } else {\n            return (double)l.get(n/2);\n        }\n    }\n}"}
{"task_id": "Java/47", "generation": "        Collections.sort(l);\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (double)(l.get(n/2) + l.get(n/2 - 1)) / 2;\n        } else {\n            return (double)l.get(n/2);\n        }\n    }\n}"}
{"task_id": "Java/47", "generation": "        Collections.sort(l);\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (double)(l.get(n/2) + l.get(n/2 - 1)) / 2;\n        } else {\n            return (double)l.get(n/2);\n        }\n    }\n}"}
{"task_id": "Java/47", "generation": "        Collections.sort(l);\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (double)(l.get(n/2) + l.get(n/2 - 1)) / 2;\n        } else {\n            return (double)l.get(n/2);\n        }\n    }\n}"}
{"task_id": "Java/47", "generation": "        Collections.sort(l);\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (double)(l.get(n/2) + l.get(n/2 - 1)) / 2;\n        } else {\n            return (double)l.get(n/2);\n        }\n    }\n}"}
{"task_id": "Java/48", "generation": "        if (text == null || text.length() == 0) {\n            return true;\n        }\n        \n        int left = 0;\n        int right = text.length() - 1;\n        \n        while (left < right) {\n            if (text.charAt(left) != text.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.isPalindrome(\"\")); // true\n        System.out.println(solution.isPalindrome(\"aba\")); // true\n        System.out.println(solution.isPalindrome(\"aaaaa\")); // true\n        System.out.println(solution.isPalindrome(\"zbcd\")); // false\n    }\n}"}
{"task_id": "Java/48", "generation": "        if (text == null || text.length() == 0) {\n            return true;\n        }\n        \n        int left = 0;\n        int right = text.length() - 1;\n        \n        while (left < right) {\n            if (text.charAt(left) != text.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.isPalindrome(\"\")); // true\n        System.out.println(solution.isPalindrome(\"aba\")); // true\n        System.out.println(solution.isPalindrome(\"aaaaa\")); // true\n        System.out.println(solution.isPalindrome(\"zbcd\")); // false\n    }\n}"}
{"task_id": "Java/48", "generation": "        if (text == null || text.length() == 0) {\n            return true;\n        }\n        \n        int left = 0;\n        int right = text.length() - 1;\n        \n        while (left < right) {\n            if (text.charAt(left) != text.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.isPalindrome(\"\")); // true\n        System.out.println(solution.isPalindrome(\"aba\")); // true\n        System.out.println(solution.isPalindrome(\"aaaaa\")); // true\n        System.out.println(solution.isPalindrome(\"zbcd\")); // false\n    }\n}"}
{"task_id": "Java/48", "generation": "        if (text == null || text.length() == 0) {\n            return true;\n        }\n        \n        int left = 0;\n        int right = text.length() - 1;\n        \n        while (left < right) {\n            if (text.charAt(left) != text.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.isPalindrome(\"\")); // true\n        System.out.println(solution.isPalindrome(\"aba\")); // true\n        System.out.println(solution.isPalindrome(\"aaaaa\")); // true\n        System.out.println(solution.isPalindrome(\"zbcd\")); // false\n    }\n}"}
{"task_id": "Java/48", "generation": "        if (text == null || text.length() == 0) {\n            return true;\n        }\n        \n        int left = 0;\n        int right = text.length() - 1;\n        \n        while (left < right) {\n            if (text.charAt(left) != text.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.isPalindrome(\"\")); // true\n        System.out.println(solution.isPalindrome(\"aba\")); // true\n        System.out.println(solution.isPalindrome(\"aaaaa\")); // true\n        System.out.println(solution.isPalindrome(\"zbcd\")); // false\n    }\n}"}
{"task_id": "Java/49", "generation": "        if (p == 1) {\n            return 0;\n        }\n        int result = 1;\n        n = n % p;\n        while (p > 0) {\n            if (p % 2 == 1) {\n                result = (result * n) % p;\n            }\n            p = p >> 1;\n            n = (n * n) % p;\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/49", "generation": "        if (p == 1) {\n            return 0;\n        }\n        int result = 1;\n        n = n % p;\n        while (p > 0) {\n            if (p % 2 == 1) {\n                result = (result * n) % p;\n            }\n            p = p >> 1;\n            n = (n * n) % p;\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/49", "generation": "        if (p == 1) {\n            return 0;\n        }\n        int result = 1;\n        n = n % p;\n        while (p > 0) {\n            if (p % 2 == 1) {\n                result = (result * n) % p;\n            }\n            p = p >> 1;\n            n = (n * n) % p;\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/49", "generation": "        if (p == 1) {\n            return 0;\n        }\n        int result = 1;\n        n = n % p;\n        while (p > 0) {\n            if (p % 2 == 1) {\n                result = (result * n) % p;\n            }\n            p = p >> 1;\n            n = (n * n) % p;\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/49", "generation": "        if (p == 1) {\n            return 0;\n        }\n        int result = 1;\n        n = n % p;\n        while (p > 0) {\n            if (p % 2 == 1) {\n                result = (result * n) % p;\n            }\n            p = p >> 1;\n            n = (n * n) % p;\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/50", "generation": "        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 5 - 'a' + 26) % 26));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String input = \"hello\";\n        String encoded = solution.encodeShift(input);\n        System.out.println(\"Encoded string: \" + encoded);\n        String decoded = solution.decodeShift(encoded);\n        System.out.println(\"Decoded string: \" + decoded);\n    }\n}"}
{"task_id": "Java/50", "generation": "        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 5 - 'a' + 26) % 26));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String input = \"hello\";\n        String encoded = solution.encodeShift(input);\n        System.out.println(\"Encoded string: \" + encoded);\n        String decoded = solution.decodeShift(encoded);\n        System.out.println(\"Decoded string: \" + decoded);\n    }\n}"}
{"task_id": "Java/50", "generation": "        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 5 - 'a' + 26) % 26));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String input = \"hello\";\n        String encoded = solution.encodeShift(input);\n        System.out.println(\"Encoded string: \" + encoded);\n        String decoded = solution.decodeShift(encoded);\n        System.out.println(\"Decoded string: \" + decoded);\n    }\n}"}
{"task_id": "Java/50", "generation": "        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 5 - 'a' + 26) % 26));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String input = \"hello\";\n        String encoded = solution.encodeShift(input);\n        System.out.println(\"Encoded string: \" + encoded);\n        String decoded = solution.decodeShift(encoded);\n        System.out.println(\"Decoded string: \" + decoded);\n    }\n}"}
{"task_id": "Java/50", "generation": "        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 5 - 'a' + 26) % 26));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String input = \"hello\";\n        String encoded = solution.encodeShift(input);\n        System.out.println(\"Encoded string: \" + encoded);\n        String decoded = solution.decodeShift(encoded);\n        System.out.println(\"Decoded string: \" + decoded);\n    }\n}"}
{"task_id": "Java/51", "generation": "        StringBuilder result = new StringBuilder();\n        \n        for (char c : text.toCharArray()) {\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' &&\n                c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n                result.append(c);\n            }\n        }\n        \n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.removeVowels(\"\")); // \"\"\n        System.out.println(solution.removeVowels(\"abcdef\\nghijklm\")); // \"bcdf\\nghjklm\"\n        System.out.println(solution.removeVowels(\"abcdef\")); // \"bcdf\"\n        System.out.println(solution.removeVowels(\"aaaaa\")); // \"\"\n        System.out.println(solution.removeVowels(\"aaBAA\")); // \"B\"\n        System.out.println(solution.removeVowels(\"zbcd\")); // \"zbcd\"\n    }\n}"}
{"task_id": "Java/51", "generation": "        StringBuilder result = new StringBuilder();\n        \n        for (char c : text.toCharArray()) {\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' &&\n                c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n                result.append(c);\n            }\n        }\n        \n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.removeVowels(\"\")); // \"\"\n        System.out.println(solution.removeVowels(\"abcdef\\nghijklm\")); // \"bcdf\\nghjklm\"\n        System.out.println(solution.removeVowels(\"abcdef\")); // \"bcdf\"\n        System.out.println(solution.removeVowels(\"aaaaa\")); // \"\"\n        System.out.println(solution.removeVowels(\"aaBAA\")); // \"B\"\n        System.out.println(solution.removeVowels(\"zbcd\")); // \"zbcd\"\n    }\n}"}
{"task_id": "Java/51", "generation": "        StringBuilder result = new StringBuilder();\n        \n        for (char c : text.toCharArray()) {\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' &&\n                c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n                result.append(c);\n            }\n        }\n        \n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.removeVowels(\"\")); // \"\"\n        System.out.println(solution.removeVowels(\"abcdef\\nghijklm\")); // \"bcdf\\nghjklm\"\n        System.out.println(solution.removeVowels(\"abcdef\")); // \"bcdf\"\n        System.out.println(solution.removeVowels(\"aaaaa\")); // \"\"\n        System.out.println(solution.removeVowels(\"aaBAA\")); // \"B\"\n        System.out.println(solution.removeVowels(\"zbcd\")); // \"zbcd\"\n    }\n}"}
{"task_id": "Java/51", "generation": "        StringBuilder result = new StringBuilder();\n        \n        for (char c : text.toCharArray()) {\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' &&\n                c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n                result.append(c);\n            }\n        }\n        \n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.removeVowels(\"\")); // \"\"\n        System.out.println(solution.removeVowels(\"abcdef\\nghijklm\")); // \"bcdf\\nghjklm\"\n        System.out.println(solution.removeVowels(\"abcdef\")); // \"bcdf\"\n        System.out.println(solution.removeVowels(\"aaaaa\")); // \"\"\n        System.out.println(solution.removeVowels(\"aaBAA\")); // \"B\"\n        System.out.println(solution.removeVowels(\"zbcd\")); // \"zbcd\"\n    }\n}"}
{"task_id": "Java/51", "generation": "        StringBuilder result = new StringBuilder();\n        \n        for (char c : text.toCharArray()) {\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' &&\n                c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n                result.append(c);\n            }\n        }\n        \n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.removeVowels(\"\")); // \"\"\n        System.out.println(solution.removeVowels(\"abcdef\\nghijklm\")); // \"bcdf\\nghjklm\"\n        System.out.println(solution.removeVowels(\"abcdef\")); // \"bcdf\"\n        System.out.println(solution.removeVowels(\"aaaaa\")); // \"\"\n        System.out.println(solution.removeVowels(\"aaBAA\")); // \"B\"\n        System.out.println(solution.removeVowels(\"zbcd\")); // \"zbcd\"\n    }\n}"}
{"task_id": "Java/52", "generation": "        for (int num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> l1 = Arrays.asList(1, 2, 4, 10);\n        int t1 = 100;\n        System.out.println(solution.belowThreshold(l1, t1)); // true\n        \n        List<Integer> l2 = Arrays.asList(1, 20, 4, 10);\n        int t2 = 5;\n        System.out.println(solution.belowThreshold(l2, t2)); // false\n    }\n}"}
{"task_id": "Java/52", "generation": "        for (int num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> l1 = Arrays.asList(1, 2, 4, 10);\n        int t1 = 100;\n        System.out.println(solution.belowThreshold(l1, t1)); // true\n        \n        List<Integer> l2 = Arrays.asList(1, 20, 4, 10);\n        int t2 = 5;\n        System.out.println(solution.belowThreshold(l2, t2)); // false\n    }\n}"}
{"task_id": "Java/52", "generation": "        for (int num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> l1 = Arrays.asList(1, 2, 4, 10);\n        int t1 = 100;\n        System.out.println(solution.belowThreshold(l1, t1)); // true\n        \n        List<Integer> l2 = Arrays.asList(1, 20, 4, 10);\n        int t2 = 5;\n        System.out.println(solution.belowThreshold(l2, t2)); // false\n    }\n}"}
{"task_id": "Java/52", "generation": "        for (int num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> l1 = Arrays.asList(1, 2, 4, 10);\n        int t1 = 100;\n        System.out.println(solution.belowThreshold(l1, t1)); // true\n        \n        List<Integer> l2 = Arrays.asList(1, 20, 4, 10);\n        int t2 = 5;\n        System.out.println(solution.belowThreshold(l2, t2)); // false\n    }\n}"}
{"task_id": "Java/52", "generation": "        for (int num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> l1 = Arrays.asList(1, 2, 4, 10);\n        int t1 = 100;\n        System.out.println(solution.belowThreshold(l1, t1)); // true\n        \n        List<Integer> l2 = Arrays.asList(1, 20, 4, 10);\n        int t2 = 5;\n        System.out.println(solution.belowThreshold(l2, t2)); // false\n    }\n}"}
{"task_id": "Java/53", "generation": "        return x + y;\n    }\n\n    /**\n    Subtract number y from x\n    >>> subtract(5, 2)\n    3\n    >>> subtract(10, 7)\n    3\n     */\n    public int subtract(int x, int y) {\n        return x - y;\n    }\n\n    /**\n    Multiply two numbers x and y\n    >>> multiply(3, 4)\n    12\n    >>> multiply(5, 2)\n    10\n     */\n    public int multiply(int x, int y) {\n        return x * y;\n    }\n\n    /**\n    Divide number x by y\n    >>> divide(10, 2)\n    5\n    >>> divide(15, 3)\n    5\n     */\n    public int divide(int x, int y) {\n        return x / y;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(\"Addition:\");\n        System.out.println(\"2 + 3 = \" + solution.add(2, 3));\n        System.out.println(\"5 + 7 = \" + solution.add(5, 7));\n\n        System.out.println(\"\\nSubtraction:\");\n        System.out.println(\"5 - 2 = \" + solution.subtract(5, 2));\n        System.out.println(\"10 - 7 = \" + solution.subtract(10, 7));\n\n        System.out.println(\"\\nMultiplication:\");\n        System.out.println(\"3 * 4 = \" + solution.multiply(3, 4));\n        System.out.println(\"5 * 2 = \" + solution.multiply(5, 2));\n\n        System.out.println(\"\\nDivision:\");\n        System.out.println(\"10 / 2 = \" + solution.divide(10, 2));\n        System.out.println(\"15 / 3 = \" + solution.divide(15, 3));\n    }\n}"}
{"task_id": "Java/53", "generation": "        return x + y;\n    }\n\n    /**\n    Subtract number y from x\n    >>> subtract(5, 2)\n    3\n    >>> subtract(10, 7)\n    3\n     */\n    public int subtract(int x, int y) {\n        return x - y;\n    }\n\n    /**\n    Multiply two numbers x and y\n    >>> multiply(3, 4)\n    12\n    >>> multiply(5, 2)\n    10\n     */\n    public int multiply(int x, int y) {\n        return x * y;\n    }\n\n    /**\n    Divide number x by y\n    >>> divide(10, 2)\n    5\n    >>> divide(15, 3)\n    5\n     */\n    public int divide(int x, int y) {\n        return x / y;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(\"Addition:\");\n        System.out.println(\"2 + 3 = \" + solution.add(2, 3));\n        System.out.println(\"5 + 7 = \" + solution.add(5, 7));\n\n        System.out.println(\"\\nSubtraction:\");\n        System.out.println(\"5 - 2 = \" + solution.subtract(5, 2));\n        System.out.println(\"10 - 7 = \" + solution.subtract(10, 7));\n\n        System.out.println(\"\\nMultiplication:\");\n        System.out.println(\"3 * 4 = \" + solution.multiply(3, 4));\n        System.out.println(\"5 * 2 = \" + solution.multiply(5, 2));\n\n        System.out.println(\"\\nDivision:\");\n        System.out.println(\"10 / 2 = \" + solution.divide(10, 2));\n        System.out.println(\"15 / 3 = \" + solution.divide(15, 3));\n    }\n}"}
{"task_id": "Java/53", "generation": "        return x + y;\n    }\n\n    /**\n    Subtract number y from x\n    >>> subtract(5, 2)\n    3\n    >>> subtract(10, 7)\n    3\n     */\n    public int subtract(int x, int y) {\n        return x - y;\n    }\n\n    /**\n    Multiply two numbers x and y\n    >>> multiply(3, 4)\n    12\n    >>> multiply(5, 2)\n    10\n     */\n    public int multiply(int x, int y) {\n        return x * y;\n    }\n\n    /**\n    Divide number x by y\n    >>> divide(10, 2)\n    5\n    >>> divide(15, 3)\n    5\n     */\n    public int divide(int x, int y) {\n        return x / y;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(\"Addition:\");\n        System.out.println(\"2 + 3 = \" + solution.add(2, 3));\n        System.out.println(\"5 + 7 = \" + solution.add(5, 7));\n\n        System.out.println(\"\\nSubtraction:\");\n        System.out.println(\"5 - 2 = \" + solution.subtract(5, 2));\n        System.out.println(\"10 - 7 = \" + solution.subtract(10, 7));\n\n        System.out.println(\"\\nMultiplication:\");\n        System.out.println(\"3 * 4 = \" + solution.multiply(3, 4));\n        System.out.println(\"5 * 2 = \" + solution.multiply(5, 2));\n\n        System.out.println(\"\\nDivision:\");\n        System.out.println(\"10 / 2 = \" + solution.divide(10, 2));\n        System.out.println(\"15 / 3 = \" + solution.divide(15, 3));\n    }\n}"}
{"task_id": "Java/53", "generation": "        return x + y;\n    }\n\n    /**\n    Subtract number y from x\n    >>> subtract(5, 2)\n    3\n    >>> subtract(10, 7)\n    3\n     */\n    public int subtract(int x, int y) {\n        return x - y;\n    }\n\n    /**\n    Multiply two numbers x and y\n    >>> multiply(3, 4)\n    12\n    >>> multiply(5, 2)\n    10\n     */\n    public int multiply(int x, int y) {\n        return x * y;\n    }\n\n    /**\n    Divide number x by y\n    >>> divide(10, 2)\n    5\n    >>> divide(15, 3)\n    5\n     */\n    public int divide(int x, int y) {\n        return x / y;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(\"Addition:\");\n        System.out.println(\"2 + 3 = \" + solution.add(2, 3));\n        System.out.println(\"5 + 7 = \" + solution.add(5, 7));\n\n        System.out.println(\"\\nSubtraction:\");\n        System.out.println(\"5 - 2 = \" + solution.subtract(5, 2));\n        System.out.println(\"10 - 7 = \" + solution.subtract(10, 7));\n\n        System.out.println(\"\\nMultiplication:\");\n        System.out.println(\"3 * 4 = \" + solution.multiply(3, 4));\n        System.out.println(\"5 * 2 = \" + solution.multiply(5, 2));\n\n        System.out.println(\"\\nDivision:\");\n        System.out.println(\"10 / 2 = \" + solution.divide(10, 2));\n        System.out.println(\"15 / 3 = \" + solution.divide(15, 3));\n    }\n}"}
{"task_id": "Java/53", "generation": "        return x + y;\n    }\n\n    /**\n    Subtract number y from x\n    >>> subtract(5, 2)\n    3\n    >>> subtract(10, 7)\n    3\n     */\n    public int subtract(int x, int y) {\n        return x - y;\n    }\n\n    /**\n    Multiply two numbers x and y\n    >>> multiply(3, 4)\n    12\n    >>> multiply(5, 2)\n    10\n     */\n    public int multiply(int x, int y) {\n        return x * y;\n    }\n\n    /**\n    Divide number x by y\n    >>> divide(10, 2)\n    5\n    >>> divide(15, 3)\n    5\n     */\n    public int divide(int x, int y) {\n        return x / y;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(\"Addition:\");\n        System.out.println(\"2 + 3 = \" + solution.add(2, 3));\n        System.out.println(\"5 + 7 = \" + solution.add(5, 7));\n\n        System.out.println(\"\\nSubtraction:\");\n        System.out.println(\"5 - 2 = \" + solution.subtract(5, 2));\n        System.out.println(\"10 - 7 = \" + solution.subtract(10, 7));\n\n        System.out.println(\"\\nMultiplication:\");\n        System.out.println(\"3 * 4 = \" + solution.multiply(3, 4));\n        System.out.println(\"5 * 2 = \" + solution.multiply(5, 2));\n\n        System.out.println(\"\\nDivision:\");\n        System.out.println(\"10 / 2 = \" + solution.divide(10, 2));\n        System.out.println(\"15 / 3 = \" + solution.divide(15, 3));\n    }\n}"}
{"task_id": "Java/54", "generation": "        if (s0.length() != s1.length()) {\n            return false;\n        }\n        \n        Map<Character, Integer> charCount = new HashMap<>();\n        \n        for (char c : s0.toCharArray()) {\n            charCount.put(c, charCount.getOrDefault(c, 0) + 1);\n        }\n        \n        for (char c : s1.toCharArray()) {\n            if (!charCount.containsKey(c)) {\n                return false;\n            }\n            charCount.put(c, charCount.get(c) - 1);\n            if (charCount.get(c) == 0) {\n                charCount.remove(c);\n            }\n        }\n        \n        return charCount.isEmpty();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")); // true\n        System.out.println(solution.sameChars(\"abcd\", \"dddddddabc\")); // true\n        System.out.println(solution.sameChars(\"dddddddabc\", \"abcd\")); // true\n        System.out.println(solution.sameChars(\"eabcd\", \"dddddddabc\")); // false\n        System.out.println(solution.sameChars(\"abcd\", \"dddddddabce\")); // false\n        System.out.println(solution.sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")); // false\n    }\n}"}
{"task_id": "Java/54", "generation": "        if (s0.length() != s1.length()) {\n            return false;\n        }\n        \n        Map<Character, Integer> charCount = new HashMap<>();\n        \n        for (char c : s0.toCharArray()) {\n            charCount.put(c, charCount.getOrDefault(c, 0) + 1);\n        }\n        \n        for (char c : s1.toCharArray()) {\n            if (!charCount.containsKey(c)) {\n                return false;\n            }\n            charCount.put(c, charCount.get(c) - 1);\n            if (charCount.get(c) == 0) {\n                charCount.remove(c);\n            }\n        }\n        \n        return charCount.isEmpty();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")); // true\n        System.out.println(solution.sameChars(\"abcd\", \"dddddddabc\")); // true\n        System.out.println(solution.sameChars(\"dddddddabc\", \"abcd\")); // true\n        System.out.println(solution.sameChars(\"eabcd\", \"dddddddabc\")); // false\n        System.out.println(solution.sameChars(\"abcd\", \"dddddddabce\")); // false\n        System.out.println(solution.sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")); // false\n    }\n}"}
{"task_id": "Java/54", "generation": "        if (s0.length() != s1.length()) {\n            return false;\n        }\n        \n        Map<Character, Integer> charCount = new HashMap<>();\n        \n        for (char c : s0.toCharArray()) {\n            charCount.put(c, charCount.getOrDefault(c, 0) + 1);\n        }\n        \n        for (char c : s1.toCharArray()) {\n            if (!charCount.containsKey(c)) {\n                return false;\n            }\n            charCount.put(c, charCount.get(c) - 1);\n            if (charCount.get(c) == 0) {\n                charCount.remove(c);\n            }\n        }\n        \n        return charCount.isEmpty();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")); // true\n        System.out.println(solution.sameChars(\"abcd\", \"dddddddabc\")); // true\n        System.out.println(solution.sameChars(\"dddddddabc\", \"abcd\")); // true\n        System.out.println(solution.sameChars(\"eabcd\", \"dddddddabc\")); // false\n        System.out.println(solution.sameChars(\"abcd\", \"dddddddabce\")); // false\n        System.out.println(solution.sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")); // false\n    }\n}"}
{"task_id": "Java/54", "generation": "        if (s0.length() != s1.length()) {\n            return false;\n        }\n        \n        Map<Character, Integer> charCount = new HashMap<>();\n        \n        for (char c : s0.toCharArray()) {\n            charCount.put(c, charCount.getOrDefault(c, 0) + 1);\n        }\n        \n        for (char c : s1.toCharArray()) {\n            if (!charCount.containsKey(c)) {\n                return false;\n            }\n            charCount.put(c, charCount.get(c) - 1);\n            if (charCount.get(c) == 0) {\n                charCount.remove(c);\n            }\n        }\n        \n        return charCount.isEmpty();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")); // true\n        System.out.println(solution.sameChars(\"abcd\", \"dddddddabc\")); // true\n        System.out.println(solution.sameChars(\"dddddddabc\", \"abcd\")); // true\n        System.out.println(solution.sameChars(\"eabcd\", \"dddddddabc\")); // false\n        System.out.println(solution.sameChars(\"abcd\", \"dddddddabce\")); // false\n        System.out.println(solution.sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")); // false\n    }\n}"}
{"task_id": "Java/54", "generation": "        if (s0.length() != s1.length()) {\n            return false;\n        }\n        \n        Map<Character, Integer> charCount = new HashMap<>();\n        \n        for (char c : s0.toCharArray()) {\n            charCount.put(c, charCount.getOrDefault(c, 0) + 1);\n        }\n        \n        for (char c : s1.toCharArray()) {\n            if (!charCount.containsKey(c)) {\n                return false;\n            }\n            charCount.put(c, charCount.get(c) - 1);\n            if (charCount.get(c) == 0) {\n                charCount.remove(c);\n            }\n        }\n        \n        return charCount.isEmpty();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")); // true\n        System.out.println(solution.sameChars(\"abcd\", \"dddddddabc\")); // true\n        System.out.println(solution.sameChars(\"dddddddabc\", \"abcd\")); // true\n        System.out.println(solution.sameChars(\"eabcd\", \"dddddddabc\")); // false\n        System.out.println(solution.sameChars(\"abcd\", \"dddddddabce\")); // false\n        System.out.println(solution.sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")); // false\n    }\n}"}
{"task_id": "Java/55", "generation": "        if (n <= 1) {\n            return n;\n        }\n        \n        int a = 0;\n        int b = 1;\n        int c = 0;\n        \n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        \n        return c;\n    }\n}"}
{"task_id": "Java/55", "generation": "        if (n <= 1) {\n            return n;\n        }\n        \n        int a = 0;\n        int b = 1;\n        int c = 0;\n        \n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        \n        return c;\n    }\n}"}
{"task_id": "Java/55", "generation": "        if (n <= 1) {\n            return n;\n        }\n        \n        int a = 0;\n        int b = 1;\n        int c = 0;\n        \n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        \n        return c;\n    }\n}"}
{"task_id": "Java/55", "generation": "        if (n <= 1) {\n            return n;\n        }\n        \n        int a = 0;\n        int b = 1;\n        int c = 0;\n        \n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        \n        return c;\n    }\n}"}
{"task_id": "Java/55", "generation": "        if (n <= 1) {\n            return n;\n        }\n        \n        int a = 0;\n        int b = 1;\n        int c = 0;\n        \n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        \n        return c;\n    }\n}"}
{"task_id": "Java/56", "generation": "        Stack<Character> stack = new Stack<>();\n        \n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '<') {\n                stack.push(bracket);\n            } else if (bracket == '>') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n}"}
{"task_id": "Java/56", "generation": "        Stack<Character> stack = new Stack<>();\n        \n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '<') {\n                stack.push(bracket);\n            } else if (bracket == '>') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n}"}
{"task_id": "Java/56", "generation": "        Stack<Character> stack = new Stack<>();\n        \n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '<') {\n                stack.push(bracket);\n            } else if (bracket == '>') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n}"}
{"task_id": "Java/56", "generation": "        Stack<Character> stack = new Stack<>();\n        \n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '<') {\n                stack.push(bracket);\n            } else if (bracket == '>') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n}"}
{"task_id": "Java/56", "generation": "        Stack<Character> stack = new Stack<>();\n        \n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '<') {\n                stack.push(bracket);\n            } else if (bracket == '>') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n}"}
{"task_id": "Java/57", "generation": "        boolean increasing = true;\n        boolean decreasing = true;\n        \n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i-1)) {\n                increasing = false;\n            }\n            if (l.get(i) > l.get(i-1)) {\n                decreasing = false;\n            }\n        }\n        \n        return increasing || decreasing;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> l1 = Arrays.asList(1, 2, 4, 20);\n        List<Integer> l2 = Arrays.asList(1, 20, 4, 10);\n        List<Integer> l3 = Arrays.asList(4, 1, 0, -10);\n        \n        System.out.println(solution.monotonic(l1)); // true\n        System.out.println(solution.monotonic(l2)); // false\n        System.out.println(solution.monotonic(l3)); // true\n    }\n}"}
{"task_id": "Java/57", "generation": "        boolean increasing = true;\n        boolean decreasing = true;\n        \n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i-1)) {\n                increasing = false;\n            }\n            if (l.get(i) > l.get(i-1)) {\n                decreasing = false;\n            }\n        }\n        \n        return increasing || decreasing;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> l1 = Arrays.asList(1, 2, 4, 20);\n        List<Integer> l2 = Arrays.asList(1, 20, 4, 10);\n        List<Integer> l3 = Arrays.asList(4, 1, 0, -10);\n        \n        System.out.println(solution.monotonic(l1)); // true\n        System.out.println(solution.monotonic(l2)); // false\n        System.out.println(solution.monotonic(l3)); // true\n    }\n}"}
{"task_id": "Java/57", "generation": "        boolean increasing = true;\n        boolean decreasing = true;\n        \n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i-1)) {\n                increasing = false;\n            }\n            if (l.get(i) > l.get(i-1)) {\n                decreasing = false;\n            }\n        }\n        \n        return increasing || decreasing;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> l1 = Arrays.asList(1, 2, 4, 20);\n        List<Integer> l2 = Arrays.asList(1, 20, 4, 10);\n        List<Integer> l3 = Arrays.asList(4, 1, 0, -10);\n        \n        System.out.println(solution.monotonic(l1)); // true\n        System.out.println(solution.monotonic(l2)); // false\n        System.out.println(solution.monotonic(l3)); // true\n    }\n}"}
{"task_id": "Java/57", "generation": "        boolean increasing = true;\n        boolean decreasing = true;\n        \n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i-1)) {\n                increasing = false;\n            }\n            if (l.get(i) > l.get(i-1)) {\n                decreasing = false;\n            }\n        }\n        \n        return increasing || decreasing;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> l1 = Arrays.asList(1, 2, 4, 20);\n        List<Integer> l2 = Arrays.asList(1, 20, 4, 10);\n        List<Integer> l3 = Arrays.asList(4, 1, 0, -10);\n        \n        System.out.println(solution.monotonic(l1)); // true\n        System.out.println(solution.monotonic(l2)); // false\n        System.out.println(solution.monotonic(l3)); // true\n    }\n}"}
{"task_id": "Java/57", "generation": "        boolean increasing = true;\n        boolean decreasing = true;\n        \n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i-1)) {\n                increasing = false;\n            }\n            if (l.get(i) > l.get(i-1)) {\n                decreasing = false;\n            }\n        }\n        \n        return increasing || decreasing;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> l1 = Arrays.asList(1, 2, 4, 20);\n        List<Integer> l2 = Arrays.asList(1, 20, 4, 10);\n        List<Integer> l3 = Arrays.asList(4, 1, 0, -10);\n        \n        System.out.println(solution.monotonic(l1)); // true\n        System.out.println(solution.monotonic(l2)); // false\n        System.out.println(solution.monotonic(l3)); // true\n    }\n}"}
{"task_id": "Java/58", "generation": "        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        \n        set1.retainAll(set2);\n        \n        List<Integer> result = new ArrayList<>(set1);\n        Collections.sort(result);\n        \n        return result;\n    }\n}"}
{"task_id": "Java/58", "generation": "        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        \n        set1.retainAll(set2);\n        \n        List<Integer> result = new ArrayList<>(set1);\n        Collections.sort(result);\n        \n        return result;\n    }\n}"}
{"task_id": "Java/58", "generation": "        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        \n        set1.retainAll(set2);\n        \n        List<Integer> result = new ArrayList<>(set1);\n        Collections.sort(result);\n        \n        return result;\n    }\n}"}
{"task_id": "Java/58", "generation": "        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        \n        set1.retainAll(set2);\n        \n        List<Integer> result = new ArrayList<>(set1);\n        Collections.sort(result);\n        \n        return result;\n    }\n}"}
{"task_id": "Java/58", "generation": "        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        \n        set1.retainAll(set2);\n        \n        List<Integer> result = new ArrayList<>(set1);\n        Collections.sort(result);\n        \n        return result;\n    }\n}"}
{"task_id": "Java/59", "generation": "        int largestPrime = 2;\n        \n        while (n % 2 == 0) {\n            n /= 2;\n        }\n        \n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                largestPrime = i;\n                n /= i;\n            }\n        }\n        \n        if (n > 2) {\n            largestPrime = n;\n        }\n        \n        return largestPrime;\n    }\n}"}
{"task_id": "Java/59", "generation": "        int largestPrime = 2;\n        \n        while (n % 2 == 0) {\n            n /= 2;\n        }\n        \n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                largestPrime = i;\n                n /= i;\n            }\n        }\n        \n        if (n > 2) {\n            largestPrime = n;\n        }\n        \n        return largestPrime;\n    }\n}"}
{"task_id": "Java/59", "generation": "        int largestPrime = 2;\n        \n        while (n % 2 == 0) {\n            n /= 2;\n        }\n        \n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                largestPrime = i;\n                n /= i;\n            }\n        }\n        \n        if (n > 2) {\n            largestPrime = n;\n        }\n        \n        return largestPrime;\n    }\n}"}
{"task_id": "Java/59", "generation": "        int largestPrime = 2;\n        \n        while (n % 2 == 0) {\n            n /= 2;\n        }\n        \n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                largestPrime = i;\n                n /= i;\n            }\n        }\n        \n        if (n > 2) {\n            largestPrime = n;\n        }\n        \n        return largestPrime;\n    }\n}"}
{"task_id": "Java/59", "generation": "        int largestPrime = 2;\n        \n        while (n % 2 == 0) {\n            n /= 2;\n        }\n        \n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                largestPrime = i;\n                n /= i;\n            }\n        }\n        \n        if (n > 2) {\n            largestPrime = n;\n        }\n        \n        return largestPrime;\n    }\n}"}
{"task_id": "Java/60", "generation": "        return n * (n + 1) / 2;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.sumToN(30)); // Output: 465\n        System.out.println(solution.sumToN(100)); // Output: 5050\n        System.out.println(solution.sumToN(5)); // Output: 15\n        System.out.println(solution.sumToN(10)); // Output: 55\n        System.out.println(solution.sumToN(1)); // Output: 1\n    }\n}"}
{"task_id": "Java/60", "generation": "        return n * (n + 1) / 2;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.sumToN(30)); // Output: 465\n        System.out.println(solution.sumToN(100)); // Output: 5050\n        System.out.println(solution.sumToN(5)); // Output: 15\n        System.out.println(solution.sumToN(10)); // Output: 55\n        System.out.println(solution.sumToN(1)); // Output: 1\n    }\n}"}
{"task_id": "Java/60", "generation": "        return n * (n + 1) / 2;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.sumToN(30)); // Output: 465\n        System.out.println(solution.sumToN(100)); // Output: 5050\n        System.out.println(solution.sumToN(5)); // Output: 15\n        System.out.println(solution.sumToN(10)); // Output: 55\n        System.out.println(solution.sumToN(1)); // Output: 1\n    }\n}"}
{"task_id": "Java/60", "generation": "        return n * (n + 1) / 2;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.sumToN(30)); // Output: 465\n        System.out.println(solution.sumToN(100)); // Output: 5050\n        System.out.println(solution.sumToN(5)); // Output: 15\n        System.out.println(solution.sumToN(10)); // Output: 55\n        System.out.println(solution.sumToN(1)); // Output: 1\n    }\n}"}
{"task_id": "Java/60", "generation": "        return n * (n + 1) / 2;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.sumToN(30)); // Output: 465\n        System.out.println(solution.sumToN(100)); // Output: 5050\n        System.out.println(solution.sumToN(5)); // Output: 15\n        System.out.println(solution.sumToN(10)); // Output: 55\n        System.out.println(solution.sumToN(1)); // Output: 1\n    }\n}"}
{"task_id": "Java/61", "generation": "        Stack<Character> stack = new Stack<>();\n        \n        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.correctBracketing(\"(\")); // false\n        System.out.println(solution.correctBracketing(\"()\")); // true\n        System.out.println(solution.correctBracketing(\"(()())\")); // true\n        System.out.println(solution.correctBracketing(\")(()\")); // false\n    }\n}"}
{"task_id": "Java/61", "generation": "        Stack<Character> stack = new Stack<>();\n        \n        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.correctBracketing(\"(\")); // false\n        System.out.println(solution.correctBracketing(\"()\")); // true\n        System.out.println(solution.correctBracketing(\"(()())\")); // true\n        System.out.println(solution.correctBracketing(\")(()\")); // false\n    }\n}"}
{"task_id": "Java/61", "generation": "        Stack<Character> stack = new Stack<>();\n        \n        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.correctBracketing(\"(\")); // false\n        System.out.println(solution.correctBracketing(\"()\")); // true\n        System.out.println(solution.correctBracketing(\"(()())\")); // true\n        System.out.println(solution.correctBracketing(\")(()\")); // false\n    }\n}"}
{"task_id": "Java/61", "generation": "        Stack<Character> stack = new Stack<>();\n        \n        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.correctBracketing(\"(\")); // false\n        System.out.println(solution.correctBracketing(\"()\")); // true\n        System.out.println(solution.correctBracketing(\"(()())\")); // true\n        System.out.println(solution.correctBracketing(\")(()\")); // false\n    }\n}"}
{"task_id": "Java/61", "generation": "        Stack<Character> stack = new Stack<>();\n        \n        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.correctBracketing(\"(\")); // false\n        System.out.println(solution.correctBracketing(\"()\")); // true\n        System.out.println(solution.correctBracketing(\"(()())\")); // true\n        System.out.println(solution.correctBracketing(\")(()\")); // false\n    }\n}"}
{"task_id": "Java/62", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/62", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/62", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/62", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/62", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/63", "generation": "        if (n == 0 || n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 1;\n        }\n        \n        int[] fibfib = new int[n+1];\n        fibfib[0] = 0;\n        fibfib[1] = 0;\n        fibfib[2] = 1;\n        \n        for (int i = 3; i <= n; i++) {\n            fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3];\n        }\n        \n        return fibfib[n];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fibfib(1)); // 0\n        System.out.println(solution.fibfib(5)); // 4\n        System.out.println(solution.fibfib(8)); // 24\n    }\n}"}
{"task_id": "Java/63", "generation": "        if (n == 0 || n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 1;\n        }\n        \n        int[] fibfib = new int[n+1];\n        fibfib[0] = 0;\n        fibfib[1] = 0;\n        fibfib[2] = 1;\n        \n        for (int i = 3; i <= n; i++) {\n            fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3];\n        }\n        \n        return fibfib[n];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fibfib(1)); // 0\n        System.out.println(solution.fibfib(5)); // 4\n        System.out.println(solution.fibfib(8)); // 24\n    }\n}"}
{"task_id": "Java/63", "generation": "        if (n == 0 || n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 1;\n        }\n        \n        int[] fibfib = new int[n+1];\n        fibfib[0] = 0;\n        fibfib[1] = 0;\n        fibfib[2] = 1;\n        \n        for (int i = 3; i <= n; i++) {\n            fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3];\n        }\n        \n        return fibfib[n];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fibfib(1)); // 0\n        System.out.println(solution.fibfib(5)); // 4\n        System.out.println(solution.fibfib(8)); // 24\n    }\n}"}
{"task_id": "Java/63", "generation": "        if (n == 0 || n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 1;\n        }\n        \n        int[] fibfib = new int[n+1];\n        fibfib[0] = 0;\n        fibfib[1] = 0;\n        fibfib[2] = 1;\n        \n        for (int i = 3; i <= n; i++) {\n            fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3];\n        }\n        \n        return fibfib[n];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fibfib(1)); // 0\n        System.out.println(solution.fibfib(5)); // 4\n        System.out.println(solution.fibfib(8)); // 24\n    }\n}"}
{"task_id": "Java/63", "generation": "        if (n == 0 || n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 1;\n        }\n        \n        int[] fibfib = new int[n+1];\n        fibfib[0] = 0;\n        fibfib[1] = 0;\n        fibfib[2] = 1;\n        \n        for (int i = 3; i <= n; i++) {\n            fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3];\n        }\n        \n        return fibfib[n];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fibfib(1)); // 0\n        System.out.println(solution.fibfib(5)); // 4\n        System.out.println(solution.fibfib(8)); // 24\n    }\n}"}
{"task_id": "Java/64", "generation": "        s = s.toLowerCase();\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            }\n        }\n        if (s.endsWith(\"y\")) {\n            count++;\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.vowelsCount(\"abcde\")); // Output: 2\n        System.out.println(solution.vowelsCount(\"ACEDY\")); // Output: 3\n    }\n}"}
{"task_id": "Java/64", "generation": "        s = s.toLowerCase();\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            }\n        }\n        if (s.endsWith(\"y\")) {\n            count++;\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.vowelsCount(\"abcde\")); // Output: 2\n        System.out.println(solution.vowelsCount(\"ACEDY\")); // Output: 3\n    }\n}"}
{"task_id": "Java/64", "generation": "        s = s.toLowerCase();\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            }\n        }\n        if (s.endsWith(\"y\")) {\n            count++;\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.vowelsCount(\"abcde\")); // Output: 2\n        System.out.println(solution.vowelsCount(\"ACEDY\")); // Output: 3\n    }\n}"}
{"task_id": "Java/64", "generation": "        s = s.toLowerCase();\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            }\n        }\n        if (s.endsWith(\"y\")) {\n            count++;\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.vowelsCount(\"abcde\")); // Output: 2\n        System.out.println(solution.vowelsCount(\"ACEDY\")); // Output: 3\n    }\n}"}
{"task_id": "Java/64", "generation": "        s = s.toLowerCase();\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            }\n        }\n        if (s.endsWith(\"y\")) {\n            count++;\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.vowelsCount(\"abcde\")); // Output: 2\n        System.out.println(solution.vowelsCount(\"ACEDY\")); // Output: 3\n    }\n}"}
{"task_id": "Java/65", "generation": "        String numStr = String.valueOf(x);\n        int len = numStr.length();\n        \n        if (shift > len) {\n            StringBuilder reversed = new StringBuilder(numStr);\n            return reversed.reverse().toString();\n        }\n        \n        shift = shift % len;\n        String shifted = numStr.substring(len - shift) + numStr.substring(0, len - shift);\n        \n        return shifted;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.circularShift(12, 1)); // \"21\"\n        System.out.println(solution.circularShift(12, 2)); // \"12\"\n    }\n}"}
{"task_id": "Java/65", "generation": "        String numStr = String.valueOf(x);\n        int len = numStr.length();\n        \n        if (shift > len) {\n            StringBuilder reversed = new StringBuilder(numStr);\n            return reversed.reverse().toString();\n        }\n        \n        shift = shift % len;\n        String shifted = numStr.substring(len - shift) + numStr.substring(0, len - shift);\n        \n        return shifted;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.circularShift(12, 1)); // \"21\"\n        System.out.println(solution.circularShift(12, 2)); // \"12\"\n    }\n}"}
{"task_id": "Java/65", "generation": "        String numStr = String.valueOf(x);\n        int len = numStr.length();\n        \n        if (shift > len) {\n            StringBuilder reversed = new StringBuilder(numStr);\n            return reversed.reverse().toString();\n        }\n        \n        shift = shift % len;\n        String shifted = numStr.substring(len - shift) + numStr.substring(0, len - shift);\n        \n        return shifted;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.circularShift(12, 1)); // \"21\"\n        System.out.println(solution.circularShift(12, 2)); // \"12\"\n    }\n}"}
{"task_id": "Java/65", "generation": "        String numStr = String.valueOf(x);\n        int len = numStr.length();\n        \n        if (shift > len) {\n            StringBuilder reversed = new StringBuilder(numStr);\n            return reversed.reverse().toString();\n        }\n        \n        shift = shift % len;\n        String shifted = numStr.substring(len - shift) + numStr.substring(0, len - shift);\n        \n        return shifted;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.circularShift(12, 1)); // \"21\"\n        System.out.println(solution.circularShift(12, 2)); // \"12\"\n    }\n}"}
{"task_id": "Java/65", "generation": "        String numStr = String.valueOf(x);\n        int len = numStr.length();\n        \n        if (shift > len) {\n            StringBuilder reversed = new StringBuilder(numStr);\n            return reversed.reverse().toString();\n        }\n        \n        shift = shift % len;\n        String shifted = numStr.substring(len - shift) + numStr.substring(0, len - shift);\n        \n        return shifted;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.circularShift(12, 1)); // \"21\"\n        System.out.println(solution.circularShift(12, 2)); // \"12\"\n    }\n}"}
{"task_id": "Java/66", "generation": "        int sum = 0;\n        \n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += (int) c;\n            }\n        }\n        \n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.digitSum(\"\")); // 0\n        System.out.println(solution.digitSum(\"abAB\")); // 131\n        System.out.println(solution.digitSum(\"abcCd\")); // 67\n        System.out.println(solution.digitSum(\"helloE\")); // 69\n        System.out.println(solution.digitSum(\"woArBld\")); // 131\n        System.out.println(solution.digitSum(\"aAaaaXa\")); // 153\n    }\n}"}
{"task_id": "Java/66", "generation": "        int sum = 0;\n        \n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += (int) c;\n            }\n        }\n        \n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.digitSum(\"\")); // 0\n        System.out.println(solution.digitSum(\"abAB\")); // 131\n        System.out.println(solution.digitSum(\"abcCd\")); // 67\n        System.out.println(solution.digitSum(\"helloE\")); // 69\n        System.out.println(solution.digitSum(\"woArBld\")); // 131\n        System.out.println(solution.digitSum(\"aAaaaXa\")); // 153\n    }\n}"}
{"task_id": "Java/66", "generation": "        int sum = 0;\n        \n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += (int) c;\n            }\n        }\n        \n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.digitSum(\"\")); // 0\n        System.out.println(solution.digitSum(\"abAB\")); // 131\n        System.out.println(solution.digitSum(\"abcCd\")); // 67\n        System.out.println(solution.digitSum(\"helloE\")); // 69\n        System.out.println(solution.digitSum(\"woArBld\")); // 131\n        System.out.println(solution.digitSum(\"aAaaaXa\")); // 153\n    }\n}"}
{"task_id": "Java/66", "generation": "        int sum = 0;\n        \n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += (int) c;\n            }\n        }\n        \n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.digitSum(\"\")); // 0\n        System.out.println(solution.digitSum(\"abAB\")); // 131\n        System.out.println(solution.digitSum(\"abcCd\")); // 67\n        System.out.println(solution.digitSum(\"helloE\")); // 69\n        System.out.println(solution.digitSum(\"woArBld\")); // 131\n        System.out.println(solution.digitSum(\"aAaaaXa\")); // 153\n    }\n}"}
{"task_id": "Java/66", "generation": "        int sum = 0;\n        \n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += (int) c;\n            }\n        }\n        \n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.digitSum(\"\")); // 0\n        System.out.println(solution.digitSum(\"abAB\")); // 131\n        System.out.println(solution.digitSum(\"abcCd\")); // 67\n        System.out.println(solution.digitSum(\"helloE\")); // 69\n        System.out.println(solution.digitSum(\"woArBld\")); // 131\n        System.out.println(solution.digitSum(\"aAaaaXa\")); // 153\n    }\n}"}
{"task_id": "Java/67", "generation": "        // Split the string to get the number of apples and oranges\n        String[] parts = s.split(\" \");\n        int apples = Integer.parseInt(parts[0]);\n        int oranges = Integer.parseInt(parts[3]);\n        \n        // Calculate the number of mango fruits\n        int mango = n - apples - oranges;\n        \n        return mango;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.fruitDistribution(\"5 apples and 6 oranges\", 19)); // Output: 8\n        System.out.println(solution.fruitDistribution(\"0 apples and 1 oranges\", 3)); // Output: 2\n        System.out.println(solution.fruitDistribution(\"2 apples and 3 oranges\", 100)); // Output: 95\n        System.out.println(solution.fruitDistribution(\"100 apples and 1 oranges\", 120)); // Output: 19\n    }\n}"}
{"task_id": "Java/67", "generation": "        // Split the string to get the number of apples and oranges\n        String[] parts = s.split(\" \");\n        int apples = Integer.parseInt(parts[0]);\n        int oranges = Integer.parseInt(parts[3]);\n        \n        // Calculate the number of mango fruits\n        int mango = n - apples - oranges;\n        \n        return mango;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.fruitDistribution(\"5 apples and 6 oranges\", 19)); // Output: 8\n        System.out.println(solution.fruitDistribution(\"0 apples and 1 oranges\", 3)); // Output: 2\n        System.out.println(solution.fruitDistribution(\"2 apples and 3 oranges\", 100)); // Output: 95\n        System.out.println(solution.fruitDistribution(\"100 apples and 1 oranges\", 120)); // Output: 19\n    }\n}"}
{"task_id": "Java/67", "generation": "        // Split the string to get the number of apples and oranges\n        String[] parts = s.split(\" \");\n        int apples = Integer.parseInt(parts[0]);\n        int oranges = Integer.parseInt(parts[3]);\n        \n        // Calculate the number of mango fruits\n        int mango = n - apples - oranges;\n        \n        return mango;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.fruitDistribution(\"5 apples and 6 oranges\", 19)); // Output: 8\n        System.out.println(solution.fruitDistribution(\"0 apples and 1 oranges\", 3)); // Output: 2\n        System.out.println(solution.fruitDistribution(\"2 apples and 3 oranges\", 100)); // Output: 95\n        System.out.println(solution.fruitDistribution(\"100 apples and 1 oranges\", 120)); // Output: 19\n    }\n}"}
{"task_id": "Java/67", "generation": "        // Split the string to get the number of apples and oranges\n        String[] parts = s.split(\" \");\n        int apples = Integer.parseInt(parts[0]);\n        int oranges = Integer.parseInt(parts[3]);\n        \n        // Calculate the number of mango fruits\n        int mango = n - apples - oranges;\n        \n        return mango;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.fruitDistribution(\"5 apples and 6 oranges\", 19)); // Output: 8\n        System.out.println(solution.fruitDistribution(\"0 apples and 1 oranges\", 3)); // Output: 2\n        System.out.println(solution.fruitDistribution(\"2 apples and 3 oranges\", 100)); // Output: 95\n        System.out.println(solution.fruitDistribution(\"100 apples and 1 oranges\", 120)); // Output: 19\n    }\n}"}
{"task_id": "Java/67", "generation": "        // Split the string to get the number of apples and oranges\n        String[] parts = s.split(\" \");\n        int apples = Integer.parseInt(parts[0]);\n        int oranges = Integer.parseInt(parts[3]);\n        \n        // Calculate the number of mango fruits\n        int mango = n - apples - oranges;\n        \n        return mango;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.fruitDistribution(\"5 apples and 6 oranges\", 19)); // Output: 8\n        System.out.println(solution.fruitDistribution(\"0 apples and 1 oranges\", 3)); // Output: 2\n        System.out.println(solution.fruitDistribution(\"2 apples and 3 oranges\", 100)); // Output: 95\n        System.out.println(solution.fruitDistribution(\"100 apples and 1 oranges\", 120)); // Output: 19\n    }\n}"}
{"task_id": "Java/68", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        int smallestEvenValue = Integer.MAX_VALUE;\n        int smallestIndex = Integer.MAX_VALUE;\n        \n        for (int i = 0; i < arr.size(); i++) {\n            int current = arr.get(i);\n            if (current % 2 == 0 && current < smallestEvenValue) {\n                smallestEvenValue = current;\n                smallestIndex = i;\n            }\n        }\n        \n        if (smallestEvenValue == Integer.MAX_VALUE) {\n            return result;\n        }\n        \n        result.add(smallestEvenValue);\n        result.add(smallestIndex);\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> arr1 = new ArrayList<>(Arrays.asList(4, 2, 3));\n        System.out.println(solution.pluck(arr1)); // Output: [2, 1]\n\n        List<Integer> arr2 = new ArrayList<>(Arrays.asList(1, 2, 3));\n        System.out.println(solution.pluck(arr2)); // Output: [2, 1]\n\n        List<Integer> arr3 = new ArrayList<>();\n        System.out.println(solution.pluck(arr3)); // Output: []\n\n        List<Integer> arr4 = new ArrayList<>(Arrays.asList(5, 0, 3, 0, 4, 2));\n        System.out.println(solution.pluck(arr4)); // Output: [0, 1]\n    }\n}"}
{"task_id": "Java/68", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        int smallestEvenValue = Integer.MAX_VALUE;\n        int smallestIndex = Integer.MAX_VALUE;\n        \n        for (int i = 0; i < arr.size(); i++) {\n            int current = arr.get(i);\n            if (current % 2 == 0 && current < smallestEvenValue) {\n                smallestEvenValue = current;\n                smallestIndex = i;\n            }\n        }\n        \n        if (smallestEvenValue == Integer.MAX_VALUE) {\n            return result;\n        }\n        \n        result.add(smallestEvenValue);\n        result.add(smallestIndex);\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> arr1 = new ArrayList<>(Arrays.asList(4, 2, 3));\n        System.out.println(solution.pluck(arr1)); // Output: [2, 1]\n\n        List<Integer> arr2 = new ArrayList<>(Arrays.asList(1, 2, 3));\n        System.out.println(solution.pluck(arr2)); // Output: [2, 1]\n\n        List<Integer> arr3 = new ArrayList<>();\n        System.out.println(solution.pluck(arr3)); // Output: []\n\n        List<Integer> arr4 = new ArrayList<>(Arrays.asList(5, 0, 3, 0, 4, 2));\n        System.out.println(solution.pluck(arr4)); // Output: [0, 1]\n    }\n}"}
{"task_id": "Java/68", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        int smallestEvenValue = Integer.MAX_VALUE;\n        int smallestIndex = Integer.MAX_VALUE;\n        \n        for (int i = 0; i < arr.size(); i++) {\n            int current = arr.get(i);\n            if (current % 2 == 0 && current < smallestEvenValue) {\n                smallestEvenValue = current;\n                smallestIndex = i;\n            }\n        }\n        \n        if (smallestEvenValue == Integer.MAX_VALUE) {\n            return result;\n        }\n        \n        result.add(smallestEvenValue);\n        result.add(smallestIndex);\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> arr1 = new ArrayList<>(Arrays.asList(4, 2, 3));\n        System.out.println(solution.pluck(arr1)); // Output: [2, 1]\n\n        List<Integer> arr2 = new ArrayList<>(Arrays.asList(1, 2, 3));\n        System.out.println(solution.pluck(arr2)); // Output: [2, 1]\n\n        List<Integer> arr3 = new ArrayList<>();\n        System.out.println(solution.pluck(arr3)); // Output: []\n\n        List<Integer> arr4 = new ArrayList<>(Arrays.asList(5, 0, 3, 0, 4, 2));\n        System.out.println(solution.pluck(arr4)); // Output: [0, 1]\n    }\n}"}
{"task_id": "Java/68", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        int smallestEvenValue = Integer.MAX_VALUE;\n        int smallestIndex = Integer.MAX_VALUE;\n        \n        for (int i = 0; i < arr.size(); i++) {\n            int current = arr.get(i);\n            if (current % 2 == 0 && current < smallestEvenValue) {\n                smallestEvenValue = current;\n                smallestIndex = i;\n            }\n        }\n        \n        if (smallestEvenValue == Integer.MAX_VALUE) {\n            return result;\n        }\n        \n        result.add(smallestEvenValue);\n        result.add(smallestIndex);\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> arr1 = new ArrayList<>(Arrays.asList(4, 2, 3));\n        System.out.println(solution.pluck(arr1)); // Output: [2, 1]\n\n        List<Integer> arr2 = new ArrayList<>(Arrays.asList(1, 2, 3));\n        System.out.println(solution.pluck(arr2)); // Output: [2, 1]\n\n        List<Integer> arr3 = new ArrayList<>();\n        System.out.println(solution.pluck(arr3)); // Output: []\n\n        List<Integer> arr4 = new ArrayList<>(Arrays.asList(5, 0, 3, 0, 4, 2));\n        System.out.println(solution.pluck(arr4)); // Output: [0, 1]\n    }\n}"}
{"task_id": "Java/68", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        int smallestEvenValue = Integer.MAX_VALUE;\n        int smallestIndex = Integer.MAX_VALUE;\n        \n        for (int i = 0; i < arr.size(); i++) {\n            int current = arr.get(i);\n            if (current % 2 == 0 && current < smallestEvenValue) {\n                smallestEvenValue = current;\n                smallestIndex = i;\n            }\n        }\n        \n        if (smallestEvenValue == Integer.MAX_VALUE) {\n            return result;\n        }\n        \n        result.add(smallestEvenValue);\n        result.add(smallestIndex);\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> arr1 = new ArrayList<>(Arrays.asList(4, 2, 3));\n        System.out.println(solution.pluck(arr1)); // Output: [2, 1]\n\n        List<Integer> arr2 = new ArrayList<>(Arrays.asList(1, 2, 3));\n        System.out.println(solution.pluck(arr2)); // Output: [2, 1]\n\n        List<Integer> arr3 = new ArrayList<>();\n        System.out.println(solution.pluck(arr3)); // Output: []\n\n        List<Integer> arr4 = new ArrayList<>(Arrays.asList(5, 0, 3, 0, 4, 2));\n        System.out.println(solution.pluck(arr4)); // Output: [0, 1]\n    }\n}"}
{"task_id": "Java/69", "generation": "        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        \n        // Count the frequency of each integer in the list\n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n        \n        // Iterate through the frequency map to find the greatest integer that meets the condition\n        int result = -1;\n        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n            int num = entry.getKey();\n            int frequency = entry.getValue();\n            if (num > 0 && frequency >= num) {\n                result = Math.max(result, num);\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.search(Arrays.asList(4, 1, 2, 2, 3, 1))); // Output: 2\n        System.out.println(solution.search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4))); // Output: 3\n        System.out.println(solution.search(Arrays.asList(5, 5, 4, 4, 4))); // Output: -1\n    }\n}"}
{"task_id": "Java/69", "generation": "        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        \n        // Count the frequency of each integer in the list\n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n        \n        // Iterate through the frequency map to find the greatest integer that meets the condition\n        int result = -1;\n        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n            int num = entry.getKey();\n            int frequency = entry.getValue();\n            if (num > 0 && frequency >= num) {\n                result = Math.max(result, num);\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.search(Arrays.asList(4, 1, 2, 2, 3, 1))); // Output: 2\n        System.out.println(solution.search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4))); // Output: 3\n        System.out.println(solution.search(Arrays.asList(5, 5, 4, 4, 4))); // Output: -1\n    }\n}"}
{"task_id": "Java/69", "generation": "        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        \n        // Count the frequency of each integer in the list\n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n        \n        // Iterate through the frequency map to find the greatest integer that meets the condition\n        int result = -1;\n        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n            int num = entry.getKey();\n            int frequency = entry.getValue();\n            if (num > 0 && frequency >= num) {\n                result = Math.max(result, num);\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.search(Arrays.asList(4, 1, 2, 2, 3, 1))); // Output: 2\n        System.out.println(solution.search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4))); // Output: 3\n        System.out.println(solution.search(Arrays.asList(5, 5, 4, 4, 4))); // Output: -1\n    }\n}"}
{"task_id": "Java/69", "generation": "        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        \n        // Count the frequency of each integer in the list\n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n        \n        // Iterate through the frequency map to find the greatest integer that meets the condition\n        int result = -1;\n        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n            int num = entry.getKey();\n            int frequency = entry.getValue();\n            if (num > 0 && frequency >= num) {\n                result = Math.max(result, num);\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.search(Arrays.asList(4, 1, 2, 2, 3, 1))); // Output: 2\n        System.out.println(solution.search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4))); // Output: 3\n        System.out.println(solution.search(Arrays.asList(5, 5, 4, 4, 4))); // Output: -1\n    }\n}"}
{"task_id": "Java/69", "generation": "        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        \n        // Count the frequency of each integer in the list\n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n        \n        // Iterate through the frequency map to find the greatest integer that meets the condition\n        int result = -1;\n        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n            int num = entry.getKey();\n            int frequency = entry.getValue();\n            if (num > 0 && frequency >= num) {\n                result = Math.max(result, num);\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.search(Arrays.asList(4, 1, 2, 2, 3, 1))); // Output: 2\n        System.out.println(solution.search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4))); // Output: 3\n        System.out.println(solution.search(Arrays.asList(5, 5, 4, 4, 4))); // Output: -1\n    }\n}"}
{"task_id": "Java/70", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        // Sort the list in ascending order\n        Collections.sort(lst);\n        \n        int left = 0;\n        int right = lst.size() - 1;\n        \n        while (left <= right) {\n            // Add the minimum value\n            result.add(lst.get(left));\n            left++;\n            \n            // Add the maximum value if there are still elements left\n            if (left <= right) {\n                result.add(lst.get(right));\n                right--;\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.strangeSortList(Arrays.asList(1, 2, 3, 4))); // [1, 4, 2, 3]\n        System.out.println(solution.strangeSortList(Arrays.asList(5, 5, 5, 5))); // [5, 5, 5, 5]\n        System.out.println(solution.strangeSortList(Arrays.asList())); // []\n    }\n}"}
{"task_id": "Java/70", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        // Sort the list in ascending order\n        Collections.sort(lst);\n        \n        int left = 0;\n        int right = lst.size() - 1;\n        \n        while (left <= right) {\n            // Add the minimum value\n            result.add(lst.get(left));\n            left++;\n            \n            // Add the maximum value if there are still elements left\n            if (left <= right) {\n                result.add(lst.get(right));\n                right--;\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.strangeSortList(Arrays.asList(1, 2, 3, 4))); // [1, 4, 2, 3]\n        System.out.println(solution.strangeSortList(Arrays.asList(5, 5, 5, 5))); // [5, 5, 5, 5]\n        System.out.println(solution.strangeSortList(Arrays.asList())); // []\n    }\n}"}
{"task_id": "Java/70", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        // Sort the list in ascending order\n        Collections.sort(lst);\n        \n        int left = 0;\n        int right = lst.size() - 1;\n        \n        while (left <= right) {\n            // Add the minimum value\n            result.add(lst.get(left));\n            left++;\n            \n            // Add the maximum value if there are still elements left\n            if (left <= right) {\n                result.add(lst.get(right));\n                right--;\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.strangeSortList(Arrays.asList(1, 2, 3, 4))); // [1, 4, 2, 3]\n        System.out.println(solution.strangeSortList(Arrays.asList(5, 5, 5, 5))); // [5, 5, 5, 5]\n        System.out.println(solution.strangeSortList(Arrays.asList())); // []\n    }\n}"}
{"task_id": "Java/70", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        // Sort the list in ascending order\n        Collections.sort(lst);\n        \n        int left = 0;\n        int right = lst.size() - 1;\n        \n        while (left <= right) {\n            // Add the minimum value\n            result.add(lst.get(left));\n            left++;\n            \n            // Add the maximum value if there are still elements left\n            if (left <= right) {\n                result.add(lst.get(right));\n                right--;\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.strangeSortList(Arrays.asList(1, 2, 3, 4))); // [1, 4, 2, 3]\n        System.out.println(solution.strangeSortList(Arrays.asList(5, 5, 5, 5))); // [5, 5, 5, 5]\n        System.out.println(solution.strangeSortList(Arrays.asList())); // []\n    }\n}"}
{"task_id": "Java/70", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        // Sort the list in ascending order\n        Collections.sort(lst);\n        \n        int left = 0;\n        int right = lst.size() - 1;\n        \n        while (left <= right) {\n            // Add the minimum value\n            result.add(lst.get(left));\n            left++;\n            \n            // Add the maximum value if there are still elements left\n            if (left <= right) {\n                result.add(lst.get(right));\n                right--;\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.strangeSortList(Arrays.asList(1, 2, 3, 4))); // [1, 4, 2, 3]\n        System.out.println(solution.strangeSortList(Arrays.asList(5, 5, 5, 5))); // [5, 5, 5, 5]\n        System.out.println(solution.strangeSortList(Arrays.asList())); // []\n    }\n}"}
{"task_id": "Java/71", "generation": "        // Check if the sides form a valid triangle\n        if (a + b > c && a + c > b && b + c > a) {\n            // Calculate the semi-perimeter\n            double s = (a + b + c) / 2;\n            // Calculate the area using Heron's formula\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            // Round the area to 2 decimal points\n            return Math.round(area * 100.0) / 100.0;\n        } else {\n            return -1;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        // Test cases\n        System.out.println(solution.triangleArea(3, 4, 5)); // Output: 6.0\n        System.out.println(solution.triangleArea(1, 2, 10)); // Output: -1\n    }\n}"}
{"task_id": "Java/71", "generation": "        // Check if the sides form a valid triangle\n        if (a + b > c && a + c > b && b + c > a) {\n            // Calculate the semi-perimeter\n            double s = (a + b + c) / 2;\n            // Calculate the area using Heron's formula\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            // Round the area to 2 decimal points\n            return Math.round(area * 100.0) / 100.0;\n        } else {\n            return -1;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        // Test cases\n        System.out.println(solution.triangleArea(3, 4, 5)); // Output: 6.0\n        System.out.println(solution.triangleArea(1, 2, 10)); // Output: -1\n    }\n}"}
{"task_id": "Java/71", "generation": "        // Check if the sides form a valid triangle\n        if (a + b > c && a + c > b && b + c > a) {\n            // Calculate the semi-perimeter\n            double s = (a + b + c) / 2;\n            // Calculate the area using Heron's formula\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            // Round the area to 2 decimal points\n            return Math.round(area * 100.0) / 100.0;\n        } else {\n            return -1;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        // Test cases\n        System.out.println(solution.triangleArea(3, 4, 5)); // Output: 6.0\n        System.out.println(solution.triangleArea(1, 2, 10)); // Output: -1\n    }\n}"}
{"task_id": "Java/71", "generation": "        // Check if the sides form a valid triangle\n        if (a + b > c && a + c > b && b + c > a) {\n            // Calculate the semi-perimeter\n            double s = (a + b + c) / 2;\n            // Calculate the area using Heron's formula\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            // Round the area to 2 decimal points\n            return Math.round(area * 100.0) / 100.0;\n        } else {\n            return -1;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        // Test cases\n        System.out.println(solution.triangleArea(3, 4, 5)); // Output: 6.0\n        System.out.println(solution.triangleArea(1, 2, 10)); // Output: -1\n    }\n}"}
{"task_id": "Java/71", "generation": "        // Check if the sides form a valid triangle\n        if (a + b > c && a + c > b && b + c > a) {\n            // Calculate the semi-perimeter\n            double s = (a + b + c) / 2;\n            // Calculate the area using Heron's formula\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            // Round the area to 2 decimal points\n            return Math.round(area * 100.0) / 100.0;\n        } else {\n            return -1;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        // Test cases\n        System.out.println(solution.triangleArea(3, 4, 5)); // Output: 6.0\n        System.out.println(solution.triangleArea(1, 2, 10)); // Output: -1\n    }\n}"}
{"task_id": "Java/72", "generation": "        // Check if the list is balanced (palindromic)\n        boolean isBalanced = isBalancedList(q);\n        \n        // Calculate the sum of elements in the list\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n        \n        // Check if the sum is less than or equal to the maximum weight\n        return isBalanced && sum <= w;\n    }\n    \n    // Helper function to check if a list is palindromic\n    private boolean isBalancedList(List<Integer> list) {\n        int left = 0;\n        int right = list.size() - 1;\n        \n        while (left < right) {\n            if (!list.get(left).equals(list.get(right))) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.willItFly(Arrays.asList(1, 2), 5)); // false\n        System.out.println(solution.willItFly(Arrays.asList(3, 2, 3), 1)); // false\n        System.out.println(solution.willItFly(Arrays.asList(3, 2, 3), 9)); // true\n        System.out.println(solution.willItFly(Arrays.asList(3), 5)); // true\n    }\n}"}
{"task_id": "Java/72", "generation": "        // Check if the list is balanced (palindromic)\n        boolean isBalanced = isBalancedList(q);\n        \n        // Calculate the sum of elements in the list\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n        \n        // Check if the sum is less than or equal to the maximum weight\n        return isBalanced && sum <= w;\n    }\n    \n    // Helper function to check if a list is palindromic\n    private boolean isBalancedList(List<Integer> list) {\n        int left = 0;\n        int right = list.size() - 1;\n        \n        while (left < right) {\n            if (!list.get(left).equals(list.get(right))) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.willItFly(Arrays.asList(1, 2), 5)); // false\n        System.out.println(solution.willItFly(Arrays.asList(3, 2, 3), 1)); // false\n        System.out.println(solution.willItFly(Arrays.asList(3, 2, 3), 9)); // true\n        System.out.println(solution.willItFly(Arrays.asList(3), 5)); // true\n    }\n}"}
{"task_id": "Java/72", "generation": "        // Check if the list is balanced (palindromic)\n        boolean isBalanced = isBalancedList(q);\n        \n        // Calculate the sum of elements in the list\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n        \n        // Check if the sum is less than or equal to the maximum weight\n        return isBalanced && sum <= w;\n    }\n    \n    // Helper function to check if a list is palindromic\n    private boolean isBalancedList(List<Integer> list) {\n        int left = 0;\n        int right = list.size() - 1;\n        \n        while (left < right) {\n            if (!list.get(left).equals(list.get(right))) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.willItFly(Arrays.asList(1, 2), 5)); // false\n        System.out.println(solution.willItFly(Arrays.asList(3, 2, 3), 1)); // false\n        System.out.println(solution.willItFly(Arrays.asList(3, 2, 3), 9)); // true\n        System.out.println(solution.willItFly(Arrays.asList(3), 5)); // true\n    }\n}"}
{"task_id": "Java/72", "generation": "        // Check if the list is balanced (palindromic)\n        boolean isBalanced = isBalancedList(q);\n        \n        // Calculate the sum of elements in the list\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n        \n        // Check if the sum is less than or equal to the maximum weight\n        return isBalanced && sum <= w;\n    }\n    \n    // Helper function to check if a list is palindromic\n    private boolean isBalancedList(List<Integer> list) {\n        int left = 0;\n        int right = list.size() - 1;\n        \n        while (left < right) {\n            if (!list.get(left).equals(list.get(right))) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.willItFly(Arrays.asList(1, 2), 5)); // false\n        System.out.println(solution.willItFly(Arrays.asList(3, 2, 3), 1)); // false\n        System.out.println(solution.willItFly(Arrays.asList(3, 2, 3), 9)); // true\n        System.out.println(solution.willItFly(Arrays.asList(3), 5)); // true\n    }\n}"}
{"task_id": "Java/72", "generation": "        // Check if the list is balanced (palindromic)\n        boolean isBalanced = isBalancedList(q);\n        \n        // Calculate the sum of elements in the list\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n        \n        // Check if the sum is less than or equal to the maximum weight\n        return isBalanced && sum <= w;\n    }\n    \n    // Helper function to check if a list is palindromic\n    private boolean isBalancedList(List<Integer> list) {\n        int left = 0;\n        int right = list.size() - 1;\n        \n        while (left < right) {\n            if (!list.get(left).equals(list.get(right))) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.willItFly(Arrays.asList(1, 2), 5)); // false\n        System.out.println(solution.willItFly(Arrays.asList(3, 2, 3), 1)); // false\n        System.out.println(solution.willItFly(Arrays.asList(3, 2, 3), 9)); // true\n        System.out.println(solution.willItFly(Arrays.asList(3), 5)); // true\n    }\n}"}
{"task_id": "Java/73", "generation": "        int n = arr.size();\n        int[][] dp = new int[n][n];\n\n        for (int len = 2; len <= n; len++) {\n            for (int i = 0; i < n - len + 1; i++) {\n                int j = i + len - 1;\n                if (arr.get(i) == arr.get(j)) {\n                    dp[i][j] = dp[i + 1][j - 1];\n                } else {\n                    dp[i][j] = 1 + Math.min(dp[i + 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n\n        return dp[0][n - 1];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> arr1 = Arrays.asList(1, 2, 3, 5, 4, 7, 9, 6);\n        List<Integer> arr2 = Arrays.asList(1, 2, 3, 4, 3, 2, 2);\n        List<Integer> arr3 = Arrays.asList(1, 2, 3, 2, 1);\n\n        System.out.println(solution.smallestChange(arr1)); // Output: 4\n        System.out.println(solution.smallestChange(arr2)); // Output: 1\n        System.out.println(solution.smallestChange(arr3)); // Output: 0\n    }\n}"}
{"task_id": "Java/73", "generation": "        int n = arr.size();\n        int[][] dp = new int[n][n];\n\n        for (int len = 2; len <= n; len++) {\n            for (int i = 0; i < n - len + 1; i++) {\n                int j = i + len - 1;\n                if (arr.get(i) == arr.get(j)) {\n                    dp[i][j] = dp[i + 1][j - 1];\n                } else {\n                    dp[i][j] = 1 + Math.min(dp[i + 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n\n        return dp[0][n - 1];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> arr1 = Arrays.asList(1, 2, 3, 5, 4, 7, 9, 6);\n        List<Integer> arr2 = Arrays.asList(1, 2, 3, 4, 3, 2, 2);\n        List<Integer> arr3 = Arrays.asList(1, 2, 3, 2, 1);\n\n        System.out.println(solution.smallestChange(arr1)); // Output: 4\n        System.out.println(solution.smallestChange(arr2)); // Output: 1\n        System.out.println(solution.smallestChange(arr3)); // Output: 0\n    }\n}"}
{"task_id": "Java/73", "generation": "        int n = arr.size();\n        int[][] dp = new int[n][n];\n\n        for (int len = 2; len <= n; len++) {\n            for (int i = 0; i < n - len + 1; i++) {\n                int j = i + len - 1;\n                if (arr.get(i) == arr.get(j)) {\n                    dp[i][j] = dp[i + 1][j - 1];\n                } else {\n                    dp[i][j] = 1 + Math.min(dp[i + 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n\n        return dp[0][n - 1];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> arr1 = Arrays.asList(1, 2, 3, 5, 4, 7, 9, 6);\n        List<Integer> arr2 = Arrays.asList(1, 2, 3, 4, 3, 2, 2);\n        List<Integer> arr3 = Arrays.asList(1, 2, 3, 2, 1);\n\n        System.out.println(solution.smallestChange(arr1)); // Output: 4\n        System.out.println(solution.smallestChange(arr2)); // Output: 1\n        System.out.println(solution.smallestChange(arr3)); // Output: 0\n    }\n}"}
{"task_id": "Java/73", "generation": "        int n = arr.size();\n        int[][] dp = new int[n][n];\n\n        for (int len = 2; len <= n; len++) {\n            for (int i = 0; i < n - len + 1; i++) {\n                int j = i + len - 1;\n                if (arr.get(i) == arr.get(j)) {\n                    dp[i][j] = dp[i + 1][j - 1];\n                } else {\n                    dp[i][j] = 1 + Math.min(dp[i + 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n\n        return dp[0][n - 1];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> arr1 = Arrays.asList(1, 2, 3, 5, 4, 7, 9, 6);\n        List<Integer> arr2 = Arrays.asList(1, 2, 3, 4, 3, 2, 2);\n        List<Integer> arr3 = Arrays.asList(1, 2, 3, 2, 1);\n\n        System.out.println(solution.smallestChange(arr1)); // Output: 4\n        System.out.println(solution.smallestChange(arr2)); // Output: 1\n        System.out.println(solution.smallestChange(arr3)); // Output: 0\n    }\n}"}
{"task_id": "Java/73", "generation": "        int n = arr.size();\n        int[][] dp = new int[n][n];\n\n        for (int len = 2; len <= n; len++) {\n            for (int i = 0; i < n - len + 1; i++) {\n                int j = i + len - 1;\n                if (arr.get(i) == arr.get(j)) {\n                    dp[i][j] = dp[i + 1][j - 1];\n                } else {\n                    dp[i][j] = 1 + Math.min(dp[i + 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n\n        return dp[0][n - 1];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> arr1 = Arrays.asList(1, 2, 3, 5, 4, 7, 9, 6);\n        List<Integer> arr2 = Arrays.asList(1, 2, 3, 4, 3, 2, 2);\n        List<Integer> arr3 = Arrays.asList(1, 2, 3, 2, 1);\n\n        System.out.println(solution.smallestChange(arr1)); // Output: 4\n        System.out.println(solution.smallestChange(arr2)); // Output: 1\n        System.out.println(solution.smallestChange(arr3)); // Output: 0\n    }\n}"}
{"task_id": "Java/74", "generation": "        int totalChars1 = getTotalChars(lst1);\n        int totalChars2 = getTotalChars(lst2);\n        \n        if (totalChars1 < totalChars2) {\n            return lst1;\n        } else if (totalChars1 > totalChars2) {\n            return lst2;\n        } else {\n            return lst1;\n        }\n    }\n    \n    private int getTotalChars(List<String> lst) {\n        int totalChars = 0;\n        for (String str : lst) {\n            totalChars += str.length();\n        }\n        return totalChars;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.totalMatch(Arrays.asList(), Arrays.asList())); // []\n        System.out.println(solution.totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\"))); // [\"hI\", \"Hi\"]\n        System.out.println(solution.totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\"))); // [\"hi\", \"admin\"]\n        System.out.println(solution.totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\"))); // [\"hI\", \"hi\", \"hi\"]\n        System.out.println(solution.totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\"))); // [\"4\"]\n    }\n}"}
{"task_id": "Java/74", "generation": "        int totalChars1 = getTotalChars(lst1);\n        int totalChars2 = getTotalChars(lst2);\n        \n        if (totalChars1 < totalChars2) {\n            return lst1;\n        } else if (totalChars1 > totalChars2) {\n            return lst2;\n        } else {\n            return lst1;\n        }\n    }\n    \n    private int getTotalChars(List<String> lst) {\n        int totalChars = 0;\n        for (String str : lst) {\n            totalChars += str.length();\n        }\n        return totalChars;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.totalMatch(Arrays.asList(), Arrays.asList())); // []\n        System.out.println(solution.totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\"))); // [\"hI\", \"Hi\"]\n        System.out.println(solution.totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\"))); // [\"hi\", \"admin\"]\n        System.out.println(solution.totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\"))); // [\"hI\", \"hi\", \"hi\"]\n        System.out.println(solution.totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\"))); // [\"4\"]\n    }\n}"}
{"task_id": "Java/74", "generation": "        int totalChars1 = getTotalChars(lst1);\n        int totalChars2 = getTotalChars(lst2);\n        \n        if (totalChars1 < totalChars2) {\n            return lst1;\n        } else if (totalChars1 > totalChars2) {\n            return lst2;\n        } else {\n            return lst1;\n        }\n    }\n    \n    private int getTotalChars(List<String> lst) {\n        int totalChars = 0;\n        for (String str : lst) {\n            totalChars += str.length();\n        }\n        return totalChars;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.totalMatch(Arrays.asList(), Arrays.asList())); // []\n        System.out.println(solution.totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\"))); // [\"hI\", \"Hi\"]\n        System.out.println(solution.totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\"))); // [\"hi\", \"admin\"]\n        System.out.println(solution.totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\"))); // [\"hI\", \"hi\", \"hi\"]\n        System.out.println(solution.totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\"))); // [\"4\"]\n    }\n}"}
{"task_id": "Java/74", "generation": "        int totalChars1 = getTotalChars(lst1);\n        int totalChars2 = getTotalChars(lst2);\n        \n        if (totalChars1 < totalChars2) {\n            return lst1;\n        } else if (totalChars1 > totalChars2) {\n            return lst2;\n        } else {\n            return lst1;\n        }\n    }\n    \n    private int getTotalChars(List<String> lst) {\n        int totalChars = 0;\n        for (String str : lst) {\n            totalChars += str.length();\n        }\n        return totalChars;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.totalMatch(Arrays.asList(), Arrays.asList())); // []\n        System.out.println(solution.totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\"))); // [\"hI\", \"Hi\"]\n        System.out.println(solution.totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\"))); // [\"hi\", \"admin\"]\n        System.out.println(solution.totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\"))); // [\"hI\", \"hi\", \"hi\"]\n        System.out.println(solution.totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\"))); // [\"4\"]\n    }\n}"}
{"task_id": "Java/74", "generation": "        int totalChars1 = getTotalChars(lst1);\n        int totalChars2 = getTotalChars(lst2);\n        \n        if (totalChars1 < totalChars2) {\n            return lst1;\n        } else if (totalChars1 > totalChars2) {\n            return lst2;\n        } else {\n            return lst1;\n        }\n    }\n    \n    private int getTotalChars(List<String> lst) {\n        int totalChars = 0;\n        for (String str : lst) {\n            totalChars += str.length();\n        }\n        return totalChars;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.totalMatch(Arrays.asList(), Arrays.asList())); // []\n        System.out.println(solution.totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\"))); // [\"hI\", \"Hi\"]\n        System.out.println(solution.totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\"))); // [\"hi\", \"admin\"]\n        System.out.println(solution.totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\"))); // [\"hI\", \"hi\", \"hi\"]\n        System.out.println(solution.totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\"))); // [\"4\"]\n    }\n}"}
{"task_id": "Java/75", "generation": "        // Check if the number is less than 6, as we need at least 3 prime numbers to multiply\n        if (a < 6) {\n            return false;\n        }\n        \n        // Check if the number is divisible by 2, 3, or 5\n        if (a % 2 == 0 || a % 3 == 0 || a % 5 == 0) {\n            return true;\n        }\n        \n        // Check if the number is a product of 3 prime numbers\n        for (int i = 2; i <= Math.sqrt(a); i++) {\n            if (a % i == 0) {\n                int factor1 = i;\n                int factor2 = a / i;\n                \n                if (isPrime(factor1) && isPrime(factor2)) {\n                    return true;\n                }\n            }\n        }\n        \n        return false;\n    }\n    \n    // Helper function to check if a number is prime\n    public boolean isPrime(int num) {\n        if (num < 2) {\n            return false;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.isMultiplyPrime(30)); // true\n        System.out.println(solution.isMultiplyPrime(15)); // true\n        System.out.println(solution.isMultiplyPrime(17)); // false\n    }\n}"}
{"task_id": "Java/75", "generation": "        // Check if the number is less than 6, as we need at least 3 prime numbers to multiply\n        if (a < 6) {\n            return false;\n        }\n        \n        // Check if the number is divisible by 2, 3, or 5\n        if (a % 2 == 0 || a % 3 == 0 || a % 5 == 0) {\n            return true;\n        }\n        \n        // Check if the number is a product of 3 prime numbers\n        for (int i = 2; i <= Math.sqrt(a); i++) {\n            if (a % i == 0) {\n                int factor1 = i;\n                int factor2 = a / i;\n                \n                if (isPrime(factor1) && isPrime(factor2)) {\n                    return true;\n                }\n            }\n        }\n        \n        return false;\n    }\n    \n    // Helper function to check if a number is prime\n    public boolean isPrime(int num) {\n        if (num < 2) {\n            return false;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.isMultiplyPrime(30)); // true\n        System.out.println(solution.isMultiplyPrime(15)); // true\n        System.out.println(solution.isMultiplyPrime(17)); // false\n    }\n}"}
{"task_id": "Java/75", "generation": "        // Check if the number is less than 6, as we need at least 3 prime numbers to multiply\n        if (a < 6) {\n            return false;\n        }\n        \n        // Check if the number is divisible by 2, 3, or 5\n        if (a % 2 == 0 || a % 3 == 0 || a % 5 == 0) {\n            return true;\n        }\n        \n        // Check if the number is a product of 3 prime numbers\n        for (int i = 2; i <= Math.sqrt(a); i++) {\n            if (a % i == 0) {\n                int factor1 = i;\n                int factor2 = a / i;\n                \n                if (isPrime(factor1) && isPrime(factor2)) {\n                    return true;\n                }\n            }\n        }\n        \n        return false;\n    }\n    \n    // Helper function to check if a number is prime\n    public boolean isPrime(int num) {\n        if (num < 2) {\n            return false;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.isMultiplyPrime(30)); // true\n        System.out.println(solution.isMultiplyPrime(15)); // true\n        System.out.println(solution.isMultiplyPrime(17)); // false\n    }\n}"}
{"task_id": "Java/75", "generation": "        // Check if the number is less than 6, as we need at least 3 prime numbers to multiply\n        if (a < 6) {\n            return false;\n        }\n        \n        // Check if the number is divisible by 2, 3, or 5\n        if (a % 2 == 0 || a % 3 == 0 || a % 5 == 0) {\n            return true;\n        }\n        \n        // Check if the number is a product of 3 prime numbers\n        for (int i = 2; i <= Math.sqrt(a); i++) {\n            if (a % i == 0) {\n                int factor1 = i;\n                int factor2 = a / i;\n                \n                if (isPrime(factor1) && isPrime(factor2)) {\n                    return true;\n                }\n            }\n        }\n        \n        return false;\n    }\n    \n    // Helper function to check if a number is prime\n    public boolean isPrime(int num) {\n        if (num < 2) {\n            return false;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.isMultiplyPrime(30)); // true\n        System.out.println(solution.isMultiplyPrime(15)); // true\n        System.out.println(solution.isMultiplyPrime(17)); // false\n    }\n}"}
{"task_id": "Java/75", "generation": "        // Check if the number is less than 6, as we need at least 3 prime numbers to multiply\n        if (a < 6) {\n            return false;\n        }\n        \n        // Check if the number is divisible by 2, 3, or 5\n        if (a % 2 == 0 || a % 3 == 0 || a % 5 == 0) {\n            return true;\n        }\n        \n        // Check if the number is a product of 3 prime numbers\n        for (int i = 2; i <= Math.sqrt(a); i++) {\n            if (a % i == 0) {\n                int factor1 = i;\n                int factor2 = a / i;\n                \n                if (isPrime(factor1) && isPrime(factor2)) {\n                    return true;\n                }\n            }\n        }\n        \n        return false;\n    }\n    \n    // Helper function to check if a number is prime\n    public boolean isPrime(int num) {\n        if (num < 2) {\n            return false;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.isMultiplyPrime(30)); // true\n        System.out.println(solution.isMultiplyPrime(15)); // true\n        System.out.println(solution.isMultiplyPrime(17)); // false\n    }\n}"}
{"task_id": "Java/76", "generation": "        if (x == 1) {\n            return true;\n        }\n        \n        int power = 1;\n        while (Math.pow(n, power) <= x) {\n            if (Math.pow(n, power) == x) {\n                return true;\n            }\n            power++;\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.isSimplePower(1, 4)); // true\n        System.out.println(solution.isSimplePower(2, 2)); // true\n        System.out.println(solution.isSimplePower(8, 2)); // true\n        System.out.println(solution.isSimplePower(3, 2)); // false\n        System.out.println(solution.isSimplePower(3, 1)); // false\n        System.out.println(solution.isSimplePower(5, 3)); // false\n    }\n}"}
{"task_id": "Java/76", "generation": "        if (x == 1) {\n            return true;\n        }\n        \n        int power = 1;\n        while (Math.pow(n, power) <= x) {\n            if (Math.pow(n, power) == x) {\n                return true;\n            }\n            power++;\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.isSimplePower(1, 4)); // true\n        System.out.println(solution.isSimplePower(2, 2)); // true\n        System.out.println(solution.isSimplePower(8, 2)); // true\n        System.out.println(solution.isSimplePower(3, 2)); // false\n        System.out.println(solution.isSimplePower(3, 1)); // false\n        System.out.println(solution.isSimplePower(5, 3)); // false\n    }\n}"}
{"task_id": "Java/76", "generation": "        if (x == 1) {\n            return true;\n        }\n        \n        int power = 1;\n        while (Math.pow(n, power) <= x) {\n            if (Math.pow(n, power) == x) {\n                return true;\n            }\n            power++;\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.isSimplePower(1, 4)); // true\n        System.out.println(solution.isSimplePower(2, 2)); // true\n        System.out.println(solution.isSimplePower(8, 2)); // true\n        System.out.println(solution.isSimplePower(3, 2)); // false\n        System.out.println(solution.isSimplePower(3, 1)); // false\n        System.out.println(solution.isSimplePower(5, 3)); // false\n    }\n}"}
{"task_id": "Java/76", "generation": "        if (x == 1) {\n            return true;\n        }\n        \n        int power = 1;\n        while (Math.pow(n, power) <= x) {\n            if (Math.pow(n, power) == x) {\n                return true;\n            }\n            power++;\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.isSimplePower(1, 4)); // true\n        System.out.println(solution.isSimplePower(2, 2)); // true\n        System.out.println(solution.isSimplePower(8, 2)); // true\n        System.out.println(solution.isSimplePower(3, 2)); // false\n        System.out.println(solution.isSimplePower(3, 1)); // false\n        System.out.println(solution.isSimplePower(5, 3)); // false\n    }\n}"}
{"task_id": "Java/76", "generation": "        if (x == 1) {\n            return true;\n        }\n        \n        int power = 1;\n        while (Math.pow(n, power) <= x) {\n            if (Math.pow(n, power) == x) {\n                return true;\n            }\n            power++;\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.isSimplePower(1, 4)); // true\n        System.out.println(solution.isSimplePower(2, 2)); // true\n        System.out.println(solution.isSimplePower(8, 2)); // true\n        System.out.println(solution.isSimplePower(3, 2)); // false\n        System.out.println(solution.isSimplePower(3, 1)); // false\n        System.out.println(solution.isSimplePower(5, 3)); // false\n    }\n}"}
{"task_id": "Java/77", "generation": "        // Check if the input number is a cube of some integer number\n        int cubeRoot = (int) Math.cbrt(a);\n        return cubeRoot * cubeRoot * cubeRoot == a;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.iscube(1)); // true\n        System.out.println(solution.iscube(2)); // false\n        System.out.println(solution.iscube(-1)); // true\n        System.out.println(solution.iscube(64)); // true\n        System.out.println(solution.iscube(0)); // true\n        System.out.println(solution.iscube(180)); // false\n    }\n}"}
{"task_id": "Java/77", "generation": "        // Check if the input number is a cube of some integer number\n        int cubeRoot = (int) Math.cbrt(a);\n        return cubeRoot * cubeRoot * cubeRoot == a;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.iscube(1)); // true\n        System.out.println(solution.iscube(2)); // false\n        System.out.println(solution.iscube(-1)); // true\n        System.out.println(solution.iscube(64)); // true\n        System.out.println(solution.iscube(0)); // true\n        System.out.println(solution.iscube(180)); // false\n    }\n}"}
{"task_id": "Java/77", "generation": "        // Check if the input number is a cube of some integer number\n        int cubeRoot = (int) Math.cbrt(a);\n        return cubeRoot * cubeRoot * cubeRoot == a;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.iscube(1)); // true\n        System.out.println(solution.iscube(2)); // false\n        System.out.println(solution.iscube(-1)); // true\n        System.out.println(solution.iscube(64)); // true\n        System.out.println(solution.iscube(0)); // true\n        System.out.println(solution.iscube(180)); // false\n    }\n}"}
{"task_id": "Java/77", "generation": "        // Check if the input number is a cube of some integer number\n        int cubeRoot = (int) Math.cbrt(a);\n        return cubeRoot * cubeRoot * cubeRoot == a;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.iscube(1)); // true\n        System.out.println(solution.iscube(2)); // false\n        System.out.println(solution.iscube(-1)); // true\n        System.out.println(solution.iscube(64)); // true\n        System.out.println(solution.iscube(0)); // true\n        System.out.println(solution.iscube(180)); // false\n    }\n}"}
{"task_id": "Java/77", "generation": "        // Check if the input number is a cube of some integer number\n        int cubeRoot = (int) Math.cbrt(a);\n        return cubeRoot * cubeRoot * cubeRoot == a;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.iscube(1)); // true\n        System.out.println(solution.iscube(2)); // false\n        System.out.println(solution.iscube(-1)); // true\n        System.out.println(solution.iscube(64)); // true\n        System.out.println(solution.iscube(0)); // true\n        System.out.println(solution.iscube(180)); // false\n    }\n}"}
{"task_id": "Java/78", "generation": "        int count = 0;\n        Set<Character> primes = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n\n        for (char c : num.toCharArray()) {\n            if (primes.contains(c)) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.hexKey(\"AB\")); // 1\n        System.out.println(solution.hexKey(\"1077E\")); // 2\n        System.out.println(solution.hexKey(\"ABED1A33\")); // 4\n        System.out.println(solution.hexKey(\"123456789ABCDEF0\")); // 6\n        System.out.println(solution.hexKey(\"2020\")); // 2\n    }\n}"}
{"task_id": "Java/78", "generation": "        int count = 0;\n        String primes = \"2357BD\";\n        \n        for (int i = 0; i < num.length(); i++) {\n            char c = num.charAt(i);\n            if (primes.indexOf(c) != -1) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.hexKey(\"AB\")); // 1\n        System.out.println(solution.hexKey(\"1077E\")); // 2\n        System.out.println(solution.hexKey(\"ABED1A33\")); // 4\n        System.out.println(solution.hexKey(\"123456789ABCDEF0\")); // 6\n        System.out.println(solution.hexKey(\"2020\")); // 2\n    }\n}"}
{"task_id": "Java/78", "generation": "        // Initialize a set to store the prime hexadecimal digits\n        Set<Character> primes = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n        \n        // Initialize a counter to count the number of prime hexadecimal digits\n        int count = 0;\n        \n        // Iterate through each character in the input hexadecimal number\n        for (char c : num.toCharArray()) {\n            // Check if the character is a prime hexadecimal digit\n            if (primes.contains(c)) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.hexKey(\"AB\")); // Output: 1\n        System.out.println(solution.hexKey(\"1077E\")); // Output: 2\n        System.out.println(solution.hexKey(\"ABED1A33\")); // Output: 4\n        System.out.println(solution.hexKey(\"123456789ABCDEF0\")); // Output: 6\n        System.out.println(solution.hexKey(\"2020\")); // Output: 2\n    }\n}"}
{"task_id": "Java/78", "generation": "        // Initialize a counter to keep track of prime digits\n        int count = 0;\n        \n        // Create a set to store all prime digits in hexadecimal format\n        Set<Character> primes = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n        \n        // Iterate through each character in the input string\n        for (char c : num.toCharArray()) {\n            // Check if the character is a prime digit\n            if (primes.contains(c)) {\n                count++;\n            }\n        }\n        \n        // Return the count of prime digits found in the input string\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.hexKey(\"AB\")); // Output: 1\n        System.out.println(solution.hexKey(\"1077E\")); // Output: 2\n        System.out.println(solution.hexKey(\"ABED1A33\")); // Output: 4\n        System.out.println(solution.hexKey(\"123456789ABCDEF0\")); // Output: 6\n        System.out.println(solution.hexKey(\"2020\")); // Output: 2\n    }\n}"}
{"task_id": "Java/78", "generation": "        int count = 0;\n        Set<Character> primes = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n\n        for (char c : num.toCharArray()) {\n            if (primes.contains(c)) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.hexKey(\"AB\")); // 1\n        System.out.println(solution.hexKey(\"1077E\")); // 2\n        System.out.println(solution.hexKey(\"ABED1A33\")); // 4\n        System.out.println(solution.hexKey(\"123456789ABCDEF0\")); // 6\n        System.out.println(solution.hexKey(\"2020\")); // 2\n    }\n}"}
{"task_id": "Java/79", "generation": "        String binary = Integer.toBinaryString(decimal);\n        return \"db\" + binary + \"db\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.decimalToBinary(15)); // should return \"db1111db\"\n        System.out.println(solution.decimalToBinary(32)); // should return \"db100000db\"\n    }\n}"}
{"task_id": "Java/79", "generation": "        String binary = Integer.toBinaryString(decimal);\n        return \"db\" + binary + \"db\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.decimalToBinary(15)); // should return \"db1111db\"\n        System.out.println(solution.decimalToBinary(32)); // should return \"db100000db\"\n    }\n}"}
{"task_id": "Java/79", "generation": "        String binary = Integer.toBinaryString(decimal);\n        return \"db\" + binary + \"db\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.decimalToBinary(15)); // should return \"db1111db\"\n        System.out.println(solution.decimalToBinary(32)); // should return \"db100000db\"\n    }\n}"}
{"task_id": "Java/79", "generation": "        String binary = Integer.toBinaryString(decimal);\n        return \"db\" + binary + \"db\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.decimalToBinary(15)); // should return \"db1111db\"\n        System.out.println(solution.decimalToBinary(32)); // should return \"db100000db\"\n    }\n}"}
{"task_id": "Java/79", "generation": "        String binary = Integer.toBinaryString(decimal);\n        return \"db\" + binary + \"db\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.decimalToBinary(15)); // should return \"db1111db\"\n        System.out.println(solution.decimalToBinary(32)); // should return \"db100000db\"\n    }\n}"}
{"task_id": "Java/80", "generation": "        if (s.length() < 3) {\n            return false;\n        }\n        \n        for (int i = 0; i <= s.length() - 3; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.isHappy(\"a\")); // false\n        System.out.println(solution.isHappy(\"aa\")); // false\n        System.out.println(solution.isHappy(\"abcd\")); // true\n        System.out.println(solution.isHappy(\"aabb\")); // false\n        System.out.println(solution.isHappy(\"adb\")); // true\n        System.out.println(solution.isHappy(\"xyy\")); // false\n    }\n}"}
{"task_id": "Java/80", "generation": "        if (s.length() < 3) {\n            return false;\n        }\n        \n        for (int i = 0; i <= s.length() - 3; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.isHappy(\"a\")); // false\n        System.out.println(solution.isHappy(\"aa\")); // false\n        System.out.println(solution.isHappy(\"abcd\")); // true\n        System.out.println(solution.isHappy(\"aabb\")); // false\n        System.out.println(solution.isHappy(\"adb\")); // true\n        System.out.println(solution.isHappy(\"xyy\")); // false\n    }\n}"}
{"task_id": "Java/80", "generation": "        if (s.length() < 3) {\n            return false;\n        }\n        \n        for (int i = 0; i <= s.length() - 3; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.isHappy(\"a\")); // false\n        System.out.println(solution.isHappy(\"aa\")); // false\n        System.out.println(solution.isHappy(\"abcd\")); // true\n        System.out.println(solution.isHappy(\"aabb\")); // false\n        System.out.println(solution.isHappy(\"adb\")); // true\n        System.out.println(solution.isHappy(\"xyy\")); // false\n    }\n}"}
{"task_id": "Java/80", "generation": "        if (s.length() < 3) {\n            return false;\n        }\n        \n        for (int i = 0; i <= s.length() - 3; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.isHappy(\"a\")); // false\n        System.out.println(solution.isHappy(\"aa\")); // false\n        System.out.println(solution.isHappy(\"abcd\")); // true\n        System.out.println(solution.isHappy(\"aabb\")); // false\n        System.out.println(solution.isHappy(\"adb\")); // true\n        System.out.println(solution.isHappy(\"xyy\")); // false\n    }\n}"}
{"task_id": "Java/80", "generation": "        if (s.length() < 3) {\n            return false;\n        }\n        \n        for (int i = 0; i <= s.length() - 3; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.isHappy(\"a\")); // false\n        System.out.println(solution.isHappy(\"aa\")); // false\n        System.out.println(solution.isHappy(\"abcd\")); // true\n        System.out.println(solution.isHappy(\"aabb\")); // false\n        System.out.println(solution.isHappy(\"adb\")); // true\n        System.out.println(solution.isHappy(\"xyy\")); // false\n    }\n}"}
{"task_id": "Java/81", "generation": "        List<String> letterGrades = new ArrayList<>();\n        \n        for (Double grade : grades) {\n            if (grade == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        \n        return letterGrades;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Double> grades = Arrays.asList(4.0, 3.0, 1.7, 2.0, 3.5);\n        List<String> letterGrades = solution.numericalLetterGrade(grades);\n        \n        System.out.println(letterGrades);\n    }\n}"}
{"task_id": "Java/81", "generation": "        List<String> letterGrades = new ArrayList<>();\n        \n        for (Double grade : grades) {\n            if (grade == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        \n        return letterGrades;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Double> grades = Arrays.asList(4.0, 3.0, 1.7, 2.0, 3.5);\n        List<String> letterGrades = solution.numericalLetterGrade(grades);\n        \n        System.out.println(letterGrades);\n    }\n}"}
{"task_id": "Java/81", "generation": "        List<String> letterGrades = new ArrayList<>();\n        \n        for (Double grade : grades) {\n            if (grade == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        \n        return letterGrades;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Double> grades = Arrays.asList(4.0, 3.0, 1.7, 2.0, 3.5);\n        List<String> letterGrades = solution.numericalLetterGrade(grades);\n        \n        System.out.println(letterGrades);\n    }\n}"}
{"task_id": "Java/81", "generation": "        List<String> letterGrades = new ArrayList<>();\n        \n        for (Double grade : grades) {\n            if (grade == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        \n        return letterGrades;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Double> grades = Arrays.asList(4.0, 3.0, 1.7, 2.0, 3.5);\n        List<String> letterGrades = solution.numericalLetterGrade(grades);\n        \n        System.out.println(letterGrades);\n    }\n}"}
{"task_id": "Java/81", "generation": "        List<String> letterGrades = new ArrayList<>();\n        \n        for (Double grade : grades) {\n            if (grade == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        \n        return letterGrades;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Double> grades = Arrays.asList(4.0, 3.0, 1.7, 2.0, 3.5);\n        List<String> letterGrades = solution.numericalLetterGrade(grades);\n        \n        System.out.println(letterGrades);\n    }\n}"}
{"task_id": "Java/82", "generation": "        int length = string.length();\n        \n        if (length <= 1) {\n            return false;\n        }\n        \n        for (int i = 2; i < length; i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.primeLength(\"Hello\")); // true\n        System.out.println(solution.primeLength(\"abcdcba\")); // true\n        System.out.println(solution.primeLength(\"kittens\")); // true\n        System.out.println(solution.primeLength(\"orange\")); // false\n    }\n}"}
{"task_id": "Java/82", "generation": "        int length = string.length();\n        \n        if (length <= 1) {\n            return false;\n        }\n        \n        for (int i = 2; i < length; i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.primeLength(\"Hello\")); // true\n        System.out.println(solution.primeLength(\"abcdcba\")); // true\n        System.out.println(solution.primeLength(\"kittens\")); // true\n        System.out.println(solution.primeLength(\"orange\")); // false\n    }\n}"}
{"task_id": "Java/82", "generation": "        int length = string.length();\n        \n        if (length <= 1) {\n            return false;\n        }\n        \n        for (int i = 2; i < length; i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.primeLength(\"Hello\")); // true\n        System.out.println(solution.primeLength(\"abcdcba\")); // true\n        System.out.println(solution.primeLength(\"kittens\")); // true\n        System.out.println(solution.primeLength(\"orange\")); // false\n    }\n}"}
{"task_id": "Java/82", "generation": "        int length = string.length();\n        \n        if (length <= 1) {\n            return false;\n        }\n        \n        for (int i = 2; i < length; i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.primeLength(\"Hello\")); // true\n        System.out.println(solution.primeLength(\"abcdcba\")); // true\n        System.out.println(solution.primeLength(\"kittens\")); // true\n        System.out.println(solution.primeLength(\"orange\")); // false\n    }\n}"}
{"task_id": "Java/82", "generation": "        int length = string.length();\n        \n        if (length <= 1) {\n            return false;\n        }\n        \n        for (int i = 2; i < length; i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.primeLength(\"Hello\")); // true\n        System.out.println(solution.primeLength(\"abcdcba\")); // true\n        System.out.println(solution.primeLength(\"kittens\")); // true\n        System.out.println(solution.primeLength(\"orange\")); // false\n    }\n}"}
{"task_id": "Java/83", "generation": "        // Count of numbers that start with 1\n        int startWithOne = (int) Math.pow(10, n-1);\n        \n        // Count of numbers that end with 1\n        int endWithOne = (int) Math.pow(10, n-1);\n        \n        // Count of numbers that start and end with 1\n        int startAndEndWithOne = 1;\n        \n        return startWithOne + endWithOne - startAndEndWithOne;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.startsOneEnds(1)); // Output: 2\n        System.out.println(solution.startsOneEnds(2)); // Output: 20\n        System.out.println(solution.startsOneEnds(3)); // Output: 200\n    }\n}"}
{"task_id": "Java/83", "generation": "        // Count of numbers that start with 1\n        int startWithOne = (int) Math.pow(10, n-1);\n        \n        // Count of numbers that end with 1\n        int endWithOne = (int) Math.pow(10, n-1);\n        \n        // Count of numbers that start and end with 1\n        int startAndEndWithOne = 1;\n        \n        return startWithOne + endWithOne - startAndEndWithOne;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.startsOneEnds(1)); // Output: 2\n        System.out.println(solution.startsOneEnds(2)); // Output: 20\n        System.out.println(solution.startsOneEnds(3)); // Output: 200\n    }\n}"}
{"task_id": "Java/83", "generation": "        // Count of numbers that start with 1\n        int startWithOne = (int) Math.pow(10, n-1);\n        \n        // Count of numbers that end with 1\n        int endWithOne = (int) Math.pow(10, n-1);\n        \n        // Count of numbers that start and end with 1\n        int startAndEndWithOne = 1;\n        \n        return startWithOne + endWithOne - startAndEndWithOne;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.startsOneEnds(1)); // Output: 2\n        System.out.println(solution.startsOneEnds(2)); // Output: 20\n        System.out.println(solution.startsOneEnds(3)); // Output: 200\n    }\n}"}
{"task_id": "Java/83", "generation": "        // Count of numbers that start with 1\n        int startWithOne = (int) Math.pow(10, n-1);\n        \n        // Count of numbers that end with 1\n        int endWithOne = (int) Math.pow(10, n-1);\n        \n        // Count of numbers that start and end with 1\n        int startAndEndWithOne = 1;\n        \n        return startWithOne + endWithOne - startAndEndWithOne;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.startsOneEnds(1)); // Output: 2\n        System.out.println(solution.startsOneEnds(2)); // Output: 20\n        System.out.println(solution.startsOneEnds(3)); // Output: 200\n    }\n}"}
{"task_id": "Java/83", "generation": "        // Count of numbers that start with 1\n        int startWithOne = (int) Math.pow(10, n-1);\n        \n        // Count of numbers that end with 1\n        int endWithOne = (int) Math.pow(10, n-1);\n        \n        // Count of numbers that start and end with 1\n        int startAndEndWithOne = 1;\n        \n        return startWithOne + endWithOne - startAndEndWithOne;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.startsOneEnds(1)); // Output: 2\n        System.out.println(solution.startsOneEnds(2)); // Output: 20\n        System.out.println(solution.startsOneEnds(3)); // Output: 200\n    }\n}"}
{"task_id": "Java/84", "generation": "        // Convert the integer N to binary string\n        String binary = Integer.toBinaryString(N);\n        \n        // Calculate the sum of digits in binary\n        int sum = 0;\n        for (char c : binary.toCharArray()) {\n            sum += Character.getNumericValue(c);\n        }\n        \n        // Convert the sum to binary string\n        return Integer.toBinaryString(sum);\n    }\n}"}
{"task_id": "Java/84", "generation": "        // Convert the integer N to binary string\n        String binary = Integer.toBinaryString(N);\n        \n        // Calculate the sum of digits in binary\n        int sum = 0;\n        for (char c : binary.toCharArray()) {\n            sum += Character.getNumericValue(c);\n        }\n        \n        // Convert the sum to binary string\n        return Integer.toBinaryString(sum);\n    }\n}"}
{"task_id": "Java/84", "generation": "        // Convert the integer N to binary string\n        String binary = Integer.toBinaryString(N);\n        \n        // Calculate the sum of digits in binary\n        int sum = 0;\n        for (char c : binary.toCharArray()) {\n            sum += Character.getNumericValue(c);\n        }\n        \n        // Convert the sum to binary string\n        return Integer.toBinaryString(sum);\n    }\n}"}
{"task_id": "Java/84", "generation": "        // Convert the integer N to binary string\n        String binary = Integer.toBinaryString(N);\n        \n        // Calculate the sum of digits in binary\n        int sum = 0;\n        for (char c : binary.toCharArray()) {\n            sum += Character.getNumericValue(c);\n        }\n        \n        // Convert the sum to binary string\n        return Integer.toBinaryString(sum);\n    }\n}"}
{"task_id": "Java/84", "generation": "        // Convert the integer N to binary string\n        String binary = Integer.toBinaryString(N);\n        \n        // Calculate the sum of digits in binary\n        int sum = 0;\n        for (char c : binary.toCharArray()) {\n            sum += Character.getNumericValue(c);\n        }\n        \n        // Convert the sum to binary string\n        return Integer.toBinaryString(sum);\n    }\n}"}
{"task_id": "Java/85", "generation": "        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/85", "generation": "        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/85", "generation": "        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/85", "generation": "        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/85", "generation": "        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/86", "generation": "        // Split the input string into words\n        String[] words = s.split(\" \");\n        \n        // Initialize a StringBuilder to store the result\n        StringBuilder result = new StringBuilder();\n        \n        // Iterate through each word in the input string\n        for (String word : words) {\n            // Convert the word to a character array\n            char[] chars = word.toCharArray();\n            \n            // Sort the characters in ascending order based on ascii value\n            Arrays.sort(chars);\n            \n            // Append the sorted characters to the result StringBuilder\n            result.append(chars);\n            \n            // Append a space to separate words\n            result.append(\" \");\n        }\n        \n        // Remove the extra space at the end of the result\n        result.deleteCharAt(result.length() - 1);\n        \n        // Return the final ordered version of the input string\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.antiShuffle(\"Hi\")); // \"Hi\"\n        System.out.println(solution.antiShuffle(\"hello\")); // \"ehllo\"\n        System.out.println(solution.antiShuffle(\"Hello World!!!\")); // \"Hello !!!Wdlor\"\n    }\n}"}
{"task_id": "Java/86", "generation": "        // Split the input string into words\n        String[] words = s.split(\" \");\n        \n        // Initialize a StringBuilder to store the result\n        StringBuilder result = new StringBuilder();\n        \n        // Iterate through each word in the input string\n        for (String word : words) {\n            // Convert the word to a character array\n            char[] chars = word.toCharArray();\n            \n            // Sort the characters in ascending order based on ascii value\n            Arrays.sort(chars);\n            \n            // Append the sorted characters to the result StringBuilder\n            result.append(chars);\n            \n            // Append a space to separate words\n            result.append(\" \");\n        }\n        \n        // Remove the extra space at the end of the result\n        result.deleteCharAt(result.length() - 1);\n        \n        // Return the final ordered version of the input string\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.antiShuffle(\"Hi\")); // \"Hi\"\n        System.out.println(solution.antiShuffle(\"hello\")); // \"ehllo\"\n        System.out.println(solution.antiShuffle(\"Hello World!!!\")); // \"Hello !!!Wdlor\"\n    }\n}"}
{"task_id": "Java/86", "generation": "        // Split the input string into words\n        String[] words = s.split(\" \");\n        \n        // Initialize a StringBuilder to store the result\n        StringBuilder result = new StringBuilder();\n        \n        // Iterate through each word in the input string\n        for (String word : words) {\n            // Convert the word to a character array\n            char[] chars = word.toCharArray();\n            \n            // Sort the characters in ascending order based on ascii value\n            Arrays.sort(chars);\n            \n            // Append the sorted characters to the result StringBuilder\n            result.append(chars);\n            \n            // Append a space to separate words\n            result.append(\" \");\n        }\n        \n        // Remove the extra space at the end of the result\n        result.deleteCharAt(result.length() - 1);\n        \n        // Return the final ordered version of the input string\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.antiShuffle(\"Hi\")); // \"Hi\"\n        System.out.println(solution.antiShuffle(\"hello\")); // \"ehllo\"\n        System.out.println(solution.antiShuffle(\"Hello World!!!\")); // \"Hello !!!Wdlor\"\n    }\n}"}
{"task_id": "Java/86", "generation": "        // Split the input string into words\n        String[] words = s.split(\" \");\n        \n        // Initialize a StringBuilder to store the result\n        StringBuilder result = new StringBuilder();\n        \n        // Iterate through each word in the input string\n        for (String word : words) {\n            // Convert the word to a character array\n            char[] chars = word.toCharArray();\n            \n            // Sort the characters in ascending order based on ascii value\n            Arrays.sort(chars);\n            \n            // Append the sorted characters to the result StringBuilder\n            result.append(chars);\n            \n            // Append a space to separate words\n            result.append(\" \");\n        }\n        \n        // Remove the extra space at the end of the result\n        result.deleteCharAt(result.length() - 1);\n        \n        // Return the final ordered version of the input string\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.antiShuffle(\"Hi\")); // \"Hi\"\n        System.out.println(solution.antiShuffle(\"hello\")); // \"ehllo\"\n        System.out.println(solution.antiShuffle(\"Hello World!!!\")); // \"Hello !!!Wdlor\"\n    }\n}"}
{"task_id": "Java/86", "generation": "        // Split the input string into words\n        String[] words = s.split(\" \");\n        \n        // Initialize a StringBuilder to store the result\n        StringBuilder result = new StringBuilder();\n        \n        // Iterate through each word in the input string\n        for (String word : words) {\n            // Convert the word to a character array\n            char[] chars = word.toCharArray();\n            \n            // Sort the characters in ascending order based on ascii value\n            Arrays.sort(chars);\n            \n            // Append the sorted characters to the result StringBuilder\n            result.append(chars);\n            \n            // Append a space to separate words\n            result.append(\" \");\n        }\n        \n        // Remove the extra space at the end of the result\n        result.deleteCharAt(result.length() - 1);\n        \n        // Return the final ordered version of the input string\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.antiShuffle(\"Hi\")); // \"Hi\"\n        System.out.println(solution.antiShuffle(\"hello\")); // \"ehllo\"\n        System.out.println(solution.antiShuffle(\"Hello World!!!\")); // \"Hello !!!Wdlor\"\n    }\n}"}
{"task_id": "Java/87", "generation": "        List<List<Integer>> result = new ArrayList<>();\n        \n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    List<Integer> coordinate = new ArrayList<>();\n                    coordinate.add(i);\n                    coordinate.add(j);\n                    result.add(coordinate);\n                }\n            }\n        }\n        \n        // Sort coordinates by rows in ascending order\n        result.sort(Comparator.comparingInt(o -> o.get(0)));\n        \n        // Sort coordinates of the row by columns in descending order\n        for (List<Integer> coordinate : result) {\n            coordinate.sort(Comparator.reverseOrder());\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<List<Integer>> lst1 = new ArrayList<>();\n        lst1.add(Arrays.asList(1, 2, 3, 4, 5, 6));\n        lst1.add(Arrays.asList(1, 2, 3, 4, 1, 6));\n        lst1.add(Arrays.asList(1, 2, 3, 4, 5, 1));\n        System.out.println(solution.getRow(lst1, 1)); // [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n\n        List<List<Integer>> lst2 = new ArrayList<>();\n        System.out.println(solution.getRow(lst2, 1)); // []\n\n        List<List<Integer>> lst3 = new ArrayList<>();\n        lst3.add(new ArrayList<>());\n        lst3.add(Arrays.asList(1));\n        lst3.add(Arrays.asList(1, 2, 3));\n        System.out.println(solution.getRow(lst3, 3)); // [[2, 2]]\n    }\n}"}
{"task_id": "Java/87", "generation": "        List<List<Integer>> result = new ArrayList<>();\n        \n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    List<Integer> coordinate = new ArrayList<>();\n                    coordinate.add(i);\n                    coordinate.add(j);\n                    result.add(coordinate);\n                }\n            }\n        }\n        \n        // Sort coordinates by rows in ascending order\n        result.sort(Comparator.comparingInt(o -> o.get(0)));\n        \n        // Sort coordinates of the row by columns in descending order\n        for (List<Integer> coordinate : result) {\n            coordinate.sort(Comparator.reverseOrder());\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<List<Integer>> lst1 = new ArrayList<>();\n        lst1.add(Arrays.asList(1, 2, 3, 4, 5, 6));\n        lst1.add(Arrays.asList(1, 2, 3, 4, 1, 6));\n        lst1.add(Arrays.asList(1, 2, 3, 4, 5, 1));\n        System.out.println(solution.getRow(lst1, 1)); // [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n\n        List<List<Integer>> lst2 = new ArrayList<>();\n        System.out.println(solution.getRow(lst2, 1)); // []\n\n        List<List<Integer>> lst3 = new ArrayList<>();\n        lst3.add(new ArrayList<>());\n        lst3.add(Arrays.asList(1));\n        lst3.add(Arrays.asList(1, 2, 3));\n        System.out.println(solution.getRow(lst3, 3)); // [[2, 2]]\n    }\n}"}
{"task_id": "Java/87", "generation": "        List<List<Integer>> result = new ArrayList<>();\n        \n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    List<Integer> coordinate = new ArrayList<>();\n                    coordinate.add(i);\n                    coordinate.add(j);\n                    result.add(coordinate);\n                }\n            }\n        }\n        \n        // Sort coordinates by rows in ascending order\n        result.sort(Comparator.comparingInt(o -> o.get(0)));\n        \n        // Sort coordinates of the row by columns in descending order\n        for (List<Integer> coordinate : result) {\n            coordinate.sort(Comparator.reverseOrder());\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<List<Integer>> lst1 = new ArrayList<>();\n        lst1.add(Arrays.asList(1, 2, 3, 4, 5, 6));\n        lst1.add(Arrays.asList(1, 2, 3, 4, 1, 6));\n        lst1.add(Arrays.asList(1, 2, 3, 4, 5, 1));\n        System.out.println(solution.getRow(lst1, 1)); // [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n\n        List<List<Integer>> lst2 = new ArrayList<>();\n        System.out.println(solution.getRow(lst2, 1)); // []\n\n        List<List<Integer>> lst3 = new ArrayList<>();\n        lst3.add(new ArrayList<>());\n        lst3.add(Arrays.asList(1));\n        lst3.add(Arrays.asList(1, 2, 3));\n        System.out.println(solution.getRow(lst3, 3)); // [[2, 2]]\n    }\n}"}
{"task_id": "Java/87", "generation": "        List<List<Integer>> result = new ArrayList<>();\n        \n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    List<Integer> coordinate = new ArrayList<>();\n                    coordinate.add(i);\n                    coordinate.add(j);\n                    result.add(coordinate);\n                }\n            }\n        }\n        \n        // Sort coordinates by rows in ascending order\n        result.sort(Comparator.comparingInt(o -> o.get(0)));\n        \n        // Sort coordinates of the row by columns in descending order\n        for (List<Integer> coordinate : result) {\n            coordinate.sort(Comparator.reverseOrder());\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<List<Integer>> lst1 = new ArrayList<>();\n        lst1.add(Arrays.asList(1, 2, 3, 4, 5, 6));\n        lst1.add(Arrays.asList(1, 2, 3, 4, 1, 6));\n        lst1.add(Arrays.asList(1, 2, 3, 4, 5, 1));\n        System.out.println(solution.getRow(lst1, 1)); // [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n\n        List<List<Integer>> lst2 = new ArrayList<>();\n        System.out.println(solution.getRow(lst2, 1)); // []\n\n        List<List<Integer>> lst3 = new ArrayList<>();\n        lst3.add(new ArrayList<>());\n        lst3.add(Arrays.asList(1));\n        lst3.add(Arrays.asList(1, 2, 3));\n        System.out.println(solution.getRow(lst3, 3)); // [[2, 2]]\n    }\n}"}
{"task_id": "Java/87", "generation": "        List<List<Integer>> result = new ArrayList<>();\n        \n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    List<Integer> coordinate = new ArrayList<>();\n                    coordinate.add(i);\n                    coordinate.add(j);\n                    result.add(coordinate);\n                }\n            }\n        }\n        \n        // Sort coordinates by rows in ascending order\n        result.sort(Comparator.comparingInt(o -> o.get(0)));\n        \n        // Sort coordinates of the row by columns in descending order\n        for (List<Integer> coordinate : result) {\n            coordinate.sort(Comparator.reverseOrder());\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<List<Integer>> lst1 = new ArrayList<>();\n        lst1.add(Arrays.asList(1, 2, 3, 4, 5, 6));\n        lst1.add(Arrays.asList(1, 2, 3, 4, 1, 6));\n        lst1.add(Arrays.asList(1, 2, 3, 4, 5, 1));\n        System.out.println(solution.getRow(lst1, 1)); // [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n\n        List<List<Integer>> lst2 = new ArrayList<>();\n        System.out.println(solution.getRow(lst2, 1)); // []\n\n        List<List<Integer>> lst3 = new ArrayList<>();\n        lst3.add(new ArrayList<>());\n        lst3.add(Arrays.asList(1));\n        lst3.add(Arrays.asList(1, 2, 3));\n        System.out.println(solution.getRow(lst3, 3)); // [[2, 2]]\n    }\n}"}
{"task_id": "Java/88", "generation": "        List<Integer> sortedArray = new ArrayList<>(array);\n\n        int sum = sortedArray.get(0) + sortedArray.get(sortedArray.size() - 1);\n\n        if (sum % 2 == 0) {\n            Collections.sort(sortedArray, Collections.reverseOrder());\n        } else {\n            Collections.sort(sortedArray);\n        }\n\n        return sortedArray;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.sortArray(Arrays.asList())); // []\n        System.out.println(solution.sortArray(Arrays.asList(5))); // [5]\n        System.out.println(solution.sortArray(Arrays.asList(2, 4, 3, 0, 1, 5))); // [0, 1, 2, 3, 4, 5]\n        System.out.println(solution.sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6))); // [6, 5, 4, 3, 2, 1, 0]\n    }\n}"}
{"task_id": "Java/88", "generation": "        List<Integer> sortedArray = new ArrayList<>(array);\n\n        int sum = sortedArray.get(0) + sortedArray.get(sortedArray.size() - 1);\n\n        if (sum % 2 == 0) {\n            Collections.sort(sortedArray, Collections.reverseOrder());\n        } else {\n            Collections.sort(sortedArray);\n        }\n\n        return sortedArray;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.sortArray(Arrays.asList())); // []\n        System.out.println(solution.sortArray(Arrays.asList(5))); // [5]\n        System.out.println(solution.sortArray(Arrays.asList(2, 4, 3, 0, 1, 5))); // [0, 1, 2, 3, 4, 5]\n        System.out.println(solution.sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6))); // [6, 5, 4, 3, 2, 1, 0]\n    }\n}"}
{"task_id": "Java/88", "generation": "        List<Integer> sortedArray = new ArrayList<>(array);\n\n        int sum = sortedArray.get(0) + sortedArray.get(sortedArray.size() - 1);\n\n        if (sum % 2 == 0) {\n            Collections.sort(sortedArray, Collections.reverseOrder());\n        } else {\n            Collections.sort(sortedArray);\n        }\n\n        return sortedArray;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.sortArray(Arrays.asList())); // []\n        System.out.println(solution.sortArray(Arrays.asList(5))); // [5]\n        System.out.println(solution.sortArray(Arrays.asList(2, 4, 3, 0, 1, 5))); // [0, 1, 2, 3, 4, 5]\n        System.out.println(solution.sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6))); // [6, 5, 4, 3, 2, 1, 0]\n    }\n}"}
{"task_id": "Java/88", "generation": "        List<Integer> sortedArray = new ArrayList<>(array);\n\n        int sum = sortedArray.get(0) + sortedArray.get(sortedArray.size() - 1);\n\n        if (sum % 2 == 0) {\n            Collections.sort(sortedArray, Collections.reverseOrder());\n        } else {\n            Collections.sort(sortedArray);\n        }\n\n        return sortedArray;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.sortArray(Arrays.asList())); // []\n        System.out.println(solution.sortArray(Arrays.asList(5))); // [5]\n        System.out.println(solution.sortArray(Arrays.asList(2, 4, 3, 0, 1, 5))); // [0, 1, 2, 3, 4, 5]\n        System.out.println(solution.sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6))); // [6, 5, 4, 3, 2, 1, 0]\n    }\n}"}
{"task_id": "Java/88", "generation": "        List<Integer> sortedArray = new ArrayList<>(array);\n\n        int sum = sortedArray.get(0) + sortedArray.get(sortedArray.size() - 1);\n\n        if (sum % 2 == 0) {\n            Collections.sort(sortedArray, Collections.reverseOrder());\n        } else {\n            Collections.sort(sortedArray);\n        }\n\n        return sortedArray;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.sortArray(Arrays.asList())); // []\n        System.out.println(solution.sortArray(Arrays.asList(5))); // [5]\n        System.out.println(solution.sortArray(Arrays.asList(2, 4, 3, 0, 1, 5))); // [0, 1, 2, 3, 4, 5]\n        System.out.println(solution.sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6))); // [6, 5, 4, 3, 2, 1, 0]\n    }\n}"}
{"task_id": "Java/89", "generation": "        StringBuilder encrypted = new StringBuilder();\n        \n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n                char encryptedChar = (char) (c + 2 * 2);\n                if (Character.isLowerCase(c)) {\n                    if (encryptedChar > 'z') {\n                        encryptedChar = (char) ('a' + (encryptedChar - 'z' - 1));\n                    }\n                } else {\n                    if (encryptedChar > 'Z') {\n                        encryptedChar = (char) ('A' + (encryptedChar - 'Z' - 1));\n                    }\n                }\n                encrypted.append(encryptedChar);\n            } else {\n                encrypted.append(c);\n            }\n        }\n        \n        return encrypted.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.encrypt(\"hi\")); // \"lm\"\n        System.out.println(solution.encrypt(\"asdfghjkl\")); // \"ewhjklnop\"\n        System.out.println(solution.encrypt(\"gf\")); // \"kj\"\n        System.out.println(solution.encrypt(\"et\")); // \"ix\"\n    }\n}"}
{"task_id": "Java/89", "generation": "        StringBuilder encrypted = new StringBuilder();\n        \n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n                char encryptedChar = (char) (c + 2 * 2);\n                if (Character.isLowerCase(c)) {\n                    if (encryptedChar > 'z') {\n                        encryptedChar = (char) ('a' + (encryptedChar - 'z' - 1));\n                    }\n                } else {\n                    if (encryptedChar > 'Z') {\n                        encryptedChar = (char) ('A' + (encryptedChar - 'Z' - 1));\n                    }\n                }\n                encrypted.append(encryptedChar);\n            } else {\n                encrypted.append(c);\n            }\n        }\n        \n        return encrypted.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.encrypt(\"hi\")); // \"lm\"\n        System.out.println(solution.encrypt(\"asdfghjkl\")); // \"ewhjklnop\"\n        System.out.println(solution.encrypt(\"gf\")); // \"kj\"\n        System.out.println(solution.encrypt(\"et\")); // \"ix\"\n    }\n}"}
{"task_id": "Java/89", "generation": "        StringBuilder encrypted = new StringBuilder();\n        \n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n                char encryptedChar = (char) (c + 2 * 2);\n                if (Character.isLowerCase(c)) {\n                    if (encryptedChar > 'z') {\n                        encryptedChar = (char) ('a' + (encryptedChar - 'z' - 1));\n                    }\n                } else {\n                    if (encryptedChar > 'Z') {\n                        encryptedChar = (char) ('A' + (encryptedChar - 'Z' - 1));\n                    }\n                }\n                encrypted.append(encryptedChar);\n            } else {\n                encrypted.append(c);\n            }\n        }\n        \n        return encrypted.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.encrypt(\"hi\")); // \"lm\"\n        System.out.println(solution.encrypt(\"asdfghjkl\")); // \"ewhjklnop\"\n        System.out.println(solution.encrypt(\"gf\")); // \"kj\"\n        System.out.println(solution.encrypt(\"et\")); // \"ix\"\n    }\n}"}
{"task_id": "Java/89", "generation": "        StringBuilder encrypted = new StringBuilder();\n        \n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n                char encryptedChar = (char) (c + 2 * 2);\n                if (Character.isLowerCase(c)) {\n                    if (encryptedChar > 'z') {\n                        encryptedChar = (char) ('a' + (encryptedChar - 'z' - 1));\n                    }\n                } else {\n                    if (encryptedChar > 'Z') {\n                        encryptedChar = (char) ('A' + (encryptedChar - 'Z' - 1));\n                    }\n                }\n                encrypted.append(encryptedChar);\n            } else {\n                encrypted.append(c);\n            }\n        }\n        \n        return encrypted.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.encrypt(\"hi\")); // \"lm\"\n        System.out.println(solution.encrypt(\"asdfghjkl\")); // \"ewhjklnop\"\n        System.out.println(solution.encrypt(\"gf\")); // \"kj\"\n        System.out.println(solution.encrypt(\"et\")); // \"ix\"\n    }\n}"}
{"task_id": "Java/89", "generation": "        StringBuilder encrypted = new StringBuilder();\n        \n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n                char encryptedChar = (char) (c + 2 * 2);\n                if (Character.isLowerCase(c)) {\n                    if (encryptedChar > 'z') {\n                        encryptedChar = (char) ('a' + (encryptedChar - 'z' - 1));\n                    }\n                } else {\n                    if (encryptedChar > 'Z') {\n                        encryptedChar = (char) ('A' + (encryptedChar - 'Z' - 1));\n                    }\n                }\n                encrypted.append(encryptedChar);\n            } else {\n                encrypted.append(c);\n            }\n        }\n        \n        return encrypted.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.encrypt(\"hi\")); // \"lm\"\n        System.out.println(solution.encrypt(\"asdfghjkl\")); // \"ewhjklnop\"\n        System.out.println(solution.encrypt(\"gf\")); // \"kj\"\n        System.out.println(solution.encrypt(\"et\")); // \"ix\"\n    }\n}"}
{"task_id": "Java/90", "generation": "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n        \n        TreeSet<Integer> set = new TreeSet<>(lst);\n        \n        if (set.size() < 2) {\n            return Optional.empty();\n        }\n        \n        Iterator<Integer> iterator = set.iterator();\n        iterator.next();\n        \n        return Optional.of(iterator.next());\n    }\n}"}
{"task_id": "Java/90", "generation": "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n        \n        TreeSet<Integer> set = new TreeSet<>(lst);\n        \n        if (set.size() < 2) {\n            return Optional.empty();\n        }\n        \n        Iterator<Integer> iterator = set.iterator();\n        iterator.next();\n        \n        return Optional.of(iterator.next());\n    }\n}"}
{"task_id": "Java/90", "generation": "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n        \n        TreeSet<Integer> set = new TreeSet<>(lst);\n        \n        if (set.size() < 2) {\n            return Optional.empty();\n        }\n        \n        Iterator<Integer> iterator = set.iterator();\n        iterator.next();\n        \n        return Optional.of(iterator.next());\n    }\n}"}
{"task_id": "Java/90", "generation": "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n        \n        TreeSet<Integer> set = new TreeSet<>(lst);\n        \n        if (set.size() < 2) {\n            return Optional.empty();\n        }\n        \n        Iterator<Integer> iterator = set.iterator();\n        iterator.next();\n        \n        return Optional.of(iterator.next());\n    }\n}"}
{"task_id": "Java/90", "generation": "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n        \n        TreeSet<Integer> set = new TreeSet<>(lst);\n        \n        if (set.size() < 2) {\n            return Optional.empty();\n        }\n        \n        Iterator<Integer> iterator = set.iterator();\n        iterator.next();\n        \n        return Optional.of(iterator.next());\n    }\n}"}
{"task_id": "Java/91", "generation": "        int boredomCount = 0;\n        String[] sentences = S.split(\"[.?!]\");\n        \n        for (String sentence : sentences) {\n            String[] words = sentence.trim().split(\" \");\n            if (words.length > 0 && words[0].equals(\"I\")) {\n                boredomCount++;\n            }\n        }\n        \n        return boredomCount;\n    }\n}"}
{"task_id": "Java/91", "generation": "        int boredomCount = 0;\n        String[] sentences = S.split(\"[.?!]\");\n        \n        for (String sentence : sentences) {\n            String[] words = sentence.trim().split(\" \");\n            if (words.length > 0 && words[0].equals(\"I\")) {\n                boredomCount++;\n            }\n        }\n        \n        return boredomCount;\n    }\n}"}
{"task_id": "Java/91", "generation": "        int boredomCount = 0;\n        String[] sentences = S.split(\"[.?!]\");\n        \n        for (String sentence : sentences) {\n            String[] words = sentence.trim().split(\" \");\n            if (words.length > 0 && words[0].equals(\"I\")) {\n                boredomCount++;\n            }\n        }\n        \n        return boredomCount;\n    }\n}"}
{"task_id": "Java/91", "generation": "        int boredomCount = 0;\n        String[] sentences = S.split(\"[.?!]\");\n        \n        for (String sentence : sentences) {\n            String[] words = sentence.trim().split(\" \");\n            if (words.length > 0 && words[0].equals(\"I\")) {\n                boredomCount++;\n            }\n        }\n        \n        return boredomCount;\n    }\n}"}
{"task_id": "Java/91", "generation": "        int boredomCount = 0;\n        String[] sentences = S.split(\"[.?!]\");\n        \n        for (String sentence : sentences) {\n            String[] words = sentence.trim().split(\" \");\n            if (words.length > 0 && words[0].equals(\"I\")) {\n                boredomCount++;\n            }\n        }\n        \n        return boredomCount;\n    }\n}"}
{"task_id": "Java/92", "generation": "        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int num1 = (int) x;\n            int num2 = (int) y;\n            int num3 = (int) z;\n            \n            return num1 == num2 + num3 || num2 == num1 + num3 || num3 == num1 + num2;\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.anyInt(5, 2, 7)); // true\n        System.out.println(solution.anyInt(3, 2, 2)); // false\n        System.out.println(solution.anyInt(3, -2, 1)); // true\n        System.out.println(solution.anyInt(3.6, -2.2, 2)); // false\n    }\n}"}
{"task_id": "Java/92", "generation": "        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int num1 = (int) x;\n            int num2 = (int) y;\n            int num3 = (int) z;\n            \n            return num1 == num2 + num3 || num2 == num1 + num3 || num3 == num1 + num2;\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.anyInt(5, 2, 7)); // true\n        System.out.println(solution.anyInt(3, 2, 2)); // false\n        System.out.println(solution.anyInt(3, -2, 1)); // true\n        System.out.println(solution.anyInt(3.6, -2.2, 2)); // false\n    }\n}"}
{"task_id": "Java/92", "generation": "        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int num1 = (int) x;\n            int num2 = (int) y;\n            int num3 = (int) z;\n            \n            return num1 == num2 + num3 || num2 == num1 + num3 || num3 == num1 + num2;\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.anyInt(5, 2, 7)); // true\n        System.out.println(solution.anyInt(3, 2, 2)); // false\n        System.out.println(solution.anyInt(3, -2, 1)); // true\n        System.out.println(solution.anyInt(3.6, -2.2, 2)); // false\n    }\n}"}
{"task_id": "Java/92", "generation": "        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int num1 = (int) x;\n            int num2 = (int) y;\n            int num3 = (int) z;\n            \n            return num1 == num2 + num3 || num2 == num1 + num3 || num3 == num1 + num2;\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.anyInt(5, 2, 7)); // true\n        System.out.println(solution.anyInt(3, 2, 2)); // false\n        System.out.println(solution.anyInt(3, -2, 1)); // true\n        System.out.println(solution.anyInt(3.6, -2.2, 2)); // false\n    }\n}"}
{"task_id": "Java/92", "generation": "        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int num1 = (int) x;\n            int num2 = (int) y;\n            int num3 = (int) z;\n            \n            return num1 == num2 + num3 || num2 == num1 + num3 || num3 == num1 + num2;\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.anyInt(5, 2, 7)); // true\n        System.out.println(solution.anyInt(3, 2, 2)); // false\n        System.out.println(solution.anyInt(3, -2, 1)); // true\n        System.out.println(solution.anyInt(3.6, -2.2, 2)); // false\n    }\n}"}
{"task_id": "Java/93", "generation": "        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        StringBuilder encodedMessage = new StringBuilder();\n\n        for (char c : message.toCharArray()) {\n            if (Character.isLetter(c)) {\n                if (Character.isUpperCase(c)) {\n                    c = Character.toLowerCase(c);\n                    c = (char) (c + 2);\n                    if (c > 'z') {\n                        c = (char) (c - 26);\n                    }\n                    c = Character.toUpperCase(c);\n                } else {\n                    c = (char) (c + 2);\n                    if (c > 'z') {\n                        c = (char) (c - 26);\n                    }\n                }\n\n                boolean isVowel = false;\n                for (char vowel : vowels) {\n                    if (c == vowel) {\n                        isVowel = true;\n                        break;\n                    }\n                }\n\n                if (isVowel) {\n                    c = (char) (c + 2);\n                    if (c > 'z') {\n                        c = (char) (c - 26);\n                    }\n                }\n            }\n            encodedMessage.append(c);\n        }\n\n        return encodedMessage.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.encode(\"test\")); // \"TGST\"\n        System.out.println(solution.encode(\"This is a message\")); // \"tHKS KS C MGSSCGG\"\n    }\n}"}
{"task_id": "Java/93", "generation": "        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        StringBuilder encodedMessage = new StringBuilder();\n\n        for (char c : message.toCharArray()) {\n            if (Character.isLetter(c)) {\n                if (Character.isUpperCase(c)) {\n                    c = Character.toLowerCase(c);\n                    c = (char) (c + 2);\n                    if (c > 'z') {\n                        c = (char) (c - 26);\n                    }\n                    c = Character.toUpperCase(c);\n                } else {\n                    c = (char) (c + 2);\n                    if (c > 'z') {\n                        c = (char) (c - 26);\n                    }\n                }\n\n                boolean isVowel = false;\n                for (char vowel : vowels) {\n                    if (c == vowel) {\n                        isVowel = true;\n                        break;\n                    }\n                }\n\n                if (isVowel) {\n                    c = (char) (c + 2);\n                    if (c > 'z') {\n                        c = (char) (c - 26);\n                    }\n                }\n            }\n            encodedMessage.append(c);\n        }\n\n        return encodedMessage.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.encode(\"test\")); // \"TGST\"\n        System.out.println(solution.encode(\"This is a message\")); // \"tHKS KS C MGSSCGG\"\n    }\n}"}
{"task_id": "Java/93", "generation": "        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        StringBuilder encodedMessage = new StringBuilder();\n\n        for (char c : message.toCharArray()) {\n            if (Character.isLetter(c)) {\n                if (Character.isUpperCase(c)) {\n                    c = Character.toLowerCase(c);\n                    c = (char) (c + 2);\n                    if (c > 'z') {\n                        c = (char) (c - 26);\n                    }\n                    c = Character.toUpperCase(c);\n                } else {\n                    c = (char) (c + 2);\n                    if (c > 'z') {\n                        c = (char) (c - 26);\n                    }\n                }\n\n                boolean isVowel = false;\n                for (char vowel : vowels) {\n                    if (c == vowel) {\n                        isVowel = true;\n                        break;\n                    }\n                }\n\n                if (isVowel) {\n                    c = (char) (c + 2);\n                    if (c > 'z') {\n                        c = (char) (c - 26);\n                    }\n                }\n            }\n            encodedMessage.append(c);\n        }\n\n        return encodedMessage.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.encode(\"test\")); // \"TGST\"\n        System.out.println(solution.encode(\"This is a message\")); // \"tHKS KS C MGSSCGG\"\n    }\n}"}
{"task_id": "Java/93", "generation": "        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        StringBuilder encodedMessage = new StringBuilder();\n\n        for (char c : message.toCharArray()) {\n            if (Character.isLetter(c)) {\n                if (Character.isUpperCase(c)) {\n                    c = Character.toLowerCase(c);\n                    c = (char) (c + 2);\n                    if (c > 'z') {\n                        c = (char) (c - 26);\n                    }\n                    c = Character.toUpperCase(c);\n                } else {\n                    c = (char) (c + 2);\n                    if (c > 'z') {\n                        c = (char) (c - 26);\n                    }\n                }\n\n                boolean isVowel = false;\n                for (char vowel : vowels) {\n                    if (c == vowel) {\n                        isVowel = true;\n                        break;\n                    }\n                }\n\n                if (isVowel) {\n                    c = (char) (c + 2);\n                    if (c > 'z') {\n                        c = (char) (c - 26);\n                    }\n                }\n            }\n            encodedMessage.append(c);\n        }\n\n        return encodedMessage.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.encode(\"test\")); // \"TGST\"\n        System.out.println(solution.encode(\"This is a message\")); // \"tHKS KS C MGSSCGG\"\n    }\n}"}
{"task_id": "Java/93", "generation": "        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        StringBuilder encodedMessage = new StringBuilder();\n\n        for (char c : message.toCharArray()) {\n            if (Character.isLetter(c)) {\n                if (Character.isUpperCase(c)) {\n                    c = Character.toLowerCase(c);\n                    c = (char) (c + 2);\n                    if (c > 'z') {\n                        c = (char) (c - 26);\n                    }\n                    c = Character.toUpperCase(c);\n                } else {\n                    c = (char) (c + 2);\n                    if (c > 'z') {\n                        c = (char) (c - 26);\n                    }\n                }\n\n                boolean isVowel = false;\n                for (char vowel : vowels) {\n                    if (c == vowel) {\n                        isVowel = true;\n                        break;\n                    }\n                }\n\n                if (isVowel) {\n                    c = (char) (c + 2);\n                    if (c > 'z') {\n                        c = (char) (c - 26);\n                    }\n                }\n            }\n            encodedMessage.append(c);\n        }\n\n        return encodedMessage.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.encode(\"test\")); // \"TGST\"\n        System.out.println(solution.encode(\"This is a message\")); // \"tHKS KS C MGSSCGG\"\n    }\n}"}
{"task_id": "Java/94", "generation": "        int maxPrime = 0;\n        for (int num : lst) {\n            if (isPrime(num) && num > maxPrime) {\n                maxPrime = num;\n            }\n        }\n        \n        int sum = 0;\n        while (maxPrime > 0) {\n            sum += maxPrime % 10;\n            maxPrime /= 10;\n        }\n        \n        return sum;\n    }\n    \n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/94", "generation": "        int maxPrime = 0;\n        for (int num : lst) {\n            if (isPrime(num) && num > maxPrime) {\n                maxPrime = num;\n            }\n        }\n        \n        int sum = 0;\n        while (maxPrime > 0) {\n            sum += maxPrime % 10;\n            maxPrime /= 10;\n        }\n        \n        return sum;\n    }\n    \n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/94", "generation": "        int maxPrime = 0;\n        for (int num : lst) {\n            if (isPrime(num) && num > maxPrime) {\n                maxPrime = num;\n            }\n        }\n        \n        int sum = 0;\n        while (maxPrime > 0) {\n            sum += maxPrime % 10;\n            maxPrime /= 10;\n        }\n        \n        return sum;\n    }\n    \n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/94", "generation": "        int maxPrime = 0;\n        for (int num : lst) {\n            if (isPrime(num) && num > maxPrime) {\n                maxPrime = num;\n            }\n        }\n        \n        int sum = 0;\n        while (maxPrime > 0) {\n            sum += maxPrime % 10;\n            maxPrime /= 10;\n        }\n        \n        return sum;\n    }\n    \n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/94", "generation": "        int maxPrime = 0;\n        for (int num : lst) {\n            if (isPrime(num) && num > maxPrime) {\n                maxPrime = num;\n            }\n        }\n        \n        int sum = 0;\n        while (maxPrime > 0) {\n            sum += maxPrime % 10;\n            maxPrime /= 10;\n        }\n        \n        return sum;\n    }\n    \n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/95", "generation": "        if (dict.isEmpty()) {\n            return false;\n        }\n        \n        boolean isLowerCase = true;\n        boolean isUpperCase = true;\n        \n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            \n            String keyStr = (String) key;\n            if (!keyStr.equals(keyStr.toLowerCase())) {\n                isLowerCase = false;\n            }\n            if (!keyStr.equals(keyStr.toUpperCase())) {\n                isUpperCase = false;\n            }\n        }\n        \n        return isLowerCase || isUpperCase;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        Map<Object, Object> dict1 = new HashMap<>();\n        dict1.put(\"a\", \"apple\");\n        dict1.put(\"b\", \"banana\");\n        System.out.println(solution.checkDictCase(dict1)); // should return true\n        \n        Map<Object, Object> dict2 = new HashMap<>();\n        dict2.put(\"a\", \"apple\");\n        dict2.put(\"A\", \"banana\");\n        dict2.put(\"B\", \"banana\");\n        System.out.println(solution.checkDictCase(dict2)); // should return false\n        \n        Map<Object, Object> dict3 = new HashMap<>();\n        dict3.put(\"a\", \"apple\");\n        dict3.put(8, \"banana\");\n        dict3.put(\"a\", \"apple\");\n        System.out.println(solution.checkDictCase(dict3)); // should return false\n        \n        Map<Object, Object> dict4 = new HashMap<>();\n        dict4.put(\"Name\", \"John\");\n        dict4.put(\"Age\", \"36\");\n        dict4.put(\"City\", \"Houston\");\n        System.out.println(solution.checkDictCase(dict4)); // should return false\n        \n        Map<Object, Object> dict5 = new HashMap<>();\n        dict5.put(\"STATE\", \"NC\");\n        dict5.put(\"ZIP\", \"12345\");\n        System.out.println(solution.checkDictCase(dict5)); // should return true\n    }\n}"}
{"task_id": "Java/95", "generation": "        if (dict.isEmpty()) {\n            return false;\n        }\n        \n        boolean isLowerCase = true;\n        boolean isUpperCase = true;\n        \n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            \n            String keyStr = (String) key;\n            if (!keyStr.equals(keyStr.toLowerCase())) {\n                isLowerCase = false;\n            }\n            if (!keyStr.equals(keyStr.toUpperCase())) {\n                isUpperCase = false;\n            }\n        }\n        \n        return isLowerCase || isUpperCase;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        Map<Object, Object> dict1 = new HashMap<>();\n        dict1.put(\"a\", \"apple\");\n        dict1.put(\"b\", \"banana\");\n        System.out.println(solution.checkDictCase(dict1)); // should return true\n        \n        Map<Object, Object> dict2 = new HashMap<>();\n        dict2.put(\"a\", \"apple\");\n        dict2.put(\"A\", \"banana\");\n        dict2.put(\"B\", \"banana\");\n        System.out.println(solution.checkDictCase(dict2)); // should return false\n        \n        Map<Object, Object> dict3 = new HashMap<>();\n        dict3.put(\"a\", \"apple\");\n        dict3.put(8, \"banana\");\n        dict3.put(\"a\", \"apple\");\n        System.out.println(solution.checkDictCase(dict3)); // should return false\n        \n        Map<Object, Object> dict4 = new HashMap<>();\n        dict4.put(\"Name\", \"John\");\n        dict4.put(\"Age\", \"36\");\n        dict4.put(\"City\", \"Houston\");\n        System.out.println(solution.checkDictCase(dict4)); // should return false\n        \n        Map<Object, Object> dict5 = new HashMap<>();\n        dict5.put(\"STATE\", \"NC\");\n        dict5.put(\"ZIP\", \"12345\");\n        System.out.println(solution.checkDictCase(dict5)); // should return true\n    }\n}"}
{"task_id": "Java/95", "generation": "        if (dict.isEmpty()) {\n            return false;\n        }\n        \n        boolean isLowerCase = true;\n        boolean isUpperCase = true;\n        \n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            \n            String keyStr = (String) key;\n            if (!keyStr.equals(keyStr.toLowerCase())) {\n                isLowerCase = false;\n            }\n            if (!keyStr.equals(keyStr.toUpperCase())) {\n                isUpperCase = false;\n            }\n        }\n        \n        return isLowerCase || isUpperCase;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        Map<Object, Object> dict1 = new HashMap<>();\n        dict1.put(\"a\", \"apple\");\n        dict1.put(\"b\", \"banana\");\n        System.out.println(solution.checkDictCase(dict1)); // should return true\n        \n        Map<Object, Object> dict2 = new HashMap<>();\n        dict2.put(\"a\", \"apple\");\n        dict2.put(\"A\", \"banana\");\n        dict2.put(\"B\", \"banana\");\n        System.out.println(solution.checkDictCase(dict2)); // should return false\n        \n        Map<Object, Object> dict3 = new HashMap<>();\n        dict3.put(\"a\", \"apple\");\n        dict3.put(8, \"banana\");\n        dict3.put(\"a\", \"apple\");\n        System.out.println(solution.checkDictCase(dict3)); // should return false\n        \n        Map<Object, Object> dict4 = new HashMap<>();\n        dict4.put(\"Name\", \"John\");\n        dict4.put(\"Age\", \"36\");\n        dict4.put(\"City\", \"Houston\");\n        System.out.println(solution.checkDictCase(dict4)); // should return false\n        \n        Map<Object, Object> dict5 = new HashMap<>();\n        dict5.put(\"STATE\", \"NC\");\n        dict5.put(\"ZIP\", \"12345\");\n        System.out.println(solution.checkDictCase(dict5)); // should return true\n    }\n}"}
{"task_id": "Java/95", "generation": "        if (dict.isEmpty()) {\n            return false;\n        }\n        \n        boolean isLowerCase = true;\n        boolean isUpperCase = true;\n        \n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            \n            String keyStr = (String) key;\n            if (!keyStr.equals(keyStr.toLowerCase())) {\n                isLowerCase = false;\n            }\n            if (!keyStr.equals(keyStr.toUpperCase())) {\n                isUpperCase = false;\n            }\n        }\n        \n        return isLowerCase || isUpperCase;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        Map<Object, Object> dict1 = new HashMap<>();\n        dict1.put(\"a\", \"apple\");\n        dict1.put(\"b\", \"banana\");\n        System.out.println(solution.checkDictCase(dict1)); // should return true\n        \n        Map<Object, Object> dict2 = new HashMap<>();\n        dict2.put(\"a\", \"apple\");\n        dict2.put(\"A\", \"banana\");\n        dict2.put(\"B\", \"banana\");\n        System.out.println(solution.checkDictCase(dict2)); // should return false\n        \n        Map<Object, Object> dict3 = new HashMap<>();\n        dict3.put(\"a\", \"apple\");\n        dict3.put(8, \"banana\");\n        dict3.put(\"a\", \"apple\");\n        System.out.println(solution.checkDictCase(dict3)); // should return false\n        \n        Map<Object, Object> dict4 = new HashMap<>();\n        dict4.put(\"Name\", \"John\");\n        dict4.put(\"Age\", \"36\");\n        dict4.put(\"City\", \"Houston\");\n        System.out.println(solution.checkDictCase(dict4)); // should return false\n        \n        Map<Object, Object> dict5 = new HashMap<>();\n        dict5.put(\"STATE\", \"NC\");\n        dict5.put(\"ZIP\", \"12345\");\n        System.out.println(solution.checkDictCase(dict5)); // should return true\n    }\n}"}
{"task_id": "Java/95", "generation": "        if (dict.isEmpty()) {\n            return false;\n        }\n        \n        boolean isLowerCase = true;\n        boolean isUpperCase = true;\n        \n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            \n            String keyStr = (String) key;\n            if (!keyStr.equals(keyStr.toLowerCase())) {\n                isLowerCase = false;\n            }\n            if (!keyStr.equals(keyStr.toUpperCase())) {\n                isUpperCase = false;\n            }\n        }\n        \n        return isLowerCase || isUpperCase;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        Map<Object, Object> dict1 = new HashMap<>();\n        dict1.put(\"a\", \"apple\");\n        dict1.put(\"b\", \"banana\");\n        System.out.println(solution.checkDictCase(dict1)); // should return true\n        \n        Map<Object, Object> dict2 = new HashMap<>();\n        dict2.put(\"a\", \"apple\");\n        dict2.put(\"A\", \"banana\");\n        dict2.put(\"B\", \"banana\");\n        System.out.println(solution.checkDictCase(dict2)); // should return false\n        \n        Map<Object, Object> dict3 = new HashMap<>();\n        dict3.put(\"a\", \"apple\");\n        dict3.put(8, \"banana\");\n        dict3.put(\"a\", \"apple\");\n        System.out.println(solution.checkDictCase(dict3)); // should return false\n        \n        Map<Object, Object> dict4 = new HashMap<>();\n        dict4.put(\"Name\", \"John\");\n        dict4.put(\"Age\", \"36\");\n        dict4.put(\"City\", \"Houston\");\n        System.out.println(solution.checkDictCase(dict4)); // should return false\n        \n        Map<Object, Object> dict5 = new HashMap<>();\n        dict5.put(\"STATE\", \"NC\");\n        dict5.put(\"ZIP\", \"12345\");\n        System.out.println(solution.checkDictCase(dict5)); // should return true\n    }\n}"}
{"task_id": "Java/96", "generation": "        List<Integer> primes = new ArrayList<>();\n        \n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        \n        return primes;\n    }\n    \n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "Java/96", "generation": "        List<Integer> primes = new ArrayList<>();\n        \n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        \n        return primes;\n    }\n    \n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "Java/96", "generation": "        List<Integer> primes = new ArrayList<>();\n        \n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        \n        return primes;\n    }\n    \n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "Java/96", "generation": "        List<Integer> primes = new ArrayList<>();\n        \n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        \n        return primes;\n    }\n    \n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "Java/96", "generation": "        List<Integer> primes = new ArrayList<>();\n        \n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        \n        return primes;\n    }\n    \n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "Java/97", "generation": "        int unitA = Math.abs(a % 10);\n        int unitB = Math.abs(b % 10);\n        \n        return unitA * unitB;\n    }\n}"}
{"task_id": "Java/97", "generation": "        int unitA = Math.abs(a % 10);\n        int unitB = Math.abs(b % 10);\n        \n        return unitA * unitB;\n    }\n}"}
{"task_id": "Java/97", "generation": "        int unitA = Math.abs(a % 10);\n        int unitB = Math.abs(b % 10);\n        \n        return unitA * unitB;\n    }\n}"}
{"task_id": "Java/97", "generation": "        int unitA = Math.abs(a % 10);\n        int unitB = Math.abs(b % 10);\n        \n        return unitA * unitB;\n    }\n}"}
{"task_id": "Java/97", "generation": "        int unitA = Math.abs(a % 10);\n        int unitB = Math.abs(b % 10);\n        \n        return unitA * unitB;\n    }\n}"}
{"task_id": "Java/98", "generation": "        int count = 0;\n        \n        for (int i = 0; i < s.length(); i += 2) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c) && (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}"}
{"task_id": "Java/98", "generation": "        int count = 0;\n        \n        for (int i = 0; i < s.length(); i += 2) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c) && (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}"}
{"task_id": "Java/98", "generation": "        int count = 0;\n        \n        for (int i = 0; i < s.length(); i += 2) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c) && (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}"}
{"task_id": "Java/98", "generation": "        int count = 0;\n        \n        for (int i = 0; i < s.length(); i += 2) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c) && (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}"}
{"task_id": "Java/98", "generation": "        int count = 0;\n        \n        for (int i = 0; i < s.length(); i += 2) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c) && (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}"}
{"task_id": "Java/99", "generation": "        double num = Double.parseDouble(value);\n        int lower = (int) Math.floor(num);\n        int upper = (int) Math.ceil(num);\n\n        if (Math.abs(num - lower) < Math.abs(num - upper)) {\n            return lower;\n        } else {\n            return upper;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.countUpper(\"10\")); // 10\n        System.out.println(solution.countUpper(\"15.3\")); // 15\n        System.out.println(solution.countUpper(\"14.5\")); // 15\n        System.out.println(solution.countUpper(\"-14.5\")); // -15\n    }\n}"}
{"task_id": "Java/99", "generation": "        double num = Double.parseDouble(value);\n        int lower = (int) Math.floor(num);\n        int upper = (int) Math.ceil(num);\n\n        if (Math.abs(num - lower) < Math.abs(num - upper)) {\n            return lower;\n        } else {\n            return upper;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.countUpper(\"10\")); // 10\n        System.out.println(solution.countUpper(\"15.3\")); // 15\n        System.out.println(solution.countUpper(\"14.5\")); // 15\n        System.out.println(solution.countUpper(\"-14.5\")); // -15\n    }\n}"}
{"task_id": "Java/99", "generation": "        double num = Double.parseDouble(value);\n        int lower = (int) Math.floor(num);\n        int upper = (int) Math.ceil(num);\n\n        if (Math.abs(num - lower) < Math.abs(num - upper)) {\n            return lower;\n        } else {\n            return upper;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.countUpper(\"10\")); // 10\n        System.out.println(solution.countUpper(\"15.3\")); // 15\n        System.out.println(solution.countUpper(\"14.5\")); // 15\n        System.out.println(solution.countUpper(\"-14.5\")); // -15\n    }\n}"}
{"task_id": "Java/99", "generation": "        double num = Double.parseDouble(value);\n        int lower = (int) Math.floor(num);\n        int upper = (int) Math.ceil(num);\n\n        if (Math.abs(num - lower) < Math.abs(num - upper)) {\n            return lower;\n        } else {\n            return upper;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.countUpper(\"10\")); // 10\n        System.out.println(solution.countUpper(\"15.3\")); // 15\n        System.out.println(solution.countUpper(\"14.5\")); // 15\n        System.out.println(solution.countUpper(\"-14.5\")); // -15\n    }\n}"}
{"task_id": "Java/99", "generation": "        double num = Double.parseDouble(value);\n        int lower = (int) Math.floor(num);\n        int upper = (int) Math.ceil(num);\n\n        if (Math.abs(num - lower) < Math.abs(num - upper)) {\n            return lower;\n        } else {\n            return upper;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.countUpper(\"10\")); // 10\n        System.out.println(solution.countUpper(\"15.3\")); // 15\n        System.out.println(solution.countUpper(\"14.5\")); // 15\n        System.out.println(solution.countUpper(\"-14.5\")); // -15\n    }\n}"}
{"task_id": "Java/100", "generation": "        List<Integer> result = new ArrayList<>();\n        result.add(n);\n        \n        for (int i = 1; i < n; i++) {\n            if (n % 2 == 0) {\n                n += 2;\n            } else {\n                n += 1;\n            }\n            result.add(n);\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the makeAPile method\n        System.out.println(solution.makeAPile(3)); // [3, 5, 7]\n    }\n}"}
{"task_id": "Java/100", "generation": "        List<Integer> result = new ArrayList<>();\n        result.add(n);\n        \n        for (int i = 1; i < n; i++) {\n            if (n % 2 == 0) {\n                n += 2;\n            } else {\n                n += 1;\n            }\n            result.add(n);\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the makeAPile method\n        System.out.println(solution.makeAPile(3)); // [3, 5, 7]\n    }\n}"}
{"task_id": "Java/100", "generation": "        List<Integer> result = new ArrayList<>();\n        result.add(n);\n        \n        for (int i = 1; i < n; i++) {\n            if (n % 2 == 0) {\n                n += 2;\n            } else {\n                n += 1;\n            }\n            result.add(n);\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the makeAPile method\n        System.out.println(solution.makeAPile(3)); // [3, 5, 7]\n    }\n}"}
{"task_id": "Java/100", "generation": "        List<Integer> result = new ArrayList<>();\n        result.add(n);\n        \n        for (int i = 1; i < n; i++) {\n            if (n % 2 == 0) {\n                n += 2;\n            } else {\n                n += 1;\n            }\n            result.add(n);\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the makeAPile method\n        System.out.println(solution.makeAPile(3)); // [3, 5, 7]\n    }\n}"}
{"task_id": "Java/100", "generation": "        List<Integer> result = new ArrayList<>();\n        result.add(n);\n        \n        for (int i = 1; i < n; i++) {\n            if (n % 2 == 0) {\n                n += 2;\n            } else {\n                n += 1;\n            }\n            result.add(n);\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the makeAPile method\n        System.out.println(solution.makeAPile(3)); // [3, 5, 7]\n    }\n}"}
{"task_id": "Java/101", "generation": "        List<String> words = new ArrayList<>();\n        \n        String[] splitWords = s.split(\"[,\\\\s]+\");\n        \n        for (String word : splitWords) {\n            words.add(word);\n        }\n        \n        return words;\n    }\n}"}
{"task_id": "Java/101", "generation": "        List<String> words = new ArrayList<>();\n        \n        String[] splitWords = s.split(\"[,\\\\s]+\");\n        \n        for (String word : splitWords) {\n            words.add(word);\n        }\n        \n        return words;\n    }\n}"}
{"task_id": "Java/101", "generation": "        List<String> words = new ArrayList<>();\n        \n        String[] splitWords = s.split(\"[,\\\\s]+\");\n        \n        for (String word : splitWords) {\n            words.add(word);\n        }\n        \n        return words;\n    }\n}"}
{"task_id": "Java/101", "generation": "        List<String> words = new ArrayList<>();\n        \n        String[] splitWords = s.split(\"[,\\\\s]+\");\n        \n        for (String word : splitWords) {\n            words.add(word);\n        }\n        \n        return words;\n    }\n}"}
{"task_id": "Java/101", "generation": "        List<String> words = new ArrayList<>();\n        \n        String[] splitWords = s.split(\"[,\\\\s]+\");\n        \n        for (String word : splitWords) {\n            words.add(word);\n        }\n        \n        return words;\n    }\n}"}
{"task_id": "Java/102", "generation": "        int maxEven = -1;\n        \n        for (int i = y; i >= x; i--) {\n            if (i % 2 == 0) {\n                maxEven = i;\n                break;\n            }\n        }\n        \n        return maxEven;\n    }\n}"}
{"task_id": "Java/102", "generation": "        int maxEven = -1;\n        \n        for (int i = y; i >= x; i--) {\n            if (i % 2 == 0) {\n                maxEven = i;\n                break;\n            }\n        }\n        \n        return maxEven;\n    }\n}"}
{"task_id": "Java/102", "generation": "        int maxEven = -1;\n        \n        for (int i = y; i >= x; i--) {\n            if (i % 2 == 0) {\n                maxEven = i;\n                break;\n            }\n        }\n        \n        return maxEven;\n    }\n}"}
{"task_id": "Java/102", "generation": "        int maxEven = -1;\n        \n        for (int i = y; i >= x; i--) {\n            if (i % 2 == 0) {\n                maxEven = i;\n                break;\n            }\n        }\n        \n        return maxEven;\n    }\n}"}
{"task_id": "Java/102", "generation": "        int maxEven = -1;\n        \n        for (int i = y; i >= x; i--) {\n            if (i % 2 == 0) {\n                maxEven = i;\n                break;\n            }\n        }\n        \n        return maxEven;\n    }\n}"}
{"task_id": "Java/103", "generation": "        if (n > m) {\n            return -1;\n        }\n        \n        int sum = 0;\n        int count = 0;\n        \n        for (int i = n; i <= m; i++) {\n            sum += i;\n            count++;\n        }\n        \n        int avg = Math.round((float) sum / count);\n        \n        return Integer.toBinaryString(avg);\n    }\n}"}
{"task_id": "Java/103", "generation": "        if (n > m) {\n            return -1;\n        }\n        \n        int sum = 0;\n        int count = 0;\n        \n        for (int i = n; i <= m; i++) {\n            sum += i;\n            count++;\n        }\n        \n        int avg = Math.round((float) sum / count);\n        \n        return Integer.toBinaryString(avg);\n    }\n}"}
{"task_id": "Java/103", "generation": "        if (n > m) {\n            return -1;\n        }\n        \n        int sum = 0;\n        int count = 0;\n        \n        for (int i = n; i <= m; i++) {\n            sum += i;\n            count++;\n        }\n        \n        int avg = Math.round((float) sum / count);\n        \n        return Integer.toBinaryString(avg);\n    }\n}"}
{"task_id": "Java/103", "generation": "        if (n > m) {\n            return -1;\n        }\n        \n        int sum = 0;\n        int count = 0;\n        \n        for (int i = n; i <= m; i++) {\n            sum += i;\n            count++;\n        }\n        \n        int avg = Math.round((float) sum / count);\n        \n        return Integer.toBinaryString(avg);\n    }\n}"}
{"task_id": "Java/103", "generation": "        if (n > m) {\n            return -1;\n        }\n        \n        int sum = 0;\n        int count = 0;\n        \n        for (int i = n; i <= m; i++) {\n            sum += i;\n            count++;\n        }\n        \n        int avg = Math.round((float) sum / count);\n        \n        return Integer.toBinaryString(avg);\n    }\n}"}
{"task_id": "Java/104", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int num : x) {\n            if (hasNoEvenDigit(num)) {\n                result.add(num);\n            }\n        }\n        \n        Collections.sort(result);\n        \n        return result;\n    }\n    \n    private boolean hasNoEvenDigit(int num) {\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                return false;\n            }\n            num /= 10;\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/104", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int num : x) {\n            if (hasNoEvenDigit(num)) {\n                result.add(num);\n            }\n        }\n        \n        Collections.sort(result);\n        \n        return result;\n    }\n    \n    private boolean hasNoEvenDigit(int num) {\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                return false;\n            }\n            num /= 10;\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/104", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int num : x) {\n            if (hasNoEvenDigit(num)) {\n                result.add(num);\n            }\n        }\n        \n        Collections.sort(result);\n        \n        return result;\n    }\n    \n    private boolean hasNoEvenDigit(int num) {\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                return false;\n            }\n            num /= 10;\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/104", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int num : x) {\n            if (hasNoEvenDigit(num)) {\n                result.add(num);\n            }\n        }\n        \n        Collections.sort(result);\n        \n        return result;\n    }\n    \n    private boolean hasNoEvenDigit(int num) {\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                return false;\n            }\n            num /= 10;\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/104", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int num : x) {\n            if (hasNoEvenDigit(num)) {\n                result.add(num);\n            }\n        }\n        \n        Collections.sort(result);\n        \n        return result;\n    }\n    \n    private boolean hasNoEvenDigit(int num) {\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                return false;\n            }\n            num /= 10;\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/105", "generation": "        List<String> result = new ArrayList<>();\n        \n        // Filter out numbers that are not between 1 and 9\n        List<Integer> filteredArr = new ArrayList<>();\n        for (int num : arr) {\n            if (num >= 1 && num <= 9) {\n                filteredArr.add(num);\n            }\n        }\n        \n        // Sort the filtered array\n        Collections.sort(filteredArr);\n        \n        // Reverse the sorted array\n        Collections.reverse(filteredArr);\n        \n        // Replace each digit with its corresponding name\n        for (int num : filteredArr) {\n            switch (num) {\n                case 1:\n                    result.add(\"One\");\n                    break;\n                case 2:\n                    result.add(\"Two\");\n                    break;\n                case 3:\n                    result.add(\"Three\");\n                    break;\n                case 4:\n                    result.add(\"Four\");\n                    break;\n                case 5:\n                    result.add(\"Five\");\n                    break;\n                case 6:\n                    result.add(\"Six\");\n                    break;\n                case 7:\n                    result.add(\"Seven\");\n                    break;\n                case 8:\n                    result.add(\"Eight\");\n                    break;\n                case 9:\n                    result.add(\"Nine\");\n                    break;\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> arr1 = Arrays.asList(2, 1, 1, 4, 5, 8, 2, 3);\n        System.out.println(solution.byLength(arr1)); // [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n        \n        List<Integer> arr2 = Arrays.asList(1, -1, 55);\n        System.out.println(solution.byLength(arr2)); // [\"One\"]\n        \n        List<Integer> arr3 = new ArrayList<>();\n        System.out.println(solution.byLength(arr3)); // []\n    }\n}"}
{"task_id": "Java/105", "generation": "        List<String> result = new ArrayList<>();\n        \n        // Filter out numbers that are not between 1 and 9\n        List<Integer> filteredArr = new ArrayList<>();\n        for (int num : arr) {\n            if (num >= 1 && num <= 9) {\n                filteredArr.add(num);\n            }\n        }\n        \n        // Sort the filtered array\n        Collections.sort(filteredArr);\n        \n        // Reverse the sorted array\n        Collections.reverse(filteredArr);\n        \n        // Replace each digit with its corresponding name\n        for (int num : filteredArr) {\n            switch (num) {\n                case 1:\n                    result.add(\"One\");\n                    break;\n                case 2:\n                    result.add(\"Two\");\n                    break;\n                case 3:\n                    result.add(\"Three\");\n                    break;\n                case 4:\n                    result.add(\"Four\");\n                    break;\n                case 5:\n                    result.add(\"Five\");\n                    break;\n                case 6:\n                    result.add(\"Six\");\n                    break;\n                case 7:\n                    result.add(\"Seven\");\n                    break;\n                case 8:\n                    result.add(\"Eight\");\n                    break;\n                case 9:\n                    result.add(\"Nine\");\n                    break;\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> arr1 = Arrays.asList(2, 1, 1, 4, 5, 8, 2, 3);\n        System.out.println(solution.byLength(arr1)); // [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n        \n        List<Integer> arr2 = Arrays.asList(1, -1, 55);\n        System.out.println(solution.byLength(arr2)); // [\"One\"]\n        \n        List<Integer> arr3 = new ArrayList<>();\n        System.out.println(solution.byLength(arr3)); // []\n    }\n}"}
{"task_id": "Java/105", "generation": "        List<String> result = new ArrayList<>();\n        \n        // Filter out numbers that are not between 1 and 9\n        List<Integer> filteredArr = new ArrayList<>();\n        for (int num : arr) {\n            if (num >= 1 && num <= 9) {\n                filteredArr.add(num);\n            }\n        }\n        \n        // Sort the filtered array\n        Collections.sort(filteredArr);\n        \n        // Reverse the sorted array\n        Collections.reverse(filteredArr);\n        \n        // Replace each digit with its corresponding name\n        for (int num : filteredArr) {\n            switch (num) {\n                case 1:\n                    result.add(\"One\");\n                    break;\n                case 2:\n                    result.add(\"Two\");\n                    break;\n                case 3:\n                    result.add(\"Three\");\n                    break;\n                case 4:\n                    result.add(\"Four\");\n                    break;\n                case 5:\n                    result.add(\"Five\");\n                    break;\n                case 6:\n                    result.add(\"Six\");\n                    break;\n                case 7:\n                    result.add(\"Seven\");\n                    break;\n                case 8:\n                    result.add(\"Eight\");\n                    break;\n                case 9:\n                    result.add(\"Nine\");\n                    break;\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> arr1 = Arrays.asList(2, 1, 1, 4, 5, 8, 2, 3);\n        System.out.println(solution.byLength(arr1)); // [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n        \n        List<Integer> arr2 = Arrays.asList(1, -1, 55);\n        System.out.println(solution.byLength(arr2)); // [\"One\"]\n        \n        List<Integer> arr3 = new ArrayList<>();\n        System.out.println(solution.byLength(arr3)); // []\n    }\n}"}
{"task_id": "Java/105", "generation": "        List<String> result = new ArrayList<>();\n        \n        // Filter out numbers that are not between 1 and 9\n        List<Integer> filteredArr = new ArrayList<>();\n        for (int num : arr) {\n            if (num >= 1 && num <= 9) {\n                filteredArr.add(num);\n            }\n        }\n        \n        // Sort the filtered array\n        Collections.sort(filteredArr);\n        \n        // Reverse the sorted array\n        Collections.reverse(filteredArr);\n        \n        // Replace each digit with its corresponding name\n        for (int num : filteredArr) {\n            switch (num) {\n                case 1:\n                    result.add(\"One\");\n                    break;\n                case 2:\n                    result.add(\"Two\");\n                    break;\n                case 3:\n                    result.add(\"Three\");\n                    break;\n                case 4:\n                    result.add(\"Four\");\n                    break;\n                case 5:\n                    result.add(\"Five\");\n                    break;\n                case 6:\n                    result.add(\"Six\");\n                    break;\n                case 7:\n                    result.add(\"Seven\");\n                    break;\n                case 8:\n                    result.add(\"Eight\");\n                    break;\n                case 9:\n                    result.add(\"Nine\");\n                    break;\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> arr1 = Arrays.asList(2, 1, 1, 4, 5, 8, 2, 3);\n        System.out.println(solution.byLength(arr1)); // [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n        \n        List<Integer> arr2 = Arrays.asList(1, -1, 55);\n        System.out.println(solution.byLength(arr2)); // [\"One\"]\n        \n        List<Integer> arr3 = new ArrayList<>();\n        System.out.println(solution.byLength(arr3)); // []\n    }\n}"}
{"task_id": "Java/105", "generation": "        List<String> result = new ArrayList<>();\n        \n        // Filter out numbers that are not between 1 and 9\n        List<Integer> filteredArr = new ArrayList<>();\n        for (int num : arr) {\n            if (num >= 1 && num <= 9) {\n                filteredArr.add(num);\n            }\n        }\n        \n        // Sort the filtered array\n        Collections.sort(filteredArr);\n        \n        // Reverse the sorted array\n        Collections.reverse(filteredArr);\n        \n        // Replace each digit with its corresponding name\n        for (int num : filteredArr) {\n            switch (num) {\n                case 1:\n                    result.add(\"One\");\n                    break;\n                case 2:\n                    result.add(\"Two\");\n                    break;\n                case 3:\n                    result.add(\"Three\");\n                    break;\n                case 4:\n                    result.add(\"Four\");\n                    break;\n                case 5:\n                    result.add(\"Five\");\n                    break;\n                case 6:\n                    result.add(\"Six\");\n                    break;\n                case 7:\n                    result.add(\"Seven\");\n                    break;\n                case 8:\n                    result.add(\"Eight\");\n                    break;\n                case 9:\n                    result.add(\"Nine\");\n                    break;\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> arr1 = Arrays.asList(2, 1, 1, 4, 5, 8, 2, 3);\n        System.out.println(solution.byLength(arr1)); // [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n        \n        List<Integer> arr2 = Arrays.asList(1, -1, 55);\n        System.out.println(solution.byLength(arr2)); // [\"One\"]\n        \n        List<Integer> arr3 = new ArrayList<>();\n        System.out.println(solution.byLength(arr3)); // []\n    }\n}"}
{"task_id": "Java/106", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sumOfNumbers(i));\n            }\n        }\n        \n        return result;\n    }\n    \n    private int factorial(int n) {\n        if (n == 0) {\n            return 1;\n        }\n        int result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n    \n    private int sumOfNumbers(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/106", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sumOfNumbers(i));\n            }\n        }\n        \n        return result;\n    }\n    \n    private int factorial(int n) {\n        if (n == 0) {\n            return 1;\n        }\n        int result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n    \n    private int sumOfNumbers(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/106", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sumOfNumbers(i));\n            }\n        }\n        \n        return result;\n    }\n    \n    private int factorial(int n) {\n        if (n == 0) {\n            return 1;\n        }\n        int result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n    \n    private int sumOfNumbers(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/106", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sumOfNumbers(i));\n            }\n        }\n        \n        return result;\n    }\n    \n    private int factorial(int n) {\n        if (n == 0) {\n            return 1;\n        }\n        int result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n    \n    private int sumOfNumbers(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/106", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sumOfNumbers(i));\n            }\n        }\n        \n        return result;\n    }\n    \n    private int factorial(int n) {\n        if (n == 0) {\n            return 1;\n        }\n        int result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n    \n    private int sumOfNumbers(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/107", "generation": "        List<Integer> result = new ArrayList<>();\n        int evenCount = 0;\n        int oddCount = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n\n        result.add(evenCount);\n        result.add(oddCount);\n\n        return result;\n    }\n\n    private boolean isPalindrome(int num) {\n        String str = String.valueOf(num);\n        int left = 0;\n        int right = str.length() - 1;\n\n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.evenOddPalindrome(3)); // Output: (1, 2)\n        System.out.println(solution.evenOddPalindrome(12)); // Output: (4, 6)\n    }\n}"}
{"task_id": "Java/107", "generation": "        List<Integer> result = new ArrayList<>();\n        int evenCount = 0;\n        int oddCount = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n\n        result.add(evenCount);\n        result.add(oddCount);\n\n        return result;\n    }\n\n    private boolean isPalindrome(int num) {\n        String str = String.valueOf(num);\n        int left = 0;\n        int right = str.length() - 1;\n\n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.evenOddPalindrome(3)); // Output: (1, 2)\n        System.out.println(solution.evenOddPalindrome(12)); // Output: (4, 6)\n    }\n}"}
{"task_id": "Java/107", "generation": "        List<Integer> result = new ArrayList<>();\n        int evenCount = 0;\n        int oddCount = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n\n        result.add(evenCount);\n        result.add(oddCount);\n\n        return result;\n    }\n\n    private boolean isPalindrome(int num) {\n        String str = String.valueOf(num);\n        int left = 0;\n        int right = str.length() - 1;\n\n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.evenOddPalindrome(3)); // Output: (1, 2)\n        System.out.println(solution.evenOddPalindrome(12)); // Output: (4, 6)\n    }\n}"}
{"task_id": "Java/107", "generation": "        List<Integer> result = new ArrayList<>();\n        int evenCount = 0;\n        int oddCount = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n\n        result.add(evenCount);\n        result.add(oddCount);\n\n        return result;\n    }\n\n    private boolean isPalindrome(int num) {\n        String str = String.valueOf(num);\n        int left = 0;\n        int right = str.length() - 1;\n\n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.evenOddPalindrome(3)); // Output: (1, 2)\n        System.out.println(solution.evenOddPalindrome(12)); // Output: (4, 6)\n    }\n}"}
{"task_id": "Java/107", "generation": "        List<Integer> result = new ArrayList<>();\n        int evenCount = 0;\n        int oddCount = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n\n        result.add(evenCount);\n        result.add(oddCount);\n\n        return result;\n    }\n\n    private boolean isPalindrome(int num) {\n        String str = String.valueOf(num);\n        int left = 0;\n        int right = str.length() - 1;\n\n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.evenOddPalindrome(3)); // Output: (1, 2)\n        System.out.println(solution.evenOddPalindrome(12)); // Output: (4, 6)\n    }\n}"}
{"task_id": "Java/108", "generation": "        int count = 0;\n        for (int num : arr) {\n            int sum = 0;\n            int n = Math.abs(num);\n            while (n != 0) {\n                sum += n % 10;\n                n /= 10;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.countNums(Arrays.asList())); // 0\n        System.out.println(solution.countNums(Arrays.asList(-1, 11, -11))); // 1\n        System.out.println(solution.countNums(Arrays.asList(1, 1, 2))); // 3\n    }\n}"}
{"task_id": "Java/108", "generation": "        int count = 0;\n        for (int num : arr) {\n            int sum = 0;\n            int n = Math.abs(num);\n            while (n != 0) {\n                sum += n % 10;\n                n /= 10;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.countNums(Arrays.asList())); // 0\n        System.out.println(solution.countNums(Arrays.asList(-1, 11, -11))); // 1\n        System.out.println(solution.countNums(Arrays.asList(1, 1, 2))); // 3\n    }\n}"}
{"task_id": "Java/108", "generation": "        int count = 0;\n        for (int num : arr) {\n            int sum = 0;\n            int n = Math.abs(num);\n            while (n != 0) {\n                sum += n % 10;\n                n /= 10;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.countNums(Arrays.asList())); // 0\n        System.out.println(solution.countNums(Arrays.asList(-1, 11, -11))); // 1\n        System.out.println(solution.countNums(Arrays.asList(1, 1, 2))); // 3\n    }\n}"}
{"task_id": "Java/108", "generation": "        int count = 0;\n        for (int num : arr) {\n            int sum = 0;\n            int n = Math.abs(num);\n            while (n != 0) {\n                sum += n % 10;\n                n /= 10;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.countNums(Arrays.asList())); // 0\n        System.out.println(solution.countNums(Arrays.asList(-1, 11, -11))); // 1\n        System.out.println(solution.countNums(Arrays.asList(1, 1, 2))); // 3\n    }\n}"}
{"task_id": "Java/108", "generation": "        int count = 0;\n        for (int num : arr) {\n            int sum = 0;\n            int n = Math.abs(num);\n            while (n != 0) {\n                sum += n % 10;\n                n /= 10;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.countNums(Arrays.asList())); // 0\n        System.out.println(solution.countNums(Arrays.asList(-1, 11, -11))); // 1\n        System.out.println(solution.countNums(Arrays.asList(1, 1, 2))); // 3\n    }\n}"}
{"task_id": "Java/109", "generation": "        if (arr.isEmpty()) {\n            return true;\n        }\n\n        List<Integer> sortedArr = new ArrayList<>(arr);\n        Collections.sort(sortedArr);\n\n        int n = arr.size();\n        for (int i = 0; i < n; i++) {\n            if (arr.equals(sortedArr)) {\n                return true;\n            }\n            int last = arr.get(n - 1);\n            arr.remove(n - 1);\n            arr.add(0, last);\n        }\n\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.moveOneBall(Arrays.asList(3, 4, 5, 1, 2))); // true\n        System.out.println(solution.moveOneBall(Arrays.asList(3, 5, 4, 1, 2))); // false\n    }\n}"}
{"task_id": "Java/109", "generation": "        if (arr.isEmpty()) {\n            return true;\n        }\n\n        List<Integer> sortedArr = new ArrayList<>(arr);\n        Collections.sort(sortedArr);\n\n        int n = arr.size();\n        for (int i = 0; i < n; i++) {\n            if (arr.equals(sortedArr)) {\n                return true;\n            }\n            int last = arr.get(n - 1);\n            arr.remove(n - 1);\n            arr.add(0, last);\n        }\n\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.moveOneBall(Arrays.asList(3, 4, 5, 1, 2))); // true\n        System.out.println(solution.moveOneBall(Arrays.asList(3, 5, 4, 1, 2))); // false\n    }\n}"}
{"task_id": "Java/109", "generation": "        if (arr.isEmpty()) {\n            return true;\n        }\n\n        List<Integer> sortedArr = new ArrayList<>(arr);\n        Collections.sort(sortedArr);\n\n        int n = arr.size();\n        for (int i = 0; i < n; i++) {\n            if (arr.equals(sortedArr)) {\n                return true;\n            }\n            int last = arr.get(n - 1);\n            arr.remove(n - 1);\n            arr.add(0, last);\n        }\n\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.moveOneBall(Arrays.asList(3, 4, 5, 1, 2))); // true\n        System.out.println(solution.moveOneBall(Arrays.asList(3, 5, 4, 1, 2))); // false\n    }\n}"}
{"task_id": "Java/109", "generation": "        if (arr.isEmpty()) {\n            return true;\n        }\n\n        List<Integer> sortedArr = new ArrayList<>(arr);\n        Collections.sort(sortedArr);\n\n        int n = arr.size();\n        for (int i = 0; i < n; i++) {\n            if (arr.equals(sortedArr)) {\n                return true;\n            }\n            int last = arr.get(n - 1);\n            arr.remove(n - 1);\n            arr.add(0, last);\n        }\n\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.moveOneBall(Arrays.asList(3, 4, 5, 1, 2))); // true\n        System.out.println(solution.moveOneBall(Arrays.asList(3, 5, 4, 1, 2))); // false\n    }\n}"}
{"task_id": "Java/109", "generation": "        if (arr.isEmpty()) {\n            return true;\n        }\n\n        List<Integer> sortedArr = new ArrayList<>(arr);\n        Collections.sort(sortedArr);\n\n        int n = arr.size();\n        for (int i = 0; i < n; i++) {\n            if (arr.equals(sortedArr)) {\n                return true;\n            }\n            int last = arr.get(n - 1);\n            arr.remove(n - 1);\n            arr.add(0, last);\n        }\n\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.moveOneBall(Arrays.asList(3, 4, 5, 1, 2))); // true\n        System.out.println(solution.moveOneBall(Arrays.asList(3, 5, 4, 1, 2))); // false\n    }\n}"}
{"task_id": "Java/110", "generation": "        // Count the number of odd elements in lst1\n        int oddCount = 0;\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCount++;\n            }\n        }\n        \n        // If there are no odd elements in lst1, return \"YES\"\n        if (oddCount == 0) {\n            return \"YES\";\n        }\n        \n        // If there are odd elements in lst1, check if there are enough even elements in lst2 to exchange\n        int evenCount = 0;\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                evenCount++;\n            }\n        }\n        \n        // If there are enough even elements in lst2 to exchange with odd elements in lst1, return \"YES\"\n        if (evenCount >= oddCount) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}"}
{"task_id": "Java/110", "generation": "        // Count the number of odd elements in lst1\n        int oddCount = 0;\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCount++;\n            }\n        }\n        \n        // If there are no odd elements in lst1, return \"YES\"\n        if (oddCount == 0) {\n            return \"YES\";\n        }\n        \n        // If there are odd elements in lst1, check if there are enough even elements in lst2 to exchange\n        int evenCount = 0;\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                evenCount++;\n            }\n        }\n        \n        // If there are enough even elements in lst2 to exchange with odd elements in lst1, return \"YES\"\n        if (evenCount >= oddCount) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}"}
{"task_id": "Java/110", "generation": "        // Count the number of odd elements in lst1\n        int oddCount = 0;\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCount++;\n            }\n        }\n        \n        // If there are no odd elements in lst1, return \"YES\"\n        if (oddCount == 0) {\n            return \"YES\";\n        }\n        \n        // If there are odd elements in lst1, check if there are enough even elements in lst2 to exchange\n        int evenCount = 0;\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                evenCount++;\n            }\n        }\n        \n        // If there are enough even elements in lst2 to exchange with odd elements in lst1, return \"YES\"\n        if (evenCount >= oddCount) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}"}
{"task_id": "Java/110", "generation": "        // Count the number of odd elements in lst1\n        int oddCount = 0;\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCount++;\n            }\n        }\n        \n        // If there are no odd elements in lst1, return \"YES\"\n        if (oddCount == 0) {\n            return \"YES\";\n        }\n        \n        // If there are odd elements in lst1, check if there are enough even elements in lst2 to exchange\n        int evenCount = 0;\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                evenCount++;\n            }\n        }\n        \n        // If there are enough even elements in lst2 to exchange with odd elements in lst1, return \"YES\"\n        if (evenCount >= oddCount) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}"}
{"task_id": "Java/110", "generation": "        // Count the number of odd elements in lst1\n        int oddCount = 0;\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCount++;\n            }\n        }\n        \n        // If there are no odd elements in lst1, return \"YES\"\n        if (oddCount == 0) {\n            return \"YES\";\n        }\n        \n        // If there are odd elements in lst1, check if there are enough even elements in lst2 to exchange\n        int evenCount = 0;\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                evenCount++;\n            }\n        }\n        \n        // If there are enough even elements in lst2 to exchange with odd elements in lst1, return \"YES\"\n        if (evenCount >= oddCount) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}"}
{"task_id": "Java/111", "generation": "        Map<String, Integer> map = new HashMap<>();\n        \n        if (test == null || test.isEmpty()) {\n            return map;\n        }\n        \n        String[] letters = test.split(\" \");\n        \n        Map<String, Integer> countMap = new HashMap<>();\n        int maxCount = 0;\n        \n        for (String letter : letters) {\n            countMap.put(letter, countMap.getOrDefault(letter, 0) + 1);\n            maxCount = Math.max(maxCount, countMap.get(letter));\n        }\n        \n        for (Map.Entry<String, Integer> entry : countMap.entrySet()) {\n            if (entry.getValue() == maxCount) {\n                map.put(entry.getKey(), entry.getValue());\n            }\n        }\n        \n        return map;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.histogram(\"a b c\")); // {\"a\": 1, \"b\": 1, \"c\": 1}\n        System.out.println(solution.histogram(\"a b b a\")); // {\"a\": 2, \"b\": 2}\n        System.out.println(solution.histogram(\"a b c a b\")); // {\"a\": 2, \"b\": 2}\n        System.out.println(solution.histogram(\"b b b b a\")); // {\"b\": 4}\n        System.out.println(solution.histogram(\"\")); // {}\n    }\n}"}
{"task_id": "Java/111", "generation": "        Map<String, Integer> map = new HashMap<>();\n        \n        if (test == null || test.isEmpty()) {\n            return map;\n        }\n        \n        String[] letters = test.split(\" \");\n        \n        Map<String, Integer> countMap = new HashMap<>();\n        int maxCount = 0;\n        \n        for (String letter : letters) {\n            countMap.put(letter, countMap.getOrDefault(letter, 0) + 1);\n            maxCount = Math.max(maxCount, countMap.get(letter));\n        }\n        \n        for (Map.Entry<String, Integer> entry : countMap.entrySet()) {\n            if (entry.getValue() == maxCount) {\n                map.put(entry.getKey(), entry.getValue());\n            }\n        }\n        \n        return map;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.histogram(\"a b c\")); // {\"a\": 1, \"b\": 1, \"c\": 1}\n        System.out.println(solution.histogram(\"a b b a\")); // {\"a\": 2, \"b\": 2}\n        System.out.println(solution.histogram(\"a b c a b\")); // {\"a\": 2, \"b\": 2}\n        System.out.println(solution.histogram(\"b b b b a\")); // {\"b\": 4}\n        System.out.println(solution.histogram(\"\")); // {}\n    }\n}"}
{"task_id": "Java/111", "generation": "        Map<String, Integer> map = new HashMap<>();\n        \n        if (test == null || test.isEmpty()) {\n            return map;\n        }\n        \n        String[] letters = test.split(\" \");\n        \n        Map<String, Integer> countMap = new HashMap<>();\n        int maxCount = 0;\n        \n        for (String letter : letters) {\n            countMap.put(letter, countMap.getOrDefault(letter, 0) + 1);\n            maxCount = Math.max(maxCount, countMap.get(letter));\n        }\n        \n        for (Map.Entry<String, Integer> entry : countMap.entrySet()) {\n            if (entry.getValue() == maxCount) {\n                map.put(entry.getKey(), entry.getValue());\n            }\n        }\n        \n        return map;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.histogram(\"a b c\")); // {\"a\": 1, \"b\": 1, \"c\": 1}\n        System.out.println(solution.histogram(\"a b b a\")); // {\"a\": 2, \"b\": 2}\n        System.out.println(solution.histogram(\"a b c a b\")); // {\"a\": 2, \"b\": 2}\n        System.out.println(solution.histogram(\"b b b b a\")); // {\"b\": 4}\n        System.out.println(solution.histogram(\"\")); // {}\n    }\n}"}
{"task_id": "Java/111", "generation": "        Map<String, Integer> map = new HashMap<>();\n        \n        if (test == null || test.isEmpty()) {\n            return map;\n        }\n        \n        String[] letters = test.split(\" \");\n        \n        Map<String, Integer> countMap = new HashMap<>();\n        int maxCount = 0;\n        \n        for (String letter : letters) {\n            countMap.put(letter, countMap.getOrDefault(letter, 0) + 1);\n            maxCount = Math.max(maxCount, countMap.get(letter));\n        }\n        \n        for (Map.Entry<String, Integer> entry : countMap.entrySet()) {\n            if (entry.getValue() == maxCount) {\n                map.put(entry.getKey(), entry.getValue());\n            }\n        }\n        \n        return map;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.histogram(\"a b c\")); // {\"a\": 1, \"b\": 1, \"c\": 1}\n        System.out.println(solution.histogram(\"a b b a\")); // {\"a\": 2, \"b\": 2}\n        System.out.println(solution.histogram(\"a b c a b\")); // {\"a\": 2, \"b\": 2}\n        System.out.println(solution.histogram(\"b b b b a\")); // {\"b\": 4}\n        System.out.println(solution.histogram(\"\")); // {}\n    }\n}"}
{"task_id": "Java/111", "generation": "        Map<String, Integer> map = new HashMap<>();\n        \n        if (test == null || test.isEmpty()) {\n            return map;\n        }\n        \n        String[] letters = test.split(\" \");\n        \n        Map<String, Integer> countMap = new HashMap<>();\n        int maxCount = 0;\n        \n        for (String letter : letters) {\n            countMap.put(letter, countMap.getOrDefault(letter, 0) + 1);\n            maxCount = Math.max(maxCount, countMap.get(letter));\n        }\n        \n        for (Map.Entry<String, Integer> entry : countMap.entrySet()) {\n            if (entry.getValue() == maxCount) {\n                map.put(entry.getKey(), entry.getValue());\n            }\n        }\n        \n        return map;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.histogram(\"a b c\")); // {\"a\": 1, \"b\": 1, \"c\": 1}\n        System.out.println(solution.histogram(\"a b b a\")); // {\"a\": 2, \"b\": 2}\n        System.out.println(solution.histogram(\"a b c a b\")); // {\"a\": 2, \"b\": 2}\n        System.out.println(solution.histogram(\"b b b b a\")); // {\"b\": 4}\n        System.out.println(solution.histogram(\"\")); // {}\n    }\n}"}
{"task_id": "Java/112", "generation": "        // Remove all characters in s that are equal to any character in c\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (c.indexOf(ch) == -1) {\n                sb.append(ch);\n            }\n        }\n        \n        // Check if the result string is palindrome\n        String result = sb.toString();\n        boolean isPalindrome = isPalindrome(result);\n        \n        // Return the result string and true/false for the check\n        List<Object> output = new ArrayList<>();\n        output.add(result);\n        output.add(isPalindrome);\n        \n        return output;\n    }\n    \n    // Helper function to check if a string is palindrome\n    private boolean isPalindrome(String s) {\n        int left = 0;\n        int right = s.length() - 1;\n        \n        while (left < right) {\n            if (s.charAt(left) != s.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.reverseDelete(\"abcde\", \"ae\")); // (\"bcd\", false)\n        System.out.println(solution.reverseDelete(\"abcdef\", \"b\")); // (\"acdef\", false)\n        System.out.println(solution.reverseDelete(\"abcdedcba\", \"ab\")); // (\"cdedc\", true)\n    }\n}"}
{"task_id": "Java/112", "generation": "        // Remove all characters in s that are equal to any character in c\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (c.indexOf(ch) == -1) {\n                sb.append(ch);\n            }\n        }\n        \n        // Check if the result string is palindrome\n        String result = sb.toString();\n        boolean isPalindrome = isPalindrome(result);\n        \n        // Return the result string and true/false for the check\n        List<Object> output = new ArrayList<>();\n        output.add(result);\n        output.add(isPalindrome);\n        \n        return output;\n    }\n    \n    // Helper function to check if a string is palindrome\n    private boolean isPalindrome(String s) {\n        int left = 0;\n        int right = s.length() - 1;\n        \n        while (left < right) {\n            if (s.charAt(left) != s.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.reverseDelete(\"abcde\", \"ae\")); // (\"bcd\", false)\n        System.out.println(solution.reverseDelete(\"abcdef\", \"b\")); // (\"acdef\", false)\n        System.out.println(solution.reverseDelete(\"abcdedcba\", \"ab\")); // (\"cdedc\", true)\n    }\n}"}
{"task_id": "Java/112", "generation": "        // Remove all characters in s that are equal to any character in c\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (c.indexOf(ch) == -1) {\n                sb.append(ch);\n            }\n        }\n        \n        // Check if the result string is palindrome\n        String result = sb.toString();\n        boolean isPalindrome = isPalindrome(result);\n        \n        // Return the result string and true/false for the check\n        List<Object> output = new ArrayList<>();\n        output.add(result);\n        output.add(isPalindrome);\n        \n        return output;\n    }\n    \n    // Helper function to check if a string is palindrome\n    private boolean isPalindrome(String s) {\n        int left = 0;\n        int right = s.length() - 1;\n        \n        while (left < right) {\n            if (s.charAt(left) != s.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.reverseDelete(\"abcde\", \"ae\")); // (\"bcd\", false)\n        System.out.println(solution.reverseDelete(\"abcdef\", \"b\")); // (\"acdef\", false)\n        System.out.println(solution.reverseDelete(\"abcdedcba\", \"ab\")); // (\"cdedc\", true)\n    }\n}"}
{"task_id": "Java/112", "generation": "        // Remove all characters in s that are equal to any character in c\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (c.indexOf(ch) == -1) {\n                sb.append(ch);\n            }\n        }\n        \n        // Check if the result string is palindrome\n        String result = sb.toString();\n        boolean isPalindrome = isPalindrome(result);\n        \n        // Return the result string and true/false for the check\n        List<Object> output = new ArrayList<>();\n        output.add(result);\n        output.add(isPalindrome);\n        \n        return output;\n    }\n    \n    // Helper function to check if a string is palindrome\n    private boolean isPalindrome(String s) {\n        int left = 0;\n        int right = s.length() - 1;\n        \n        while (left < right) {\n            if (s.charAt(left) != s.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.reverseDelete(\"abcde\", \"ae\")); // (\"bcd\", false)\n        System.out.println(solution.reverseDelete(\"abcdef\", \"b\")); // (\"acdef\", false)\n        System.out.println(solution.reverseDelete(\"abcdedcba\", \"ab\")); // (\"cdedc\", true)\n    }\n}"}
{"task_id": "Java/112", "generation": "        // Remove all characters in s that are equal to any character in c\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (c.indexOf(ch) == -1) {\n                sb.append(ch);\n            }\n        }\n        \n        // Check if the result string is palindrome\n        String result = sb.toString();\n        boolean isPalindrome = isPalindrome(result);\n        \n        // Return the result string and true/false for the check\n        List<Object> output = new ArrayList<>();\n        output.add(result);\n        output.add(isPalindrome);\n        \n        return output;\n    }\n    \n    // Helper function to check if a string is palindrome\n    private boolean isPalindrome(String s) {\n        int left = 0;\n        int right = s.length() - 1;\n        \n        while (left < right) {\n            if (s.charAt(left) != s.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.reverseDelete(\"abcde\", \"ae\")); // (\"bcd\", false)\n        System.out.println(solution.reverseDelete(\"abcdef\", \"b\")); // (\"acdef\", false)\n        System.out.println(solution.reverseDelete(\"abcdedcba\", \"ab\")); // (\"cdedc\", true)\n    }\n}"}
{"task_id": "Java/113", "generation": "        List<String> result = new ArrayList<>();\n        \n        for (String str : lst) {\n            int count = 0;\n            for (char c : str.toCharArray()) {\n                if (Character.isDigit(c) && (c - '0') % 2 != 0) {\n                    count++;\n                }\n            }\n            String newStr = str.replace(\"i\", String.valueOf(count));\n            newStr = newStr.replace(\"n\", \"d\");\n            result.add(\"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + newStr + \" of the \" + count + \"nput.\");\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        List<String> test1 = Arrays.asList(\"1234567\");\n        List<String> test2 = Arrays.asList(\"3\", \"11111111\");\n        \n        List<String> result1 = solution.oddCount(test1);\n        List<String> result2 = solution.oddCount(test2);\n        \n        for (String str : result1) {\n            System.out.println(str);\n        }\n        \n        for (String str : result2) {\n            System.out.println(str);\n        }\n    }\n}"}
{"task_id": "Java/113", "generation": "        List<String> result = new ArrayList<>();\n        \n        for (String str : lst) {\n            int count = 0;\n            for (char c : str.toCharArray()) {\n                if (Character.isDigit(c) && (c - '0') % 2 != 0) {\n                    count++;\n                }\n            }\n            String newStr = str.replace(\"i\", String.valueOf(count));\n            newStr = newStr.replace(\"n\", \"d\");\n            result.add(\"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + newStr + \" of the \" + count + \"nput.\");\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        List<String> test1 = Arrays.asList(\"1234567\");\n        List<String> test2 = Arrays.asList(\"3\", \"11111111\");\n        \n        List<String> result1 = solution.oddCount(test1);\n        List<String> result2 = solution.oddCount(test2);\n        \n        for (String str : result1) {\n            System.out.println(str);\n        }\n        \n        for (String str : result2) {\n            System.out.println(str);\n        }\n    }\n}"}
{"task_id": "Java/113", "generation": "        List<String> result = new ArrayList<>();\n        \n        for (String str : lst) {\n            int count = 0;\n            for (char c : str.toCharArray()) {\n                if (Character.isDigit(c) && (c - '0') % 2 != 0) {\n                    count++;\n                }\n            }\n            String newStr = str.replace(\"i\", String.valueOf(count));\n            newStr = newStr.replace(\"n\", \"d\");\n            result.add(\"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + newStr + \" of the \" + count + \"nput.\");\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        List<String> test1 = Arrays.asList(\"1234567\");\n        List<String> test2 = Arrays.asList(\"3\", \"11111111\");\n        \n        List<String> result1 = solution.oddCount(test1);\n        List<String> result2 = solution.oddCount(test2);\n        \n        for (String str : result1) {\n            System.out.println(str);\n        }\n        \n        for (String str : result2) {\n            System.out.println(str);\n        }\n    }\n}"}
{"task_id": "Java/113", "generation": "        List<String> result = new ArrayList<>();\n        \n        for (String str : lst) {\n            int count = 0;\n            for (char c : str.toCharArray()) {\n                if (Character.isDigit(c) && (c - '0') % 2 != 0) {\n                    count++;\n                }\n            }\n            String newStr = str.replace(\"i\", String.valueOf(count));\n            newStr = newStr.replace(\"n\", \"d\");\n            result.add(\"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + newStr + \" of the \" + count + \"nput.\");\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        List<String> test1 = Arrays.asList(\"1234567\");\n        List<String> test2 = Arrays.asList(\"3\", \"11111111\");\n        \n        List<String> result1 = solution.oddCount(test1);\n        List<String> result2 = solution.oddCount(test2);\n        \n        for (String str : result1) {\n            System.out.println(str);\n        }\n        \n        for (String str : result2) {\n            System.out.println(str);\n        }\n    }\n}"}
{"task_id": "Java/113", "generation": "        List<String> result = new ArrayList<>();\n        \n        for (String str : lst) {\n            int count = 0;\n            for (char c : str.toCharArray()) {\n                if (Character.isDigit(c) && (c - '0') % 2 != 0) {\n                    count++;\n                }\n            }\n            String newStr = str.replace(\"i\", String.valueOf(count));\n            newStr = newStr.replace(\"n\", \"d\");\n            result.add(\"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + newStr + \" of the \" + count + \"nput.\");\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        List<String> test1 = Arrays.asList(\"1234567\");\n        List<String> test2 = Arrays.asList(\"3\", \"11111111\");\n        \n        List<String> result1 = solution.oddCount(test1);\n        List<String> result2 = solution.oddCount(test2);\n        \n        for (String str : result1) {\n            System.out.println(str);\n        }\n        \n        for (String str : result2) {\n            System.out.println(str);\n        }\n    }\n}"}
{"task_id": "Java/114", "generation": "        int n = nums.size();\n        int minSum = Integer.MAX_VALUE;\n        \n        for (int i = 0; i < n; i++) {\n            int sum = 0;\n            for (int j = i; j < n; j++) {\n                sum += nums.get(j);\n                minSum = Math.min(minSum, sum);\n            }\n        }\n        \n        return minSum;\n    }\n}"}
{"task_id": "Java/114", "generation": "        int n = nums.size();\n        int minSum = Integer.MAX_VALUE;\n        \n        for (int i = 0; i < n; i++) {\n            int sum = 0;\n            for (int j = i; j < n; j++) {\n                sum += nums.get(j);\n                minSum = Math.min(minSum, sum);\n            }\n        }\n        \n        return minSum;\n    }\n}"}
{"task_id": "Java/114", "generation": "        int n = nums.size();\n        int minSum = Integer.MAX_VALUE;\n        \n        for (int i = 0; i < n; i++) {\n            int sum = 0;\n            for (int j = i; j < n; j++) {\n                sum += nums.get(j);\n                minSum = Math.min(minSum, sum);\n            }\n        }\n        \n        return minSum;\n    }\n}"}
{"task_id": "Java/114", "generation": "        int n = nums.size();\n        int minSum = Integer.MAX_VALUE;\n        \n        for (int i = 0; i < n; i++) {\n            int sum = 0;\n            for (int j = i; j < n; j++) {\n                sum += nums.get(j);\n                minSum = Math.min(minSum, sum);\n            }\n        }\n        \n        return minSum;\n    }\n}"}
{"task_id": "Java/114", "generation": "        int n = nums.size();\n        int minSum = Integer.MAX_VALUE;\n        \n        for (int i = 0; i < n; i++) {\n            int sum = 0;\n            for (int j = i; j < n; j++) {\n                sum += nums.get(j);\n                minSum = Math.min(minSum, sum);\n            }\n        }\n        \n        return minSum;\n    }\n}"}
{"task_id": "Java/115", "generation": "        int count = 0;\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n\n        for (int i = 0; i < cols; i++) {\n            int sum = 0;\n            for (int j = 0; j < rows; j++) {\n                sum += grid.get(j).get(i);\n            }\n            count += sum / capacity;\n            if (sum % capacity != 0) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<List<Integer>> grid1 = new ArrayList<>();\n        grid1.add(Arrays.asList(0, 0, 1, 0));\n        grid1.add(Arrays.asList(0, 1, 0, 0));\n        grid1.add(Arrays.asList(1, 1, 1, 1));\n        System.out.println(solution.maxFill(grid1, 1)); // Output: 6\n\n        List<List<Integer>> grid2 = new ArrayList<>();\n        grid2.add(Arrays.asList(0, 0, 1, 1));\n        grid2.add(Arrays.asList(0, 0, 0, 0));\n        grid2.add(Arrays.asList(1, 1, 1, 1));\n        grid2.add(Arrays.asList(0, 1, 1, 1));\n        System.out.println(solution.maxFill(grid2, 2)); // Output: 5\n\n        List<List<Integer>> grid3 = new ArrayList<>();\n        grid3.add(Arrays.asList(0, 0, 0));\n        grid3.add(Arrays.asList(0, 0, 0));\n        System.out.println(solution.maxFill(grid3, 5)); // Output: 0\n    }\n}"}
{"task_id": "Java/115", "generation": "        int count = 0;\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n\n        for (int i = 0; i < cols; i++) {\n            int sum = 0;\n            for (int j = 0; j < rows; j++) {\n                sum += grid.get(j).get(i);\n            }\n            count += sum / capacity;\n            if (sum % capacity != 0) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<List<Integer>> grid1 = new ArrayList<>();\n        grid1.add(Arrays.asList(0, 0, 1, 0));\n        grid1.add(Arrays.asList(0, 1, 0, 0));\n        grid1.add(Arrays.asList(1, 1, 1, 1));\n        System.out.println(solution.maxFill(grid1, 1)); // Output: 6\n\n        List<List<Integer>> grid2 = new ArrayList<>();\n        grid2.add(Arrays.asList(0, 0, 1, 1));\n        grid2.add(Arrays.asList(0, 0, 0, 0));\n        grid2.add(Arrays.asList(1, 1, 1, 1));\n        grid2.add(Arrays.asList(0, 1, 1, 1));\n        System.out.println(solution.maxFill(grid2, 2)); // Output: 5\n\n        List<List<Integer>> grid3 = new ArrayList<>();\n        grid3.add(Arrays.asList(0, 0, 0));\n        grid3.add(Arrays.asList(0, 0, 0));\n        System.out.println(solution.maxFill(grid3, 5)); // Output: 0\n    }\n}"}
{"task_id": "Java/115", "generation": "        int count = 0;\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n\n        for (int i = 0; i < cols; i++) {\n            int sum = 0;\n            for (int j = 0; j < rows; j++) {\n                sum += grid.get(j).get(i);\n            }\n            count += sum / capacity;\n            if (sum % capacity != 0) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<List<Integer>> grid1 = new ArrayList<>();\n        grid1.add(Arrays.asList(0, 0, 1, 0));\n        grid1.add(Arrays.asList(0, 1, 0, 0));\n        grid1.add(Arrays.asList(1, 1, 1, 1));\n        System.out.println(solution.maxFill(grid1, 1)); // Output: 6\n\n        List<List<Integer>> grid2 = new ArrayList<>();\n        grid2.add(Arrays.asList(0, 0, 1, 1));\n        grid2.add(Arrays.asList(0, 0, 0, 0));\n        grid2.add(Arrays.asList(1, 1, 1, 1));\n        grid2.add(Arrays.asList(0, 1, 1, 1));\n        System.out.println(solution.maxFill(grid2, 2)); // Output: 5\n\n        List<List<Integer>> grid3 = new ArrayList<>();\n        grid3.add(Arrays.asList(0, 0, 0));\n        grid3.add(Arrays.asList(0, 0, 0));\n        System.out.println(solution.maxFill(grid3, 5)); // Output: 0\n    }\n}"}
{"task_id": "Java/115", "generation": "        int count = 0;\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n\n        for (int i = 0; i < cols; i++) {\n            int sum = 0;\n            for (int j = 0; j < rows; j++) {\n                sum += grid.get(j).get(i);\n            }\n            count += sum / capacity;\n            if (sum % capacity != 0) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<List<Integer>> grid1 = new ArrayList<>();\n        grid1.add(Arrays.asList(0, 0, 1, 0));\n        grid1.add(Arrays.asList(0, 1, 0, 0));\n        grid1.add(Arrays.asList(1, 1, 1, 1));\n        System.out.println(solution.maxFill(grid1, 1)); // Output: 6\n\n        List<List<Integer>> grid2 = new ArrayList<>();\n        grid2.add(Arrays.asList(0, 0, 1, 1));\n        grid2.add(Arrays.asList(0, 0, 0, 0));\n        grid2.add(Arrays.asList(1, 1, 1, 1));\n        grid2.add(Arrays.asList(0, 1, 1, 1));\n        System.out.println(solution.maxFill(grid2, 2)); // Output: 5\n\n        List<List<Integer>> grid3 = new ArrayList<>();\n        grid3.add(Arrays.asList(0, 0, 0));\n        grid3.add(Arrays.asList(0, 0, 0));\n        System.out.println(solution.maxFill(grid3, 5)); // Output: 0\n    }\n}"}
{"task_id": "Java/115", "generation": "        int count = 0;\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n\n        for (int i = 0; i < cols; i++) {\n            int sum = 0;\n            for (int j = 0; j < rows; j++) {\n                sum += grid.get(j).get(i);\n            }\n            count += sum / capacity;\n            if (sum % capacity != 0) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<List<Integer>> grid1 = new ArrayList<>();\n        grid1.add(Arrays.asList(0, 0, 1, 0));\n        grid1.add(Arrays.asList(0, 1, 0, 0));\n        grid1.add(Arrays.asList(1, 1, 1, 1));\n        System.out.println(solution.maxFill(grid1, 1)); // Output: 6\n\n        List<List<Integer>> grid2 = new ArrayList<>();\n        grid2.add(Arrays.asList(0, 0, 1, 1));\n        grid2.add(Arrays.asList(0, 0, 0, 0));\n        grid2.add(Arrays.asList(1, 1, 1, 1));\n        grid2.add(Arrays.asList(0, 1, 1, 1));\n        System.out.println(solution.maxFill(grid2, 2)); // Output: 5\n\n        List<List<Integer>> grid3 = new ArrayList<>();\n        grid3.add(Arrays.asList(0, 0, 0));\n        grid3.add(Arrays.asList(0, 0, 0));\n        System.out.println(solution.maxFill(grid3, 5)); // Output: 0\n    }\n}"}
{"task_id": "Java/116", "generation": "        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                int count1 = Integer.bitCount(o1);\n                int count2 = Integer.bitCount(o2);\n                if (count1 == count2) {\n                    return o1 - o2;\n                } else {\n                    return count1 - count2;\n                }\n            }\n        });\n        return arr;\n    }\n}"}
{"task_id": "Java/116", "generation": "        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                int count1 = Integer.bitCount(o1);\n                int count2 = Integer.bitCount(o2);\n                if (count1 == count2) {\n                    return o1 - o2;\n                } else {\n                    return count1 - count2;\n                }\n            }\n        });\n        return arr;\n    }\n}"}
{"task_id": "Java/116", "generation": "        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                int count1 = Integer.bitCount(o1);\n                int count2 = Integer.bitCount(o2);\n                if (count1 == count2) {\n                    return o1 - o2;\n                } else {\n                    return count1 - count2;\n                }\n            }\n        });\n        return arr;\n    }\n}"}
{"task_id": "Java/116", "generation": "        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                int count1 = Integer.bitCount(o1);\n                int count2 = Integer.bitCount(o2);\n                if (count1 == count2) {\n                    return o1 - o2;\n                } else {\n                    return count1 - count2;\n                }\n            }\n        });\n        return arr;\n    }\n}"}
{"task_id": "Java/116", "generation": "        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                int count1 = Integer.bitCount(o1);\n                int count2 = Integer.bitCount(o2);\n                if (count1 == count2) {\n                    return o1 - o2;\n                } else {\n                    return count1 - count2;\n                }\n            }\n        });\n        return arr;\n    }\n}"}
{"task_id": "Java/117", "generation": "        List<String> result = new ArrayList<>();\n        \n        if (s.isEmpty()) {\n            return result;\n        }\n        \n        String[] words = s.split(\" \");\n        \n        for (String word : words) {\n            int consonantCount = 0;\n            for (char c : word.toCharArray()) {\n                if (isConsonant(c)) {\n                    consonantCount++;\n                }\n            }\n            if (consonantCount == n) {\n                result.add(word);\n            }\n        }\n        \n        return result;\n    }\n    \n    private boolean isConsonant(char c) {\n        return \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\".indexOf(c) != -1;\n    }\n}"}
{"task_id": "Java/117", "generation": "        List<String> result = new ArrayList<>();\n        \n        if (s.isEmpty()) {\n            return result;\n        }\n        \n        String[] words = s.split(\" \");\n        \n        for (String word : words) {\n            int consonantCount = 0;\n            for (char c : word.toCharArray()) {\n                if (isConsonant(c)) {\n                    consonantCount++;\n                }\n            }\n            if (consonantCount == n) {\n                result.add(word);\n            }\n        }\n        \n        return result;\n    }\n    \n    private boolean isConsonant(char c) {\n        return \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\".indexOf(c) != -1;\n    }\n}"}
{"task_id": "Java/117", "generation": "        List<String> result = new ArrayList<>();\n        \n        if (s.isEmpty()) {\n            return result;\n        }\n        \n        String[] words = s.split(\" \");\n        \n        for (String word : words) {\n            int consonantCount = 0;\n            for (char c : word.toCharArray()) {\n                if (isConsonant(c)) {\n                    consonantCount++;\n                }\n            }\n            if (consonantCount == n) {\n                result.add(word);\n            }\n        }\n        \n        return result;\n    }\n    \n    private boolean isConsonant(char c) {\n        return \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\".indexOf(c) != -1;\n    }\n}"}
{"task_id": "Java/117", "generation": "        List<String> result = new ArrayList<>();\n        \n        if (s.isEmpty()) {\n            return result;\n        }\n        \n        String[] words = s.split(\" \");\n        \n        for (String word : words) {\n            int consonantCount = 0;\n            for (char c : word.toCharArray()) {\n                if (isConsonant(c)) {\n                    consonantCount++;\n                }\n            }\n            if (consonantCount == n) {\n                result.add(word);\n            }\n        }\n        \n        return result;\n    }\n    \n    private boolean isConsonant(char c) {\n        return \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\".indexOf(c) != -1;\n    }\n}"}
{"task_id": "Java/117", "generation": "        List<String> result = new ArrayList<>();\n        \n        if (s.isEmpty()) {\n            return result;\n        }\n        \n        String[] words = s.split(\" \");\n        \n        for (String word : words) {\n            int consonantCount = 0;\n            for (char c : word.toCharArray()) {\n                if (isConsonant(c)) {\n                    consonantCount++;\n                }\n            }\n            if (consonantCount == n) {\n                result.add(word);\n            }\n        }\n        \n        return result;\n    }\n    \n    private boolean isConsonant(char c) {\n        return \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\".indexOf(c) != -1;\n    }\n}"}
{"task_id": "Java/118", "generation": "        // Initialize a set to store vowels\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n\n        // Iterate through the word from right to left\n        for (int i = word.length() - 2; i > 0; i--) {\n            char currentChar = word.charAt(i);\n            char nextChar = word.charAt(i + 1);\n            char prevChar = word.charAt(i - 1);\n\n            // Check if current character is a vowel and the next and previous characters are consonants\n            if (vowels.contains(currentChar) && !vowels.contains(nextChar) && !vowels.contains(prevChar)) {\n                return String.valueOf(currentChar);\n            }\n        }\n\n        // If no such vowel found, return empty string\n        return \"\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.getClosestVowel(\"yogurt\")); // \"u\"\n        System.out.println(solution.getClosestVowel(\"FULL\")); // \"U\"\n        System.out.println(solution.getClosestVowel(\"quick\")); // \"\"\n        System.out.println(solution.getClosestVowel(\"ab\")); // \"\"\n    }\n}"}
{"task_id": "Java/118", "generation": "        // Initialize a set to store vowels\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n\n        // Iterate through the word from right to left\n        for (int i = word.length() - 2; i > 0; i--) {\n            char currentChar = word.charAt(i);\n            char nextChar = word.charAt(i + 1);\n            char prevChar = word.charAt(i - 1);\n\n            // Check if current character is a vowel and the next and previous characters are consonants\n            if (vowels.contains(currentChar) && !vowels.contains(nextChar) && !vowels.contains(prevChar)) {\n                return String.valueOf(currentChar);\n            }\n        }\n\n        // If no such vowel found, return empty string\n        return \"\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.getClosestVowel(\"yogurt\")); // \"u\"\n        System.out.println(solution.getClosestVowel(\"FULL\")); // \"U\"\n        System.out.println(solution.getClosestVowel(\"quick\")); // \"\"\n        System.out.println(solution.getClosestVowel(\"ab\")); // \"\"\n    }\n}"}
{"task_id": "Java/118", "generation": "        // Initialize a set to store vowels\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n\n        // Iterate through the word from right to left\n        for (int i = word.length() - 2; i > 0; i--) {\n            char currentChar = word.charAt(i);\n            char nextChar = word.charAt(i + 1);\n            char prevChar = word.charAt(i - 1);\n\n            // Check if current character is a vowel and the next and previous characters are consonants\n            if (vowels.contains(currentChar) && !vowels.contains(nextChar) && !vowels.contains(prevChar)) {\n                return String.valueOf(currentChar);\n            }\n        }\n\n        // If no such vowel found, return empty string\n        return \"\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.getClosestVowel(\"yogurt\")); // \"u\"\n        System.out.println(solution.getClosestVowel(\"FULL\")); // \"U\"\n        System.out.println(solution.getClosestVowel(\"quick\")); // \"\"\n        System.out.println(solution.getClosestVowel(\"ab\")); // \"\"\n    }\n}"}
{"task_id": "Java/118", "generation": "        // Initialize a set to store vowels\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n\n        // Iterate through the word from right to left\n        for (int i = word.length() - 2; i > 0; i--) {\n            char currentChar = word.charAt(i);\n            char nextChar = word.charAt(i + 1);\n            char prevChar = word.charAt(i - 1);\n\n            // Check if current character is a vowel and the next and previous characters are consonants\n            if (vowels.contains(currentChar) && !vowels.contains(nextChar) && !vowels.contains(prevChar)) {\n                return String.valueOf(currentChar);\n            }\n        }\n\n        // If no such vowel found, return empty string\n        return \"\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.getClosestVowel(\"yogurt\")); // \"u\"\n        System.out.println(solution.getClosestVowel(\"FULL\")); // \"U\"\n        System.out.println(solution.getClosestVowel(\"quick\")); // \"\"\n        System.out.println(solution.getClosestVowel(\"ab\")); // \"\"\n    }\n}"}
{"task_id": "Java/118", "generation": "        // Initialize a set to store vowels\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n\n        // Iterate through the word from right to left\n        for (int i = word.length() - 2; i > 0; i--) {\n            char currentChar = word.charAt(i);\n            char nextChar = word.charAt(i + 1);\n            char prevChar = word.charAt(i - 1);\n\n            // Check if current character is a vowel and the next and previous characters are consonants\n            if (vowels.contains(currentChar) && !vowels.contains(nextChar) && !vowels.contains(prevChar)) {\n                return String.valueOf(currentChar);\n            }\n        }\n\n        // If no such vowel found, return empty string\n        return \"\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.getClosestVowel(\"yogurt\")); // \"u\"\n        System.out.println(solution.getClosestVowel(\"FULL\")); // \"U\"\n        System.out.println(solution.getClosestVowel(\"quick\")); // \"\"\n        System.out.println(solution.getClosestVowel(\"ab\")); // \"\"\n    }\n}"}
{"task_id": "Java/119", "generation": "        String str1 = lst.get(0);\n        String str2 = lst.get(1);\n        \n        int count = 0;\n        \n        for(char c : str1.toCharArray()) {\n            if(c == '(') {\n                count++;\n            } else {\n                count--;\n            }\n            \n            if(count < 0) {\n                return \"No\";\n            }\n        }\n        \n        for(char c : str2.toCharArray()) {\n            if(c == '(') {\n                count++;\n            } else {\n                count--;\n            }\n            \n            if(count < 0) {\n                return \"No\";\n            }\n        }\n        \n        if(count == 0) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.matchParens(Arrays.asList(\"()(\", \")\"))); // Yes\n        System.out.println(solution.matchParens(Arrays.asList(\")\", \")\"))); // No\n    }\n}"}
{"task_id": "Java/119", "generation": "        String str1 = lst.get(0);\n        String str2 = lst.get(1);\n        \n        int count = 0;\n        \n        for(char c : str1.toCharArray()) {\n            if(c == '(') {\n                count++;\n            } else {\n                count--;\n            }\n            \n            if(count < 0) {\n                return \"No\";\n            }\n        }\n        \n        for(char c : str2.toCharArray()) {\n            if(c == '(') {\n                count++;\n            } else {\n                count--;\n            }\n            \n            if(count < 0) {\n                return \"No\";\n            }\n        }\n        \n        if(count == 0) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.matchParens(Arrays.asList(\"()(\", \")\"))); // Yes\n        System.out.println(solution.matchParens(Arrays.asList(\")\", \")\"))); // No\n    }\n}"}
{"task_id": "Java/119", "generation": "        String str1 = lst.get(0);\n        String str2 = lst.get(1);\n        \n        int count = 0;\n        \n        for(char c : str1.toCharArray()) {\n            if(c == '(') {\n                count++;\n            } else {\n                count--;\n            }\n            \n            if(count < 0) {\n                return \"No\";\n            }\n        }\n        \n        for(char c : str2.toCharArray()) {\n            if(c == '(') {\n                count++;\n            } else {\n                count--;\n            }\n            \n            if(count < 0) {\n                return \"No\";\n            }\n        }\n        \n        if(count == 0) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.matchParens(Arrays.asList(\"()(\", \")\"))); // Yes\n        System.out.println(solution.matchParens(Arrays.asList(\")\", \")\"))); // No\n    }\n}"}
{"task_id": "Java/119", "generation": "        String str1 = lst.get(0);\n        String str2 = lst.get(1);\n        \n        int count = 0;\n        \n        for(char c : str1.toCharArray()) {\n            if(c == '(') {\n                count++;\n            } else {\n                count--;\n            }\n            \n            if(count < 0) {\n                return \"No\";\n            }\n        }\n        \n        for(char c : str2.toCharArray()) {\n            if(c == '(') {\n                count++;\n            } else {\n                count--;\n            }\n            \n            if(count < 0) {\n                return \"No\";\n            }\n        }\n        \n        if(count == 0) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.matchParens(Arrays.asList(\"()(\", \")\"))); // Yes\n        System.out.println(solution.matchParens(Arrays.asList(\")\", \")\"))); // No\n    }\n}"}
{"task_id": "Java/119", "generation": "        String str1 = lst.get(0);\n        String str2 = lst.get(1);\n        \n        int count = 0;\n        \n        for(char c : str1.toCharArray()) {\n            if(c == '(') {\n                count++;\n            } else {\n                count--;\n            }\n            \n            if(count < 0) {\n                return \"No\";\n            }\n        }\n        \n        for(char c : str2.toCharArray()) {\n            if(c == '(') {\n                count++;\n            } else {\n                count--;\n            }\n            \n            if(count < 0) {\n                return \"No\";\n            }\n        }\n        \n        if(count == 0) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.matchParens(Arrays.asList(\"()(\", \")\"))); // Yes\n        System.out.println(solution.matchParens(Arrays.asList(\")\", \")\"))); // No\n    }\n}"}
{"task_id": "Java/120", "generation": "        // Sort the array in descending order\n        Collections.sort(arr, Collections.reverseOrder());\n        \n        // Create a new list to store the maximum k numbers\n        List<Integer> result = new ArrayList<>();\n        \n        // Add the first k numbers to the result list\n        for (int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/120", "generation": "        // Sort the array in descending order\n        Collections.sort(arr, Collections.reverseOrder());\n        \n        // Create a new list to store the maximum k numbers\n        List<Integer> result = new ArrayList<>();\n        \n        // Add the first k numbers to the result list\n        for (int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/120", "generation": "        // Sort the array in descending order\n        Collections.sort(arr, Collections.reverseOrder());\n        \n        // Create a new list to store the maximum k numbers\n        List<Integer> result = new ArrayList<>();\n        \n        // Add the first k numbers to the result list\n        for (int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/120", "generation": "        // Sort the array in descending order\n        Collections.sort(arr, Collections.reverseOrder());\n        \n        // Create a new list to store the maximum k numbers\n        List<Integer> result = new ArrayList<>();\n        \n        // Add the first k numbers to the result list\n        for (int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/120", "generation": "        // Sort the array in descending order\n        Collections.sort(arr, Collections.reverseOrder());\n        \n        // Create a new list to store the maximum k numbers\n        List<Integer> result = new ArrayList<>();\n        \n        // Add the first k numbers to the result list\n        for (int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/121", "generation": "        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/121", "generation": "        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/121", "generation": "        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/121", "generation": "        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/121", "generation": "        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/122", "generation": "        int sum = 0;\n        int count = 0;\n        \n        for (int i = 0; i < k; i++) {\n            if (arr.get(i) >= 10 && arr.get(i) <= 99) {\n                sum += arr.get(i);\n                count++;\n            }\n        }\n        \n        return sum;\n    }\n}"}
{"task_id": "Java/122", "generation": "        int sum = 0;\n        int count = 0;\n        \n        for (int i = 0; i < k; i++) {\n            if (arr.get(i) >= 10 && arr.get(i) <= 99) {\n                sum += arr.get(i);\n                count++;\n            }\n        }\n        \n        return sum;\n    }\n}"}
{"task_id": "Java/122", "generation": "        int sum = 0;\n        int count = 0;\n        \n        for (int i = 0; i < k; i++) {\n            if (arr.get(i) >= 10 && arr.get(i) <= 99) {\n                sum += arr.get(i);\n                count++;\n            }\n        }\n        \n        return sum;\n    }\n}"}
{"task_id": "Java/122", "generation": "        int sum = 0;\n        int count = 0;\n        \n        for (int i = 0; i < k; i++) {\n            if (arr.get(i) >= 10 && arr.get(i) <= 99) {\n                sum += arr.get(i);\n                count++;\n            }\n        }\n        \n        return sum;\n    }\n}"}
{"task_id": "Java/122", "generation": "        int sum = 0;\n        int count = 0;\n        \n        for (int i = 0; i < k; i++) {\n            if (arr.get(i) >= 10 && arr.get(i) <= 99) {\n                sum += arr.get(i);\n                count++;\n            }\n        }\n        \n        return sum;\n    }\n}"}
{"task_id": "Java/123", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i <= n; i++) {\n            List<Integer> collatzSeq = new ArrayList<>();\n            collatzSeq.add(i);\n            int num = i;\n            while (num != 1) {\n                if (num % 2 == 0) {\n                    num = num / 2;\n                } else {\n                    num = 3 * num + 1;\n                }\n                collatzSeq.add(num);\n            }\n            for (int j = 0; j < collatzSeq.size(); j++) {\n                if (collatzSeq.get(j) % 2 != 0) {\n                    result.add(collatzSeq.get(j));\n                }\n            }\n        }\n        \n        Collections.sort(result);\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the example\n        System.out.println(solution.getOddCollatz(5)); // Output: [1, 5]\n    }\n}"}
{"task_id": "Java/123", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i <= n; i++) {\n            List<Integer> collatzSeq = new ArrayList<>();\n            collatzSeq.add(i);\n            int num = i;\n            while (num != 1) {\n                if (num % 2 == 0) {\n                    num = num / 2;\n                } else {\n                    num = 3 * num + 1;\n                }\n                collatzSeq.add(num);\n            }\n            for (int j = 0; j < collatzSeq.size(); j++) {\n                if (collatzSeq.get(j) % 2 != 0) {\n                    result.add(collatzSeq.get(j));\n                }\n            }\n        }\n        \n        Collections.sort(result);\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the example\n        System.out.println(solution.getOddCollatz(5)); // Output: [1, 5]\n    }\n}"}
{"task_id": "Java/123", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i <= n; i++) {\n            List<Integer> collatzSeq = new ArrayList<>();\n            collatzSeq.add(i);\n            int num = i;\n            while (num != 1) {\n                if (num % 2 == 0) {\n                    num = num / 2;\n                } else {\n                    num = 3 * num + 1;\n                }\n                collatzSeq.add(num);\n            }\n            for (int j = 0; j < collatzSeq.size(); j++) {\n                if (collatzSeq.get(j) % 2 != 0) {\n                    result.add(collatzSeq.get(j));\n                }\n            }\n        }\n        \n        Collections.sort(result);\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the example\n        System.out.println(solution.getOddCollatz(5)); // Output: [1, 5]\n    }\n}"}
{"task_id": "Java/123", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i <= n; i++) {\n            List<Integer> collatzSeq = new ArrayList<>();\n            collatzSeq.add(i);\n            int num = i;\n            while (num != 1) {\n                if (num % 2 == 0) {\n                    num = num / 2;\n                } else {\n                    num = 3 * num + 1;\n                }\n                collatzSeq.add(num);\n            }\n            for (int j = 0; j < collatzSeq.size(); j++) {\n                if (collatzSeq.get(j) % 2 != 0) {\n                    result.add(collatzSeq.get(j));\n                }\n            }\n        }\n        \n        Collections.sort(result);\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the example\n        System.out.println(solution.getOddCollatz(5)); // Output: [1, 5]\n    }\n}"}
{"task_id": "Java/123", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i <= n; i++) {\n            List<Integer> collatzSeq = new ArrayList<>();\n            collatzSeq.add(i);\n            int num = i;\n            while (num != 1) {\n                if (num % 2 == 0) {\n                    num = num / 2;\n                } else {\n                    num = 3 * num + 1;\n                }\n                collatzSeq.add(num);\n            }\n            for (int j = 0; j < collatzSeq.size(); j++) {\n                if (collatzSeq.get(j) % 2 != 0) {\n                    result.add(collatzSeq.get(j));\n                }\n            }\n        }\n        \n        Collections.sort(result);\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the example\n        System.out.println(solution.getOddCollatz(5)); // Output: [1, 5]\n    }\n}"}
{"task_id": "Java/124", "generation": "        if (date == null || date.isEmpty()) {\n            return false;\n        }\n\n        String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n            return false;\n        }\n\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        if (day < 1 || day > 31) {\n            return false;\n        }\n\n        if ((month == 4 || month == 6 || month == 9 || month == 11) && day > 30) {\n            return false;\n        }\n\n        if (month == 2) {\n            if (year % 4 == 0) {\n                if (day > 29) {\n                    return false;\n                }\n            } else {\n                if (day > 28) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.validDate(\"03-11-2000\")); // true\n        System.out.println(solution.validDate(\"15-01-2012\")); // false\n        System.out.println(solution.validDate(\"04-0-2040\")); // false\n        System.out.println(solution.validDate(\"06-04-2020\")); // true\n        System.out.println(solution.validDate(\"06/04/2020\")); // false\n    }\n}"}
{"task_id": "Java/124", "generation": "        if (date == null || date.isEmpty()) {\n            return false;\n        }\n\n        String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n            return false;\n        }\n\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        if (day < 1 || day > 31) {\n            return false;\n        }\n\n        if ((month == 4 || month == 6 || month == 9 || month == 11) && day > 30) {\n            return false;\n        }\n\n        if (month == 2) {\n            if (year % 4 == 0) {\n                if (day > 29) {\n                    return false;\n                }\n            } else {\n                if (day > 28) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.validDate(\"03-11-2000\")); // true\n        System.out.println(solution.validDate(\"15-01-2012\")); // false\n        System.out.println(solution.validDate(\"04-0-2040\")); // false\n        System.out.println(solution.validDate(\"06-04-2020\")); // true\n        System.out.println(solution.validDate(\"06/04/2020\")); // false\n    }\n}"}
{"task_id": "Java/124", "generation": "        if (date == null || date.isEmpty()) {\n            return false;\n        }\n\n        String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n            return false;\n        }\n\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        if (day < 1 || day > 31) {\n            return false;\n        }\n\n        if ((month == 4 || month == 6 || month == 9 || month == 11) && day > 30) {\n            return false;\n        }\n\n        if (month == 2) {\n            if (year % 4 == 0) {\n                if (day > 29) {\n                    return false;\n                }\n            } else {\n                if (day > 28) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.validDate(\"03-11-2000\")); // true\n        System.out.println(solution.validDate(\"15-01-2012\")); // false\n        System.out.println(solution.validDate(\"04-0-2040\")); // false\n        System.out.println(solution.validDate(\"06-04-2020\")); // true\n        System.out.println(solution.validDate(\"06/04/2020\")); // false\n    }\n}"}
{"task_id": "Java/124", "generation": "        if (date == null || date.isEmpty()) {\n            return false;\n        }\n\n        String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n            return false;\n        }\n\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        if (day < 1 || day > 31) {\n            return false;\n        }\n\n        if ((month == 4 || month == 6 || month == 9 || month == 11) && day > 30) {\n            return false;\n        }\n\n        if (month == 2) {\n            if (year % 4 == 0) {\n                if (day > 29) {\n                    return false;\n                }\n            } else {\n                if (day > 28) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.validDate(\"03-11-2000\")); // true\n        System.out.println(solution.validDate(\"15-01-2012\")); // false\n        System.out.println(solution.validDate(\"04-0-2040\")); // false\n        System.out.println(solution.validDate(\"06-04-2020\")); // true\n        System.out.println(solution.validDate(\"06/04/2020\")); // false\n    }\n}"}
{"task_id": "Java/124", "generation": "        if (date == null || date.isEmpty()) {\n            return false;\n        }\n\n        String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n            return false;\n        }\n\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        if (day < 1 || day > 31) {\n            return false;\n        }\n\n        if ((month == 4 || month == 6 || month == 9 || month == 11) && day > 30) {\n            return false;\n        }\n\n        if (month == 2) {\n            if (year % 4 == 0) {\n                if (day > 29) {\n                    return false;\n                }\n            } else {\n                if (day > 28) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.validDate(\"03-11-2000\")); // true\n        System.out.println(solution.validDate(\"15-01-2012\")); // false\n        System.out.println(solution.validDate(\"04-0-2040\")); // false\n        System.out.println(solution.validDate(\"06-04-2020\")); // true\n        System.out.println(solution.validDate(\"06/04/2020\")); // false\n    }\n}"}
{"task_id": "Java/125", "generation": "        List<String> words = new ArrayList<>();\n        if (txt.contains(\" \")) {\n            words = Arrays.asList(txt.split(\" \"));\n        } else if (txt.contains(\",\")) {\n            words = Arrays.asList(txt.split(\",\"));\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && (c - 'a') % 2 != 0) {\n                    count++;\n                }\n            }\n            return count;\n        }\n        return words;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.splitWords(\"Hello world!\")); // [\"Hello\", \"world!\"]\n        System.out.println(solution.splitWords(\"Hello,world!\")); // [\"Hello\", \"world!\"]\n        System.out.println(solution.splitWords(\"abcdef\")); // 3\n    }\n}"}
{"task_id": "Java/125", "generation": "        List<String> words = new ArrayList<>();\n        if (txt.contains(\" \")) {\n            words = Arrays.asList(txt.split(\" \"));\n        } else if (txt.contains(\",\")) {\n            words = Arrays.asList(txt.split(\",\"));\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && (c - 'a') % 2 != 0) {\n                    count++;\n                }\n            }\n            return count;\n        }\n        return words;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.splitWords(\"Hello world!\")); // [\"Hello\", \"world!\"]\n        System.out.println(solution.splitWords(\"Hello,world!\")); // [\"Hello\", \"world!\"]\n        System.out.println(solution.splitWords(\"abcdef\")); // 3\n    }\n}"}
{"task_id": "Java/125", "generation": "        List<String> words = new ArrayList<>();\n        if (txt.contains(\" \")) {\n            words = Arrays.asList(txt.split(\" \"));\n        } else if (txt.contains(\",\")) {\n            words = Arrays.asList(txt.split(\",\"));\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && (c - 'a') % 2 != 0) {\n                    count++;\n                }\n            }\n            return count;\n        }\n        return words;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.splitWords(\"Hello world!\")); // [\"Hello\", \"world!\"]\n        System.out.println(solution.splitWords(\"Hello,world!\")); // [\"Hello\", \"world!\"]\n        System.out.println(solution.splitWords(\"abcdef\")); // 3\n    }\n}"}
{"task_id": "Java/125", "generation": "        List<String> words = new ArrayList<>();\n        if (txt.contains(\" \")) {\n            words = Arrays.asList(txt.split(\" \"));\n        } else if (txt.contains(\",\")) {\n            words = Arrays.asList(txt.split(\",\"));\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && (c - 'a') % 2 != 0) {\n                    count++;\n                }\n            }\n            return count;\n        }\n        return words;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.splitWords(\"Hello world!\")); // [\"Hello\", \"world!\"]\n        System.out.println(solution.splitWords(\"Hello,world!\")); // [\"Hello\", \"world!\"]\n        System.out.println(solution.splitWords(\"abcdef\")); // 3\n    }\n}"}
{"task_id": "Java/125", "generation": "        List<String> words = new ArrayList<>();\n        if (txt.contains(\" \")) {\n            words = Arrays.asList(txt.split(\" \"));\n        } else if (txt.contains(\",\")) {\n            words = Arrays.asList(txt.split(\",\"));\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && (c - 'a') % 2 != 0) {\n                    count++;\n                }\n            }\n            return count;\n        }\n        return words;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.splitWords(\"Hello world!\")); // [\"Hello\", \"world!\"]\n        System.out.println(solution.splitWords(\"Hello,world!\")); // [\"Hello\", \"world!\"]\n        System.out.println(solution.splitWords(\"abcdef\")); // 3\n    }\n}"}
{"task_id": "Java/126", "generation": "        // Check if list has more than 1 duplicate of the same number\n        Map<Integer, Integer> countMap = new HashMap<>();\n        for (int num : lst) {\n            countMap.put(num, countMap.getOrDefault(num, 0) + 1);\n            if (countMap.get(num) > 1) {\n                return false;\n            }\n        }\n        \n        // Check if list is sorted in ascending order\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < lst.get(i - 1)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.isSorted(Arrays.asList(5))); // true\n        System.out.println(solution.isSorted(Arrays.asList(1, 2, 3, 4, 5))); // true\n        System.out.println(solution.isSorted(Arrays.asList(1, 3, 2, 4, 5))); // false\n        System.out.println(solution.isSorted(Arrays.asList(1, 2, 3, 4, 5, 6))); // true\n        System.out.println(solution.isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7))); // true\n        System.out.println(solution.isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7))); // false\n        System.out.println(solution.isSorted(Arrays.asList(1, 2, 2, 3, 3, 4))); // true\n        System.out.println(solution.isSorted(Arrays.asList(1, 2, 2, 2, 3, 4))); // false\n    }\n}"}
{"task_id": "Java/126", "generation": "        // Check if list has more than 1 duplicate of the same number\n        Map<Integer, Integer> countMap = new HashMap<>();\n        for (int num : lst) {\n            countMap.put(num, countMap.getOrDefault(num, 0) + 1);\n            if (countMap.get(num) > 1) {\n                return false;\n            }\n        }\n        \n        // Check if list is sorted in ascending order\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < lst.get(i - 1)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.isSorted(Arrays.asList(5))); // true\n        System.out.println(solution.isSorted(Arrays.asList(1, 2, 3, 4, 5))); // true\n        System.out.println(solution.isSorted(Arrays.asList(1, 3, 2, 4, 5))); // false\n        System.out.println(solution.isSorted(Arrays.asList(1, 2, 3, 4, 5, 6))); // true\n        System.out.println(solution.isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7))); // true\n        System.out.println(solution.isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7))); // false\n        System.out.println(solution.isSorted(Arrays.asList(1, 2, 2, 3, 3, 4))); // true\n        System.out.println(solution.isSorted(Arrays.asList(1, 2, 2, 2, 3, 4))); // false\n    }\n}"}
{"task_id": "Java/126", "generation": "        // Check if list has more than 1 duplicate of the same number\n        Map<Integer, Integer> countMap = new HashMap<>();\n        for (int num : lst) {\n            countMap.put(num, countMap.getOrDefault(num, 0) + 1);\n            if (countMap.get(num) > 1) {\n                return false;\n            }\n        }\n        \n        // Check if list is sorted in ascending order\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < lst.get(i - 1)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.isSorted(Arrays.asList(5))); // true\n        System.out.println(solution.isSorted(Arrays.asList(1, 2, 3, 4, 5))); // true\n        System.out.println(solution.isSorted(Arrays.asList(1, 3, 2, 4, 5))); // false\n        System.out.println(solution.isSorted(Arrays.asList(1, 2, 3, 4, 5, 6))); // true\n        System.out.println(solution.isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7))); // true\n        System.out.println(solution.isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7))); // false\n        System.out.println(solution.isSorted(Arrays.asList(1, 2, 2, 3, 3, 4))); // true\n        System.out.println(solution.isSorted(Arrays.asList(1, 2, 2, 2, 3, 4))); // false\n    }\n}"}
{"task_id": "Java/126", "generation": "        // Check if list has more than 1 duplicate of the same number\n        Map<Integer, Integer> countMap = new HashMap<>();\n        for (int num : lst) {\n            countMap.put(num, countMap.getOrDefault(num, 0) + 1);\n            if (countMap.get(num) > 1) {\n                return false;\n            }\n        }\n        \n        // Check if list is sorted in ascending order\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < lst.get(i - 1)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.isSorted(Arrays.asList(5))); // true\n        System.out.println(solution.isSorted(Arrays.asList(1, 2, 3, 4, 5))); // true\n        System.out.println(solution.isSorted(Arrays.asList(1, 3, 2, 4, 5))); // false\n        System.out.println(solution.isSorted(Arrays.asList(1, 2, 3, 4, 5, 6))); // true\n        System.out.println(solution.isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7))); // true\n        System.out.println(solution.isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7))); // false\n        System.out.println(solution.isSorted(Arrays.asList(1, 2, 2, 3, 3, 4))); // true\n        System.out.println(solution.isSorted(Arrays.asList(1, 2, 2, 2, 3, 4))); // false\n    }\n}"}
{"task_id": "Java/126", "generation": "        // Check if list has more than 1 duplicate of the same number\n        Map<Integer, Integer> countMap = new HashMap<>();\n        for (int num : lst) {\n            countMap.put(num, countMap.getOrDefault(num, 0) + 1);\n            if (countMap.get(num) > 1) {\n                return false;\n            }\n        }\n        \n        // Check if list is sorted in ascending order\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < lst.get(i - 1)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.isSorted(Arrays.asList(5))); // true\n        System.out.println(solution.isSorted(Arrays.asList(1, 2, 3, 4, 5))); // true\n        System.out.println(solution.isSorted(Arrays.asList(1, 3, 2, 4, 5))); // false\n        System.out.println(solution.isSorted(Arrays.asList(1, 2, 3, 4, 5, 6))); // true\n        System.out.println(solution.isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7))); // true\n        System.out.println(solution.isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7))); // false\n        System.out.println(solution.isSorted(Arrays.asList(1, 2, 2, 3, 3, 4))); // true\n        System.out.println(solution.isSorted(Arrays.asList(1, 2, 2, 2, 3, 4))); // false\n    }\n}"}
{"task_id": "Java/127", "generation": "        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n        \n        int intersectionStart = Math.max(start1, start2);\n        int intersectionEnd = Math.min(end1, end2);\n        \n        if (intersectionStart > intersectionEnd) {\n            return \"NO\";\n        }\n        \n        int length = intersectionEnd - intersectionStart;\n        \n        if (isPrime(length)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n    \n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n// Test the solution with sample inputs\nclass Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> interval1 = new ArrayList<>(Arrays.asList(1, 2));\n        List<Integer> interval2 = new ArrayList<>(Arrays.asList(2, 3));\n        System.out.println(solution.intersection(interval1, interval2)); // Output: NO\n        \n        interval1 = new ArrayList<>(Arrays.asList(-1, 1));\n        interval2 = new ArrayList<>(Arrays.asList(0, 4));\n        System.out.println(solution.intersection(interval1, interval2)); // Output: NO\n        \n        interval1 = new ArrayList<>(Arrays.asList(-3, -1));\n        interval2 = new ArrayList<>(Arrays.asList(-5, 5));\n        System.out.println(solution.intersection(interval1, interval2)); // Output: YES\n    }\n}"}
{"task_id": "Java/127", "generation": "        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n        \n        int intersectionStart = Math.max(start1, start2);\n        int intersectionEnd = Math.min(end1, end2);\n        \n        if (intersectionStart > intersectionEnd) {\n            return \"NO\";\n        }\n        \n        int length = intersectionEnd - intersectionStart;\n        \n        if (isPrime(length)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n    \n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n// Test the solution with sample inputs\nclass Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> interval1 = new ArrayList<>(Arrays.asList(1, 2));\n        List<Integer> interval2 = new ArrayList<>(Arrays.asList(2, 3));\n        System.out.println(solution.intersection(interval1, interval2)); // Output: NO\n        \n        interval1 = new ArrayList<>(Arrays.asList(-1, 1));\n        interval2 = new ArrayList<>(Arrays.asList(0, 4));\n        System.out.println(solution.intersection(interval1, interval2)); // Output: NO\n        \n        interval1 = new ArrayList<>(Arrays.asList(-3, -1));\n        interval2 = new ArrayList<>(Arrays.asList(-5, 5));\n        System.out.println(solution.intersection(interval1, interval2)); // Output: YES\n    }\n}"}
{"task_id": "Java/127", "generation": "        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n        \n        int intersectionStart = Math.max(start1, start2);\n        int intersectionEnd = Math.min(end1, end2);\n        \n        if (intersectionStart > intersectionEnd) {\n            return \"NO\";\n        }\n        \n        int length = intersectionEnd - intersectionStart;\n        \n        if (isPrime(length)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n    \n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n// Test the solution with sample inputs\nclass Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> interval1 = new ArrayList<>(Arrays.asList(1, 2));\n        List<Integer> interval2 = new ArrayList<>(Arrays.asList(2, 3));\n        System.out.println(solution.intersection(interval1, interval2)); // Output: NO\n        \n        interval1 = new ArrayList<>(Arrays.asList(-1, 1));\n        interval2 = new ArrayList<>(Arrays.asList(0, 4));\n        System.out.println(solution.intersection(interval1, interval2)); // Output: NO\n        \n        interval1 = new ArrayList<>(Arrays.asList(-3, -1));\n        interval2 = new ArrayList<>(Arrays.asList(-5, 5));\n        System.out.println(solution.intersection(interval1, interval2)); // Output: YES\n    }\n}"}
{"task_id": "Java/127", "generation": "        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n        \n        int intersectionStart = Math.max(start1, start2);\n        int intersectionEnd = Math.min(end1, end2);\n        \n        if (intersectionStart > intersectionEnd) {\n            return \"NO\";\n        }\n        \n        int length = intersectionEnd - intersectionStart;\n        \n        if (isPrime(length)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n    \n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n// Test the solution with sample inputs\nclass Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> interval1 = new ArrayList<>(Arrays.asList(1, 2));\n        List<Integer> interval2 = new ArrayList<>(Arrays.asList(2, 3));\n        System.out.println(solution.intersection(interval1, interval2)); // Output: NO\n        \n        interval1 = new ArrayList<>(Arrays.asList(-1, 1));\n        interval2 = new ArrayList<>(Arrays.asList(0, 4));\n        System.out.println(solution.intersection(interval1, interval2)); // Output: NO\n        \n        interval1 = new ArrayList<>(Arrays.asList(-3, -1));\n        interval2 = new ArrayList<>(Arrays.asList(-5, 5));\n        System.out.println(solution.intersection(interval1, interval2)); // Output: YES\n    }\n}"}
{"task_id": "Java/127", "generation": "        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n        \n        int intersectionStart = Math.max(start1, start2);\n        int intersectionEnd = Math.min(end1, end2);\n        \n        if (intersectionStart > intersectionEnd) {\n            return \"NO\";\n        }\n        \n        int length = intersectionEnd - intersectionStart;\n        \n        if (isPrime(length)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n    \n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n// Test the solution with sample inputs\nclass Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> interval1 = new ArrayList<>(Arrays.asList(1, 2));\n        List<Integer> interval2 = new ArrayList<>(Arrays.asList(2, 3));\n        System.out.println(solution.intersection(interval1, interval2)); // Output: NO\n        \n        interval1 = new ArrayList<>(Arrays.asList(-1, 1));\n        interval2 = new ArrayList<>(Arrays.asList(0, 4));\n        System.out.println(solution.intersection(interval1, interval2)); // Output: NO\n        \n        interval1 = new ArrayList<>(Arrays.asList(-3, -1));\n        interval2 = new ArrayList<>(Arrays.asList(-5, 5));\n        System.out.println(solution.intersection(interval1, interval2)); // Output: YES\n    }\n}"}
{"task_id": "Java/128", "generation": "        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int product = 1;\n        int sum = 0;\n\n        for (int num : arr) {\n            if (num > 0) {\n                product *= 1;\n            } else if (num < 0) {\n                product *= -1;\n            } else {\n                product *= 0;\n            }\n\n            sum += Math.abs(num);\n        }\n\n        return Optional.of(product * sum);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.prodSigns(Arrays.asList(1, 2, 2, -4))); // Output: -9\n        System.out.println(solution.prodSigns(Arrays.asList(0, 1))); // Output: 0\n        System.out.println(solution.prodSigns(Arrays.asList())); // Output: None\n    }\n}"}
{"task_id": "Java/128", "generation": "        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int product = 1;\n        int sum = 0;\n\n        for (int num : arr) {\n            if (num > 0) {\n                product *= 1;\n            } else if (num < 0) {\n                product *= -1;\n            } else {\n                product *= 0;\n            }\n\n            sum += Math.abs(num);\n        }\n\n        return Optional.of(product * sum);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.prodSigns(Arrays.asList(1, 2, 2, -4))); // Output: -9\n        System.out.println(solution.prodSigns(Arrays.asList(0, 1))); // Output: 0\n        System.out.println(solution.prodSigns(Arrays.asList())); // Output: None\n    }\n}"}
{"task_id": "Java/128", "generation": "        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int product = 1;\n        int sum = 0;\n\n        for (int num : arr) {\n            if (num > 0) {\n                product *= 1;\n            } else if (num < 0) {\n                product *= -1;\n            } else {\n                product *= 0;\n            }\n\n            sum += Math.abs(num);\n        }\n\n        return Optional.of(product * sum);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.prodSigns(Arrays.asList(1, 2, 2, -4))); // Output: -9\n        System.out.println(solution.prodSigns(Arrays.asList(0, 1))); // Output: 0\n        System.out.println(solution.prodSigns(Arrays.asList())); // Output: None\n    }\n}"}
{"task_id": "Java/128", "generation": "        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int product = 1;\n        int sum = 0;\n\n        for (int num : arr) {\n            if (num > 0) {\n                product *= 1;\n            } else if (num < 0) {\n                product *= -1;\n            } else {\n                product *= 0;\n            }\n\n            sum += Math.abs(num);\n        }\n\n        return Optional.of(product * sum);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.prodSigns(Arrays.asList(1, 2, 2, -4))); // Output: -9\n        System.out.println(solution.prodSigns(Arrays.asList(0, 1))); // Output: 0\n        System.out.println(solution.prodSigns(Arrays.asList())); // Output: None\n    }\n}"}
{"task_id": "Java/128", "generation": "        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int product = 1;\n        int sum = 0;\n\n        for (int num : arr) {\n            if (num > 0) {\n                product *= 1;\n            } else if (num < 0) {\n                product *= -1;\n            } else {\n                product *= 0;\n            }\n\n            sum += Math.abs(num);\n        }\n\n        return Optional.of(product * sum);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.prodSigns(Arrays.asList(1, 2, 2, -4))); // Output: -9\n        System.out.println(solution.prodSigns(Arrays.asList(0, 1))); // Output: 0\n        System.out.println(solution.prodSigns(Arrays.asList())); // Output: None\n    }\n}"}
{"task_id": "Java/129", "generation": "        int n = grid.size();\n        int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n        \n        PriorityQueue<Node> pq = new PriorityQueue<>(new Comparator<Node>() {\n            @Override\n            public int compare(Node n1, Node n2) {\n                return grid.get(n1.x).get(n1.y) - grid.get(n2.x).get(n2.y);\n            }\n        });\n        \n        for (int i = 0; i < n; i++) {\n            pq.offer(new Node(i, 0));\n            pq.offer(new Node(i, n - 1));\n            pq.offer(new Node(0, i));\n            pq.offer(new Node(n - 1, i));\n        }\n        \n        Set<Node> visited = new HashSet<>();\n        List<Integer> path = new ArrayList<>();\n        \n        while (!pq.isEmpty() && k > 0) {\n            Node curr = pq.poll();\n            if (visited.contains(curr)) {\n                continue;\n            }\n            visited.add(curr);\n            path.add(grid.get(curr.x).get(curr.y));\n            k--;\n            for (int[] dir : directions) {\n                int newX = curr.x + dir[0];\n                int newY = curr.y + dir[1];\n                if (newX >= 0 && newX < n && newY >= 0 && newY < n) {\n                    pq.offer(new Node(newX, newY));\n                }\n            }\n        }\n        \n        return path;\n    }\n    \n    class Node {\n        int x;\n        int y;\n        \n        public Node(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n        \n        @Override\n        public boolean equals(Object obj) {\n            if (this == obj) {\n                return true;\n            }\n            if (obj == null || getClass() != obj.getClass()) {\n                return false;\n            }\n            Node node = (Node) obj;\n            return x == node.x && y == node.y;\n        }\n        \n        @Override\n        public int hashCode() {\n            return Objects.hash(x, y);\n        }\n    }\n}"}
{"task_id": "Java/129", "generation": "        int n = grid.size();\n        int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n        \n        PriorityQueue<Node> pq = new PriorityQueue<>(new Comparator<Node>() {\n            @Override\n            public int compare(Node n1, Node n2) {\n                return grid.get(n1.x).get(n1.y) - grid.get(n2.x).get(n2.y);\n            }\n        });\n        \n        for (int i = 0; i < n; i++) {\n            pq.offer(new Node(i, 0));\n            pq.offer(new Node(i, n - 1));\n            pq.offer(new Node(0, i));\n            pq.offer(new Node(n - 1, i));\n        }\n        \n        Set<Node> visited = new HashSet<>();\n        List<Integer> path = new ArrayList<>();\n        \n        while (!pq.isEmpty() && k > 0) {\n            Node curr = pq.poll();\n            if (visited.contains(curr)) {\n                continue;\n            }\n            visited.add(curr);\n            path.add(grid.get(curr.x).get(curr.y));\n            k--;\n            for (int[] dir : directions) {\n                int newX = curr.x + dir[0];\n                int newY = curr.y + dir[1];\n                if (newX >= 0 && newX < n && newY >= 0 && newY < n) {\n                    pq.offer(new Node(newX, newY));\n                }\n            }\n        }\n        \n        return path;\n    }\n    \n    class Node {\n        int x;\n        int y;\n        \n        public Node(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n        \n        @Override\n        public boolean equals(Object obj) {\n            if (this == obj) {\n                return true;\n            }\n            if (obj == null || getClass() != obj.getClass()) {\n                return false;\n            }\n            Node node = (Node) obj;\n            return x == node.x && y == node.y;\n        }\n        \n        @Override\n        public int hashCode() {\n            return Objects.hash(x, y);\n        }\n    }\n}"}
{"task_id": "Java/129", "generation": "        int n = grid.size();\n        int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n        \n        PriorityQueue<Node> pq = new PriorityQueue<>(new Comparator<Node>() {\n            @Override\n            public int compare(Node n1, Node n2) {\n                return grid.get(n1.x).get(n1.y) - grid.get(n2.x).get(n2.y);\n            }\n        });\n        \n        for (int i = 0; i < n; i++) {\n            pq.offer(new Node(i, 0));\n            pq.offer(new Node(i, n - 1));\n            pq.offer(new Node(0, i));\n            pq.offer(new Node(n - 1, i));\n        }\n        \n        Set<Node> visited = new HashSet<>();\n        List<Integer> path = new ArrayList<>();\n        \n        while (!pq.isEmpty() && k > 0) {\n            Node curr = pq.poll();\n            if (visited.contains(curr)) {\n                continue;\n            }\n            visited.add(curr);\n            path.add(grid.get(curr.x).get(curr.y));\n            k--;\n            for (int[] dir : directions) {\n                int newX = curr.x + dir[0];\n                int newY = curr.y + dir[1];\n                if (newX >= 0 && newX < n && newY >= 0 && newY < n) {\n                    pq.offer(new Node(newX, newY));\n                }\n            }\n        }\n        \n        return path;\n    }\n    \n    class Node {\n        int x;\n        int y;\n        \n        public Node(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n        \n        @Override\n        public boolean equals(Object obj) {\n            if (this == obj) {\n                return true;\n            }\n            if (obj == null || getClass() != obj.getClass()) {\n                return false;\n            }\n            Node node = (Node) obj;\n            return x == node.x && y == node.y;\n        }\n        \n        @Override\n        public int hashCode() {\n            return Objects.hash(x, y);\n        }\n    }\n}"}
{"task_id": "Java/129", "generation": "        int n = grid.size();\n        int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n        \n        PriorityQueue<Node> pq = new PriorityQueue<>(new Comparator<Node>() {\n            @Override\n            public int compare(Node n1, Node n2) {\n                return grid.get(n1.x).get(n1.y) - grid.get(n2.x).get(n2.y);\n            }\n        });\n        \n        for (int i = 0; i < n; i++) {\n            pq.offer(new Node(i, 0));\n            pq.offer(new Node(i, n - 1));\n            pq.offer(new Node(0, i));\n            pq.offer(new Node(n - 1, i));\n        }\n        \n        Set<Node> visited = new HashSet<>();\n        List<Integer> path = new ArrayList<>();\n        \n        while (!pq.isEmpty() && k > 0) {\n            Node curr = pq.poll();\n            if (visited.contains(curr)) {\n                continue;\n            }\n            visited.add(curr);\n            path.add(grid.get(curr.x).get(curr.y));\n            k--;\n            for (int[] dir : directions) {\n                int newX = curr.x + dir[0];\n                int newY = curr.y + dir[1];\n                if (newX >= 0 && newX < n && newY >= 0 && newY < n) {\n                    pq.offer(new Node(newX, newY));\n                }\n            }\n        }\n        \n        return path;\n    }\n    \n    class Node {\n        int x;\n        int y;\n        \n        public Node(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n        \n        @Override\n        public boolean equals(Object obj) {\n            if (this == obj) {\n                return true;\n            }\n            if (obj == null || getClass() != obj.getClass()) {\n                return false;\n            }\n            Node node = (Node) obj;\n            return x == node.x && y == node.y;\n        }\n        \n        @Override\n        public int hashCode() {\n            return Objects.hash(x, y);\n        }\n    }\n}"}
{"task_id": "Java/129", "generation": "        int n = grid.size();\n        int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n        \n        PriorityQueue<Node> pq = new PriorityQueue<>(new Comparator<Node>() {\n            @Override\n            public int compare(Node n1, Node n2) {\n                return grid.get(n1.x).get(n1.y) - grid.get(n2.x).get(n2.y);\n            }\n        });\n        \n        for (int i = 0; i < n; i++) {\n            pq.offer(new Node(i, 0));\n            pq.offer(new Node(i, n - 1));\n            pq.offer(new Node(0, i));\n            pq.offer(new Node(n - 1, i));\n        }\n        \n        Set<Node> visited = new HashSet<>();\n        List<Integer> path = new ArrayList<>();\n        \n        while (!pq.isEmpty() && k > 0) {\n            Node curr = pq.poll();\n            if (visited.contains(curr)) {\n                continue;\n            }\n            visited.add(curr);\n            path.add(grid.get(curr.x).get(curr.y));\n            k--;\n            for (int[] dir : directions) {\n                int newX = curr.x + dir[0];\n                int newY = curr.y + dir[1];\n                if (newX >= 0 && newX < n && newY >= 0 && newY < n) {\n                    pq.offer(new Node(newX, newY));\n                }\n            }\n        }\n        \n        return path;\n    }\n    \n    class Node {\n        int x;\n        int y;\n        \n        public Node(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n        \n        @Override\n        public boolean equals(Object obj) {\n            if (this == obj) {\n                return true;\n            }\n            if (obj == null || getClass() != obj.getClass()) {\n                return false;\n            }\n            Node node = (Node) obj;\n            return x == node.x && y == node.y;\n        }\n        \n        @Override\n        public int hashCode() {\n            return Objects.hash(x, y);\n        }\n    }\n}"}
{"task_id": "Java/130", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        if (n == 0) {\n            return result;\n        }\n        \n        result.add(3);\n        \n        if (n == 1) {\n            return result;\n        }\n        \n        result.add(1);\n        \n        if (n == 2) {\n            return result;\n        }\n        \n        result.add(2);\n        \n        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(1 + i / 2);\n            } else {\n                result.add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n            }\n        }\n        \n        return result;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.tri(3)); // [3, 1, 2, 8]\n    }\n}"}
{"task_id": "Java/130", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        if (n == 0) {\n            return result;\n        }\n        \n        result.add(3);\n        \n        if (n == 1) {\n            return result;\n        }\n        \n        result.add(1);\n        \n        if (n == 2) {\n            return result;\n        }\n        \n        result.add(2);\n        \n        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(1 + i / 2);\n            } else {\n                result.add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n            }\n        }\n        \n        return result;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.tri(3)); // [3, 1, 2, 8]\n    }\n}"}
{"task_id": "Java/130", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        if (n == 0) {\n            return result;\n        }\n        \n        result.add(3);\n        \n        if (n == 1) {\n            return result;\n        }\n        \n        result.add(1);\n        \n        if (n == 2) {\n            return result;\n        }\n        \n        result.add(2);\n        \n        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(1 + i / 2);\n            } else {\n                result.add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n            }\n        }\n        \n        return result;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.tri(3)); // [3, 1, 2, 8]\n    }\n}"}
{"task_id": "Java/130", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        if (n == 0) {\n            return result;\n        }\n        \n        result.add(3);\n        \n        if (n == 1) {\n            return result;\n        }\n        \n        result.add(1);\n        \n        if (n == 2) {\n            return result;\n        }\n        \n        result.add(2);\n        \n        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(1 + i / 2);\n            } else {\n                result.add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n            }\n        }\n        \n        return result;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.tri(3)); // [3, 1, 2, 8]\n    }\n}"}
{"task_id": "Java/130", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        if (n == 0) {\n            return result;\n        }\n        \n        result.add(3);\n        \n        if (n == 1) {\n            return result;\n        }\n        \n        result.add(1);\n        \n        if (n == 2) {\n            return result;\n        }\n        \n        result.add(2);\n        \n        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(1 + i / 2);\n            } else {\n                result.add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n            }\n        }\n        \n        return result;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.tri(3)); // [3, 1, 2, 8]\n    }\n}"}
{"task_id": "Java/131", "generation": "        int product = 1;\n        \n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n            }\n            n /= 10;\n        }\n        \n        if (product == 1) {\n            return 0;\n        }\n        \n        return product;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.digits(1)); // 1\n        System.out.println(solution.digits(4)); // 0\n        System.out.println(solution.digits(235)); // 15\n    }\n}"}
{"task_id": "Java/131", "generation": "        int product = 1;\n        \n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n            }\n            n /= 10;\n        }\n        \n        if (product == 1) {\n            return 0;\n        }\n        \n        return product;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.digits(1)); // 1\n        System.out.println(solution.digits(4)); // 0\n        System.out.println(solution.digits(235)); // 15\n    }\n}"}
{"task_id": "Java/131", "generation": "        int product = 1;\n        \n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n            }\n            n /= 10;\n        }\n        \n        if (product == 1) {\n            return 0;\n        }\n        \n        return product;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.digits(1)); // 1\n        System.out.println(solution.digits(4)); // 0\n        System.out.println(solution.digits(235)); // 15\n    }\n}"}
{"task_id": "Java/131", "generation": "        int product = 1;\n        \n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n            }\n            n /= 10;\n        }\n        \n        if (product == 1) {\n            return 0;\n        }\n        \n        return product;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.digits(1)); // 1\n        System.out.println(solution.digits(4)); // 0\n        System.out.println(solution.digits(235)); // 15\n    }\n}"}
{"task_id": "Java/131", "generation": "        int product = 1;\n        \n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n            }\n            n /= 10;\n        }\n        \n        if (product == 1) {\n            return 0;\n        }\n        \n        return product;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.digits(1)); // 1\n        System.out.println(solution.digits(4)); // 0\n        System.out.println(solution.digits(235)); // 15\n    }\n}"}
{"task_id": "Java/132", "generation": "        Stack<Character> stack = new Stack<>();\n        \n        for(char c : string.toCharArray()) {\n            if(c == '[') {\n                stack.push(c);\n            } else if(c == ']') {\n                if(stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        \n        return stack.size() < string.length() && stack.size() > 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.isNested(\"[[]]\")); // true\n        System.out.println(solution.isNested(\"[]]]]]]][[[[[]\")); // false\n        System.out.println(solution.isNested(\"[][]\")); // false\n        System.out.println(solution.isNested(\"[]\")); // false\n        System.out.println(solution.isNested(\"[[][]]\")); // true\n        System.out.println(solution.isNested(\"[[]][[\")); // true\n    }\n}"}
{"task_id": "Java/132", "generation": "        Stack<Character> stack = new Stack<>();\n        \n        for(char c : string.toCharArray()) {\n            if(c == '[') {\n                stack.push(c);\n            } else if(c == ']') {\n                if(stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        \n        return stack.size() < string.length() && stack.size() > 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.isNested(\"[[]]\")); // true\n        System.out.println(solution.isNested(\"[]]]]]]][[[[[]\")); // false\n        System.out.println(solution.isNested(\"[][]\")); // false\n        System.out.println(solution.isNested(\"[]\")); // false\n        System.out.println(solution.isNested(\"[[][]]\")); // true\n        System.out.println(solution.isNested(\"[[]][[\")); // true\n    }\n}"}
{"task_id": "Java/132", "generation": "        Stack<Character> stack = new Stack<>();\n        \n        for(char c : string.toCharArray()) {\n            if(c == '[') {\n                stack.push(c);\n            } else if(c == ']') {\n                if(stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        \n        return stack.size() < string.length() && stack.size() > 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.isNested(\"[[]]\")); // true\n        System.out.println(solution.isNested(\"[]]]]]]][[[[[]\")); // false\n        System.out.println(solution.isNested(\"[][]\")); // false\n        System.out.println(solution.isNested(\"[]\")); // false\n        System.out.println(solution.isNested(\"[[][]]\")); // true\n        System.out.println(solution.isNested(\"[[]][[\")); // true\n    }\n}"}
{"task_id": "Java/132", "generation": "        Stack<Character> stack = new Stack<>();\n        \n        for(char c : string.toCharArray()) {\n            if(c == '[') {\n                stack.push(c);\n            } else if(c == ']') {\n                if(stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        \n        return stack.size() < string.length() && stack.size() > 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.isNested(\"[[]]\")); // true\n        System.out.println(solution.isNested(\"[]]]]]]][[[[[]\")); // false\n        System.out.println(solution.isNested(\"[][]\")); // false\n        System.out.println(solution.isNested(\"[]\")); // false\n        System.out.println(solution.isNested(\"[[][]]\")); // true\n        System.out.println(solution.isNested(\"[[]][[\")); // true\n    }\n}"}
{"task_id": "Java/132", "generation": "        Stack<Character> stack = new Stack<>();\n        \n        for(char c : string.toCharArray()) {\n            if(c == '[') {\n                stack.push(c);\n            } else if(c == ']') {\n                if(stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        \n        return stack.size() < string.length() && stack.size() > 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.isNested(\"[[]]\")); // true\n        System.out.println(solution.isNested(\"[]]]]]]][[[[[]\")); // false\n        System.out.println(solution.isNested(\"[][]\")); // false\n        System.out.println(solution.isNested(\"[]\")); // false\n        System.out.println(solution.isNested(\"[[][]]\")); // true\n        System.out.println(solution.isNested(\"[[]][[\")); // true\n    }\n}"}
{"task_id": "Java/133", "generation": "        int sum = 0;\n        for (Double num : lst) {\n            sum += Math.ceil(num) * Math.ceil(num);\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Double> lst1 = Arrays.asList(1.0, 2.0, 3.0);\n        List<Double> lst2 = Arrays.asList(1.0, 4.0, 9.0);\n        List<Double> lst3 = Arrays.asList(1.0, 3.0, 5.0, 7.0);\n        List<Double> lst4 = Arrays.asList(1.4, 4.2, 0.0);\n        List<Double> lst5 = Arrays.asList(-2.4, 1.0, 1.0);\n\n        System.out.println(solution.sumSquares(lst1)); // Output: 14\n        System.out.println(solution.sumSquares(lst2)); // Output: 98\n        System.out.println(solution.sumSquares(lst3)); // Output: 84\n        System.out.println(solution.sumSquares(lst4)); // Output: 29\n        System.out.println(solution.sumSquares(lst5)); // Output: 6\n    }\n}"}
{"task_id": "Java/133", "generation": "        int sum = 0;\n        for (Double num : lst) {\n            sum += Math.ceil(num) * Math.ceil(num);\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Double> lst1 = Arrays.asList(1.0, 2.0, 3.0);\n        List<Double> lst2 = Arrays.asList(1.0, 4.0, 9.0);\n        List<Double> lst3 = Arrays.asList(1.0, 3.0, 5.0, 7.0);\n        List<Double> lst4 = Arrays.asList(1.4, 4.2, 0.0);\n        List<Double> lst5 = Arrays.asList(-2.4, 1.0, 1.0);\n\n        System.out.println(solution.sumSquares(lst1)); // Output: 14\n        System.out.println(solution.sumSquares(lst2)); // Output: 98\n        System.out.println(solution.sumSquares(lst3)); // Output: 84\n        System.out.println(solution.sumSquares(lst4)); // Output: 29\n        System.out.println(solution.sumSquares(lst5)); // Output: 6\n    }\n}"}
{"task_id": "Java/133", "generation": "        int sum = 0;\n        for (Double num : lst) {\n            sum += Math.ceil(num) * Math.ceil(num);\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Double> lst1 = Arrays.asList(1.0, 2.0, 3.0);\n        List<Double> lst2 = Arrays.asList(1.0, 4.0, 9.0);\n        List<Double> lst3 = Arrays.asList(1.0, 3.0, 5.0, 7.0);\n        List<Double> lst4 = Arrays.asList(1.4, 4.2, 0.0);\n        List<Double> lst5 = Arrays.asList(-2.4, 1.0, 1.0);\n\n        System.out.println(solution.sumSquares(lst1)); // Output: 14\n        System.out.println(solution.sumSquares(lst2)); // Output: 98\n        System.out.println(solution.sumSquares(lst3)); // Output: 84\n        System.out.println(solution.sumSquares(lst4)); // Output: 29\n        System.out.println(solution.sumSquares(lst5)); // Output: 6\n    }\n}"}
{"task_id": "Java/133", "generation": "        int sum = 0;\n        for (Double num : lst) {\n            sum += Math.ceil(num) * Math.ceil(num);\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Double> lst1 = Arrays.asList(1.0, 2.0, 3.0);\n        List<Double> lst2 = Arrays.asList(1.0, 4.0, 9.0);\n        List<Double> lst3 = Arrays.asList(1.0, 3.0, 5.0, 7.0);\n        List<Double> lst4 = Arrays.asList(1.4, 4.2, 0.0);\n        List<Double> lst5 = Arrays.asList(-2.4, 1.0, 1.0);\n\n        System.out.println(solution.sumSquares(lst1)); // Output: 14\n        System.out.println(solution.sumSquares(lst2)); // Output: 98\n        System.out.println(solution.sumSquares(lst3)); // Output: 84\n        System.out.println(solution.sumSquares(lst4)); // Output: 29\n        System.out.println(solution.sumSquares(lst5)); // Output: 6\n    }\n}"}
{"task_id": "Java/133", "generation": "        int sum = 0;\n        for (Double num : lst) {\n            sum += Math.ceil(num) * Math.ceil(num);\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Double> lst1 = Arrays.asList(1.0, 2.0, 3.0);\n        List<Double> lst2 = Arrays.asList(1.0, 4.0, 9.0);\n        List<Double> lst3 = Arrays.asList(1.0, 3.0, 5.0, 7.0);\n        List<Double> lst4 = Arrays.asList(1.4, 4.2, 0.0);\n        List<Double> lst5 = Arrays.asList(-2.4, 1.0, 1.0);\n\n        System.out.println(solution.sumSquares(lst1)); // Output: 14\n        System.out.println(solution.sumSquares(lst2)); // Output: 98\n        System.out.println(solution.sumSquares(lst3)); // Output: 84\n        System.out.println(solution.sumSquares(lst4)); // Output: 29\n        System.out.println(solution.sumSquares(lst5)); // Output: 6\n    }\n}"}
{"task_id": "Java/134", "generation": "        if (txt.isEmpty()) {\n            return false;\n        }\n        \n        char lastChar = txt.charAt(txt.length() - 1);\n        \n        if (!Character.isLetter(lastChar)) {\n            return false;\n        }\n        \n        String[] words = txt.split(\" \");\n        String lastWord = words[words.length - 1];\n        \n        if (lastWord.length() == 1 && Character.isLetter(lastWord.charAt(0))) {\n            return true;\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.checkIfLastCharIsALetter(\"apple pie\")); // false\n        System.out.println(solution.checkIfLastCharIsALetter(\"apple pi e\")); // true\n        System.out.println(solution.checkIfLastCharIsALetter(\"apple pi e \")); // false\n        System.out.println(solution.checkIfLastCharIsALetter(\"\")); // false\n    }\n}"}
{"task_id": "Java/134", "generation": "        if (txt.isEmpty()) {\n            return false;\n        }\n        \n        char lastChar = txt.charAt(txt.length() - 1);\n        \n        if (!Character.isLetter(lastChar)) {\n            return false;\n        }\n        \n        String[] words = txt.split(\" \");\n        String lastWord = words[words.length - 1];\n        \n        if (lastWord.length() == 1 && Character.isLetter(lastWord.charAt(0))) {\n            return true;\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.checkIfLastCharIsALetter(\"apple pie\")); // false\n        System.out.println(solution.checkIfLastCharIsALetter(\"apple pi e\")); // true\n        System.out.println(solution.checkIfLastCharIsALetter(\"apple pi e \")); // false\n        System.out.println(solution.checkIfLastCharIsALetter(\"\")); // false\n    }\n}"}
{"task_id": "Java/134", "generation": "        if (txt.isEmpty()) {\n            return false;\n        }\n        \n        char lastChar = txt.charAt(txt.length() - 1);\n        \n        if (!Character.isLetter(lastChar)) {\n            return false;\n        }\n        \n        String[] words = txt.split(\" \");\n        String lastWord = words[words.length - 1];\n        \n        if (lastWord.length() == 1 && Character.isLetter(lastWord.charAt(0))) {\n            return true;\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.checkIfLastCharIsALetter(\"apple pie\")); // false\n        System.out.println(solution.checkIfLastCharIsALetter(\"apple pi e\")); // true\n        System.out.println(solution.checkIfLastCharIsALetter(\"apple pi e \")); // false\n        System.out.println(solution.checkIfLastCharIsALetter(\"\")); // false\n    }\n}"}
{"task_id": "Java/134", "generation": "        if (txt.isEmpty()) {\n            return false;\n        }\n        \n        char lastChar = txt.charAt(txt.length() - 1);\n        \n        if (!Character.isLetter(lastChar)) {\n            return false;\n        }\n        \n        String[] words = txt.split(\" \");\n        String lastWord = words[words.length - 1];\n        \n        if (lastWord.length() == 1 && Character.isLetter(lastWord.charAt(0))) {\n            return true;\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.checkIfLastCharIsALetter(\"apple pie\")); // false\n        System.out.println(solution.checkIfLastCharIsALetter(\"apple pi e\")); // true\n        System.out.println(solution.checkIfLastCharIsALetter(\"apple pi e \")); // false\n        System.out.println(solution.checkIfLastCharIsALetter(\"\")); // false\n    }\n}"}
{"task_id": "Java/134", "generation": "        if (txt.isEmpty()) {\n            return false;\n        }\n        \n        char lastChar = txt.charAt(txt.length() - 1);\n        \n        if (!Character.isLetter(lastChar)) {\n            return false;\n        }\n        \n        String[] words = txt.split(\" \");\n        String lastWord = words[words.length - 1];\n        \n        if (lastWord.length() == 1 && Character.isLetter(lastWord.charAt(0))) {\n            return true;\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.checkIfLastCharIsALetter(\"apple pie\")); // false\n        System.out.println(solution.checkIfLastCharIsALetter(\"apple pi e\")); // true\n        System.out.println(solution.checkIfLastCharIsALetter(\"apple pi e \")); // false\n        System.out.println(solution.checkIfLastCharIsALetter(\"\")); // false\n    }\n}"}
{"task_id": "Java/135", "generation": "        int index = -1;\n        \n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                index = i - 1;\n            }\n        }\n        \n        return index;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.canArrange(Arrays.asList(1, 2, 4, 3, 5))); // Output should be 3\n        System.out.println(solution.canArrange(Arrays.asList(1, 2, 3))); // Output should be -1\n    }\n}"}
{"task_id": "Java/135", "generation": "        int index = -1;\n        \n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                index = i - 1;\n            }\n        }\n        \n        return index;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.canArrange(Arrays.asList(1, 2, 4, 3, 5))); // Output should be 3\n        System.out.println(solution.canArrange(Arrays.asList(1, 2, 3))); // Output should be -1\n    }\n}"}
{"task_id": "Java/135", "generation": "        int index = -1;\n        \n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                index = i - 1;\n            }\n        }\n        \n        return index;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.canArrange(Arrays.asList(1, 2, 4, 3, 5))); // Output should be 3\n        System.out.println(solution.canArrange(Arrays.asList(1, 2, 3))); // Output should be -1\n    }\n}"}
{"task_id": "Java/135", "generation": "        int index = -1;\n        \n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                index = i - 1;\n            }\n        }\n        \n        return index;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.canArrange(Arrays.asList(1, 2, 4, 3, 5))); // Output should be 3\n        System.out.println(solution.canArrange(Arrays.asList(1, 2, 3))); // Output should be -1\n    }\n}"}
{"task_id": "Java/135", "generation": "        int index = -1;\n        \n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                index = i - 1;\n            }\n        }\n        \n        return index;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.canArrange(Arrays.asList(1, 2, 4, 3, 5))); // Output should be 3\n        System.out.println(solution.canArrange(Arrays.asList(1, 2, 3))); // Output should be -1\n    }\n}"}
{"task_id": "Java/136", "generation": "        List<Integer> negativeIntegers = new ArrayList<>();\n        List<Integer> positiveIntegers = new ArrayList<>();\n\n        for (Integer num : lst) {\n            if (num < 0) {\n                negativeIntegers.add(num);\n            } else if (num > 0) {\n                positiveIntegers.add(num);\n            }\n        }\n\n        Optional<Integer> largestNegative = negativeIntegers.isEmpty() ? Optional.empty() : Optional.of(Collections.max(negativeIntegers));\n        Optional<Integer> smallestPositive = positiveIntegers.isEmpty() ? Optional.empty() : Optional.of(Collections.min(positiveIntegers));\n\n        return Arrays.asList(largestNegative, smallestPositive);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7))); // (Optional.empty(), Optional.of(1))\n        System.out.println(solution.largestSmallestIntegers(Arrays.asList())); // (Optional.empty(), Optional.empty())\n        System.out.println(solution.largestSmallestIntegers(Arrays.asList(0))); // (Optional.empty(), Optional.empty())\n    }\n}"}
{"task_id": "Java/136", "generation": "        List<Integer> negativeIntegers = new ArrayList<>();\n        List<Integer> positiveIntegers = new ArrayList<>();\n\n        for (Integer num : lst) {\n            if (num < 0) {\n                negativeIntegers.add(num);\n            } else if (num > 0) {\n                positiveIntegers.add(num);\n            }\n        }\n\n        Optional<Integer> largestNegative = negativeIntegers.isEmpty() ? Optional.empty() : Optional.of(Collections.max(negativeIntegers));\n        Optional<Integer> smallestPositive = positiveIntegers.isEmpty() ? Optional.empty() : Optional.of(Collections.min(positiveIntegers));\n\n        return Arrays.asList(largestNegative, smallestPositive);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7))); // (Optional.empty(), Optional.of(1))\n        System.out.println(solution.largestSmallestIntegers(Arrays.asList())); // (Optional.empty(), Optional.empty())\n        System.out.println(solution.largestSmallestIntegers(Arrays.asList(0))); // (Optional.empty(), Optional.empty())\n    }\n}"}
{"task_id": "Java/136", "generation": "        List<Integer> negativeIntegers = new ArrayList<>();\n        List<Integer> positiveIntegers = new ArrayList<>();\n\n        for (Integer num : lst) {\n            if (num < 0) {\n                negativeIntegers.add(num);\n            } else if (num > 0) {\n                positiveIntegers.add(num);\n            }\n        }\n\n        Optional<Integer> largestNegative = negativeIntegers.isEmpty() ? Optional.empty() : Optional.of(Collections.max(negativeIntegers));\n        Optional<Integer> smallestPositive = positiveIntegers.isEmpty() ? Optional.empty() : Optional.of(Collections.min(positiveIntegers));\n\n        return Arrays.asList(largestNegative, smallestPositive);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7))); // (Optional.empty(), Optional.of(1))\n        System.out.println(solution.largestSmallestIntegers(Arrays.asList())); // (Optional.empty(), Optional.empty())\n        System.out.println(solution.largestSmallestIntegers(Arrays.asList(0))); // (Optional.empty(), Optional.empty())\n    }\n}"}
{"task_id": "Java/136", "generation": "        List<Integer> negativeIntegers = new ArrayList<>();\n        List<Integer> positiveIntegers = new ArrayList<>();\n\n        for (Integer num : lst) {\n            if (num < 0) {\n                negativeIntegers.add(num);\n            } else if (num > 0) {\n                positiveIntegers.add(num);\n            }\n        }\n\n        Optional<Integer> largestNegative = negativeIntegers.isEmpty() ? Optional.empty() : Optional.of(Collections.max(negativeIntegers));\n        Optional<Integer> smallestPositive = positiveIntegers.isEmpty() ? Optional.empty() : Optional.of(Collections.min(positiveIntegers));\n\n        return Arrays.asList(largestNegative, smallestPositive);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7))); // (Optional.empty(), Optional.of(1))\n        System.out.println(solution.largestSmallestIntegers(Arrays.asList())); // (Optional.empty(), Optional.empty())\n        System.out.println(solution.largestSmallestIntegers(Arrays.asList(0))); // (Optional.empty(), Optional.empty())\n    }\n}"}
{"task_id": "Java/136", "generation": "        List<Integer> negativeIntegers = new ArrayList<>();\n        List<Integer> positiveIntegers = new ArrayList<>();\n\n        for (Integer num : lst) {\n            if (num < 0) {\n                negativeIntegers.add(num);\n            } else if (num > 0) {\n                positiveIntegers.add(num);\n            }\n        }\n\n        Optional<Integer> largestNegative = negativeIntegers.isEmpty() ? Optional.empty() : Optional.of(Collections.max(negativeIntegers));\n        Optional<Integer> smallestPositive = positiveIntegers.isEmpty() ? Optional.empty() : Optional.of(Collections.min(positiveIntegers));\n\n        return Arrays.asList(largestNegative, smallestPositive);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7))); // (Optional.empty(), Optional.of(1))\n        System.out.println(solution.largestSmallestIntegers(Arrays.asList())); // (Optional.empty(), Optional.empty())\n        System.out.println(solution.largestSmallestIntegers(Arrays.asList(0))); // (Optional.empty(), Optional.empty())\n    }\n}"}
{"task_id": "Java/137", "generation": "        if (a instanceof Integer && b instanceof Integer) {\n            if ((Integer) a > (Integer) b) {\n                return Optional.of(a);\n            } else if ((Integer) b > (Integer) a) {\n                return Optional.of(b);\n            }\n        } else if (a instanceof Float && b instanceof Float) {\n            if ((Float) a > (Float) b) {\n                return Optional.of(a);\n            } else if ((Float) b > (Float) a) {\n                return Optional.of(b);\n            }\n        } else if (a instanceof String && b instanceof String) {\n            double numA = Double.parseDouble(((String) a).replace(\",\", \".\"));\n            double numB = Double.parseDouble(((String) b).replace(\",\", \".\"));\n            if (numA > numB) {\n                return Optional.of(a);\n            } else if (numB > numA) {\n                return Optional.of(b);\n            }\n        }\n        return Optional.empty();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.compareOne(1, 2.5)); // Optional[2.5]\n        System.out.println(solution.compareOne(1, \"2,3\")); // Optional[2,3]\n        System.out.println(solution.compareOne(\"5,1\", \"6\")); // Optional[6]\n        System.out.println(solution.compareOne(\"1\", 1)); // Optional.empty()\n    }\n}"}
{"task_id": "Java/137", "generation": "        if (a instanceof Integer && b instanceof Integer) {\n            if ((Integer) a > (Integer) b) {\n                return Optional.of(a);\n            } else if ((Integer) b > (Integer) a) {\n                return Optional.of(b);\n            }\n        } else if (a instanceof Float && b instanceof Float) {\n            if ((Float) a > (Float) b) {\n                return Optional.of(a);\n            } else if ((Float) b > (Float) a) {\n                return Optional.of(b);\n            }\n        } else if (a instanceof String && b instanceof String) {\n            double numA = Double.parseDouble(((String) a).replace(\",\", \".\"));\n            double numB = Double.parseDouble(((String) b).replace(\",\", \".\"));\n            if (numA > numB) {\n                return Optional.of(a);\n            } else if (numB > numA) {\n                return Optional.of(b);\n            }\n        }\n        return Optional.empty();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.compareOne(1, 2.5)); // Optional[2.5]\n        System.out.println(solution.compareOne(1, \"2,3\")); // Optional[2,3]\n        System.out.println(solution.compareOne(\"5,1\", \"6\")); // Optional[6]\n        System.out.println(solution.compareOne(\"1\", 1)); // Optional.empty()\n    }\n}"}
{"task_id": "Java/137", "generation": "        if (a instanceof Integer && b instanceof Integer) {\n            if ((Integer) a > (Integer) b) {\n                return Optional.of(a);\n            } else if ((Integer) b > (Integer) a) {\n                return Optional.of(b);\n            }\n        } else if (a instanceof Float && b instanceof Float) {\n            if ((Float) a > (Float) b) {\n                return Optional.of(a);\n            } else if ((Float) b > (Float) a) {\n                return Optional.of(b);\n            }\n        } else if (a instanceof String && b instanceof String) {\n            double numA = Double.parseDouble(((String) a).replace(\",\", \".\"));\n            double numB = Double.parseDouble(((String) b).replace(\",\", \".\"));\n            if (numA > numB) {\n                return Optional.of(a);\n            } else if (numB > numA) {\n                return Optional.of(b);\n            }\n        }\n        return Optional.empty();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.compareOne(1, 2.5)); // Optional[2.5]\n        System.out.println(solution.compareOne(1, \"2,3\")); // Optional[2,3]\n        System.out.println(solution.compareOne(\"5,1\", \"6\")); // Optional[6]\n        System.out.println(solution.compareOne(\"1\", 1)); // Optional.empty()\n    }\n}"}
{"task_id": "Java/137", "generation": "        if (a instanceof Integer && b instanceof Integer) {\n            if ((Integer) a > (Integer) b) {\n                return Optional.of(a);\n            } else if ((Integer) b > (Integer) a) {\n                return Optional.of(b);\n            }\n        } else if (a instanceof Float && b instanceof Float) {\n            if ((Float) a > (Float) b) {\n                return Optional.of(a);\n            } else if ((Float) b > (Float) a) {\n                return Optional.of(b);\n            }\n        } else if (a instanceof String && b instanceof String) {\n            double numA = Double.parseDouble(((String) a).replace(\",\", \".\"));\n            double numB = Double.parseDouble(((String) b).replace(\",\", \".\"));\n            if (numA > numB) {\n                return Optional.of(a);\n            } else if (numB > numA) {\n                return Optional.of(b);\n            }\n        }\n        return Optional.empty();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.compareOne(1, 2.5)); // Optional[2.5]\n        System.out.println(solution.compareOne(1, \"2,3\")); // Optional[2,3]\n        System.out.println(solution.compareOne(\"5,1\", \"6\")); // Optional[6]\n        System.out.println(solution.compareOne(\"1\", 1)); // Optional.empty()\n    }\n}"}
{"task_id": "Java/137", "generation": "        if (a instanceof Integer && b instanceof Integer) {\n            if ((Integer) a > (Integer) b) {\n                return Optional.of(a);\n            } else if ((Integer) b > (Integer) a) {\n                return Optional.of(b);\n            }\n        } else if (a instanceof Float && b instanceof Float) {\n            if ((Float) a > (Float) b) {\n                return Optional.of(a);\n            } else if ((Float) b > (Float) a) {\n                return Optional.of(b);\n            }\n        } else if (a instanceof String && b instanceof String) {\n            double numA = Double.parseDouble(((String) a).replace(\",\", \".\"));\n            double numB = Double.parseDouble(((String) b).replace(\",\", \".\"));\n            if (numA > numB) {\n                return Optional.of(a);\n            } else if (numB > numA) {\n                return Optional.of(b);\n            }\n        }\n        return Optional.empty();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.compareOne(1, 2.5)); // Optional[2.5]\n        System.out.println(solution.compareOne(1, \"2,3\")); // Optional[2,3]\n        System.out.println(solution.compareOne(\"5,1\", \"6\")); // Optional[6]\n        System.out.println(solution.compareOne(\"1\", 1)); // Optional.empty()\n    }\n}"}
{"task_id": "Java/138", "generation": "        // Check if n is less than 8 or odd\n        if (n < 8 || n % 2 != 0) {\n            return false;\n        }\n        \n        // Check if n can be written as the sum of 4 positive even numbers\n        for (int i = 1; i <= n / 2; i += 2) {\n            for (int j = 1; j <= n / 2; j += 2) {\n                for (int k = 1; k <= n / 2; k += 2) {\n                    for (int l = 1; l <= n / 2; l += 2) {\n                        if (i + j + k + l == n) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.isEqualToSumEven(4)); // false\n        System.out.println(solution.isEqualToSumEven(6)); // false\n        System.out.println(solution.isEqualToSumEven(8)); // true\n    }\n}"}
{"task_id": "Java/138", "generation": "        // Check if n is less than 8 or odd\n        if (n < 8 || n % 2 != 0) {\n            return false;\n        }\n        \n        // Check if n can be written as the sum of 4 positive even numbers\n        for (int i = 1; i <= n / 2; i += 2) {\n            for (int j = 1; j <= n / 2; j += 2) {\n                for (int k = 1; k <= n / 2; k += 2) {\n                    for (int l = 1; l <= n / 2; l += 2) {\n                        if (i + j + k + l == n) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.isEqualToSumEven(4)); // false\n        System.out.println(solution.isEqualToSumEven(6)); // false\n        System.out.println(solution.isEqualToSumEven(8)); // true\n    }\n}"}
{"task_id": "Java/138", "generation": "        // Check if n is less than 8 or odd\n        if (n < 8 || n % 2 != 0) {\n            return false;\n        }\n        \n        // Check if n can be written as the sum of 4 positive even numbers\n        for (int i = 1; i <= n / 2; i += 2) {\n            for (int j = 1; j <= n / 2; j += 2) {\n                for (int k = 1; k <= n / 2; k += 2) {\n                    for (int l = 1; l <= n / 2; l += 2) {\n                        if (i + j + k + l == n) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.isEqualToSumEven(4)); // false\n        System.out.println(solution.isEqualToSumEven(6)); // false\n        System.out.println(solution.isEqualToSumEven(8)); // true\n    }\n}"}
{"task_id": "Java/138", "generation": "        // Check if n is less than 8 or odd\n        if (n < 8 || n % 2 != 0) {\n            return false;\n        }\n        \n        // Check if n can be written as the sum of 4 positive even numbers\n        for (int i = 1; i <= n / 2; i += 2) {\n            for (int j = 1; j <= n / 2; j += 2) {\n                for (int k = 1; k <= n / 2; k += 2) {\n                    for (int l = 1; l <= n / 2; l += 2) {\n                        if (i + j + k + l == n) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.isEqualToSumEven(4)); // false\n        System.out.println(solution.isEqualToSumEven(6)); // false\n        System.out.println(solution.isEqualToSumEven(8)); // true\n    }\n}"}
{"task_id": "Java/138", "generation": "        // Check if n is less than 8 or odd\n        if (n < 8 || n % 2 != 0) {\n            return false;\n        }\n        \n        // Check if n can be written as the sum of 4 positive even numbers\n        for (int i = 1; i <= n / 2; i += 2) {\n            for (int j = 1; j <= n / 2; j += 2) {\n                for (int k = 1; k <= n / 2; k += 2) {\n                    for (int l = 1; l <= n / 2; l += 2) {\n                        if (i + j + k + l == n) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.isEqualToSumEven(4)); // false\n        System.out.println(solution.isEqualToSumEven(6)); // false\n        System.out.println(solution.isEqualToSumEven(8)); // true\n    }\n}"}
{"task_id": "Java/139", "generation": "        long result = 1;\n        for (int i = n; i > 0; i--) {\n            long factorial = 1;\n            for (int j = i; j > 0; j--) {\n                factorial *= j;\n            }\n            result *= factorial;\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.specialFactorial(4)); // Output should be 288\n    }\n}"}
{"task_id": "Java/139", "generation": "        long result = 1;\n        for (int i = n; i > 0; i--) {\n            long factorial = 1;\n            for (int j = i; j > 0; j--) {\n                factorial *= j;\n            }\n            result *= factorial;\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.specialFactorial(4)); // Output should be 288\n    }\n}"}
{"task_id": "Java/139", "generation": "        long result = 1;\n        for (int i = n; i > 0; i--) {\n            long factorial = 1;\n            for (int j = i; j > 0; j--) {\n                factorial *= j;\n            }\n            result *= factorial;\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.specialFactorial(4)); // Output should be 288\n    }\n}"}
{"task_id": "Java/139", "generation": "        long result = 1;\n        for (int i = n; i > 0; i--) {\n            long factorial = 1;\n            for (int j = i; j > 0; j--) {\n                factorial *= j;\n            }\n            result *= factorial;\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.specialFactorial(4)); // Output should be 288\n    }\n}"}
{"task_id": "Java/139", "generation": "        long result = 1;\n        for (int i = n; i > 0; i--) {\n            long factorial = 1;\n            for (int j = i; j > 0; j--) {\n                factorial *= j;\n            }\n            result *= factorial;\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.specialFactorial(4)); // Output should be 288\n    }\n}"}
{"task_id": "Java/140", "generation": "        StringBuilder sb = new StringBuilder();\n        int consecutiveSpaces = 0;\n\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n\n            if (c == ' ') {\n                consecutiveSpaces++;\n                if (consecutiveSpaces > 2) {\n                    sb.append(\"-\");\n                } else {\n                    sb.append(\"_\");\n                }\n            } else {\n                sb.append(c);\n                consecutiveSpaces = 0;\n            }\n        }\n\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.fixSpaces(\"Example\")); // \"Example\"\n        System.out.println(solution.fixSpaces(\"Example 1\")); // \"Example_1\"\n        System.out.println(solution.fixSpaces(\" Example 2\")); // \"_Example_2\"\n        System.out.println(solution.fixSpaces(\" Example   3\")); // \"_Example-3\"\n    }\n}"}
{"task_id": "Java/140", "generation": "        StringBuilder sb = new StringBuilder();\n        int consecutiveSpaces = 0;\n\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n\n            if (c == ' ') {\n                consecutiveSpaces++;\n                if (consecutiveSpaces > 2) {\n                    sb.append(\"-\");\n                } else {\n                    sb.append(\"_\");\n                }\n            } else {\n                sb.append(c);\n                consecutiveSpaces = 0;\n            }\n        }\n\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.fixSpaces(\"Example\")); // \"Example\"\n        System.out.println(solution.fixSpaces(\"Example 1\")); // \"Example_1\"\n        System.out.println(solution.fixSpaces(\" Example 2\")); // \"_Example_2\"\n        System.out.println(solution.fixSpaces(\" Example   3\")); // \"_Example-3\"\n    }\n}"}
{"task_id": "Java/140", "generation": "        StringBuilder sb = new StringBuilder();\n        int consecutiveSpaces = 0;\n\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n\n            if (c == ' ') {\n                consecutiveSpaces++;\n                if (consecutiveSpaces > 2) {\n                    sb.append(\"-\");\n                } else {\n                    sb.append(\"_\");\n                }\n            } else {\n                sb.append(c);\n                consecutiveSpaces = 0;\n            }\n        }\n\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.fixSpaces(\"Example\")); // \"Example\"\n        System.out.println(solution.fixSpaces(\"Example 1\")); // \"Example_1\"\n        System.out.println(solution.fixSpaces(\" Example 2\")); // \"_Example_2\"\n        System.out.println(solution.fixSpaces(\" Example   3\")); // \"_Example-3\"\n    }\n}"}
{"task_id": "Java/140", "generation": "        StringBuilder sb = new StringBuilder();\n        int consecutiveSpaces = 0;\n\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n\n            if (c == ' ') {\n                consecutiveSpaces++;\n                if (consecutiveSpaces > 2) {\n                    sb.append(\"-\");\n                } else {\n                    sb.append(\"_\");\n                }\n            } else {\n                sb.append(c);\n                consecutiveSpaces = 0;\n            }\n        }\n\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.fixSpaces(\"Example\")); // \"Example\"\n        System.out.println(solution.fixSpaces(\"Example 1\")); // \"Example_1\"\n        System.out.println(solution.fixSpaces(\" Example 2\")); // \"_Example_2\"\n        System.out.println(solution.fixSpaces(\" Example   3\")); // \"_Example-3\"\n    }\n}"}
{"task_id": "Java/140", "generation": "        StringBuilder sb = new StringBuilder();\n        int consecutiveSpaces = 0;\n\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n\n            if (c == ' ') {\n                consecutiveSpaces++;\n                if (consecutiveSpaces > 2) {\n                    sb.append(\"-\");\n                } else {\n                    sb.append(\"_\");\n                }\n            } else {\n                sb.append(c);\n                consecutiveSpaces = 0;\n            }\n        }\n\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.fixSpaces(\"Example\")); // \"Example\"\n        System.out.println(solution.fixSpaces(\"Example 1\")); // \"Example_1\"\n        System.out.println(solution.fixSpaces(\" Example 2\")); // \"_Example_2\"\n        System.out.println(solution.fixSpaces(\" Example   3\")); // \"_Example-3\"\n    }\n}"}
{"task_id": "Java/141", "generation": "        // Check if the file name contains more than three digits\n        int digitCount = 0;\n        for (char c : file_name.toCharArray()) {\n            if (Character.isDigit(c)) {\n                digitCount++;\n            }\n        }\n        if (digitCount > 3) {\n            return \"No\";\n        }\n        \n        // Check if the file name contains exactly one dot\n        if (file_name.indexOf('.') == -1 || file_name.indexOf('.') != file_name.lastIndexOf('.')) {\n            return \"No\";\n        }\n        \n        // Split the file name into two parts based on the dot\n        String[] parts = file_name.split(\"\\\\.\");\n        if (parts.length != 2) {\n            return \"No\";\n        }\n        \n        // Check if the substring before the dot starts with a letter\n        if (!Character.isLetter(parts[0].charAt(0))) {\n            return \"No\";\n        }\n        \n        // Check if the substring after the dot is one of [\"txt\", \"exe\", \"dll\"]\n        if (!Arrays.asList(\"txt\", \"exe\", \"dll\").contains(parts[1])) {\n            return \"No\";\n        }\n        \n        return \"Yes\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.filenameCheck(\"example.txt\")); // => \"Yes\"\n        System.out.println(solution.filenameCheck(\"1example.dll\")); // => \"No\"\n    }\n}"}
{"task_id": "Java/141", "generation": "        // Check if the file name contains more than three digits\n        int digitCount = 0;\n        for (char c : file_name.toCharArray()) {\n            if (Character.isDigit(c)) {\n                digitCount++;\n            }\n        }\n        if (digitCount > 3) {\n            return \"No\";\n        }\n        \n        // Check if the file name contains exactly one dot\n        if (file_name.indexOf('.') == -1 || file_name.indexOf('.') != file_name.lastIndexOf('.')) {\n            return \"No\";\n        }\n        \n        // Split the file name into two parts based on the dot\n        String[] parts = file_name.split(\"\\\\.\");\n        if (parts.length != 2) {\n            return \"No\";\n        }\n        \n        // Check if the substring before the dot starts with a letter\n        if (!Character.isLetter(parts[0].charAt(0))) {\n            return \"No\";\n        }\n        \n        // Check if the substring after the dot is one of [\"txt\", \"exe\", \"dll\"]\n        if (!Arrays.asList(\"txt\", \"exe\", \"dll\").contains(parts[1])) {\n            return \"No\";\n        }\n        \n        return \"Yes\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.filenameCheck(\"example.txt\")); // => \"Yes\"\n        System.out.println(solution.filenameCheck(\"1example.dll\")); // => \"No\"\n    }\n}"}
{"task_id": "Java/141", "generation": "        // Check if the file name contains more than three digits\n        int digitCount = 0;\n        for (char c : file_name.toCharArray()) {\n            if (Character.isDigit(c)) {\n                digitCount++;\n            }\n        }\n        if (digitCount > 3) {\n            return \"No\";\n        }\n        \n        // Check if the file name contains exactly one dot\n        if (file_name.indexOf('.') == -1 || file_name.indexOf('.') != file_name.lastIndexOf('.')) {\n            return \"No\";\n        }\n        \n        // Split the file name into two parts based on the dot\n        String[] parts = file_name.split(\"\\\\.\");\n        if (parts.length != 2) {\n            return \"No\";\n        }\n        \n        // Check if the substring before the dot starts with a letter\n        if (!Character.isLetter(parts[0].charAt(0))) {\n            return \"No\";\n        }\n        \n        // Check if the substring after the dot is one of [\"txt\", \"exe\", \"dll\"]\n        if (!Arrays.asList(\"txt\", \"exe\", \"dll\").contains(parts[1])) {\n            return \"No\";\n        }\n        \n        return \"Yes\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.filenameCheck(\"example.txt\")); // => \"Yes\"\n        System.out.println(solution.filenameCheck(\"1example.dll\")); // => \"No\"\n    }\n}"}
{"task_id": "Java/141", "generation": "        // Check if the file name contains more than three digits\n        int digitCount = 0;\n        for (char c : file_name.toCharArray()) {\n            if (Character.isDigit(c)) {\n                digitCount++;\n            }\n        }\n        if (digitCount > 3) {\n            return \"No\";\n        }\n        \n        // Check if the file name contains exactly one dot\n        if (file_name.indexOf('.') == -1 || file_name.indexOf('.') != file_name.lastIndexOf('.')) {\n            return \"No\";\n        }\n        \n        // Split the file name into two parts based on the dot\n        String[] parts = file_name.split(\"\\\\.\");\n        if (parts.length != 2) {\n            return \"No\";\n        }\n        \n        // Check if the substring before the dot starts with a letter\n        if (!Character.isLetter(parts[0].charAt(0))) {\n            return \"No\";\n        }\n        \n        // Check if the substring after the dot is one of [\"txt\", \"exe\", \"dll\"]\n        if (!Arrays.asList(\"txt\", \"exe\", \"dll\").contains(parts[1])) {\n            return \"No\";\n        }\n        \n        return \"Yes\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.filenameCheck(\"example.txt\")); // => \"Yes\"\n        System.out.println(solution.filenameCheck(\"1example.dll\")); // => \"No\"\n    }\n}"}
{"task_id": "Java/141", "generation": "        // Check if the file name contains more than three digits\n        int digitCount = 0;\n        for (char c : file_name.toCharArray()) {\n            if (Character.isDigit(c)) {\n                digitCount++;\n            }\n        }\n        if (digitCount > 3) {\n            return \"No\";\n        }\n        \n        // Check if the file name contains exactly one dot\n        if (file_name.indexOf('.') == -1 || file_name.indexOf('.') != file_name.lastIndexOf('.')) {\n            return \"No\";\n        }\n        \n        // Split the file name into two parts based on the dot\n        String[] parts = file_name.split(\"\\\\.\");\n        if (parts.length != 2) {\n            return \"No\";\n        }\n        \n        // Check if the substring before the dot starts with a letter\n        if (!Character.isLetter(parts[0].charAt(0))) {\n            return \"No\";\n        }\n        \n        // Check if the substring after the dot is one of [\"txt\", \"exe\", \"dll\"]\n        if (!Arrays.asList(\"txt\", \"exe\", \"dll\").contains(parts[1])) {\n            return \"No\";\n        }\n        \n        return \"Yes\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.filenameCheck(\"example.txt\")); // => \"Yes\"\n        System.out.println(solution.filenameCheck(\"1example.dll\")); // => \"No\"\n    }\n}"}
{"task_id": "Java/142", "generation": "        int sum = 0;\n        \n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n            } else {\n                sum += lst.get(i);\n            }\n        }\n        \n        return sum;\n    }\n}"}
{"task_id": "Java/142", "generation": "        int sum = 0;\n        \n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n            } else {\n                sum += lst.get(i);\n            }\n        }\n        \n        return sum;\n    }\n}"}
{"task_id": "Java/142", "generation": "        int sum = 0;\n        \n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n            } else {\n                sum += lst.get(i);\n            }\n        }\n        \n        return sum;\n    }\n}"}
{"task_id": "Java/142", "generation": "        int sum = 0;\n        \n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n            } else {\n                sum += lst.get(i);\n            }\n        }\n        \n        return sum;\n    }\n}"}
{"task_id": "Java/142", "generation": "        int sum = 0;\n        \n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n            } else {\n                sum += lst.get(i);\n            }\n        }\n        \n        return sum;\n    }\n}"}
{"task_id": "Java/143", "generation": "        // Create a list to store the words with prime lengths\n        List<String> primeLengthWords = new ArrayList<>();\n\n        // Split the sentence into words\n        String[] words = sentence.split(\" \");\n\n        // Check if the length of each word is prime\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                primeLengthWords.add(word);\n            }\n        }\n\n        // Join the prime length words into a single string\n        return String.join(\" \", primeLengthWords);\n    }\n\n    // Helper function to check if a number is prime\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.wordsInSentence(\"This is a test\")); // Output: \"is\"\n        System.out.println(solution.wordsInSentence(\"lets go for swimming\")); // Output: \"go for\"\n    }\n}"}
{"task_id": "Java/143", "generation": "        // Create a list to store the words with prime lengths\n        List<String> primeLengthWords = new ArrayList<>();\n\n        // Split the sentence into words\n        String[] words = sentence.split(\" \");\n\n        // Check if the length of each word is prime\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                primeLengthWords.add(word);\n            }\n        }\n\n        // Join the prime length words into a single string\n        return String.join(\" \", primeLengthWords);\n    }\n\n    // Helper function to check if a number is prime\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.wordsInSentence(\"This is a test\")); // Output: \"is\"\n        System.out.println(solution.wordsInSentence(\"lets go for swimming\")); // Output: \"go for\"\n    }\n}"}
{"task_id": "Java/143", "generation": "        // Create a list to store the words with prime lengths\n        List<String> primeLengthWords = new ArrayList<>();\n\n        // Split the sentence into words\n        String[] words = sentence.split(\" \");\n\n        // Check if the length of each word is prime\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                primeLengthWords.add(word);\n            }\n        }\n\n        // Join the prime length words into a single string\n        return String.join(\" \", primeLengthWords);\n    }\n\n    // Helper function to check if a number is prime\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.wordsInSentence(\"This is a test\")); // Output: \"is\"\n        System.out.println(solution.wordsInSentence(\"lets go for swimming\")); // Output: \"go for\"\n    }\n}"}
{"task_id": "Java/143", "generation": "        // Create a list to store the words with prime lengths\n        List<String> primeLengthWords = new ArrayList<>();\n\n        // Split the sentence into words\n        String[] words = sentence.split(\" \");\n\n        // Check if the length of each word is prime\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                primeLengthWords.add(word);\n            }\n        }\n\n        // Join the prime length words into a single string\n        return String.join(\" \", primeLengthWords);\n    }\n\n    // Helper function to check if a number is prime\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.wordsInSentence(\"This is a test\")); // Output: \"is\"\n        System.out.println(solution.wordsInSentence(\"lets go for swimming\")); // Output: \"go for\"\n    }\n}"}
{"task_id": "Java/143", "generation": "        // Create a list to store the words with prime lengths\n        List<String> primeLengthWords = new ArrayList<>();\n\n        // Split the sentence into words\n        String[] words = sentence.split(\" \");\n\n        // Check if the length of each word is prime\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                primeLengthWords.add(word);\n            }\n        }\n\n        // Join the prime length words into a single string\n        return String.join(\" \", primeLengthWords);\n    }\n\n    // Helper function to check if a number is prime\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.wordsInSentence(\"This is a test\")); // Output: \"is\"\n        System.out.println(solution.wordsInSentence(\"lets go for swimming\")); // Output: \"go for\"\n    }\n}"}
{"task_id": "Java/144", "generation": "        // Parse the fractions\n        String[] xParts = x.split(\"/\");\n        String[] nParts = n.split(\"/\");\n        \n        int xNumerator = Integer.parseInt(xParts[0]);\n        int xDenominator = Integer.parseInt(xParts[1]);\n        \n        int nNumerator = Integer.parseInt(nParts[0]);\n        int nDenominator = Integer.parseInt(nParts[1]);\n        \n        // Calculate the result of x * n\n        int resultNumerator = xNumerator * nNumerator;\n        int resultDenominator = xDenominator * nDenominator;\n        \n        // Check if the result is a whole number\n        return resultDenominator % resultNumerator == 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.simplify(\"1/5\", \"5/1\")); // true\n        System.out.println(solution.simplify(\"1/6\", \"2/1\")); // false\n        System.out.println(solution.simplify(\"7/10\", \"10/2\")); // false\n    }\n}"}
{"task_id": "Java/144", "generation": "        // Parse the fractions\n        String[] xParts = x.split(\"/\");\n        String[] nParts = n.split(\"/\");\n        \n        int xNumerator = Integer.parseInt(xParts[0]);\n        int xDenominator = Integer.parseInt(xParts[1]);\n        \n        int nNumerator = Integer.parseInt(nParts[0]);\n        int nDenominator = Integer.parseInt(nParts[1]);\n        \n        // Calculate the result of x * n\n        int resultNumerator = xNumerator * nNumerator;\n        int resultDenominator = xDenominator * nDenominator;\n        \n        // Check if the result is a whole number\n        return resultDenominator % resultNumerator == 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.simplify(\"1/5\", \"5/1\")); // true\n        System.out.println(solution.simplify(\"1/6\", \"2/1\")); // false\n        System.out.println(solution.simplify(\"7/10\", \"10/2\")); // false\n    }\n}"}
{"task_id": "Java/144", "generation": "        // Parse the fractions\n        String[] xParts = x.split(\"/\");\n        String[] nParts = n.split(\"/\");\n        \n        int xNumerator = Integer.parseInt(xParts[0]);\n        int xDenominator = Integer.parseInt(xParts[1]);\n        \n        int nNumerator = Integer.parseInt(nParts[0]);\n        int nDenominator = Integer.parseInt(nParts[1]);\n        \n        // Calculate the result of x * n\n        int resultNumerator = xNumerator * nNumerator;\n        int resultDenominator = xDenominator * nDenominator;\n        \n        // Check if the result is a whole number\n        return resultDenominator % resultNumerator == 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.simplify(\"1/5\", \"5/1\")); // true\n        System.out.println(solution.simplify(\"1/6\", \"2/1\")); // false\n        System.out.println(solution.simplify(\"7/10\", \"10/2\")); // false\n    }\n}"}
{"task_id": "Java/144", "generation": "        // Parse the fractions\n        String[] xParts = x.split(\"/\");\n        String[] nParts = n.split(\"/\");\n        \n        int xNumerator = Integer.parseInt(xParts[0]);\n        int xDenominator = Integer.parseInt(xParts[1]);\n        \n        int nNumerator = Integer.parseInt(nParts[0]);\n        int nDenominator = Integer.parseInt(nParts[1]);\n        \n        // Calculate the result of x * n\n        int resultNumerator = xNumerator * nNumerator;\n        int resultDenominator = xDenominator * nDenominator;\n        \n        // Check if the result is a whole number\n        return resultDenominator % resultNumerator == 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.simplify(\"1/5\", \"5/1\")); // true\n        System.out.println(solution.simplify(\"1/6\", \"2/1\")); // false\n        System.out.println(solution.simplify(\"7/10\", \"10/2\")); // false\n    }\n}"}
{"task_id": "Java/144", "generation": "        // Parse the fractions\n        String[] xParts = x.split(\"/\");\n        String[] nParts = n.split(\"/\");\n        \n        int xNumerator = Integer.parseInt(xParts[0]);\n        int xDenominator = Integer.parseInt(xParts[1]);\n        \n        int nNumerator = Integer.parseInt(nParts[0]);\n        int nDenominator = Integer.parseInt(nParts[1]);\n        \n        // Calculate the result of x * n\n        int resultNumerator = xNumerator * nNumerator;\n        int resultDenominator = xDenominator * nDenominator;\n        \n        // Check if the result is a whole number\n        return resultDenominator % resultNumerator == 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.simplify(\"1/5\", \"5/1\")); // true\n        System.out.println(solution.simplify(\"1/6\", \"2/1\")); // false\n        System.out.println(solution.simplify(\"7/10\", \"10/2\")); // false\n    }\n}"}
{"task_id": "Java/145", "generation": "        if (nums == null || nums.isEmpty()) {\n            return new ArrayList<>();\n        }\n        \n        Collections.sort(nums, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer num1, Integer num2) {\n                int sum1 = getSumOfDigits(num1);\n                int sum2 = getSumOfDigits(num2);\n                \n                if (sum1 == sum2) {\n                    return nums.indexOf(num1) - nums.indexOf(num2);\n                }\n                \n                return sum1 - sum2;\n            }\n        });\n        \n        return nums;\n    }\n    \n    private int getSumOfDigits(int num) {\n        int sum = 0;\n        num = Math.abs(num);\n        \n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        \n        return sum;\n    }\n}"}
{"task_id": "Java/145", "generation": "        if (nums == null || nums.isEmpty()) {\n            return new ArrayList<>();\n        }\n        \n        Collections.sort(nums, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer num1, Integer num2) {\n                int sum1 = getSumOfDigits(num1);\n                int sum2 = getSumOfDigits(num2);\n                \n                if (sum1 == sum2) {\n                    return nums.indexOf(num1) - nums.indexOf(num2);\n                }\n                \n                return sum1 - sum2;\n            }\n        });\n        \n        return nums;\n    }\n    \n    private int getSumOfDigits(int num) {\n        int sum = 0;\n        num = Math.abs(num);\n        \n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        \n        return sum;\n    }\n}"}
{"task_id": "Java/145", "generation": "        if (nums == null || nums.isEmpty()) {\n            return new ArrayList<>();\n        }\n        \n        Collections.sort(nums, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer num1, Integer num2) {\n                int sum1 = getSumOfDigits(num1);\n                int sum2 = getSumOfDigits(num2);\n                \n                if (sum1 == sum2) {\n                    return nums.indexOf(num1) - nums.indexOf(num2);\n                }\n                \n                return sum1 - sum2;\n            }\n        });\n        \n        return nums;\n    }\n    \n    private int getSumOfDigits(int num) {\n        int sum = 0;\n        num = Math.abs(num);\n        \n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        \n        return sum;\n    }\n}"}
{"task_id": "Java/145", "generation": "        if (nums == null || nums.isEmpty()) {\n            return new ArrayList<>();\n        }\n        \n        Collections.sort(nums, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer num1, Integer num2) {\n                int sum1 = getSumOfDigits(num1);\n                int sum2 = getSumOfDigits(num2);\n                \n                if (sum1 == sum2) {\n                    return nums.indexOf(num1) - nums.indexOf(num2);\n                }\n                \n                return sum1 - sum2;\n            }\n        });\n        \n        return nums;\n    }\n    \n    private int getSumOfDigits(int num) {\n        int sum = 0;\n        num = Math.abs(num);\n        \n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        \n        return sum;\n    }\n}"}
{"task_id": "Java/145", "generation": "        if (nums == null || nums.isEmpty()) {\n            return new ArrayList<>();\n        }\n        \n        Collections.sort(nums, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer num1, Integer num2) {\n                int sum1 = getSumOfDigits(num1);\n                int sum2 = getSumOfDigits(num2);\n                \n                if (sum1 == sum2) {\n                    return nums.indexOf(num1) - nums.indexOf(num2);\n                }\n                \n                return sum1 - sum2;\n            }\n        });\n        \n        return nums;\n    }\n    \n    private int getSumOfDigits(int num) {\n        int sum = 0;\n        num = Math.abs(num);\n        \n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        \n        return sum;\n    }\n}"}
{"task_id": "Java/146", "generation": "        int count = 0;\n        \n        for (int num : nums) {\n            if (num > 10) {\n                String numStr = String.valueOf(num);\n                char firstDigit = numStr.charAt(0);\n                char lastDigit = numStr.charAt(numStr.length() - 1);\n                \n                if (isOdd(Character.getNumericValue(firstDigit)) && isOdd(Character.getNumericValue(lastDigit))) {\n                    count++;\n                }\n            }\n        }\n        \n        return count;\n    }\n    \n    private boolean isOdd(int num) {\n        return num % 2 != 0;\n    }\n}"}
{"task_id": "Java/146", "generation": "        int count = 0;\n        \n        for (int num : nums) {\n            if (num > 10) {\n                String numStr = String.valueOf(num);\n                char firstDigit = numStr.charAt(0);\n                char lastDigit = numStr.charAt(numStr.length() - 1);\n                \n                if (isOdd(Character.getNumericValue(firstDigit)) && isOdd(Character.getNumericValue(lastDigit))) {\n                    count++;\n                }\n            }\n        }\n        \n        return count;\n    }\n    \n    private boolean isOdd(int num) {\n        return num % 2 != 0;\n    }\n}"}
{"task_id": "Java/146", "generation": "        int count = 0;\n        \n        for (int num : nums) {\n            if (num > 10) {\n                String numStr = String.valueOf(num);\n                char firstDigit = numStr.charAt(0);\n                char lastDigit = numStr.charAt(numStr.length() - 1);\n                \n                if (isOdd(Character.getNumericValue(firstDigit)) && isOdd(Character.getNumericValue(lastDigit))) {\n                    count++;\n                }\n            }\n        }\n        \n        return count;\n    }\n    \n    private boolean isOdd(int num) {\n        return num % 2 != 0;\n    }\n}"}
{"task_id": "Java/146", "generation": "        int count = 0;\n        \n        for (int num : nums) {\n            if (num > 10) {\n                String numStr = String.valueOf(num);\n                char firstDigit = numStr.charAt(0);\n                char lastDigit = numStr.charAt(numStr.length() - 1);\n                \n                if (isOdd(Character.getNumericValue(firstDigit)) && isOdd(Character.getNumericValue(lastDigit))) {\n                    count++;\n                }\n            }\n        }\n        \n        return count;\n    }\n    \n    private boolean isOdd(int num) {\n        return num % 2 != 0;\n    }\n}"}
{"task_id": "Java/146", "generation": "        int count = 0;\n        \n        for (int num : nums) {\n            if (num > 10) {\n                String numStr = String.valueOf(num);\n                char firstDigit = numStr.charAt(0);\n                char lastDigit = numStr.charAt(numStr.length() - 1);\n                \n                if (isOdd(Character.getNumericValue(firstDigit)) && isOdd(Character.getNumericValue(lastDigit))) {\n                    count++;\n                }\n            }\n        }\n        \n        return count;\n    }\n    \n    private boolean isOdd(int num) {\n        return num % 2 != 0;\n    }\n}"}
{"task_id": "Java/147", "generation": "        int count = 0;\n        int[] a = new int[n];\n        \n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        \n        for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the example\n        int n = 5;\n        System.out.println(solution.getMaxTriples(n)); // Output: 1\n    }\n}"}
{"task_id": "Java/147", "generation": "        int count = 0;\n        int[] a = new int[n];\n        \n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        \n        for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the example\n        int n = 5;\n        System.out.println(solution.getMaxTriples(n)); // Output: 1\n    }\n}"}
{"task_id": "Java/147", "generation": "        int count = 0;\n        int[] a = new int[n];\n        \n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        \n        for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the example\n        int n = 5;\n        System.out.println(solution.getMaxTriples(n)); // Output: 1\n    }\n}"}
{"task_id": "Java/147", "generation": "        int count = 0;\n        int[] a = new int[n];\n        \n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        \n        for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the example\n        int n = 5;\n        System.out.println(solution.getMaxTriples(n)); // Output: 1\n    }\n}"}
{"task_id": "Java/147", "generation": "        int count = 0;\n        int[] a = new int[n];\n        \n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        \n        for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the example\n        int n = 5;\n        System.out.println(solution.getMaxTriples(n)); // Output: 1\n    }\n}"}
{"task_id": "Java/148", "generation": "        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        List<String> result = new ArrayList<>();\n        \n        if (!planets.contains(planet1) || !planets.contains(planet2)) {\n            return result;\n        }\n        \n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n        \n        int start = Math.min(index1, index2);\n        int end = Math.max(index1, index2);\n        \n        for (int i = start + 1; i < end; i++) {\n            result.add(planets.get(i));\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.bf(\"Jupiter\", \"Neptune\")); // [\"Saturn\", \"Uranus\"]\n        System.out.println(solution.bf(\"Earth\", \"Mercury\")); // [\"Venus\"]\n        System.out.println(solution.bf(\"Mercury\", \"Uranus\")); // [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n    }\n}"}
{"task_id": "Java/148", "generation": "        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        List<String> result = new ArrayList<>();\n        \n        if (!planets.contains(planet1) || !planets.contains(planet2)) {\n            return result;\n        }\n        \n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n        \n        int start = Math.min(index1, index2);\n        int end = Math.max(index1, index2);\n        \n        for (int i = start + 1; i < end; i++) {\n            result.add(planets.get(i));\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.bf(\"Jupiter\", \"Neptune\")); // [\"Saturn\", \"Uranus\"]\n        System.out.println(solution.bf(\"Earth\", \"Mercury\")); // [\"Venus\"]\n        System.out.println(solution.bf(\"Mercury\", \"Uranus\")); // [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n    }\n}"}
{"task_id": "Java/148", "generation": "        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        List<String> result = new ArrayList<>();\n        \n        if (!planets.contains(planet1) || !planets.contains(planet2)) {\n            return result;\n        }\n        \n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n        \n        int start = Math.min(index1, index2);\n        int end = Math.max(index1, index2);\n        \n        for (int i = start + 1; i < end; i++) {\n            result.add(planets.get(i));\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.bf(\"Jupiter\", \"Neptune\")); // [\"Saturn\", \"Uranus\"]\n        System.out.println(solution.bf(\"Earth\", \"Mercury\")); // [\"Venus\"]\n        System.out.println(solution.bf(\"Mercury\", \"Uranus\")); // [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n    }\n}"}
{"task_id": "Java/148", "generation": "        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        List<String> result = new ArrayList<>();\n        \n        if (!planets.contains(planet1) || !planets.contains(planet2)) {\n            return result;\n        }\n        \n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n        \n        int start = Math.min(index1, index2);\n        int end = Math.max(index1, index2);\n        \n        for (int i = start + 1; i < end; i++) {\n            result.add(planets.get(i));\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.bf(\"Jupiter\", \"Neptune\")); // [\"Saturn\", \"Uranus\"]\n        System.out.println(solution.bf(\"Earth\", \"Mercury\")); // [\"Venus\"]\n        System.out.println(solution.bf(\"Mercury\", \"Uranus\")); // [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n    }\n}"}
{"task_id": "Java/148", "generation": "        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        List<String> result = new ArrayList<>();\n        \n        if (!planets.contains(planet1) || !planets.contains(planet2)) {\n            return result;\n        }\n        \n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n        \n        int start = Math.min(index1, index2);\n        int end = Math.max(index1, index2);\n        \n        for (int i = start + 1; i < end; i++) {\n            result.add(planets.get(i));\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.bf(\"Jupiter\", \"Neptune\")); // [\"Saturn\", \"Uranus\"]\n        System.out.println(solution.bf(\"Earth\", \"Mercury\")); // [\"Venus\"]\n        System.out.println(solution.bf(\"Mercury\", \"Uranus\")); // [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n    }\n}"}
{"task_id": "Java/149", "generation": "        // Remove strings with odd lengths\n        List<String> evenLengthList = new ArrayList<>();\n        for (String str : lst) {\n            if (str.length() % 2 == 0) {\n                evenLengthList.add(str);\n            }\n        }\n        \n        // Sort the list by length and then alphabetically\n        Collections.sort(evenLengthList, (a, b) -> {\n            if (a.length() == b.length()) {\n                return a.compareTo(b);\n            } else {\n                return a.length() - b.length();\n            }\n        });\n        \n        return evenLengthList;\n    }\n}"}
{"task_id": "Java/149", "generation": "        // Remove strings with odd lengths\n        List<String> evenLengthList = new ArrayList<>();\n        for (String str : lst) {\n            if (str.length() % 2 == 0) {\n                evenLengthList.add(str);\n            }\n        }\n        \n        // Sort the list by length and then alphabetically\n        Collections.sort(evenLengthList, (a, b) -> {\n            if (a.length() == b.length()) {\n                return a.compareTo(b);\n            } else {\n                return a.length() - b.length();\n            }\n        });\n        \n        return evenLengthList;\n    }\n}"}
{"task_id": "Java/149", "generation": "        // Remove strings with odd lengths\n        List<String> evenLengthList = new ArrayList<>();\n        for (String str : lst) {\n            if (str.length() % 2 == 0) {\n                evenLengthList.add(str);\n            }\n        }\n        \n        // Sort the list by length and then alphabetically\n        Collections.sort(evenLengthList, (a, b) -> {\n            if (a.length() == b.length()) {\n                return a.compareTo(b);\n            } else {\n                return a.length() - b.length();\n            }\n        });\n        \n        return evenLengthList;\n    }\n}"}
{"task_id": "Java/149", "generation": "        // Remove strings with odd lengths\n        List<String> evenLengthList = new ArrayList<>();\n        for (String str : lst) {\n            if (str.length() % 2 == 0) {\n                evenLengthList.add(str);\n            }\n        }\n        \n        // Sort the list by length and then alphabetically\n        Collections.sort(evenLengthList, (a, b) -> {\n            if (a.length() == b.length()) {\n                return a.compareTo(b);\n            } else {\n                return a.length() - b.length();\n            }\n        });\n        \n        return evenLengthList;\n    }\n}"}
{"task_id": "Java/149", "generation": "        // Remove strings with odd lengths\n        List<String> evenLengthList = new ArrayList<>();\n        for (String str : lst) {\n            if (str.length() % 2 == 0) {\n                evenLengthList.add(str);\n            }\n        }\n        \n        // Sort the list by length and then alphabetically\n        Collections.sort(evenLengthList, (a, b) -> {\n            if (a.length() == b.length()) {\n                return a.compareTo(b);\n            } else {\n                return a.length() - b.length();\n            }\n        });\n        \n        return evenLengthList;\n    }\n}"}
{"task_id": "Java/150", "generation": "        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.xOrY(7, 34, 12)); // Output should be 34\n        System.out.println(solution.xOrY(15, 8, 5)); // Output should be 5\n    }\n}"}
{"task_id": "Java/150", "generation": "        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.xOrY(7, 34, 12)); // Output should be 34\n        System.out.println(solution.xOrY(15, 8, 5)); // Output should be 5\n    }\n}"}
{"task_id": "Java/150", "generation": "        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.xOrY(7, 34, 12)); // Output should be 34\n        System.out.println(solution.xOrY(15, 8, 5)); // Output should be 5\n    }\n}"}
{"task_id": "Java/150", "generation": "        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.xOrY(7, 34, 12)); // Output should be 34\n        System.out.println(solution.xOrY(15, 8, 5)); // Output should be 5\n    }\n}"}
{"task_id": "Java/150", "generation": "        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.xOrY(7, 34, 12)); // Output should be 34\n        System.out.println(solution.xOrY(15, 8, 5)); // Output should be 5\n    }\n}"}
{"task_id": "Java/151", "generation": "        int sum = 0;\n        \n        for (Object num : lst) {\n            if (num instanceof Integer && (int)num > 0 && (int)num % 2 != 0) {\n                sum += ((int)num * (int)num);\n            }\n        }\n        \n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.doubleTheDifference(Arrays.asList(1, 3, 2, 0))); // Output: 10\n        System.out.println(solution.doubleTheDifference(Arrays.asList(-1, -2, 0))); // Output: 0\n        System.out.println(solution.doubleTheDifference(Arrays.asList(9, -2))); // Output: 81\n        System.out.println(solution.doubleTheDifference(Arrays.asList(0))); // Output: 0\n    }\n}"}
{"task_id": "Java/151", "generation": "        int sum = 0;\n        \n        for (Object num : lst) {\n            if (num instanceof Integer && (int)num > 0 && (int)num % 2 != 0) {\n                sum += ((int)num * (int)num);\n            }\n        }\n        \n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.doubleTheDifference(Arrays.asList(1, 3, 2, 0))); // Output: 10\n        System.out.println(solution.doubleTheDifference(Arrays.asList(-1, -2, 0))); // Output: 0\n        System.out.println(solution.doubleTheDifference(Arrays.asList(9, -2))); // Output: 81\n        System.out.println(solution.doubleTheDifference(Arrays.asList(0))); // Output: 0\n    }\n}"}
{"task_id": "Java/151", "generation": "        int sum = 0;\n        \n        for (Object num : lst) {\n            if (num instanceof Integer && (int)num > 0 && (int)num % 2 != 0) {\n                sum += ((int)num * (int)num);\n            }\n        }\n        \n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.doubleTheDifference(Arrays.asList(1, 3, 2, 0))); // Output: 10\n        System.out.println(solution.doubleTheDifference(Arrays.asList(-1, -2, 0))); // Output: 0\n        System.out.println(solution.doubleTheDifference(Arrays.asList(9, -2))); // Output: 81\n        System.out.println(solution.doubleTheDifference(Arrays.asList(0))); // Output: 0\n    }\n}"}
{"task_id": "Java/151", "generation": "        int sum = 0;\n        \n        for (Object num : lst) {\n            if (num instanceof Integer && (int)num > 0 && (int)num % 2 != 0) {\n                sum += ((int)num * (int)num);\n            }\n        }\n        \n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.doubleTheDifference(Arrays.asList(1, 3, 2, 0))); // Output: 10\n        System.out.println(solution.doubleTheDifference(Arrays.asList(-1, -2, 0))); // Output: 0\n        System.out.println(solution.doubleTheDifference(Arrays.asList(9, -2))); // Output: 81\n        System.out.println(solution.doubleTheDifference(Arrays.asList(0))); // Output: 0\n    }\n}"}
{"task_id": "Java/151", "generation": "        int sum = 0;\n        \n        for (Object num : lst) {\n            if (num instanceof Integer && (int)num > 0 && (int)num % 2 != 0) {\n                sum += ((int)num * (int)num);\n            }\n        }\n        \n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.doubleTheDifference(Arrays.asList(1, 3, 2, 0))); // Output: 10\n        System.out.println(solution.doubleTheDifference(Arrays.asList(-1, -2, 0))); // Output: 0\n        System.out.println(solution.doubleTheDifference(Arrays.asList(9, -2))); // Output: 81\n        System.out.println(solution.doubleTheDifference(Arrays.asList(0))); // Output: 0\n    }\n}"}
{"task_id": "Java/152", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 0; i < game.size(); i++) {\n            int diff = Math.abs(game.get(i) - guess.get(i));\n            result.add(diff);\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.compare(Arrays.asList(1,2,3,4,5,1), Arrays.asList(1,2,3,4,2,-2))); // [0,0,0,0,3,3]\n        System.out.println(solution.compare(Arrays.asList(0,5,0,0,0,4), Arrays.asList(4,1,1,0,0,-2))); // [4,4,1,0,0,6]\n    }\n}"}
{"task_id": "Java/152", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 0; i < game.size(); i++) {\n            int diff = Math.abs(game.get(i) - guess.get(i));\n            result.add(diff);\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.compare(Arrays.asList(1,2,3,4,5,1), Arrays.asList(1,2,3,4,2,-2))); // [0,0,0,0,3,3]\n        System.out.println(solution.compare(Arrays.asList(0,5,0,0,0,4), Arrays.asList(4,1,1,0,0,-2))); // [4,4,1,0,0,6]\n    }\n}"}
{"task_id": "Java/152", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 0; i < game.size(); i++) {\n            int diff = Math.abs(game.get(i) - guess.get(i));\n            result.add(diff);\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.compare(Arrays.asList(1,2,3,4,5,1), Arrays.asList(1,2,3,4,2,-2))); // [0,0,0,0,3,3]\n        System.out.println(solution.compare(Arrays.asList(0,5,0,0,0,4), Arrays.asList(4,1,1,0,0,-2))); // [4,4,1,0,0,6]\n    }\n}"}
{"task_id": "Java/152", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 0; i < game.size(); i++) {\n            int diff = Math.abs(game.get(i) - guess.get(i));\n            result.add(diff);\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.compare(Arrays.asList(1,2,3,4,5,1), Arrays.asList(1,2,3,4,2,-2))); // [0,0,0,0,3,3]\n        System.out.println(solution.compare(Arrays.asList(0,5,0,0,0,4), Arrays.asList(4,1,1,0,0,-2))); // [4,4,1,0,0,6]\n    }\n}"}
{"task_id": "Java/152", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 0; i < game.size(); i++) {\n            int diff = Math.abs(game.get(i) - guess.get(i));\n            result.add(diff);\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.compare(Arrays.asList(1,2,3,4,5,1), Arrays.asList(1,2,3,4,2,-2))); // [0,0,0,0,3,3]\n        System.out.println(solution.compare(Arrays.asList(0,5,0,0,0,4), Arrays.asList(4,1,1,0,0,-2))); // [4,4,1,0,0,6]\n    }\n}"}
{"task_id": "Java/153", "generation": "        String strongestExtension = \"\";\n        int maxStrength = Integer.MIN_VALUE;\n\n        for (String extension : extensions) {\n            int capCount = 0;\n            int smCount = 0;\n\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    capCount++;\n                } else if (Character.isLowerCase(c)) {\n                    smCount++;\n                }\n            }\n\n            int strength = capCount - smCount;\n\n            if (strength > maxStrength || (strength == maxStrength && extensions.indexOf(extension) < extensions.indexOf(strongestExtension))) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n\n        return class_name + \".\" + strongestExtension;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test the example from the prompt\n        System.out.println(solution.StrongestExtension(\"my_class\", Arrays.asList(\"AA\", \"Be\", \"CC\"))); // should return \"my_class.AA\"\n    }\n}"}
{"task_id": "Java/153", "generation": "        String strongestExtension = \"\";\n        int maxStrength = Integer.MIN_VALUE;\n\n        for (String extension : extensions) {\n            int capCount = 0;\n            int smCount = 0;\n\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    capCount++;\n                } else if (Character.isLowerCase(c)) {\n                    smCount++;\n                }\n            }\n\n            int strength = capCount - smCount;\n\n            if (strength > maxStrength || (strength == maxStrength && extensions.indexOf(extension) < extensions.indexOf(strongestExtension))) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n\n        return class_name + \".\" + strongestExtension;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test the example from the prompt\n        System.out.println(solution.StrongestExtension(\"my_class\", Arrays.asList(\"AA\", \"Be\", \"CC\"))); // should return \"my_class.AA\"\n    }\n}"}
{"task_id": "Java/153", "generation": "        String strongestExtension = \"\";\n        int maxStrength = Integer.MIN_VALUE;\n\n        for (String extension : extensions) {\n            int capCount = 0;\n            int smCount = 0;\n\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    capCount++;\n                } else if (Character.isLowerCase(c)) {\n                    smCount++;\n                }\n            }\n\n            int strength = capCount - smCount;\n\n            if (strength > maxStrength || (strength == maxStrength && extensions.indexOf(extension) < extensions.indexOf(strongestExtension))) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n\n        return class_name + \".\" + strongestExtension;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test the example from the prompt\n        System.out.println(solution.StrongestExtension(\"my_class\", Arrays.asList(\"AA\", \"Be\", \"CC\"))); // should return \"my_class.AA\"\n    }\n}"}
{"task_id": "Java/153", "generation": "        String strongestExtension = \"\";\n        int maxStrength = Integer.MIN_VALUE;\n\n        for (String extension : extensions) {\n            int capCount = 0;\n            int smCount = 0;\n\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    capCount++;\n                } else if (Character.isLowerCase(c)) {\n                    smCount++;\n                }\n            }\n\n            int strength = capCount - smCount;\n\n            if (strength > maxStrength || (strength == maxStrength && extensions.indexOf(extension) < extensions.indexOf(strongestExtension))) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n\n        return class_name + \".\" + strongestExtension;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test the example from the prompt\n        System.out.println(solution.StrongestExtension(\"my_class\", Arrays.asList(\"AA\", \"Be\", \"CC\"))); // should return \"my_class.AA\"\n    }\n}"}
{"task_id": "Java/153", "generation": "        String strongestExtension = \"\";\n        int maxStrength = Integer.MIN_VALUE;\n\n        for (String extension : extensions) {\n            int capCount = 0;\n            int smCount = 0;\n\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    capCount++;\n                } else if (Character.isLowerCase(c)) {\n                    smCount++;\n                }\n            }\n\n            int strength = capCount - smCount;\n\n            if (strength > maxStrength || (strength == maxStrength && extensions.indexOf(extension) < extensions.indexOf(strongestExtension))) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n\n        return class_name + \".\" + strongestExtension;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test the example from the prompt\n        System.out.println(solution.StrongestExtension(\"my_class\", Arrays.asList(\"AA\", \"Be\", \"CC\"))); // should return \"my_class.AA\"\n    }\n}"}
{"task_id": "Java/154", "generation": "        if (a.length() != b.length()) {\n            return false;\n        }\n        \n        String combined = a + a;\n        \n        return combined.contains(b);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.cycpatternCheck(\"abcd\", \"abd\")); // false\n        System.out.println(solution.cycpatternCheck(\"hello\", \"ell\")); // true\n        System.out.println(solution.cycpatternCheck(\"whassup\", \"psus\")); // false\n        System.out.println(solution.cycpatternCheck(\"abab\", \"baa\")); // true\n        System.out.println(solution.cycpatternCheck(\"efef\", \"eeff\")); // false\n        System.out.println(solution.cycpatternCheck(\"himenss\", \"simen\")); // true\n    }\n}"}
{"task_id": "Java/154", "generation": "        if (a.length() != b.length()) {\n            return false;\n        }\n        \n        String combined = a + a;\n        \n        return combined.contains(b);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.cycpatternCheck(\"abcd\", \"abd\")); // false\n        System.out.println(solution.cycpatternCheck(\"hello\", \"ell\")); // true\n        System.out.println(solution.cycpatternCheck(\"whassup\", \"psus\")); // false\n        System.out.println(solution.cycpatternCheck(\"abab\", \"baa\")); // true\n        System.out.println(solution.cycpatternCheck(\"efef\", \"eeff\")); // false\n        System.out.println(solution.cycpatternCheck(\"himenss\", \"simen\")); // true\n    }\n}"}
{"task_id": "Java/154", "generation": "        if (a.length() != b.length()) {\n            return false;\n        }\n        \n        String combined = a + a;\n        \n        return combined.contains(b);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.cycpatternCheck(\"abcd\", \"abd\")); // false\n        System.out.println(solution.cycpatternCheck(\"hello\", \"ell\")); // true\n        System.out.println(solution.cycpatternCheck(\"whassup\", \"psus\")); // false\n        System.out.println(solution.cycpatternCheck(\"abab\", \"baa\")); // true\n        System.out.println(solution.cycpatternCheck(\"efef\", \"eeff\")); // false\n        System.out.println(solution.cycpatternCheck(\"himenss\", \"simen\")); // true\n    }\n}"}
{"task_id": "Java/154", "generation": "        if (a.length() != b.length()) {\n            return false;\n        }\n        \n        String combined = a + a;\n        \n        return combined.contains(b);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.cycpatternCheck(\"abcd\", \"abd\")); // false\n        System.out.println(solution.cycpatternCheck(\"hello\", \"ell\")); // true\n        System.out.println(solution.cycpatternCheck(\"whassup\", \"psus\")); // false\n        System.out.println(solution.cycpatternCheck(\"abab\", \"baa\")); // true\n        System.out.println(solution.cycpatternCheck(\"efef\", \"eeff\")); // false\n        System.out.println(solution.cycpatternCheck(\"himenss\", \"simen\")); // true\n    }\n}"}
{"task_id": "Java/154", "generation": "        if (a.length() != b.length()) {\n            return false;\n        }\n        \n        String combined = a + a;\n        \n        return combined.contains(b);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.cycpatternCheck(\"abcd\", \"abd\")); // false\n        System.out.println(solution.cycpatternCheck(\"hello\", \"ell\")); // true\n        System.out.println(solution.cycpatternCheck(\"whassup\", \"psus\")); // false\n        System.out.println(solution.cycpatternCheck(\"abab\", \"baa\")); // true\n        System.out.println(solution.cycpatternCheck(\"efef\", \"eeff\")); // false\n        System.out.println(solution.cycpatternCheck(\"himenss\", \"simen\")); // true\n    }\n}"}
{"task_id": "Java/155", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        int evenCount = 0;\n        int oddCount = 0;\n        \n        String numStr = String.valueOf(Math.abs(num));\n        \n        for (int i = 0; i < numStr.length(); i++) {\n            int digit = Character.getNumericValue(numStr.charAt(i));\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n        \n        result.add(evenCount);\n        result.add(oddCount);\n        \n        return result;\n    }\n}"}
{"task_id": "Java/155", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        int evenCount = 0;\n        int oddCount = 0;\n        \n        String numStr = String.valueOf(Math.abs(num));\n        \n        for (int i = 0; i < numStr.length(); i++) {\n            int digit = Character.getNumericValue(numStr.charAt(i));\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n        \n        result.add(evenCount);\n        result.add(oddCount);\n        \n        return result;\n    }\n}"}
{"task_id": "Java/155", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        int evenCount = 0;\n        int oddCount = 0;\n        \n        String numStr = String.valueOf(Math.abs(num));\n        \n        for (int i = 0; i < numStr.length(); i++) {\n            int digit = Character.getNumericValue(numStr.charAt(i));\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n        \n        result.add(evenCount);\n        result.add(oddCount);\n        \n        return result;\n    }\n}"}
{"task_id": "Java/155", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        int evenCount = 0;\n        int oddCount = 0;\n        \n        String numStr = String.valueOf(Math.abs(num));\n        \n        for (int i = 0; i < numStr.length(); i++) {\n            int digit = Character.getNumericValue(numStr.charAt(i));\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n        \n        result.add(evenCount);\n        result.add(oddCount);\n        \n        return result;\n    }\n}"}
{"task_id": "Java/155", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        int evenCount = 0;\n        int oddCount = 0;\n        \n        String numStr = String.valueOf(Math.abs(num));\n        \n        for (int i = 0; i < numStr.length(); i++) {\n            int digit = Character.getNumericValue(numStr.charAt(i));\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n        \n        result.add(evenCount);\n        result.add(oddCount);\n        \n        return result;\n    }\n}"}
{"task_id": "Java/156", "generation": "        if (number < 1 || number > 1000) {\n            throw new IllegalArgumentException(\"Number must be between 1 and 1000\");\n        }\n\n        String[] romanNumerals = {\"i\", \"iv\", \"v\", \"ix\", \"x\", \"xl\", \"l\", \"xc\", \"c\", \"cd\", \"d\", \"cm\", \"m\"};\n        int[] values = {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n\n        StringBuilder result = new StringBuilder();\n\n        for (int i = values.length - 1; i >= 0; i--) {\n            while (number >= values[i]) {\n                result.append(romanNumerals[i]);\n                number -= values[i];\n            }\n        }\n\n        return result.toString().toLowerCase();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.intToMiniRoman(19)); // Output: xix\n        System.out.println(solution.intToMiniRoman(152)); // Output: clii\n        System.out.println(solution.intToMiniRoman(426)); // Output: cdxxvi\n    }\n}"}
{"task_id": "Java/156", "generation": "        if (number < 1 || number > 1000) {\n            throw new IllegalArgumentException(\"Number must be between 1 and 1000\");\n        }\n\n        String[] romanNumerals = {\"i\", \"iv\", \"v\", \"ix\", \"x\", \"xl\", \"l\", \"xc\", \"c\", \"cd\", \"d\", \"cm\", \"m\"};\n        int[] values = {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n\n        StringBuilder result = new StringBuilder();\n\n        for (int i = values.length - 1; i >= 0; i--) {\n            while (number >= values[i]) {\n                result.append(romanNumerals[i]);\n                number -= values[i];\n            }\n        }\n\n        return result.toString().toLowerCase();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.intToMiniRoman(19)); // Output: xix\n        System.out.println(solution.intToMiniRoman(152)); // Output: clii\n        System.out.println(solution.intToMiniRoman(426)); // Output: cdxxvi\n    }\n}"}
{"task_id": "Java/156", "generation": "        if (number < 1 || number > 1000) {\n            throw new IllegalArgumentException(\"Number must be between 1 and 1000\");\n        }\n\n        String[] romanNumerals = {\"i\", \"iv\", \"v\", \"ix\", \"x\", \"xl\", \"l\", \"xc\", \"c\", \"cd\", \"d\", \"cm\", \"m\"};\n        int[] values = {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n\n        StringBuilder result = new StringBuilder();\n\n        for (int i = values.length - 1; i >= 0; i--) {\n            while (number >= values[i]) {\n                result.append(romanNumerals[i]);\n                number -= values[i];\n            }\n        }\n\n        return result.toString().toLowerCase();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.intToMiniRoman(19)); // Output: xix\n        System.out.println(solution.intToMiniRoman(152)); // Output: clii\n        System.out.println(solution.intToMiniRoman(426)); // Output: cdxxvi\n    }\n}"}
{"task_id": "Java/156", "generation": "        if (number < 1 || number > 1000) {\n            throw new IllegalArgumentException(\"Number must be between 1 and 1000\");\n        }\n\n        String[] romanNumerals = {\"i\", \"iv\", \"v\", \"ix\", \"x\", \"xl\", \"l\", \"xc\", \"c\", \"cd\", \"d\", \"cm\", \"m\"};\n        int[] values = {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n\n        StringBuilder result = new StringBuilder();\n\n        for (int i = values.length - 1; i >= 0; i--) {\n            while (number >= values[i]) {\n                result.append(romanNumerals[i]);\n                number -= values[i];\n            }\n        }\n\n        return result.toString().toLowerCase();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.intToMiniRoman(19)); // Output: xix\n        System.out.println(solution.intToMiniRoman(152)); // Output: clii\n        System.out.println(solution.intToMiniRoman(426)); // Output: cdxxvi\n    }\n}"}
{"task_id": "Java/156", "generation": "        if (number < 1 || number > 1000) {\n            throw new IllegalArgumentException(\"Number must be between 1 and 1000\");\n        }\n\n        String[] romanNumerals = {\"i\", \"iv\", \"v\", \"ix\", \"x\", \"xl\", \"l\", \"xc\", \"c\", \"cd\", \"d\", \"cm\", \"m\"};\n        int[] values = {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n\n        StringBuilder result = new StringBuilder();\n\n        for (int i = values.length - 1; i >= 0; i--) {\n            while (number >= values[i]) {\n                result.append(romanNumerals[i]);\n                number -= values[i];\n            }\n        }\n\n        return result.toString().toLowerCase();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.intToMiniRoman(19)); // Output: xix\n        System.out.println(solution.intToMiniRoman(152)); // Output: clii\n        System.out.println(solution.intToMiniRoman(426)); // Output: cdxxvi\n    }\n}"}
{"task_id": "Java/157", "generation": "        // Sort the sides in ascending order\n        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n\n        // Check if the sides form a right-angled triangle\n        return (sides[0]*sides[0] + sides[1]*sides[1] == sides[2]*sides[2]);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.rightAngleTriangle(3, 4, 5)); // true\n        System.out.println(solution.rightAngleTriangle(1, 2, 3)); // false\n    }\n}"}
{"task_id": "Java/157", "generation": "        // Sort the sides in ascending order\n        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n\n        // Check if the sides form a right-angled triangle\n        return (sides[0]*sides[0] + sides[1]*sides[1] == sides[2]*sides[2]);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.rightAngleTriangle(3, 4, 5)); // true\n        System.out.println(solution.rightAngleTriangle(1, 2, 3)); // false\n    }\n}"}
{"task_id": "Java/157", "generation": "        // Sort the sides in ascending order\n        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n\n        // Check if the sides form a right-angled triangle\n        return (sides[0]*sides[0] + sides[1]*sides[1] == sides[2]*sides[2]);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.rightAngleTriangle(3, 4, 5)); // true\n        System.out.println(solution.rightAngleTriangle(1, 2, 3)); // false\n    }\n}"}
{"task_id": "Java/157", "generation": "        // Sort the sides in ascending order\n        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n\n        // Check if the sides form a right-angled triangle\n        return (sides[0]*sides[0] + sides[1]*sides[1] == sides[2]*sides[2]);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.rightAngleTriangle(3, 4, 5)); // true\n        System.out.println(solution.rightAngleTriangle(1, 2, 3)); // false\n    }\n}"}
{"task_id": "Java/157", "generation": "        // Sort the sides in ascending order\n        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n\n        // Check if the sides form a right-angled triangle\n        return (sides[0]*sides[0] + sides[1]*sides[1] == sides[2]*sides[2]);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.rightAngleTriangle(3, 4, 5)); // true\n        System.out.println(solution.rightAngleTriangle(1, 2, 3)); // false\n    }\n}"}
{"task_id": "Java/158", "generation": "        String maxWord = \"\";\n        int maxUniqueChars = 0;\n\n        for (String word : words) {\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                uniqueChars.add(c);\n            }\n            if (uniqueChars.size() > maxUniqueChars || (uniqueChars.size() == maxUniqueChars && word.compareTo(maxWord) < 0)) {\n                maxWord = word;\n                maxUniqueChars = uniqueChars.size();\n            }\n        }\n\n        return maxWord;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<String> words1 = Arrays.asList(\"name\", \"of\", \"string\");\n        System.out.println(solution.findMax(words1)); // Output should be \"string\"\n\n        List<String> words2 = Arrays.asList(\"name\", \"enam\", \"game\");\n        System.out.println(solution.findMax(words2)); // Output should be \"enam\"\n\n        List<String> words3 = Arrays.asList(\"aaaaaaa\", \"bb\", \"cc\");\n        System.out.println(solution.findMax(words3)); // Output should be \"aaaaaaa\"\n    }\n}"}
{"task_id": "Java/158", "generation": "        String maxWord = \"\";\n        int maxUniqueChars = 0;\n\n        for (String word : words) {\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                uniqueChars.add(c);\n            }\n            if (uniqueChars.size() > maxUniqueChars || (uniqueChars.size() == maxUniqueChars && word.compareTo(maxWord) < 0)) {\n                maxWord = word;\n                maxUniqueChars = uniqueChars.size();\n            }\n        }\n\n        return maxWord;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<String> words1 = Arrays.asList(\"name\", \"of\", \"string\");\n        System.out.println(solution.findMax(words1)); // Output should be \"string\"\n\n        List<String> words2 = Arrays.asList(\"name\", \"enam\", \"game\");\n        System.out.println(solution.findMax(words2)); // Output should be \"enam\"\n\n        List<String> words3 = Arrays.asList(\"aaaaaaa\", \"bb\", \"cc\");\n        System.out.println(solution.findMax(words3)); // Output should be \"aaaaaaa\"\n    }\n}"}
{"task_id": "Java/158", "generation": "        String maxWord = \"\";\n        int maxUniqueChars = 0;\n\n        for (String word : words) {\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                uniqueChars.add(c);\n            }\n            if (uniqueChars.size() > maxUniqueChars || (uniqueChars.size() == maxUniqueChars && word.compareTo(maxWord) < 0)) {\n                maxWord = word;\n                maxUniqueChars = uniqueChars.size();\n            }\n        }\n\n        return maxWord;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<String> words1 = Arrays.asList(\"name\", \"of\", \"string\");\n        System.out.println(solution.findMax(words1)); // Output should be \"string\"\n\n        List<String> words2 = Arrays.asList(\"name\", \"enam\", \"game\");\n        System.out.println(solution.findMax(words2)); // Output should be \"enam\"\n\n        List<String> words3 = Arrays.asList(\"aaaaaaa\", \"bb\", \"cc\");\n        System.out.println(solution.findMax(words3)); // Output should be \"aaaaaaa\"\n    }\n}"}
{"task_id": "Java/158", "generation": "        String maxWord = \"\";\n        int maxUniqueChars = 0;\n\n        for (String word : words) {\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                uniqueChars.add(c);\n            }\n            if (uniqueChars.size() > maxUniqueChars || (uniqueChars.size() == maxUniqueChars && word.compareTo(maxWord) < 0)) {\n                maxWord = word;\n                maxUniqueChars = uniqueChars.size();\n            }\n        }\n\n        return maxWord;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<String> words1 = Arrays.asList(\"name\", \"of\", \"string\");\n        System.out.println(solution.findMax(words1)); // Output should be \"string\"\n\n        List<String> words2 = Arrays.asList(\"name\", \"enam\", \"game\");\n        System.out.println(solution.findMax(words2)); // Output should be \"enam\"\n\n        List<String> words3 = Arrays.asList(\"aaaaaaa\", \"bb\", \"cc\");\n        System.out.println(solution.findMax(words3)); // Output should be \"aaaaaaa\"\n    }\n}"}
{"task_id": "Java/158", "generation": "        String maxWord = \"\";\n        int maxUniqueChars = 0;\n\n        for (String word : words) {\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                uniqueChars.add(c);\n            }\n            if (uniqueChars.size() > maxUniqueChars || (uniqueChars.size() == maxUniqueChars && word.compareTo(maxWord) < 0)) {\n                maxWord = word;\n                maxUniqueChars = uniqueChars.size();\n            }\n        }\n\n        return maxWord;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<String> words1 = Arrays.asList(\"name\", \"of\", \"string\");\n        System.out.println(solution.findMax(words1)); // Output should be \"string\"\n\n        List<String> words2 = Arrays.asList(\"name\", \"enam\", \"game\");\n        System.out.println(solution.findMax(words2)); // Output should be \"enam\"\n\n        List<String> words3 = Arrays.asList(\"aaaaaaa\", \"bb\", \"cc\");\n        System.out.println(solution.findMax(words3)); // Output should be \"aaaaaaa\"\n    }\n}"}
{"task_id": "Java/159", "generation": "        int totalEaten = number + need;\n        int carrotsLeft = Math.max(0, remaining - need);\n        \n        List<Integer> result = new ArrayList<>();\n        result.add(totalEaten);\n        result.add(carrotsLeft);\n        \n        return result;\n    }\n}"}
{"task_id": "Java/159", "generation": "        int totalEaten = number + need;\n        int carrotsLeft = Math.max(0, remaining - need);\n        \n        List<Integer> result = new ArrayList<>();\n        result.add(totalEaten);\n        result.add(carrotsLeft);\n        \n        return result;\n    }\n}"}
{"task_id": "Java/159", "generation": "        int totalEaten = number + need;\n        int carrotsLeft = Math.max(0, remaining - need);\n        \n        List<Integer> result = new ArrayList<>();\n        result.add(totalEaten);\n        result.add(carrotsLeft);\n        \n        return result;\n    }\n}"}
{"task_id": "Java/159", "generation": "        int totalEaten = number + need;\n        int carrotsLeft = Math.max(0, remaining - need);\n        \n        List<Integer> result = new ArrayList<>();\n        result.add(totalEaten);\n        result.add(carrotsLeft);\n        \n        return result;\n    }\n}"}
{"task_id": "Java/159", "generation": "        int totalEaten = number + need;\n        int carrotsLeft = Math.max(0, remaining - need);\n        \n        List<Integer> result = new ArrayList<>();\n        result.add(totalEaten);\n        result.add(carrotsLeft);\n        \n        return result;\n    }\n}"}
{"task_id": "Java/160", "generation": "        // Initialize the result with the first operand\n        int result = operand.get(0);\n\n        // Iterate through the operators and operands\n        for (int i = 0; i < operator.size(); i++) {\n            String op = operator.get(i);\n            int num = operand.get(i + 1);\n\n            // Perform the operation based on the operator\n            switch (op) {\n                case \"+\":\n                    result += num;\n                    break;\n                case \"-\":\n                    result -= num;\n                    break;\n                case \"*\":\n                    result *= num;\n                    break;\n                case \"/\":\n                    result /= num;\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, num);\n                    break;\n                default:\n                    System.out.println(\"Invalid operator: \" + op);\n                    break;\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<String> operator = new ArrayList<>(Arrays.asList(\"+\", \"*\", \"-\"));\n        List<Integer> operand = new ArrayList<>(Arrays.asList(2, 3, 4, 5));\n\n        int result = solution.doAlgebra(operator, operand);\n        System.out.println(\"Result: \" + result);\n    }\n}"}
{"task_id": "Java/160", "generation": "        // Initialize the result with the first operand\n        int result = operand.get(0);\n\n        // Iterate through the operators and operands\n        for (int i = 0; i < operator.size(); i++) {\n            String op = operator.get(i);\n            int num = operand.get(i + 1);\n\n            // Perform the operation based on the operator\n            switch (op) {\n                case \"+\":\n                    result += num;\n                    break;\n                case \"-\":\n                    result -= num;\n                    break;\n                case \"*\":\n                    result *= num;\n                    break;\n                case \"/\":\n                    result /= num;\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, num);\n                    break;\n                default:\n                    System.out.println(\"Invalid operator: \" + op);\n                    break;\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<String> operator = new ArrayList<>(Arrays.asList(\"+\", \"*\", \"-\"));\n        List<Integer> operand = new ArrayList<>(Arrays.asList(2, 3, 4, 5));\n\n        int result = solution.doAlgebra(operator, operand);\n        System.out.println(\"Result: \" + result);\n    }\n}"}
{"task_id": "Java/160", "generation": "        // Initialize the result with the first operand\n        int result = operand.get(0);\n\n        // Iterate through the operators and operands\n        for (int i = 0; i < operator.size(); i++) {\n            String op = operator.get(i);\n            int num = operand.get(i + 1);\n\n            // Perform the operation based on the operator\n            switch (op) {\n                case \"+\":\n                    result += num;\n                    break;\n                case \"-\":\n                    result -= num;\n                    break;\n                case \"*\":\n                    result *= num;\n                    break;\n                case \"/\":\n                    result /= num;\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, num);\n                    break;\n                default:\n                    System.out.println(\"Invalid operator: \" + op);\n                    break;\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<String> operator = new ArrayList<>(Arrays.asList(\"+\", \"*\", \"-\"));\n        List<Integer> operand = new ArrayList<>(Arrays.asList(2, 3, 4, 5));\n\n        int result = solution.doAlgebra(operator, operand);\n        System.out.println(\"Result: \" + result);\n    }\n}"}
{"task_id": "Java/160", "generation": "        // Initialize the result with the first operand\n        int result = operand.get(0);\n\n        // Iterate through the operators and operands\n        for (int i = 0; i < operator.size(); i++) {\n            String op = operator.get(i);\n            int num = operand.get(i + 1);\n\n            // Perform the operation based on the operator\n            switch (op) {\n                case \"+\":\n                    result += num;\n                    break;\n                case \"-\":\n                    result -= num;\n                    break;\n                case \"*\":\n                    result *= num;\n                    break;\n                case \"/\":\n                    result /= num;\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, num);\n                    break;\n                default:\n                    System.out.println(\"Invalid operator: \" + op);\n                    break;\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<String> operator = new ArrayList<>(Arrays.asList(\"+\", \"*\", \"-\"));\n        List<Integer> operand = new ArrayList<>(Arrays.asList(2, 3, 4, 5));\n\n        int result = solution.doAlgebra(operator, operand);\n        System.out.println(\"Result: \" + result);\n    }\n}"}
{"task_id": "Java/160", "generation": "        // Initialize the result with the first operand\n        int result = operand.get(0);\n\n        // Iterate through the operators and operands\n        for (int i = 0; i < operator.size(); i++) {\n            String op = operator.get(i);\n            int num = operand.get(i + 1);\n\n            // Perform the operation based on the operator\n            switch (op) {\n                case \"+\":\n                    result += num;\n                    break;\n                case \"-\":\n                    result -= num;\n                    break;\n                case \"*\":\n                    result *= num;\n                    break;\n                case \"/\":\n                    result /= num;\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, num);\n                    break;\n                default:\n                    System.out.println(\"Invalid operator: \" + op);\n                    break;\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<String> operator = new ArrayList<>(Arrays.asList(\"+\", \"*\", \"-\"));\n        List<Integer> operand = new ArrayList<>(Arrays.asList(2, 3, 4, 5));\n\n        int result = solution.doAlgebra(operator, operand);\n        System.out.println(\"Result: \" + result);\n    }\n}"}
{"task_id": "Java/161", "generation": "        char[] chars = s.toCharArray();\n        boolean hasLetter = false;\n        \n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLetter(chars[i])) {\n                hasLetter = true;\n                if (Character.isUpperCase(chars[i])) {\n                    chars[i] = Character.toLowerCase(chars[i]);\n                } else {\n                    chars[i] = Character.toUpperCase(chars[i]);\n                }\n            }\n        }\n        \n        if (!hasLetter) {\n            StringBuilder sb = new StringBuilder(s);\n            return sb.reverse().toString();\n        }\n        \n        return new String(chars);\n    }\n}"}
{"task_id": "Java/161", "generation": "        char[] chars = s.toCharArray();\n        boolean hasLetter = false;\n        \n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLetter(chars[i])) {\n                hasLetter = true;\n                if (Character.isUpperCase(chars[i])) {\n                    chars[i] = Character.toLowerCase(chars[i]);\n                } else {\n                    chars[i] = Character.toUpperCase(chars[i]);\n                }\n            }\n        }\n        \n        if (!hasLetter) {\n            StringBuilder sb = new StringBuilder(s);\n            return sb.reverse().toString();\n        }\n        \n        return new String(chars);\n    }\n}"}
{"task_id": "Java/161", "generation": "        char[] chars = s.toCharArray();\n        boolean hasLetter = false;\n        \n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLetter(chars[i])) {\n                hasLetter = true;\n                if (Character.isUpperCase(chars[i])) {\n                    chars[i] = Character.toLowerCase(chars[i]);\n                } else {\n                    chars[i] = Character.toUpperCase(chars[i]);\n                }\n            }\n        }\n        \n        if (!hasLetter) {\n            StringBuilder sb = new StringBuilder(s);\n            return sb.reverse().toString();\n        }\n        \n        return new String(chars);\n    }\n}"}
{"task_id": "Java/161", "generation": "        char[] chars = s.toCharArray();\n        boolean hasLetter = false;\n        \n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLetter(chars[i])) {\n                hasLetter = true;\n                if (Character.isUpperCase(chars[i])) {\n                    chars[i] = Character.toLowerCase(chars[i]);\n                } else {\n                    chars[i] = Character.toUpperCase(chars[i]);\n                }\n            }\n        }\n        \n        if (!hasLetter) {\n            StringBuilder sb = new StringBuilder(s);\n            return sb.reverse().toString();\n        }\n        \n        return new String(chars);\n    }\n}"}
{"task_id": "Java/161", "generation": "        char[] chars = s.toCharArray();\n        boolean hasLetter = false;\n        \n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLetter(chars[i])) {\n                hasLetter = true;\n                if (Character.isUpperCase(chars[i])) {\n                    chars[i] = Character.toLowerCase(chars[i]);\n                } else {\n                    chars[i] = Character.toUpperCase(chars[i]);\n                }\n            }\n        }\n        \n        if (!hasLetter) {\n            StringBuilder sb = new StringBuilder(s);\n            return sb.reverse().toString();\n        }\n        \n        return new String(chars);\n    }\n}"}
{"task_id": "Java/162", "generation": "        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        \n        // Convert byte array to hexadecimal string\n        BigInteger bigInt = new BigInteger(1, digest);\n        String md5Hash = bigInt.toString(16);\n        \n        // Pad with zeros if necessary\n        while (md5Hash.length() < 32) {\n            md5Hash = \"0\" + md5Hash;\n        }\n        \n        return Optional.of(md5Hash);\n    }\n}"}
{"task_id": "Java/162", "generation": "        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        \n        // Convert byte array to hexadecimal string\n        BigInteger bigInt = new BigInteger(1, digest);\n        String md5Hash = bigInt.toString(16);\n        \n        // Pad with zeros if necessary\n        while (md5Hash.length() < 32) {\n            md5Hash = \"0\" + md5Hash;\n        }\n        \n        return Optional.of(md5Hash);\n    }\n}"}
{"task_id": "Java/162", "generation": "        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        \n        // Convert byte array to hexadecimal string\n        BigInteger bigInt = new BigInteger(1, digest);\n        String md5Hash = bigInt.toString(16);\n        \n        // Pad with zeros if necessary\n        while (md5Hash.length() < 32) {\n            md5Hash = \"0\" + md5Hash;\n        }\n        \n        return Optional.of(md5Hash);\n    }\n}"}
{"task_id": "Java/162", "generation": "        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        \n        // Convert byte array to hexadecimal string\n        BigInteger bigInt = new BigInteger(1, digest);\n        String md5Hash = bigInt.toString(16);\n        \n        // Pad with zeros if necessary\n        while (md5Hash.length() < 32) {\n            md5Hash = \"0\" + md5Hash;\n        }\n        \n        return Optional.of(md5Hash);\n    }\n}"}
{"task_id": "Java/162", "generation": "        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        \n        // Convert byte array to hexadecimal string\n        BigInteger bigInt = new BigInteger(1, digest);\n        String md5Hash = bigInt.toString(16);\n        \n        // Pad with zeros if necessary\n        while (md5Hash.length() < 32) {\n            md5Hash = \"0\" + md5Hash;\n        }\n        \n        return Optional.of(md5Hash);\n    }\n}"}
{"task_id": "Java/163", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = Math.min(a, b); i <= Math.max(a, b); i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/163", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = Math.min(a, b); i <= Math.max(a, b); i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/163", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = Math.min(a, b); i <= Math.max(a, b); i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/163", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = Math.min(a, b); i <= Math.max(a, b); i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/163", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = Math.min(a, b); i <= Math.max(a, b); i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        \n        return result;\n    }\n}"}
