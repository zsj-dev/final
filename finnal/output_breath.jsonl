{"task_id": "Java/0", "generation": "        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) <= threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/1", "generation": "        List<String> groups = new ArrayList<>();\n        int count = 0;\n        StringBuilder sb = new StringBuilder();\n        \n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                count++;\n            } else if (c == ')') {\n                count--;\n            }\n            \n            sb.append(c);\n            \n            if (count == 0) {\n                groups.add(sb.toString());\n                sb.setLength(0);\n            }\n        }\n        \n        return groups;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String input = \"((group1)(group2))\";\n        List<String> groups = solution.separateParenGroups(input);\n        \n        for (String group : groups) {\n            System.out.println(group);\n        }\n    }\n}\n"}
{"task_id": "Java/2", "generation": "        return Math.floor(number * 100) / 100;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        double number = 3.14159;\n        double truncatedNumber = solution.truncateNumber(number);\n        System.out.println(\"Original number: \" + number);\n        System.out.println(\"Truncated number: \" + truncatedNumber);\n    }\n}\n"}
{"task_id": "Java/3", "generation": "        int sum = 0;\n        for (int num : operations) {\n            sum += num;\n        }\n        return sum < 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> operations = new ArrayList<>(Arrays.asList(1, -2, 3, -4, 5));\n        System.out.println(solution.belowZero(operations));\n    }\n}\n"}
{"task_id": "Java/4", "generation": "        double mean = numbers.stream().mapToDouble(Double::doubleValue).average().orElse(0);\n        double sum = numbers.stream().mapToDouble(num -> Math.abs(num - mean)).sum();\n        return sum / numbers.size();\n    }\n}\n"}
{"task_id": "Java/5", "generation": "        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i != numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> numbers = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5));\n        int delimiter = 0;\n        List<Integer> interspersedNumbers = solution.intersperse(numbers, delimiter);\n        System.out.println(interspersedNumbers);\n    }\n}\n"}
{"task_id": "Java/6", "generation": "        List<Integer> result = new ArrayList<>();\n        Stack<Integer> stack = new Stack<>();\n        \n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(i);\n            } else if (c == ')') {\n                if (!stack.isEmpty()) {\n                    result.add(stack.pop());\n                    result.add(i);\n                }\n            }\n        }\n        \n        return result;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String input = \"((()))(())()\";\n        List<Integer> result = solution.parseNestedParens(input);\n        System.out.println(\"Indices of matching parentheses: \" + result);\n    }\n}\n"}
{"task_id": "Java/7", "generation": "        List<String> filteredStrings = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                filteredStrings.add(str);\n            }\n        }\n        return filteredStrings;\n    }\n}\n"}
{"task_id": "Java/8", "generation": "        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        int product = 1;\n        \n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n        \n        result.add(sum);\n        result.add(product);\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/9", "generation": "        List<Integer> maxList = new ArrayList<>();\n        Deque<Integer> deque = new LinkedList<>();\n        \n        for (int i = 0; i < numbers.size(); i++) {\n            while (!deque.isEmpty() && deque.peekLast() < numbers.get(i)) {\n                deque.pollLast();\n            }\n            deque.offerLast(numbers.get(i));\n            \n            if (i >= 3) {\n                maxList.add(deque.peekFirst());\n                if (numbers.get(i - 3).equals(deque.peekFirst())) {\n                    deque.pollFirst();\n                }\n            }\n        }\n        \n        return maxList;\n    }\n}\n"}
{"task_id": "Java/10", "generation": "        String reversedString = new StringBuilder(string).reverse().toString();\n        return string + reversedString;\n    }\n}\n"}
{"task_id": "Java/11", "generation": "        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) != b.charAt(i)) {\n                result.append(\"1\");\n            } else {\n                result.append(\"0\");\n            }\n        }\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String a = \"101010\";\n        String b = \"110011\";\n        String result = solution.stringXor(a, b);\n        System.out.println(\"Result of XOR operation: \" + result);\n    }\n}\n"}
{"task_id": "Java/12", "generation": "        return strings.stream()\n                      .max(Comparator.comparingInt(String::length));\n    }\n}\n"}
{"task_id": "Java/13", "generation": "        if (b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(b, a % b);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter the first number: \");\n        int num1 = scanner.nextInt();\n        System.out.print(\"Enter the second number: \");\n        int num2 = scanner.nextInt();\n        scanner.close();\n        int gcd = solution.greatestCommonDivisor(num1, num2);\n        System.out.println(\"The greatest common divisor of \" + num1 + \" and \" + num2 + \" is: \" + gcd);\n    }\n}\n"}
{"task_id": "Java/14", "generation": "        List<String> prefixes = new ArrayList<>();\n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        return prefixes;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<String> prefixes = solution.allPrefixes(\"hello\");\n        System.out.println(\"All prefixes of 'hello': \" + prefixes);\n    }\n}\n"}
{"task_id": "Java/15", "generation": "        StringBuilder sb = new StringBuilder();\n        for (int i = 1; i <= n; i++) {\n            sb.append(String.valueOf(i));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.stringSequence(5));\n    }\n}\n"}
{"task_id": "Java/16", "generation": "        Set<Character> charSet = new HashSet<>();\n        for (char c : string.toCharArray()) {\n            charSet.add(c);\n        }\n        return charSet.size();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String input = \"hello\";\n        int result = solution.countDistinctCharacters(input);\n        System.out.println(\"Number of distinct characters: \" + result);\n    }\n}\n"}
{"task_id": "Java/17", "generation": "        List<Integer> result = new ArrayList<>();\n        String[] tokens = string.split(\",\");\n        \n        for (String token : tokens) {\n            try {\n                int num = Integer.parseInt(token);\n                result.add(num);\n            } catch (NumberFormatException e) {\n                System.out.println(\"Error parsing token: \" + token);\n            }\n        }\n        \n        return result;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String musicString = \"1,2,3,4,5\";\n        List<Integer> musicList = solution.parseMusic(musicString);\n        \n        System.out.println(\"Parsed music list: \" + musicList);\n    }\n}\n"}
{"task_id": "Java/18", "generation": "        int count = 0;\n        int index = 0;\n        while ((index = string.indexOf(substring, index)) != -1) {\n            count++;\n            index += substring.length();\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/19", "generation": "        List<Integer> list = new ArrayList<>();\n        String[] numArr = numbers.split(\",\");\n        \n        for (String num : numArr) {\n            list.add(Integer.parseInt(num));\n        }\n        \n        Collections.sort(list);\n        \n        StringBuilder sb = new StringBuilder();\n        for (int num : list) {\n            sb.append(num).append(\",\");\n        }\n        \n        return sb.substring(0, sb.length() - 1);\n    }\n}\n"}
{"task_id": "Java/20", "generation": "        List<Double> result = new ArrayList<>();\n        if (numbers == null || numbers.size() == 0) {\n            return result;\n        }\n        \n        Collections.sort(numbers);\n        \n        double minDiff = Double.MAX_VALUE;\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = Math.abs(numbers.get(i) - numbers.get(i + 1));\n            if (diff < minDiff) {\n                minDiff = diff;\n                result.clear();\n                result.add(numbers.get(i));\n                result.add(numbers.get(i + 1));\n            } else if (diff == minDiff) {\n                result.add(numbers.get(i));\n                result.add(numbers.get(i + 1));\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/21", "generation": "        List<Double> rescaledNumbers = new ArrayList<>();\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        \n        for (double num : numbers) {\n            double rescaledNum = (num - min) / (max - min);\n            rescaledNumbers.add(rescaledNum);\n        }\n        \n        return rescaledNumbers;\n    }\n}\n"}
{"task_id": "Java/22", "generation": "        List<Integer> integers = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                integers.add((Integer) value);\n            }\n        }\n        return integers;\n    }\n}\n"}
{"task_id": "Java/23", "generation": "        return string.length();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String input = \"Hello, World!\";\n        int length = solution.strlen(input);\n        System.out.println(\"Length of the string: \" + length);\n    }\n}\n"}
{"task_id": "Java/24", "generation": "        int largest = 1;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largest = i;\n            }\n        }\n        return largest;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        int n = scanner.nextInt();\n        int result = solution.largestDivisor(n);\n        System.out.println(\"Largest divisor of \" + n + \" is: \" + result);\n        scanner.close();\n    }\n}\n"}
{"task_id": "Java/25", "generation": "        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int n = 60;\n        List<Integer> factors = solution.factorize(n);\n        System.out.println(\"Factors of \" + n + \": \" + factors);\n    }\n}\n"}
{"task_id": "Java/26", "generation": "        List<Integer> distinctNumbers = numbers.stream()\n                                                .distinct()\n                                                .collect(Collectors.toList());\n        return distinctNumbers;\n    }\n    \n    public static void main(String[] args) {\n        List<Integer> numbers = new ArrayList<>(Arrays.asList(1, 2, 2, 3, 4, 4, 5));\n        Solution solution = new Solution();\n        List<Integer> distinctNumbers = solution.removeDuplicates(numbers);\n        System.out.println(\"Original numbers: \" + numbers);\n        System.out.println(\"Distinct numbers: \" + distinctNumbers);\n    }\n}\n"}
{"task_id": "Java/27", "generation": "        char[] charArray = string.toCharArray();\n        for (int i = 0; i < charArray.length; i++) {\n            if (Character.isUpperCase(charArray[i])) {\n                charArray[i] = Character.toLowerCase(charArray[i]);\n            } else if (Character.isLowerCase(charArray[i])) {\n                charArray[i] = Character.toUpperCase(charArray[i]);\n            }\n        }\n        return new String(charArray);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String input = \"Hello, World!\";\n        String result = solution.flipCase(input);\n        System.out.println(\"Original: \" + input);\n        System.out.println(\"Flipped: \" + result);\n    }\n}\n"}
{"task_id": "Java/28", "generation": "        StringBuilder sb = new StringBuilder();\n        for (String str : strings) {\n            sb.append(str);\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        List<String> strings = new ArrayList<>();\n        strings.add(\"Hello, \");\n        strings.add(\"world!\");\n        \n        Solution solution = new Solution();\n        String concatenatedString = solution.concatenate(strings);\n        System.out.println(concatenatedString);\n    }\n}\n"}
{"task_id": "Java/29", "generation": "        return strings.stream()\n                      .filter(s -> s.startsWith(prefix))\n                      .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        List<String> strings = Arrays.asList(\"apple\", \"banana\", \"apricot\", \"orange\", \"kiwi\");\n        String prefix = \"ap\";\n        \n        Solution solution = new Solution();\n        List<String> filteredStrings = solution.filterByPrefix(strings, prefix);\n        \n        System.out.println(\"Strings starting with prefix '\" + prefix + \"': \" + filteredStrings);\n    }\n}\n"}
{"task_id": "Java/30", "generation": "        List<Integer> positiveNumbers = l.stream()\n                                        .filter(num -> num > 0)\n                                        .collect(Collectors.toList());\n        return positiveNumbers;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(-1, 2, -3, 4, -5, 6);\n        Solution solution = new Solution();\n        List<Integer> positiveNumbers = solution.getPositive(numbers);\n        System.out.println(\"Positive numbers: \" + positiveNumbers);\n    }\n}\n"}
{"task_id": "Java/31", "generation": "        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        int num = scanner.nextInt();\n        scanner.close();\n        if (solution.isPrime(num)) {\n            System.out.println(num + \" is a prime number.\");\n        } else {\n            System.out.println(num + \" is not a prime number.\");\n        }\n    }\n}\n"}
{"task_id": "Java/32", "generation": "        double x = 0;\n        double step = 0.1;\n        double precision = 0.0001;\n        \n        while (Math.abs(poly(xs, x)) > precision) {\n            x += step;\n        }\n        \n        return x;\n    }\n}\n"}
{"task_id": "Java/33", "generation": "        Collections.sort(l);\n        return l;\n    }\n}\n"}
{"task_id": "Java/34", "generation": "        Set<Integer> set = new HashSet<>(l);\n        return new ArrayList<>(set);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> list = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 2, 3, 5));\n        List<Integer> uniqueList = solution.unique(list);\n        System.out.println(\"Original List: \" + list);\n        System.out.println(\"Unique List: \" + uniqueList);\n    }\n}\n"}
{"task_id": "Java/35", "generation": "        int max = Integer.MIN_VALUE;\n        for (int num : l) {\n            if (num > max) {\n                max = num;\n            }\n        }\n        return max;\n    }\n}\n"}
{"task_id": "Java/36", "generation": "        for (int i = 1; i <= n; i++) {\n            if (i % 3 == 0 && i % 5 == 0) {\n                System.out.println(\"FizzBuzz\");\n            } else if (i % 3 == 0) {\n                System.out.println(\"Fizz\");\n            } else if (i % 5 == 0) {\n                System.out.println(\"Buzz\");\n            } else {\n                System.out.println(i);\n            }\n        }\n        return 0;\n    }\n}\n"}
{"task_id": "Java/37", "generation": "        List<Integer> evenList = new ArrayList<>();\n        for (int num : l) {\n            if (num % 2 == 0) {\n                evenList.add(num);\n            }\n        }\n        Collections.sort(evenList);\n        return evenList;\n    }\n}\n"}
{"task_id": "Java/38", "generation": "        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String input = \"HelloWorld\";\n        String encoded = solution.encodeCyclic(input);\n        System.out.println(\"Encoded: \" + encoded);\n        String decoded = solution.decodeCyclic(encoded);\n        System.out.println(\"Decoded: \" + decoded);\n    }\n}\n"}
{"task_id": "Java/39", "generation": "        if (n <= 0) {\n            return -1;\n        }\n        \n        List<Integer> fib = new ArrayList<>();\n        fib.add(0);\n        fib.add(1);\n        \n        int a = 0, b = 1, c;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            fib.add(c);\n            a = b;\n            b = c;\n        }\n        \n        Set<Integer> primes = new HashSet<>();\n        for (int num : fib) {\n            if (isPrime(num)) {\n                primes.add(num);\n            }\n        }\n        \n        return primes.size();\n    }\n    \n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/40", "generation": "        Set<Integer> set = new HashSet<>();\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                int sum = l.get(i) + l.get(j);\n                if (set.contains(-sum)) {\n                    return true;\n                }\n                set.add(l.get(j));\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/41", "generation": "        int speed = 0;\n        int collisions = 0;\n        \n        for (int i = 1; i <= n; i++) {\n            speed += i;\n            if (speed > n) {\n                collisions++;\n            }\n        }\n        \n        return collisions;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int n = 10;\n        int result = solution.carRaceCollision(n);\n        System.out.println(\"Number of collisions: \" + result);\n    }\n}\n"}
{"task_id": "Java/42", "generation": "        List<Integer> incrementedList = l.stream()\n                                          .map(num -> num + 1)\n                                          .collect(Collectors.toList());\n        return incrementedList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> inputList = Arrays.asList(1, 2, 3, 4, 5);\n        List<Integer> result = solution.incrList(inputList);\n        System.out.println(\"Original List: \" + inputList);\n        System.out.println(\"Incremented List: \" + result);\n    }\n}\n"}
{"task_id": "Java/43", "generation": "        Set<Integer> set = new HashSet<>();\n        for (int num : l) {\n            if (set.contains(-num)) {\n                return true;\n            }\n            set.add(num);\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/44", "generation": "        if (x == 0) {\n            return \"0\";\n        }\n        \n        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n            int remainder = x % base;\n            sb.insert(0, remainder);\n            x = x / base;\n        }\n        \n        return sb.toString();\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int x = 10;\n        int base = 2;\n        System.out.println(\"Number \" + x + \" in base \" + base + \" is: \" + solution.changeBase(x, base));\n    }\n}\n"}
{"task_id": "Java/45", "generation": "        return 0.5 * a * h;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        double base = 5.0;\n        double height = 3.0;\n        double area = solution.triangleArea(base, height);\n        System.out.println(\"The area of the triangle is: \" + area);\n    }\n}\n"}
{"task_id": "Java/46", "generation": "        if (n <= 1) {\n            return n;\n        }\n        \n        int[] dp = new int[n + 1];\n        dp[0] = 0;\n        dp[1] = 1;\n        \n        for (int i = 2; i <= n; i++) {\n            dp[i] = dp[i - 1] + dp[i - 2];\n        }\n        \n        return dp[n];\n    }\n}\n"}
{"task_id": "Java/47", "generation": "        Collections.sort(l);\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (double) (l.get(n / 2 - 1) + l.get(n / 2)) / 2;\n        } else {\n            return (double) l.get(n / 2);\n        }\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = new ArrayList<>();\n        numbers.add(3);\n        numbers.add(1);\n        numbers.add(4);\n        numbers.add(1);\n        numbers.add(5);\n        \n        Solution solution = new Solution();\n        double result = solution.median(numbers);\n        System.out.println(\"Median: \" + result);\n    }\n}\n"}
{"task_id": "Java/48", "generation": "        text = text.replaceAll(\"[^a-zA-Z0-9]\", \"\").toLowerCase();\n        int left = 0;\n        int right = text.length() - 1;\n        \n        while (left < right) {\n            if (text.charAt(left) != text.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String text = \"A man, a plan, a canal, Panama\";\n        System.out.println(solution.isPalindrome(text));\n    }\n}\n"}
{"task_id": "Java/49", "generation": "        int result = 1;\n        for (int i = 0; i < p; i++) {\n            result = (result * n) % p;\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter the value of n: \");\n        int n = scanner.nextInt();\n        System.out.print(\"Enter the value of p: \");\n        int p = scanner.nextInt();\n        int result = solution.modp(n, p);\n        System.out.println(\"Result: \" + result);\n        scanner.close();\n    }\n}\n"}
{"task_id": "Java/50", "generation": "        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 5 - 'a' + 26) % 26)));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String original = \"hello\";\n        String encoded = solution.encodeShift(original);\n        String decoded = solution.decodeShift(encoded);\n\n        System.out.println(\"Original: \" + original);\n        System.out.println(\"Encoded: \" + encoded);\n        System.out.println(\"Decoded: \" + decoded);\n    }\n}"}
{"task_id": "Java/51", "generation": "        return text.replaceAll(\"[aeiouAEIOU]\", \"\");\n    }\n}\n"}
{"task_id": "Java/52", "generation": "        int sum = 0;\n        for (int num : l) {\n            sum += num;\n        }\n        return sum < t;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5));\n        int threshold = 20;\n        Solution solution = new Solution();\n        boolean result = solution.belowThreshold(numbers, threshold);\n        System.out.println(\"Is sum below threshold? \" + result);\n    }\n}\n"}
{"task_id": "Java/53", "generation": "        return x + y;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int result = solution.add(5, 3);\n        System.out.println(\"Result: \" + result);\n    }\n}\n"}
{"task_id": "Java/54", "generation": "        if (s0.length() != s1.length()) {\n            return false;\n        }\n\n        char[] s0Chars = s0.toCharArray();\n        char[] s1Chars = s1.toCharArray();\n\n        Arrays.sort(s0Chars);\n        Arrays.sort(s1Chars);\n\n        for (int i = 0; i < s0Chars.length; i++) {\n            if (s0Chars[i] != s1Chars[i]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String s0 = \"hello\";\n        String s1 = \"ollhe\";\n        System.out.println(solution.sameChars(s0, s1)); // Output should be true\n    }\n}\n"}
{"task_id": "Java/55", "generation": "        if (n <= 1) {\n            return n;\n        }\n        return fib(n-1) + fib(n-2);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter the value of n: \");\n        int n = scanner.nextInt();\n        System.out.println(\"Fibonacci number at position \" + n + \" is: \" + solution.fib(n));\n        scanner.close();\n    }\n}\n"}
{"task_id": "Java/56", "generation": "        Stack<Character> stack = new Stack<>();\n        \n        for (int i = 0; i < brackets.length(); i++) {\n            char current = brackets.charAt(i);\n            \n            if (current == '(' || current == '[' || current == '{') {\n                stack.push(current);\n            } else if (current == ')' || current == ']' || current == '}') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                \n                char top = stack.pop();\n                \n                if ((current == ')' && top != '(') || (current == ']' && top != '[') || (current == '}' && top != '{')) {\n                    return false;\n                }\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n}\n"}
{"task_id": "Java/57", "generation": "        boolean increasing = true;\n        boolean decreasing = true;\n        \n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n                increasing = false;\n            }\n            if (l.get(i) > l.get(i - 1)) {\n                decreasing = false;\n            }\n        }\n        \n        return increasing || decreasing;\n    }\n}\n"}
{"task_id": "Java/58", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        Set<Integer> set = new HashSet<>(l1);\n        \n        for (Integer num : l2) {\n            if (set.contains(num)) {\n                result.add(num);\n                set.remove(num);\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/59", "generation": "        int largestPrime = 1;\n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                largestPrime = i;\n                n /= i;\n            }\n        }\n        return largestPrime;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        int number = scanner.nextInt();\n        int result = solution.largestPrimeFactor(number);\n        System.out.println(\"Largest prime factor of \" + number + \" is: \" + result);\n        scanner.close();\n    }\n}\n"}
{"task_id": "Java/60", "generation": "        if (n <= 0) {\n            return 0;\n        } else {\n            return n + sumToN(n - 1);\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        int n = scanner.nextInt();\n        scanner.close();\n        int sum = solution.sumToN(n);\n        System.out.println(\"Sum of numbers from 1 to \" + n + \" is: \" + sum);\n    }\n}\n"}
{"task_id": "Java/61", "generation": "        Stack<Character> stack = new Stack<>();\n        \n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '(' || bracket == '[' || bracket == '{') {\n                stack.push(bracket);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                \n                char top = stack.pop();\n                if ((bracket == ')' && top != '(') || (bracket == ']' && top != '[') || (bracket == '}' && top != '{')) {\n                    return false;\n                }\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n}\n"}
{"task_id": "Java/62", "generation": "        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/63", "generation": "        if (n <= 1) {\n            return n;\n        }\n        return fibfib(n-1) + fibfib(n-2);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter the value of n: \");\n        int n = scanner.nextInt();\n        System.out.println(\"Fibonacci number at position \" + n + \" is: \" + solution.fibfib(n));\n        scanner.close();\n    }\n}\n"}
{"task_id": "Java/64", "generation": "        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = Character.toLowerCase(s.charAt(i));\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String input = \"Hello, World!\";\n        int result = solution.vowelsCount(input);\n        System.out.println(\"Number of vowels in the input string: \" + result);\n    }\n}\n"}
{"task_id": "Java/65", "generation": "        String binary = Integer.toBinaryString(x);\n        int len = binary.length();\n        shift = shift % len;\n        String shiftedBinary = binary.substring(len - shift) + binary.substring(0, len - shift);\n        return shiftedBinary;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int x = 23;\n        int shift = 2;\n        String result = solution.circularShift(x, shift);\n        System.out.println(\"Circularly shifted binary of \" + x + \" by \" + shift + \" is: \" + result);\n    }\n}\n"}
{"task_id": "Java/66", "generation": "        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isDigit(c)) {\n                sum += Character.getNumericValue(c);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/67", "generation": "        if (s == null || s.length() == 0 || n <= 0) {\n            return 0;\n        }\n        \n        Map<Character, Integer> fruitCount = new HashMap<>();\n        int left = 0, right = 0;\n        int maxFruits = 0;\n        \n        while (right < s.length()) {\n            char currentFruit = s.charAt(right);\n            fruitCount.put(currentFruit, fruitCount.getOrDefault(currentFruit, 0) + 1);\n            \n            while (fruitCount.size() > n) {\n                char leftFruit = s.charAt(left);\n                fruitCount.put(leftFruit, fruitCount.get(leftFruit) - 1);\n                if (fruitCount.get(leftFruit) == 0) {\n                    fruitCount.remove(leftFruit);\n                }\n                left++;\n            }\n            \n            maxFruits = Math.max(maxFruits, right - left + 1);\n            right++;\n        }\n        \n        return maxFruits;\n    }\n}\n"}
{"task_id": "Java/68", "generation": "        List<Integer> result = new ArrayList<>();\n        for (int num : arr) {\n            if (num % 2 == 0) {\n                result.add(num);\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> input = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10));\n        List<Integer> output = solution.pluck(input);\n        System.out.println(\"Original List: \" + input);\n        System.out.println(\"Plucked List (Even Numbers): \" + output);\n    }\n}\n"}
{"task_id": "Java/69", "generation": "        int target = 5;\n        int left = 0;\n        int right = lst.size() - 1;\n\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            if (lst.get(mid) == target) {\n                return mid;\n            } else if (lst.get(mid) < target) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n\n        return -1;\n    }\n}\n"}
{"task_id": "Java/70", "generation": "        Collections.sort(lst, (a, b) -> {\n            if (a % 2 == 0 && b % 2 != 0) {\n                return -1;\n            } else if (a % 2 != 0 && b % 2 == 0) {\n                return 1;\n            } else {\n                return a - b;\n            }\n        });\n        return lst;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> list = new ArrayList<>(Arrays.asList(3, 1, 4, 1, 5, 9, 2, 6, 5, 3));\n        List<Integer> sortedList = solution.strangeSortList(list);\n        System.out.println(\"Sorted List: \" + sortedList);\n    }\n}\n"}
{"task_id": "Java/71", "generation": "        double s = (a + b + c) / 2;\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return area;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        double a = 3.0;\n        double b = 4.0;\n        double c = 5.0;\n        double area = solution.triangleArea(a, b, c);\n        System.out.println(\"Area of the triangle with sides \" + a + \", \" + b + \", \" + c + \" is: \" + area);\n    }\n}\n"}
{"task_id": "Java/72", "generation": "        int totalWeight = 0;\n        for (int weight : q) {\n            totalWeight += weight;\n        }\n        \n        return totalWeight <= w;\n    }\n}\n"}
{"task_id": "Java/73", "generation": "        Set<Integer> set = new HashSet<>(arr);\n        int smallest = 1;\n        while (set.contains(smallest)) {\n            smallest++;\n        }\n        return smallest;\n    }\n}\n"}
{"task_id": "Java/74", "generation": "        List<String> result = new ArrayList<>();\n        \n        for (String str1 : lst1) {\n            for (String str2 : lst2) {\n                if (str1.equals(str2)) {\n                    result.add(str1);\n                    break;\n                }\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/75", "generation": "        if (a <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(a); i++) {\n            if (a % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        int num = scanner.nextInt();\n        scanner.close();\n        if (solution.isMultiplyPrime(num)) {\n            System.out.println(num + \" is a prime number.\");\n        } else {\n            System.out.println(num + \" is not a prime number.\");\n        }\n    }\n}\n"}
{"task_id": "Java/76", "generation": "        if (x <= 0 || n <= 0) {\n            return false;\n        }\n        \n        double result = Math.pow(x, 1.0 / n);\n        \n        return Math.abs(result - Math.round(result)) < 1e-9;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.isSimplePower(16, 2)); // true\n        System.out.println(solution.isSimplePower(27, 3)); // true\n        System.out.println(solution.isSimplePower(10, 3)); // false\n    }\n}\n"}
{"task_id": "Java/77", "generation": "        double cubeRoot = Math.cbrt(a);\n        int nearestInteger = (int) Math.round(cubeRoot);\n        return Math.pow(nearestInteger, 3) == a;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        int num = scanner.nextInt();\n        if (solution.iscube(num)) {\n            System.out.println(num + \" is a perfect cube.\");\n        } else {\n            System.out.println(num + \" is not a perfect cube.\");\n        }\n        scanner.close();\n    }\n}\n"}
{"task_id": "Java/78", "generation": "        try {\n            return Integer.parseInt(num, 16);\n        } catch (NumberFormatException e) {\n            System.out.println(\"Invalid hexadecimal number format\");\n            return -1;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a hexadecimal number: \");\n        String input = scanner.nextLine();\n        int decimalValue = solution.hexKey(input);\n        if (decimalValue != -1) {\n            System.out.println(\"Decimal value: \" + decimalValue);\n        }\n        scanner.close();\n    }\n}\n"}
{"task_id": "Java/79", "generation": "        if (decimal == 0) {\n            return \"0\";\n        }\n        StringBuilder binary = new StringBuilder();\n        while (decimal > 0) {\n            binary.insert(0, decimal % 2);\n            decimal = decimal / 2;\n        }\n        return binary.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int decimalNumber = 10;\n        String binaryNumber = solution.decimalToBinary(decimalNumber);\n        System.out.println(\"Binary representation of \" + decimalNumber + \" is: \" + binaryNumber);\n    }\n}\n"}
{"task_id": "Java/80", "generation": "        Set<Integer> seen = new HashSet<>();\n        int num = Integer.parseInt(s);\n        \n        while (num != 1 && !seen.contains(num)) {\n            seen.add(num);\n            int sum = 0;\n            while (num > 0) {\n                int digit = num % 10;\n                sum += digit * digit;\n                num /= 10;\n            }\n            num = sum;\n        }\n        \n        return num == 1;\n    }\n}\n"}
{"task_id": "Java/81", "generation": "        List<String> letterGrades = new ArrayList<>();\n        \n        for (Double grade : grades) {\n            if (grade >= 90) {\n                letterGrades.add(\"A\");\n            } else if (grade >= 80) {\n                letterGrades.add(\"B\");\n            } else if (grade >= 70) {\n                letterGrades.add(\"C\");\n            } else if (grade >= 60) {\n                letterGrades.add(\"D\");\n            } else {\n                letterGrades.add(\"F\");\n            }\n        }\n        \n        return letterGrades;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Double> grades = new ArrayList<>(Arrays.asList(85.5, 92.0, 78.3, 60.7, 45.2));\n        List<String> letterGrades = solution.numericalLetterGrade(grades);\n        \n        System.out.println(\"Numerical Grades: \" + grades);\n        System.out.println(\"Letter Grades: \" + letterGrades);\n    }\n}\n"}
{"task_id": "Java/82", "generation": "        int length = string.length();\n        if (length <= 1) {\n            return false;\n        }\n        for (int i = 2; i < length; i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a string: \");\n        String input = scanner.nextLine();\n        boolean result = solution.primeLength(input);\n        if (result) {\n            System.out.println(\"The length of the string is a prime number.\");\n        } else {\n            System.out.println(\"The length of the string is not a prime number.\");\n        }\n        scanner.close();\n    }\n}\n"}
{"task_id": "Java/83", "generation": "        int count = 0;\n        while (n > 0) {\n            if (n % 10 == 1) {\n                count++;\n            }\n            n /= 10;\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int number = 123456789;\n        int result = solution.startsOneEnds(number);\n        System.out.println(\"Number of 1s at the end of \" + number + \" is: \" + result);\n    }\n}\n"}
{"task_id": "Java/84", "generation": "        if (N % 2 == 0) {\n            return \"Even\";\n        } else {\n            return \"Odd\";\n        }\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int N = scanner.nextInt();\n        Solution solution = new Solution();\n        String result = solution.solve(N);\n        System.out.println(result);\n        scanner.close();\n    }\n}\n"}
{"task_id": "Java/85", "generation": "        int sum = 0;\n        for (int num : lst) {\n            sum += num;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = new ArrayList<>();\n        numbers.add(1);\n        numbers.add(2);\n        numbers.add(3);\n\n        Solution solution = new Solution();\n        int result = solution.add(numbers);\n        System.out.println(\"Sum of numbers: \" + result);\n    }\n}\n"}
{"task_id": "Java/86", "generation": "        char[] chars = s.toCharArray();\n        Arrays.sort(chars);\n        StringBuilder sb = new StringBuilder();\n        int mid = s.length() / 2;\n        for (int i = 0; i < mid; i++) {\n            sb.append(chars[i]);\n            sb.append(chars[mid + i]);\n        }\n        if (s.length() % 2 != 0) {\n            sb.append(chars[s.length() - 1]);\n        }\n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/87", "generation": "        List<List<Integer>> result = new ArrayList<>();\n        if (x < 0) {\n            return result;\n        }\n        \n        for (int i = 0; i <= x; i++) {\n            List<Integer> row = new ArrayList<>();\n            if (i == 0 || i == x) {\n                row.add(1);\n            } else {\n                List<Integer> prevRow = lst.get(i - 1);\n                for (int j = 0; j <= i; j++) {\n                    if (j == 0 || j == i) {\n                        row.add(1);\n                    } else {\n                        row.add(prevRow.get(j - 1) + prevRow.get(j));\n                    }\n                }\n            }\n            result.add(row);\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/88", "generation": "        Collections.sort(array);\n        return array;\n    }\n}\n"}
{"task_id": "Java/89", "generation": "        char[] chars = s.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            chars[i] = (char) (chars[i] + 1);\n        }\n        return new String(chars);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a string to encrypt: \");\n        String input = scanner.nextLine();\n        String encrypted = solution.encrypt(input);\n        System.out.println(\"Encrypted string: \" + encrypted);\n        scanner.close();\n    }\n}\n"}
{"task_id": "Java/90", "generation": "        Optional<Integer> result = Optional.empty();\n        if (lst.isEmpty()) {\n            return result;\n        }\n        \n        int min = Collections.min(lst);\n        result = Optional.of(min);\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/91", "generation": "        int count = 0;\n        for (int i = 0; i < S.length(); i++) {\n            if (S.charAt(i) == 'b' || S.charAt(i) == 'o' || S.charAt(i) == 'r' || S.charAt(i) == 'e' || S.charAt(i) == 'd') {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/92", "generation": "        if (x instanceof Integer || y instanceof Integer || z instanceof Integer) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.anyInt(5, \"hello\", 10.5)); // Should return true\n        System.out.println(solution.anyInt(\"world\", \"foo\", \"bar\")); // Should return false\n    }\n}\n"}
{"task_id": "Java/93", "generation": "        StringBuilder encodedMessage = new StringBuilder();\n        char prevChar = message.charAt(0);\n        int count = 1;\n\n        for (int i = 1; i < message.length(); i++) {\n            char currentChar = message.charAt(i);\n\n            if (currentChar == prevChar) {\n                count++;\n            } else {\n                encodedMessage.append(prevChar);\n                encodedMessage.append(count);\n                prevChar = currentChar;\n                count = 1;\n            }\n        }\n\n        encodedMessage.append(prevChar);\n        encodedMessage.append(count);\n\n        return encodedMessage.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String message = \"aaabbc\";\n        String encodedMessage = solution.encode(message);\n        System.out.println(\"Encoded message: \" + encodedMessage);\n    }\n}\n"}
{"task_id": "Java/94", "generation": "        int sum = 0;\n        for (int num : lst) {\n            sum += num;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5));\n        Solution solution = new Solution();\n        int result = solution.skjkasdkd(numbers);\n        System.out.println(\"Sum of numbers: \" + result);\n    }\n}\n"}
{"task_id": "Java/95", "generation": "        for (Map.Entry<Object, Object> entry : dict.entrySet()) {\n            if (entry.getKey() instanceof String && entry.getValue() instanceof String) {\n                String key = (String) entry.getKey();\n                String value = (String) entry.getValue();\n                if (key.equals(key.toLowerCase()) && value.equals(value.toUpperCase())) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/96", "generation": "        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            result.add(i);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> numbers = solution.countUpTo(5);\n        System.out.println(numbers);\n    }\n}\n"}
{"task_id": "Java/97", "generation": "        return a * b;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.print(\"Enter the first number: \");\n        int num1 = scanner.nextInt();\n\n        System.out.print(\"Enter the second number: \");\n        int num2 = scanner.nextInt();\n\n        int result = solution.multiply(num1, num2);\n        System.out.println(\"The result of multiplication is: \" + result);\n\n        scanner.close();\n    }\n}\n"}
{"task_id": "Java/98", "generation": "        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String input = \"Hello World\";\n        int result = solution.countUpper(input);\n        System.out.println(\"Number of uppercase letters: \" + result);\n    }\n}\n"}
{"task_id": "Java/99", "generation": "        int count = 0;\n        for (int i = 0; i < value.length(); i++) {\n            if (Character.isUpperCase(value.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String input = \"Hello World\";\n        int result = solution.countUpper(input);\n        System.out.println(\"Number of uppercase letters: \" + result);\n    }\n}\n"}
{"task_id": "Java/100", "generation": "        List<Integer> pile = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            pile.add(i);\n        }\n        return pile;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> pile = solution.makeAPile(5);\n        System.out.println(\"Pile: \" + pile);\n    }\n}\n"}
{"task_id": "Java/101", "generation": "        List<String> wordList = new ArrayList<>();\n        String[] words = s.split(\" \");\n        \n        for (String word : words) {\n            wordList.add(word);\n        }\n        \n        return wordList;\n    }\n}\n"}
{"task_id": "Java/102", "generation": "        if (x > y) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter the first number: \");\n        int num1 = scanner.nextInt();\n        System.out.print(\"Enter the second number: \");\n        int num2 = scanner.nextInt();\n        int result = solution.chooseNum(num1, num2);\n        System.out.println(\"The chosen number is: \" + result);\n        scanner.close();\n    }\n}\n"}
{"task_id": "Java/103", "generation": "        double avg = (double)(n + m) / 2;\n        return Math.round(avg);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int n = 5;\n        int m = 7;\n        System.out.println(\"Rounded average of \" + n + \" and \" + m + \" is: \" + solution.roundedAvg(n, m));\n    }\n}\n"}
{"task_id": "Java/104", "generation": "        Set<Integer> uniqueDigitsSet = new HashSet<>();\n        for (Integer num : x) {\n            String numStr = String.valueOf(num);\n            for (int i = 0; i < numStr.length(); i++) {\n                uniqueDigitsSet.add(Character.getNumericValue(numStr.charAt(i)));\n            }\n        }\n        List<Integer> uniqueDigitsList = new ArrayList<>(uniqueDigitsSet);\n        return uniqueDigitsList;\n    }\n}\n"}
{"task_id": "Java/105", "generation": "        List<String> result = new ArrayList<>();\n        Collections.sort(arr, (a, b) -> Integer.compare(Math.abs(a), Math.abs(b)));\n        for (int num : arr) {\n            result.add(String.valueOf(num));\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/106", "generation": "        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            result.add(i);\n        }\n        return result;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> output = solution.f(5);\n        System.out.println(output);\n    }\n}\n"}
{"task_id": "Java/107", "generation": "        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i) && i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n\n    private boolean isPalindrome(int num) {\n        String str = String.valueOf(num);\n        int left = 0;\n        int right = str.length() - 1;\n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> result = solution.evenOddPalindrome(100);\n        System.out.println(\"Even Palindromes up to 100: \" + result);\n    }\n}\n"}
{"task_id": "Java/108", "generation": "        int count = 0;\n        for (int num : arr) {\n            if (num % 2 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10));\n        Solution solution = new Solution();\n        int evenCount = solution.countNums(numbers);\n        System.out.println(\"Number of even numbers: \" + evenCount);\n    }\n}\n"}
{"task_id": "Java/109", "generation": "        int n = arr.size();\n        for (int i = 0; i < n; i++) {\n            if (arr.get(i) == 1) {\n                if (i > 0 && arr.get(i - 1) == 0) {\n                    arr.set(i, 0);\n                    arr.set(i - 1, 1);\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> balls = new ArrayList<>(Arrays.asList(0, 1, 1, 0, 1, 0, 1));\n        Solution solution = new Solution();\n        System.out.println(\"Initial arrangement: \" + balls);\n        while (solution.moveOneBall(balls)) {\n            System.out.println(\"Moving one ball...\");\n            System.out.println(\"Current arrangement: \" + balls);\n        }\n        System.out.println(\"Final arrangement: \" + balls);\n    }\n}\n"}
{"task_id": "Java/110", "generation": "        int sum1 = 0;\n        int sum2 = 0;\n\n        for (int num : lst1) {\n            sum1 += num;\n        }\n\n        for (int num : lst2) {\n            sum2 += num;\n        }\n\n        if (sum1 > sum2) {\n            return \"List 1 has a greater sum\";\n        } else if (sum2 > sum1) {\n            return \"List 2 has a greater sum\";\n        } else {\n            return \"Both lists have the same sum\";\n        }\n    }\n}\n"}
{"task_id": "Java/111", "generation": "        Map<String, Integer> map = new HashMap<>();\n        \n        for (int i = 0; i < test.length(); i++) {\n            String key = String.valueOf(test.charAt(i));\n            map.put(key, map.getOrDefault(key, 0) + 1);\n        }\n        \n        return map;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String testString = \"hello\";\n        Map<String, Integer> result = solution.histogram(testString);\n        \n        for (Map.Entry<String, Integer> entry : result.entrySet()) {\n            System.out.println(entry.getKey() + \": \" + entry.getValue());\n        }\n    }\n}\n"}
{"task_id": "Java/112", "generation": "        List<Object> result = new ArrayList<>();\n        StringBuilder sb = new StringBuilder(s);\n        if (sb.indexOf(c) != -1) {\n            sb.deleteCharAt(sb.indexOf(c));\n            result.add(sb.reverse().toString());\n            result.add(true);\n        } else {\n            result.add(s);\n            result.add(false);\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/113", "generation": "        List<String> oddList = new ArrayList<>();\n        for (String str : lst) {\n            if (str.length() % 2 != 0) {\n                oddList.add(str);\n            }\n        }\n        return oddList;\n    }\n}\n"}
{"task_id": "Java/114", "generation": "        int minSum = Integer.MAX_VALUE;\n        int currentSum = 0;\n        \n        for (int num : nums) {\n            currentSum += num;\n            minSum = Math.min(minSum, currentSum);\n            if (currentSum > 0) {\n                currentSum = 0;\n            }\n        }\n        \n        return minSum;\n    }\n}\n"}
{"task_id": "Java/115", "generation": "        int rows = grid.size();\n        int cols = grid.get(0).size();\n        \n        int[][] dp = new int[rows][cols];\n        \n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = grid.get(i).get(j);\n                } else if (i == 0) {\n                    dp[i][j] = Math.min(dp[i][j - 1], grid.get(i).get(j));\n                } else if (j == 0) {\n                    dp[i][j] = Math.min(dp[i - 1][j], grid.get(i).get(j));\n                } else {\n                    dp[i][j] = Math.min(Math.max(dp[i - 1][j], dp[i][j - 1]), grid.get(i).get(j));\n                }\n            }\n        }\n        \n        return dp[rows - 1][cols - 1] <= capacity ? dp[rows - 1][cols - 1] : -1;\n    }\n}\n"}
{"task_id": "Java/116", "generation": "        Collections.sort(arr);\n        return arr;\n    }\n}\n"}
{"task_id": "Java/117", "generation": "        List<String> words = new ArrayList<>();\n        String[] splitWords = s.split(\" \");\n        \n        for (String word : splitWords) {\n            if (word.length() == n) {\n                words.add(word);\n            }\n        }\n        \n        return words;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String input = \"Hello world, this is a test\";\n        int length = 5;\n        \n        List<String> selectedWords = solution.selectWords(input, length);\n        \n        System.out.println(\"Selected words with length \" + length + \": \" + selectedWords);\n    }\n}\n"}
{"task_id": "Java/118", "generation": "        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u'));\n        int minDistance = Integer.MAX_VALUE;\n        char closestVowel = ' ';\n        for (char c : word.toCharArray()) {\n            if (vowels.contains(c)) {\n                return String.valueOf(c);\n            } else {\n                for (char vowel : vowels) {\n                    int distance = Math.abs(c - vowel);\n                    if (distance < minDistance) {\n                        minDistance = distance;\n                        closestVowel = vowel;\n                    }\n                }\n            }\n        }\n        return String.valueOf(closestVowel);\n    }\n}\n"}
{"task_id": "Java/119", "generation": "        Stack<Character> stack = new Stack<>();\n        for (String str : lst) {\n            for (char c : str.toCharArray()) {\n                if (c == '(') {\n                    stack.push(c);\n                } else if (c == ')') {\n                    if (stack.isEmpty() || stack.pop() != '(') {\n                        return \"Unbalanced\";\n                    }\n                }\n            }\n        }\n        return stack.isEmpty() ? \"Balanced\" : \"Unbalanced\";\n    }\n}\n"}
{"task_id": "Java/120", "generation": "        List<Integer> result = new ArrayList<>();\n        Deque<Integer> deque = new LinkedList<>();\n\n        for (int i = 0; i < arr.size(); i++) {\n            while (!deque.isEmpty() && deque.peekLast() < arr.get(i)) {\n                deque.pollLast();\n            }\n            deque.offerLast(arr.get(i));\n\n            if (i >= k - 1) {\n                result.add(deque.peekFirst());\n                if (arr.get(i - k + 1) == deque.peekFirst()) {\n                    deque.pollFirst();\n                }\n            }\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/121", "generation": "        int sum = 0;\n        for (int num : lst) {\n            sum += num;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = new ArrayList<>();\n        numbers.add(1);\n        numbers.add(2);\n        numbers.add(3);\n        \n        Solution solution = new Solution();\n        int result = solution.solution(numbers);\n        System.out.println(\"Sum of numbers: \" + result);\n    }\n}\n"}
{"task_id": "Java/122", "generation": "        int sum = 0;\n        for (int num : arr) {\n            sum += num;\n        }\n        return sum + k;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> list = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5));\n        int k = 10;\n        Solution solution = new Solution();\n        int result = solution.addElements(list, k);\n        System.out.println(\"Result: \" + result);\n    }\n}\n"}
{"task_id": "Java/123", "generation": "        List<Integer> result = new ArrayList<>();\n        result.add(n);\n        while (n != 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n            if (n % 2 != 0) {\n                result.add(n);\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/124", "generation": "        try {\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n            sdf.setLenient(false);\n            sdf.parse(date);\n            return true;\n        } catch (ParseException e) {\n            return false;\n        }\n    }\n}\n"}
{"task_id": "Java/125", "generation": "        List<String> words = Arrays.asList(txt.split(\" \"));\n        return words;\n    }\n}\n"}
{"task_id": "Java/126", "generation": "        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < lst.get(i - 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5));\n        Solution solution = new Solution();\n        System.out.println(\"Is the list sorted? \" + solution.isSorted(numbers));\n    }\n}\n"}
{"task_id": "Java/127", "generation": "        int start = Math.max(interval1.get(0), interval2.get(0));\n        int end = Math.min(interval1.get(1), interval2.get(1));\n\n        if (start > end) {\n            return \"No intersection\";\n        }\n\n        return \"[\" + start + \", \" + end + \"]\";\n    }\n}\n"}
{"task_id": "Java/128", "generation": "        int product = arr.stream().reduce(1, (a, b) -> a * b);\n        return Optional.of(Integer.signum(product));\n    }\n}\n"}
{"task_id": "Java/129", "generation": "        int m = grid.size();\n        int n = grid.get(0).size();\n        \n        int[][] dp = new int[m][n];\n        for (int[] row : dp) {\n            Arrays.fill(row, Integer.MAX_VALUE);\n        }\n        \n        dp[0][0] = grid.get(0).get(0);\n        \n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i > 0) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i - 1][j] + grid.get(i).get(j));\n                }\n                if (j > 0) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i][j - 1] + grid.get(i).get(j));\n                }\n            }\n        }\n        \n        List<Integer> path = new ArrayList<>();\n        int x = m - 1, y = n - 1;\n        while (x >= 0 && y >= 0) {\n            path.add(grid.get(x).get(y));\n            if (x == 0 && y == 0) {\n                break;\n            }\n            if (x > 0 && dp[x][y] - grid.get(x).get(y) == dp[x - 1][y]) {\n                x--;\n            } else {\n                y--;\n            }\n        }\n        \n        Collections.reverse(path);\n        \n        return path;\n    }\n}\n"}
{"task_id": "Java/130", "generation": "        List<Integer> triangle = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            triangle.add(i * (i + 1) / 2);\n        }\n        return triangle;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> result = solution.tri(5);\n        System.out.println(result);\n    }\n}\n"}
{"task_id": "Java/131", "generation": "        int count = 0;\n        while (n != 0) {\n            n = n / 10;\n            count++;\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        int num = scanner.nextInt();\n        int result = solution.digits(num);\n        System.out.println(\"Number of digits: \" + result);\n        scanner.close();\n    }\n}\n"}
{"task_id": "Java/132", "generation": "        Stack<Character> stack = new Stack<>();\n        \n        for (char c : string.toCharArray()) {\n            if (c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else if (c == ')' && !stack.isEmpty() && stack.peek() == '(') {\n                stack.pop();\n            } else if (c == ']' && !stack.isEmpty() && stack.peek() == '[') {\n                stack.pop();\n            } else if (c == '}' && !stack.isEmpty() && stack.peek() == '{') {\n                stack.pop();\n            } else {\n                return false;\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n}\n"}
{"task_id": "Java/133", "generation": "        int sum = 0;\n        for (Double num : lst) {\n            sum += Math.pow(num, 2);\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        List<Double> numbers = new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0));\n        Solution solution = new Solution();\n        int result = solution.sumSquares(numbers);\n        System.out.println(\"Sum of squares: \" + result);\n    }\n}\n"}
{"task_id": "Java/134", "generation": "        char lastChar = txt.charAt(txt.length() - 1);\n        return Character.isLetter(lastChar);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.checkIfLastCharIsALetter(\"Hello World!\")); // true\n        System.out.println(solution.checkIfLastCharIsALetter(\"Hello World123\")); // false\n    }\n}\n"}
{"task_id": "Java/135", "generation": "        Map<Integer, Integer> map = new HashMap<>();\n        int count = 0;\n        \n        for (int num : arr) {\n            int remainder = num % 5;\n            int complement = (5 - remainder) % 5;\n            \n            if (map.containsKey(complement) && map.get(complement) > 0) {\n                count++;\n                map.put(complement, map.get(complement) - 1);\n            } else {\n                map.put(remainder, map.getOrDefault(remainder, 0) + 1);\n            }\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/136", "generation": "        List<Optional<Integer>> result = new ArrayList<>();\n        \n        if(lst.isEmpty()){\n            result.add(Optional.empty());\n            result.add(Optional.empty());\n            return result;\n        }\n        \n        Optional<Integer> max = lst.stream().max(Integer::compare);\n        Optional<Integer> min = lst.stream().min(Integer::compare);\n        \n        result.add(max);\n        result.add(min);\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/137", "generation": "        if (a.equals(b)) {\n            return Optional.empty();\n        } else {\n            return Optional.of(a);\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Object obj1 = \"Hello\";\n        Object obj2 = \"World\";\n        \n        Optional<Object> result = solution.compareOne(obj1, obj2);\n        \n        if (result.isPresent()) {\n            System.out.println(\"Objects are different. First object: \" + result.get());\n        } else {\n            System.out.println(\"Objects are the same.\");\n        }\n    }\n}\n"}
{"task_id": "Java/138", "generation": "        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += i;\n            }\n        }\n        return sum == n;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        int n = scanner.nextInt();\n        scanner.close();\n        System.out.println(\"Is the number equal to the sum of even numbers up to it? \" + solution.isEqualToSumEven(n));\n    }\n}\n"}
{"task_id": "Java/139", "generation": "        if (n == 0 || n == 1) {\n            return 1;\n        }\n        return n * specialFactorial(n - 2);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        int n = scanner.nextInt();\n        long result = solution.specialFactorial(n);\n        System.out.println(\"Special factorial of \" + n + \" is: \" + result);\n        scanner.close();\n    }\n}\n"}
{"task_id": "Java/140", "generation": "        return text.trim().replaceAll(\"\\\\s+\", \" \");\n    }\n}\n"}
{"task_id": "Java/141", "generation": "        if (file_name == null || file_name.isEmpty()) {\n            return \"File name cannot be empty\";\n        }\n        \n        if (file_name.length() > 255) {\n            return \"File name is too long\";\n        }\n        \n        if (file_name.contains(\" \")) {\n            return \"File name cannot contain spaces\";\n        }\n        \n        return \"File name is valid\";\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        String file1 = \"myFile.txt\";\n        String file2 = \"important_document.docx\";\n        String file3 = \"report 2022.pdf\";\n        \n        System.out.println(\"File 1: \" + solution.filenameCheck(file1));\n        System.out.println(\"File 2: \" + solution.filenameCheck(file2));\n        System.out.println(\"File 3: \" + solution.filenameCheck(file3));\n    }\n}\n"}
{"task_id": "Java/142", "generation": "        int sum = 0;\n        for (int num : lst) {\n            sum += num * num;\n        }\n        return sum;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> numbers = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5));\n        int result = solution.sumSquares(numbers);\n        System.out.println(\"Sum of squares: \" + result);\n    }\n}\n"}
{"task_id": "Java/143", "generation": "        String[] words = sentence.split(\" \");\n        StringBuilder result = new StringBuilder();\n        \n        for (String word : words) {\n            result.append(word).append(\" \");\n        }\n        \n        return result.toString().trim();\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String sentence = \"Hello World, how are you?\";\n        System.out.println(solution.wordsInSentence(sentence));\n    }\n}\n"}
{"task_id": "Java/144", "generation": "        try {\n            int num1 = Integer.parseInt(x);\n            int num2 = Integer.parseInt(n);\n            if (num2 == 0) {\n                throw new ArithmeticException(\"Cannot divide by zero\");\n            }\n            return num1 % num2 == 0;\n        } catch (NumberFormatException e) {\n            System.out.println(\"Invalid input. Please enter valid integers.\");\n            return false;\n        } catch (ArithmeticException e) {\n            System.out.println(e.getMessage());\n            return false;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.simplify(\"10\", \"2\")); // true\n        System.out.println(solution.simplify(\"10\", \"3\")); // false\n        System.out.println(solution.simplify(\"12\", \"0\")); // Cannot divide by zero, false\n        System.out.println(solution.simplify(\"abc\", \"2\")); // Invalid input. Please enter valid integers., false\n    }\n}\n"}
{"task_id": "Java/145", "generation": "        Collections.sort(nums);\n        return nums;\n    }\n}\n"}
{"task_id": "Java/146", "generation": "        int sum = 0;\n        for (int num : nums) {\n            if (num % 2 == 0) {\n                sum += num;\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10));\n        Solution solution = new Solution();\n        int result = solution.specialFilter(numbers);\n        System.out.println(\"Sum of even numbers: \" + result);\n    }\n}\n"}
{"task_id": "Java/147", "generation": "        int max = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 3 == 0 && i > max) {\n                max = i;\n            }\n        }\n        return max;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        int n = scanner.nextInt();\n        int result = solution.getMaxTriples(n);\n        System.out.println(\"The largest multiple of 3 less than or equal to \" + n + \" is: \" + result);\n        scanner.close();\n    }\n}\n"}
{"task_id": "Java/148", "generation": "        List<String> planets = new ArrayList<>();\n        planets.add(planet1);\n        planets.add(planet2);\n        \n        return planets;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<String> result = solution.bf(\"Earth\", \"Mars\");\n        \n        System.out.println(\"Planets: \" + result);\n    }\n}\n"}
{"task_id": "Java/149", "generation": "        Collections.sort(lst);\n        return lst;\n    }\n}\n"}
{"task_id": "Java/150", "generation": "        int setBitsX = Integer.bitCount(x);\n        int setBitsY = Integer.bitCount(y);\n        \n        int unsetBitsX = n - setBitsX;\n        int unsetBitsY = n - setBitsY;\n        \n        int result = (setBitsX * unsetBitsY) + (unsetBitsX * setBitsY);\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/151", "generation": "        int sum = 0;\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                sum += (Integer) obj;\n            } else if (obj instanceof Double) {\n                sum += ((Double) obj).intValue();\n            }\n        }\n        return sum * 2;\n    }\n}\n"}
{"task_id": "Java/152", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        int bulls = 0;\n        int cows = 0;\n        \n        Map<Integer, Integer> map = new HashMap<>();\n        \n        for (int i = 0; i < game.size(); i++) {\n            if (game.get(i).equals(guess.get(i))) {\n                bulls++;\n            } else {\n                map.put(game.get(i), map.getOrDefault(game.get(i), 0) + 1);\n            }\n        }\n        \n        for (int i = 0; i < guess.size(); i++) {\n            if (game.get(i).equals(guess.get(i))) {\n                continue;\n            }\n            if (map.containsKey(guess.get(i)) && map.get(guess.get(i)) > 0) {\n                cows++;\n                map.put(guess.get(i), map.get(guess.get(i)) - 1);\n            }\n        }\n        \n        result.add(bulls);\n        result.add(cows);\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/153", "generation": "        String strongestExtension = \"\";\n        int maxStrength = 0;\n        \n        for (String extension : extensions) {\n            int strength = calculateStrength(class_name, extension);\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n        \n        return strongestExtension;\n    }\n\n    private int calculateStrength(String class_name, String extension) {\n        // Implement the logic to calculate the strength of the extension\n        // For example, you can compare the length of the class name and extension\n        return Math.abs(class_name.length() - extension.length());\n    }\n}\n"}
{"task_id": "Java/154", "generation": "        if (a.length() != b.length()) {\n            return false;\n        }\n        \n        String doubleA = a + a;\n        return doubleA.contains(b);\n    }\n}\n"}
{"task_id": "Java/155", "generation": "        List<Integer> counts = new ArrayList<>();\n        int evenCount = 0;\n        int oddCount = 0;\n        \n        while(num > 0) {\n            int digit = num % 10;\n            if(digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n            num = num / 10;\n        }\n        \n        counts.add(evenCount);\n        counts.add(oddCount);\n        \n        return counts;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int number = 123456789;\n        List<Integer> counts = solution.evenOddCount(number);\n        System.out.println(\"Even count: \" + counts.get(0));\n        System.out.println(\"Odd count: \" + counts.get(1));\n    }\n}\n"}
{"task_id": "Java/156", "generation": "        if (number < 1 || number > 3999) {\n            return \"Invalid number\";\n        }\n\n        String[] romanSymbols = {\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"};\n        int[] values = {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n\n        StringBuilder sb = new StringBuilder();\n        int i = values.length - 1;\n\n        while (number > 0) {\n            if (number - values[i] >= 0) {\n                sb.append(romanSymbols[i]);\n                number -= values[i];\n            } else {\n                i--;\n            }\n        }\n\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.intToMiniRoman(354));\n    }\n}\n"}
{"task_id": "Java/157", "generation": "        if (a <= 0 || b <= 0 || c <= 0) {\n            return false;\n        }\n\n        int max = Math.max(a, Math.max(b, c));\n        int sum = a + b + c - max;\n\n        return max * max == a * a + b * b + c * c - max * max;\n    }\n}\n"}
{"task_id": "Java/158", "generation": "        String maxWord = \"\";\n        for (String word : words) {\n            if (word.compareTo(maxWord) > 0) {\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n}\n"}
{"task_id": "Java/159", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        if (number >= need) {\n            result.add(need);\n            remaining = number - need;\n        } else {\n            result.add(number);\n            remaining = 0;\n        }\n        \n        result.add(remaining);\n        \n        return result;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> result = solution.eat(10, 5, 0);\n        System.out.println(\"Eaten: \" + result.get(0));\n        System.out.println(\"Remaining: \" + result.get(1));\n    }\n}\n"}
{"task_id": "Java/160", "generation": "        if(operator.size() != operand.size()) {\n            throw new IllegalArgumentException(\"Operator and operand lists must have the same size\");\n        }\n\n        int result = operand.get(0);\n        for(int i = 1; i < operator.size(); i++) {\n            String op = operator.get(i);\n            int num = operand.get(i);\n\n            switch(op) {\n                case \"+\":\n                    result += num;\n                    break;\n                case \"-\":\n                    result -= num;\n                    break;\n                case \"*\":\n                    result *= num;\n                    break;\n                case \"/\":\n                    result /= num;\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Invalid operator: \" + op);\n            }\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/161", "generation": "        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i--) {\n            sb.append(s.charAt(i));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String input = \"hello\";\n        String reversed = solution.solve(input);\n        System.out.println(\"Original: \" + input);\n        System.out.println(\"Reversed: \" + reversed);\n    }\n}\n"}
{"task_id": "Java/162", "generation": "        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String md5 = bigInt.toString(16);\n        while (md5.length() < 32) {\n            md5 = \"0\" + md5;\n        }\n        return Optional.of(md5);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String text = \"Hello, World!\";\n        try {\n            Optional<String> md5 = solution.stringToMd5(text);\n            if (md5.isPresent()) {\n                System.out.println(\"MD5 hash of '\" + text + \"': \" + md5.get());\n            } else {\n                System.out.println(\"Failed to calculate MD5 hash.\");\n            }\n        } catch (NoSuchAlgorithmException e) {\n            System.out.println(\"Error: \" + e.getMessage());\n        }\n    }\n}\n"}
{"task_id": "Java/163", "generation": "        List<Integer> integers = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            integers.add(i);\n        }\n        return integers;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> generatedIntegers = solution.generateIntegers(1, 10);\n        System.out.println(\"Generated Integers: \" + generatedIntegers);\n    }\n}\n"}
