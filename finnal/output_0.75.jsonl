{"task_id": "Java/0", "generation": "        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) < threshold) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)); // false\n        System.out.println(solution.hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)); // true\n    }\n}"}
{"task_id": "Java/0", "generation": "        Collections.sort(numbers);\n        \n        for (int i = 1; i < numbers.size(); i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i-1)) < threshold) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Double> numbers = Arrays.asList(1.0, 2.0, 3.0);\n        System.out.println(solution.hasCloseElements(numbers, 0.5));\n\n        List<Double> numbers2 = Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0);\n        System.out.println(solution.hasCloseElements(numbers2, 0.3));\n    }\n}"}
{"task_id": "Java/0", "generation": "        Set<Double> set = new HashSet<>();\n        for (Double num : numbers) {\n            for (Double existingNum : set) {\n                if (Math.abs(num - existingNum) < threshold) {\n                    return true;\n                }\n            }\n            set.add(num);\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/0", "generation": "        Collections.sort(numbers);\n        \n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) < threshold) {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Double> numbers1 = Arrays.asList(1.0, 2.0, 3.0);\n        System.out.println(solution.hasCloseElements(numbers1, 0.5)); // Expected output: false\n        \n        List<Double> numbers2 = Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0);\n        System.out.println(solution.hasCloseElements(numbers2, 0.3)); // Expected output: true\n    }\n}"}
{"task_id": "Java/0", "generation": "        Set<Double> set = new HashSet<>();\n        for (Double num : numbers) {\n            for (Double existingNum : set) {\n                if (Math.abs(num - existingNum) <= threshold) {\n                    return true;\n                }\n            }\n            set.add(num);\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/1", "generation": "        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        \n        StringBuilder currentGroup = new StringBuilder();\n        \n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                if (!stack.isEmpty()) {\n                    currentGroup.append(c);\n                }\n                stack.push(c);\n            } else if (c == ')') {\n                stack.pop();\n                if (stack.isEmpty()) {\n                    result.add(currentGroup.toString());\n                    currentGroup = new StringBuilder();\n                } else {\n                    currentGroup.append(c);\n                }\n            }\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/1", "generation": "        List<String> result = new ArrayList<>();\n        StringBuilder currentGroup = new StringBuilder();\n        int openParenCount = 0;\n\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                openParenCount++;\n            } else if (c == ')') {\n                openParenCount--;\n            }\n\n            currentGroup.append(c);\n\n            if (openParenCount == 0) {\n                result.add(currentGroup.toString().replaceAll(\"\\\\s+\", \"\"));\n                currentGroup = new StringBuilder();\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String input = \"( ) (( )) (( )( ))\";\n        List<String> result = solution.separateParenGroups(input);\n        System.out.println(result);\n    }\n}"}
{"task_id": "Java/1", "generation": "        List<String> result = new ArrayList<>();\n        int open = 0;\n        int close = 0;\n        StringBuilder sb = new StringBuilder();\n        \n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                open++;\n                sb.append(c);\n            } else if (c == ')') {\n                close++;\n                sb.append(c);\n            }\n            \n            if (open == close) {\n                result.add(sb.toString().replaceAll(\"\\\\s\", \"\"));\n                sb.setLength(0);\n                open = 0;\n                close = 0;\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String input = \"( ) (( )) (( )( ))\";\n        List<String> result = solution.separateParenGroups(input);\n        System.out.println(result);\n    }\n}"}
{"task_id": "Java/1", "generation": "        List<String> result = new ArrayList<>();\n        int balance = 0;\n        StringBuilder current = new StringBuilder();\n\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                balance++;\n            } else if (c == ')') {\n                balance--;\n            }\n            current.append(c);\n            if (balance == 0) {\n                result.add(current.toString().replaceAll(\"\\\\s+\",\"\"));\n                current.setLength(0);\n            }\n        }\n\n        return result;\n    }\n}"}
{"task_id": "Java/1", "generation": "        List<String> result = new ArrayList<>();\n        \n        StringBuilder currentGroup = new StringBuilder();\n        int openCount = 0;\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                openCount++;\n            } else if (c == ')') {\n                openCount--;\n            }\n            currentGroup.append(c);\n            if (openCount == 0) {\n                result.add(currentGroup.toString().replaceAll(\"\\\\s\", \"\"));\n                currentGroup = new StringBuilder();\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        String input = \"( ) (( )) (( )( ))\";\n        List<String> result = solution.separateParenGroups(input);\n        \n        System.out.println(result);\n    }\n}"}
{"task_id": "Java/2", "generation": "        int integerPart = (int) number;\n        double decimalPart = number - integerPart;\n        return decimalPart;\n    }\n}"}
{"task_id": "Java/2", "generation": "        // Get the integer part of the number\n        int integerPart = (int) number;\n        \n        // Get the decimal part by subtracting the integer part from the original number\n        double decimalPart = number - integerPart;\n        \n        return decimalPart;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.truncateNumber(3.5)); // Output: 0.5\n        System.out.println(solution.truncateNumber(2.75)); // Output: 0.75\n        System.out.println(solution.truncateNumber(7.0)); // Output: 0.0\n    }\n}"}
{"task_id": "Java/2", "generation": "        int integerPart = (int) number;\n        double decimalPart = number - integerPart;\n        return decimalPart;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.truncateNumber(3.5)); // 0.5\n        System.out.println(solution.truncateNumber(7.8)); // 0.8\n        System.out.println(solution.truncateNumber(9.123)); // 0.123\n        System.out.println(solution.truncateNumber(5.0)); // 0.0\n    }\n}"}
{"task_id": "Java/2", "generation": "        // Get the integer part of the number\n        int integerPart = (int) number;\n\n        // Get the decimal part of the number\n        double decimalPart = number - integerPart;\n\n        return decimalPart;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.truncateNumber(3.5)); // Output: 0.5\n        System.out.println(solution.truncateNumber(6.723)); // Output: 0.723\n        System.out.println(solution.truncateNumber(10.0)); // Output: 0.0\n    }\n}"}
{"task_id": "Java/2", "generation": "        // Find the integer part of the number\n        int integerPart = (int) number;\n\n        // Find the decimal part of the number\n        double decimalPart = number - integerPart;\n\n        return decimalPart;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.truncateNumber(3.5)); // Output: 0.5\n        System.out.println(solution.truncateNumber(7.8)); // Output: 0.8\n        System.out.println(solution.truncateNumber(10.2)); // Output: 0.2\n    }\n}"}
{"task_id": "Java/3", "generation": "        int balance = 0;\n        \n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n}"}
{"task_id": "Java/3", "generation": "        int balance = 0;\n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/3", "generation": "        int balance = 0;\n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.belowZero(Arrays.asList(1, 2, 3))); // false\n        System.out.println(solution.belowZero(Arrays.asList(1, 2, -4, 5))); // true\n    }\n}"}
{"task_id": "Java/3", "generation": "        int balance = 0;\n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> operations1 = Arrays.asList(1, 2, 3);\n        List<Integer> operations2 = Arrays.asList(1, 2, -4, 5);\n        \n        System.out.println(solution.belowZero(operations1)); // false\n        System.out.println(solution.belowZero(operations2)); // true\n    }\n}"}
{"task_id": "Java/3", "generation": "        int balance = 0;\n        \n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> test1 = Arrays.asList(1, 2, 3);\n        List<Integer> test2 = Arrays.asList(1, 2, -4, 5);\n        \n        System.out.println(solution.belowZero(test1)); // false\n        System.out.println(solution.belowZero(test2)); // true\n    }\n}"}
{"task_id": "Java/4", "generation": "        // Calculate the mean of the dataset\n        double mean = numbers.stream().mapToDouble(Double::doubleValue).average().orElse(0.0);\n\n        // Calculate the sum of absolute differences from the mean\n        double sum = numbers.stream().mapToDouble(num -> Math.abs(num - mean)).sum();\n\n        // Calculate the Mean Absolute Deviation\n        double mad = sum / numbers.size();\n\n        return mad;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Double> numbers = Arrays.asList(1.0, 2.0, 3.0, 4.0);\n        System.out.println(solution.meanAbsoluteDeviation(numbers));\n    }\n}"}
{"task_id": "Java/4", "generation": "        // Calculate mean of the dataset\n        double sum = 0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n\n        // Calculate absolute differences and find average\n        double sumDiffs = 0;\n        for (double num : numbers) {\n            sumDiffs += Math.abs(num - mean);\n        }\n\n        // Calculate Mean Absolute Deviation\n        return sumDiffs / numbers.size();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Double> numbers = Arrays.asList(1.0, 2.0, 3.0, 4.0);\n        System.out.println(solution.meanAbsoluteDeviation(numbers)); // Output: 1.0\n    }\n}"}
{"task_id": "Java/4", "generation": "        // Calculate the mean of the dataset\n        double sum = 0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n        \n        // Calculate the sum of absolute differences from the mean\n        double sumAbsDiff = 0;\n        for (double num : numbers) {\n            sumAbsDiff += Math.abs(num - mean);\n        }\n        \n        // Calculate the mean absolute deviation\n        double mad = sumAbsDiff / numbers.size();\n        \n        return mad;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Double> input = Arrays.asList(1.0, 2.0, 3.0, 4.0);\n        double result = solution.meanAbsoluteDeviation(input);\n        \n        System.out.println(result);\n    }\n}"}
{"task_id": "Java/4", "generation": "        // Calculate the mean of the dataset\n        double mean = calculateMean(numbers);\n        \n        // Calculate the sum of absolute differences\n        double sum = 0;\n        for (Double num : numbers) {\n            sum += Math.abs(num - mean);\n        }\n        \n        // Calculate the Mean Absolute Deviation\n        double mad = sum / numbers.size();\n        \n        return mad;\n    }\n    \n    /**\n    Helper method to calculate the mean of a list of numbers\n     */\n    private double calculateMean(List<Double> numbers) {\n        double sum = 0;\n        for (Double num : numbers) {\n            sum += num;\n        }\n        return sum / numbers.size();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test case 1\n        List<Double> numbers1 = Arrays.asList(1.0, 2.0, 3.0, 4.0);\n        System.out.println(solution.meanAbsoluteDeviation(numbers1)); // Output: 1.0\n        \n        // Test case 2\n        List<Double> numbers2 = Arrays.asList(4.0, 4.0, 4.0, 4.0);\n        System.out.println(solution.meanAbsoluteDeviation(numbers2)); // Output: 0.0\n    }\n}"}
{"task_id": "Java/4", "generation": "        // Calculate the mean of the dataset\n        double sum = 0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n        \n        // Calculate the sum of absolute differences from the mean\n        double absDiffSum = 0;\n        for (double num : numbers) {\n            absDiffSum += Math.abs(num - mean);\n        }\n        \n        // Calculate and return the Mean Absolute Deviation\n        return absDiffSum / numbers.size();\n    }\n}"}
{"task_id": "Java/5", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.intersperse(Arrays.asList(1, 2, 3), 4));\n    }\n}"}
{"task_id": "Java/5", "generation": "        List<Integer> result = new ArrayList<>();\n        if (numbers.isEmpty()) {\n            return result;\n        }\n        \n        for (int i = 0; i < numbers.size() - 1; i++) {\n            result.add(numbers.get(i));\n            result.add(delimiter);\n        }\n        result.add(numbers.get(numbers.size() - 1));\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.intersperse(Arrays.asList(1, 2, 3), 4)); // [1, 4, 2, 4, 3]\n        System.out.println(solution.intersperse(Arrays.asList(4, 5, 6), 9)); // [4, 9, 5, 9, 6]\n        System.out.println(solution.intersperse(Arrays.asList(), 4)); // []\n    }\n}"}
{"task_id": "Java/5", "generation": "        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/5", "generation": "        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i != numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the intersperse method\n        System.out.println(solution.intersperse(Arrays.asList(), 4)); // []\n        System.out.println(solution.intersperse(Arrays.asList(1, 2, 3), 4)); // [1, 4, 2, 4, 3]\n    }\n}"}
{"task_id": "Java/5", "generation": "        List<Integer> interspersedList = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            interspersedList.add(numbers.get(i));\n            if (i != numbers.size() - 1) {\n                interspersedList.add(delimiter);\n            }\n        }\n        return interspersedList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.intersperse(Arrays.asList(), 4)); // []\n        System.out.println(solution.intersperse(Arrays.asList(1, 2, 3), 4)); // [1, 4, 2, 4, 3]\n    }\n}"}
{"task_id": "Java/6", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        // Split the input string by spaces to get individual groups\n        String[] groups = paren_string.split(\" \");\n        \n        for (String group : groups) {\n            int maxDepth = 0;\n            int currentDepth = 0;\n            \n            for (char c : group.toCharArray()) {\n                if (c == '(') {\n                    currentDepth++;\n                    maxDepth = Math.max(maxDepth, currentDepth);\n                } else if (c == ')') {\n                    currentDepth--;\n                }\n            }\n            \n            result.add(maxDepth);\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the example given in the prompt\n        List<Integer> result = solution.parseNestedParens(\"(()()) ((())) () ((())()())\");\n        System.out.println(result);\n    }\n}"}
{"task_id": "Java/6", "generation": "        List<Integer> result = new ArrayList<>();\n        String[] groups = paren_string.split(\" \");\n\n        for (String group : groups) {\n            int maxDepth = 0;\n            int currentDepth = 0;\n\n            for (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i) == '(') {\n                    currentDepth++;\n                    maxDepth = Math.max(maxDepth, currentDepth);\n                } else if (group.charAt(i) == ')') {\n                    currentDepth--;\n                }\n            }\n\n            result.add(maxDepth);\n        }\n\n        return result;\n    }\n}"}
{"task_id": "Java/6", "generation": "        List<Integer> result = new ArrayList<>();\n        int maxDepth = 0;\n        int currentDepth = 0;\n        \n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                currentDepth++;\n                maxDepth = Math.max(maxDepth, currentDepth);\n            } else if (c == ')') {\n                currentDepth--;\n            } else if (c == ' ') {\n                result.add(maxDepth);\n                maxDepth = 0;\n                currentDepth = 0;\n            }\n        }\n        \n        result.add(maxDepth);\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.parseNestedParens(\"(()()) ((())) () ((())()())\"));\n    }\n}"}
{"task_id": "Java/6", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (String group : paren_string.split(\" \")) {\n            int maxDepth = 0;\n            int currentDepth = 0;\n            \n            for (char c : group.toCharArray()) {\n                if (c == '(') {\n                    currentDepth++;\n                    maxDepth = Math.max(maxDepth, currentDepth);\n                } else if (c == ')') {\n                    currentDepth--;\n                }\n            }\n            \n            result.add(maxDepth);\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/6", "generation": "        List<Integer> result = new ArrayList<>();\n        for (String group : paren_string.split(\" \")) {\n            int maxDepth = 0;\n            int currentDepth = 0;\n            for (char c : group.toCharArray()) {\n                if (c == '(') {\n                    currentDepth++;\n                    maxDepth = Math.max(maxDepth, currentDepth);\n                } else if (c == ')') {\n                    currentDepth--;\n                }\n            }\n            result.add(maxDepth);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.parseNestedParens(\"(()()) ((())) () ((())()())\"));\n    }\n}"}
{"task_id": "Java/7", "generation": "        List<String> filteredStrings = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                filteredStrings.add(str);\n            }\n        }\n        return filteredStrings;\n    }\n}"}
{"task_id": "Java/7", "generation": "        List<String> filteredList = new ArrayList<>();\n        \n        for (String str : strings) {\n            if (str.contains(substring)) {\n                filteredList.add(str);\n            }\n        }\n        \n        return filteredList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.filterBySubstring(List.of(), \"a\")); // []\n        System.out.println(solution.filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")); // [\"abc\", \"bacd\", \"array\"]\n    }\n}"}
{"task_id": "Java/7", "generation": "        List<String> filteredStrings = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                filteredStrings.add(str);\n            }\n        }\n        return filteredStrings;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.filterBySubstring(List.of(), \"a\")); // []\n        System.out.println(solution.filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")); // [\"abc\", \"bacd\", \"array\"]\n    }\n}"}
{"task_id": "Java/7", "generation": "        List<String> filteredStrings = new ArrayList<>();\n        \n        for (String s : strings) {\n            if (s.contains(substring)) {\n                filteredStrings.add(s);\n            }\n        }\n        \n        return filteredStrings;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.filterBySubstring(List.of(), \"a\")); // []\n        System.out.println(solution.filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")); // [\"abc\", \"bacd\", \"array\"]\n    }\n}"}
{"task_id": "Java/7", "generation": "        List<String> filteredStrings = new ArrayList<>();\n        \n        for(String str : strings) {\n            if(str.contains(substring)) {\n                filteredStrings.add(str);\n            }\n        }\n        \n        return filteredStrings;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.filterBySubstring(List.of(), \"a\")); // []\n        System.out.println(solution.filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")); // [\"abc\", \"bacd\", \"array\"]\n    }\n}"}
{"task_id": "Java/8", "generation": "        int sum = 0;\n        int product = 1;\n\n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n\n        List<Integer> result = new ArrayList<>();\n        result.add(sum);\n        result.add(product);\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.sumProduct(new ArrayList<>()));\n        System.out.println(solution.sumProduct(Arrays.asList(1, 2, 3, 4)));\n    }\n}"}
{"task_id": "Java/8", "generation": "        int sum = 0;\n        int product = 1;\n\n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n\n        return Arrays.asList(sum, product);\n    }\n}"}
{"task_id": "Java/8", "generation": "        int sum = 0;\n        int product = 1;\n        \n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n        \n        return Arrays.asList(sum, product);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> numbers1 = new ArrayList<>();\n        List<Integer> numbers2 = Arrays.asList(1, 2, 3, 4);\n\n        System.out.println(solution.sumProduct(numbers1)); // [0, 1]\n        System.out.println(solution.sumProduct(numbers2)); // [10, 24]\n    }\n}"}
{"task_id": "Java/8", "generation": "        int sum = 0;\n        int product = 1;\n\n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n\n        List<Integer> result = new ArrayList<>();\n        result.add(sum);\n        result.add(product);\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.sumProduct(Arrays.asList())); // [0, 1]\n        System.out.println(solution.sumProduct(Arrays.asList(1, 2, 3, 4))); // [10, 24]\n    }\n}"}
{"task_id": "Java/8", "generation": "        int sum = 0;\n        int product = 1;\n        \n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n        \n        return Arrays.asList(sum, product);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test case 1\n        List<Integer> numbers1 = new ArrayList<>();\n        System.out.println(solution.sumProduct(numbers1)); // Output: [0, 1]\n        \n        // Test case 2\n        List<Integer> numbers2 = Arrays.asList(1, 2, 3, 4);\n        System.out.println(solution.sumProduct(numbers2)); // Output: [10, 24]\n    }\n}"}
{"task_id": "Java/9", "generation": "        List<Integer> rollingMax = new ArrayList<>();\n        Deque<Integer> deque = new LinkedList<>();\n        \n        for (int i = 0; i < numbers.size(); i++) {\n            // Remove elements outside the window\n            while (!deque.isEmpty() && deque.peekFirst() < i - 2) {\n                deque.pollFirst();\n            }\n            \n            // Remove smaller elements from the end of the queue\n            while (!deque.isEmpty() && numbers.get(deque.peekLast()) < numbers.get(i)) {\n                deque.pollLast();\n            }\n            \n            deque.offerLast(i);\n            rollingMax.add(numbers.get(deque.peekFirst()));\n        }\n        \n        return rollingMax;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2)));\n    }\n}"}
{"task_id": "Java/9", "generation": "        List<Integer> rollingMaxList = new ArrayList<>();\n        Deque<Integer> deque = new ArrayDeque<>();\n        \n        for (int i = 0; i < numbers.size(); i++) {\n            // Remove elements from the back of the deque that are smaller than the current element\n            while (!deque.isEmpty() && numbers.get(i) >= numbers.get(deque.peekLast())) {\n                deque.removeLast();\n            }\n            \n            // Add the index of the current element to the back of the deque\n            deque.addLast(i);\n            \n            // Check if the front of the deque is outside the rolling window\n            if (i - deque.peekFirst() >= 3) {\n                deque.removeFirst();\n            }\n            \n            // Add the maximum element from the rolling window to the result list\n            rollingMaxList.add(numbers.get(deque.peekFirst()));\n        }\n        \n        return rollingMaxList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 2, 3, 4, 2);\n        List<Integer> rollingMaxList = solution.rollingMax(numbers);\n        System.out.println(rollingMaxList);\n    }\n}"}
{"task_id": "Java/9", "generation": "        List<Integer> rollingMaxList = new ArrayList<>();\n        Deque<Integer> deque = new LinkedList<>();\n\n        for (int i = 0; i < numbers.size(); i++) {\n            // Remove elements from deque that are no longer in the window\n            if (!deque.isEmpty() && deque.peekFirst() < i - 2) {\n                deque.pollFirst();\n            }\n\n            // Remove elements from deque that are smaller than the current element\n            while (!deque.isEmpty() && numbers.get(deque.peekLast()) < numbers.get(i)) {\n                deque.pollLast();\n            }\n\n            deque.offerLast(i);\n            rollingMaxList.add(numbers.get(deque.peekFirst()));\n        }\n\n        return rollingMaxList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> numbers = Arrays.asList(1, 2, 3, 2, 3, 4, 2);\n        List<Integer> rollingMaxList = solution.rollingMax(numbers);\n        \n        System.out.println(rollingMaxList);\n    }\n}"}
{"task_id": "Java/9", "generation": "        List<Integer> rollingMax = new ArrayList<>();\n        Deque<Integer> deque = new ArrayDeque<>();\n        \n        for (int i = 0; i < numbers.size(); i++) {\n            if (!deque.isEmpty() && deque.peekFirst() == i - 3) {\n                deque.pollFirst();\n            }\n            \n            while (!deque.isEmpty() && numbers.get(deque.peekLast()) < numbers.get(i)) {\n                deque.pollLast();\n            }\n            \n            deque.offerLast(i);\n            \n            if (i >= 2) {\n                rollingMax.add(numbers.get(deque.peekFirst()));\n            } else {\n                rollingMax.add(numbers.get(i));\n            }\n        }\n        \n        return rollingMax;\n    }\n}"}
{"task_id": "Java/9", "generation": "        List<Integer> rollingMax = new ArrayList<>();\n        Deque<Integer> deque = new ArrayDeque<>();\n        \n        for(int i = 0; i < numbers.size(); i++) {\n            // Remove elements that are smaller than current element\n            while (!deque.isEmpty() && deque.getFirst() < numbers.get(i)) {\n                deque.removeFirst();\n            }\n            \n            // Add current element to deque\n            deque.addFirst(numbers.get(i));\n            \n            // Add rolling maximum to result list\n            rollingMax.add(deque.getLast());\n        }\n        \n        return rollingMax;\n    }\n}"}
{"task_id": "Java/10", "generation": "        if (string == null || string.length() == 0) {\n            return \"\";\n        }\n        int n = string.length();\n        int i = n - 1;\n        while (i >= 0) {\n            if (isPalindrome(string.substring(i))) {\n                break;\n            }\n            i--;\n        }\n        StringBuilder sb = new StringBuilder(string);\n        sb.append(new StringBuilder(string.substring(0, i)).reverse().toString());\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.makePalindrome(\"\")); // \"\"\n        System.out.println(solution.makePalindrome(\"cat\")); // \"catac\"\n        System.out.println(solution.makePalindrome(\"cata\")); // \"catac\"\n    }\n}"}
{"task_id": "Java/10", "generation": "        if (string == null || string.length() == 0) {\n            return \"\";\n        }\n        \n        int n = string.length();\n        int i = n - 1;\n        while (i >= 0) {\n            if (isPalindrome(string.substring(i))) {\n                break;\n            }\n            i--;\n        }\n        \n        StringBuilder sb = new StringBuilder(string);\n        for (int j = i - 1; j >= 0; j--) {\n            sb.append(string.charAt(j));\n        }\n        \n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.makePalindrome(\"cat\")); // \"catac\"\n        System.out.println(solution.makePalindrome(\"cata\")); // \"catac\"\n        System.out.println(solution.makePalindrome(\"abcd\")); // \"abcdcba\"\n        System.out.println(solution.makePalindrome(\"a\")); // \"a\"\n        System.out.println(solution.makePalindrome(\"\")); // \"\"\n    }\n}"}
{"task_id": "Java/10", "generation": "        if (string == null || string.isEmpty()) {\n            return \"\";\n        }\n        \n        int i = 0;\n        int j = string.length() - 1;\n        \n        while (i < j && string.charAt(i) == string.charAt(j)) {\n            i++;\n            j--;\n        }\n        \n        if (i >= j) {\n            return string;\n        }\n        \n        String prefix = string.substring(0, i);\n        String suffix = string.substring(i, j + 1);\n        \n        String palindromicSuffix = \"\";\n        for (int k = suffix.length() - 1; k >= 0; k--) {\n            palindromicSuffix += suffix.charAt(k);\n        }\n        \n        return prefix + suffix + palindromicSuffix;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.makePalindrome(\"\")); // \"\"\n        System.out.println(solution.makePalindrome(\"cat\")); // \"catac\"\n        System.out.println(solution.makePalindrome(\"cata\")); // \"catac\"\n    }\n}"}
{"task_id": "Java/10", "generation": "        if (string == null || string.length() == 0) {\n            return \"\";\n        }\n        \n        int n = string.length();\n        int i = n - 1;\n        \n        while (i >= 0) {\n            if (isPalindrome(string.substring(i))) {\n                break;\n            }\n            i--;\n        }\n        \n        StringBuilder sb = new StringBuilder(string);\n        sb.append(new StringBuilder(string.substring(0, i)).reverse().toString());\n        \n        return sb.toString();\n    }\n}"}
{"task_id": "Java/10", "generation": "        if (string == null || string.length() == 0) {\n            return \"\";\n        }\n\n        int i = 0;\n        int j = string.length() - 1;\n\n        // Find the longest palindromic suffix\n        while (i < j) {\n            if (string.charAt(i) == string.charAt(j)) {\n                i++;\n                j--;\n            } else {\n                j--;\n            }\n        }\n\n        // Append reverse of prefix to the end of the string\n        StringBuilder sb = new StringBuilder(string);\n        for (int k = i - 1; k >= 0; k--) {\n            sb.append(string.charAt(k));\n        }\n\n        return sb.toString();\n    }\n}\n\n// Test cases\nclass Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test isPalindrome\n        System.out.println(solution.isPalindrome(\"racecar\")); // true\n        System.out.println(solution.isPalindrome(\"hello\")); // false\n\n        // Test makePalindrome\n        System.out.println(solution.makePalindrome(\"\")); // \"\"\n        System.out.println(solution.makePalindrome(\"cat\")); // \"catac\"\n        System.out.println(solution.makePalindrome(\"cata\")); // \"catac\"\n    }\n}"}
{"task_id": "Java/11", "generation": "        StringBuilder sb = new StringBuilder();\n        \n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n                sb.append(\"0\");\n            } else {\n                sb.append(\"1\");\n            }\n        }\n        \n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        String result1 = solution.stringXor(\"010\", \"110\");\n        System.out.println(result1); // Output should be \"100\"\n\n        String result2 = solution.stringXor(\"111\", \"000\");\n        System.out.println(result2); // Output should be \"111\"\n\n        String result3 = solution.stringXor(\"101010\", \"110011\");\n        System.out.println(result3); // Output should be \"011001\"\n    }\n}"}
{"task_id": "Java/11", "generation": "        // Check if the length of both strings is the same\n        if (a.length() != b.length()) {\n            return \"Invalid input: Length of strings should be equal\";\n        }\n        \n        StringBuilder result = new StringBuilder();\n        \n        // Perform binary XOR on each character of the strings\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) != b.charAt(i)) {\n                result.append(\"1\");\n            } else {\n                result.append(\"0\");\n            }\n        }\n        \n        return result.toString();\n    }\n}"}
{"task_id": "Java/11", "generation": "        StringBuilder sb = new StringBuilder();\n        \n        // Perform XOR operation on each character of the strings\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) != b.charAt(i)) {\n                sb.append(\"1\");\n            } else {\n                sb.append(\"0\");\n            }\n        }\n        \n        return sb.toString();\n    }\n}"}
{"task_id": "Java/11", "generation": "        StringBuilder result = new StringBuilder();\n        \n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) != b.charAt(i)) {\n                result.append(\"1\");\n            } else {\n                result.append(\"0\");\n            }\n        }\n        \n        return result.toString();\n    }\n}"}
{"task_id": "Java/11", "generation": "        StringBuilder result = new StringBuilder();\n        \n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n                result.append(\"0\");\n            } else {\n                result.append(\"1\");\n            }\n        }\n        \n        return result.toString();\n    }\n}"}
{"task_id": "Java/12", "generation": "        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        String longestString = strings.get(0);\n        \n        for (String s : strings) {\n            if (s.length() > longestString.length()) {\n                longestString = s;\n            }\n        }\n        \n        return Optional.of(longestString);\n    }\n}"}
{"task_id": "Java/12", "generation": "        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        String longestString = strings.get(0);\n        for (String str : strings) {\n            if (str.length() > longestString.length()) {\n                longestString = str;\n            }\n        }\n        \n        return Optional.of(longestString);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.longest(Arrays.asList(\"a\", \"b\", \"c\"))); // Optional[a]\n        System.out.println(solution.longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))); // Optional[ccc]\n    }\n}"}
{"task_id": "Java/12", "generation": "        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        String longestString = strings.get(0);\n        for (String str : strings) {\n            if (str.length() > longestString.length()) {\n                longestString = str;\n            }\n        }\n        \n        return Optional.of(longestString);\n    }\n}"}
{"task_id": "Java/12", "generation": "        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        String longestString = strings.get(0);\n        \n        for (String str : strings) {\n            if (str.length() > longestString.length()) {\n                longestString = str;\n            }\n        }\n        \n        return Optional.of(longestString);\n    }\n}"}
{"task_id": "Java/12", "generation": "        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String longestString = strings.get(0);\n\n        for (String s : strings) {\n            if (s.length() > longestString.length()) {\n                longestString = s;\n            }\n        }\n\n        return Optional.of(longestString);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.longest(Collections.emptyList()));\n        System.out.println(solution.longest(Arrays.asList(\"a\", \"b\", \"c\")));\n        System.out.println(solution.longest(Arrays.asList(\"a\", \"bb\", \"ccc\")));\n    }\n}"}
{"task_id": "Java/13", "generation": "        if (b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(b, a % b);\n    }\n}"}
{"task_id": "Java/13", "generation": "        if (b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(b, a % b);\n    }\n}"}
{"task_id": "Java/13", "generation": "        // Base case\n        if (b == 0) {\n            return a;\n        }\n        \n        // Recursive case\n        return greatestCommonDivisor(b, a % b);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.greatestCommonDivisor(3, 5)); // Output: 1\n        System.out.println(solution.greatestCommonDivisor(25, 15)); // Output: 5\n    }\n}"}
{"task_id": "Java/13", "generation": "        if (b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(b, a % b);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.greatestCommonDivisor(3, 5)); // 1\n        System.out.println(solution.greatestCommonDivisor(25, 15)); // 5\n    }\n}"}
{"task_id": "Java/13", "generation": "        if (b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(b, a % b);\n    }\n    \n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.greatestCommonDivisor(3, 5)); // 1\n        System.out.println(sol.greatestCommonDivisor(25, 15)); // 5\n    }\n}"}
{"task_id": "Java/14", "generation": "        List<String> prefixes = new ArrayList<>();\n        \n        for (int i = 0; i < string.length(); i++) {\n            prefixes.add(string.substring(0, i+1));\n        }\n        \n        return prefixes;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the function with example input\n        List<String> prefixes = solution.allPrefixes(\"abc\");\n        System.out.println(prefixes);\n    }\n}"}
{"task_id": "Java/14", "generation": "        List<String> prefixes = new ArrayList<>();\n        if (string == null || string.length() == 0) {\n            return prefixes;\n        }\n        \n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        \n        return prefixes;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the function with example\n        String testString = \"abc\";\n        List<String> result = solution.allPrefixes(testString);\n        System.out.println(result);\n    }\n}"}
{"task_id": "Java/14", "generation": "        List<String> prefixes = new ArrayList<>();\n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        return prefixes;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.allPrefixes(\"abc\"));\n    }\n}"}
{"task_id": "Java/14", "generation": "        List<String> prefixes = new ArrayList<>();\n        \n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        \n        return prefixes;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the allPrefixes method\n        System.out.println(solution.allPrefixes(\"abc\"));\n    }\n}"}
{"task_id": "Java/14", "generation": "        List<String> prefixes = new ArrayList<>();\n        \n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        \n        return prefixes;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the function with example input\n        List<String> result = solution.allPrefixes(\"abc\");\n        System.out.println(result);\n    }\n}"}
{"task_id": "Java/15", "generation": "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n        }\n        return sb.toString().trim();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.stringSequence(0)); // \"0\"\n        System.out.println(solution.stringSequence(5)); // \"0 1 2 3 4 5\"\n    }\n}"}
{"task_id": "Java/15", "generation": "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.append(i);\n            if (i != n) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.stringSequence(0)); // \"0\"\n        System.out.println(solution.stringSequence(5)); // \"0 1 2 3 4 5\"\n    }\n}"}
{"task_id": "Java/15", "generation": "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.append(i);\n            if (i != n) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.stringSequence(0));\n        System.out.println(solution.stringSequence(5));\n    }\n}"}
{"task_id": "Java/15", "generation": "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.append(i).append(\" \");\n        }\n        return sb.toString().trim();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.stringSequence(0)); // \"0\"\n        System.out.println(solution.stringSequence(5)); // \"0 1 2 3 4 5\"\n    }\n}"}
{"task_id": "Java/15", "generation": "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.append(i);\n            if (i != n) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.stringSequence(0)); // \"0\"\n        System.out.println(solution.stringSequence(5)); // \"0 1 2 3 4 5\"\n    }\n}"}
{"task_id": "Java/16", "generation": "        // Convert the string to lowercase to make the comparison case-insensitive\n        string = string.toLowerCase();\n        \n        // Use a HashSet to store unique characters\n        Set<Character> set = new HashSet<>();\n        \n        // Iterate through each character in the string\n        for (char c : string.toCharArray()) {\n            // Add the character to the set\n            set.add(c);\n        }\n        \n        // Return the size of the set, which represents the number of distinct characters\n        return set.size();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.countDistinctCharacters(\"xyzXYZ\")); // Output: 3\n        System.out.println(solution.countDistinctCharacters(\"Jerry\")); // Output: 4\n    }\n}"}
{"task_id": "Java/16", "generation": "        // Convert the string to lowercase to ignore case\n        string = string.toLowerCase();\n        \n        // Use a set to keep track of distinct characters\n        Set<Character> charSet = new HashSet<>();\n        \n        // Iterate through the string and add each character to the set\n        for (char c : string.toCharArray()) {\n            charSet.add(c);\n        }\n        \n        // Return the size of the set, which represents the number of distinct characters\n        return charSet.size();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test the countDistinctCharacters method\n        System.out.println(solution.countDistinctCharacters(\"xyzXYZ\")); // Output: 3\n        System.out.println(solution.countDistinctCharacters(\"Jerry\")); // Output: 4\n    }\n}"}
{"task_id": "Java/16", "generation": "        Set<Character> charSet = new HashSet<>();\n        for (char c : string.toCharArray()) {\n            charSet.add(Character.toLowerCase(c));\n        }\n        return charSet.size();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.countDistinctCharacters(\"xyzXYZ\")); // Output: 3\n        System.out.println(solution.countDistinctCharacters(\"Jerry\")); // Output: 4\n    }\n}"}
{"task_id": "Java/16", "generation": "        // Convert the input string to lowercase to ignore case sensitivity\n        string = string.toLowerCase();\n        \n        // Use a set to store distinct characters\n        Set<Character> distinctChars = new HashSet<>();\n        \n        // Iterate over each character in the string\n        for (char c : string.toCharArray()) {\n            distinctChars.add(c);\n        }\n        \n        // Return the size of the set, which gives the count of distinct characters\n        return distinctChars.size();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the countDistinctCharacters method\n        System.out.println(solution.countDistinctCharacters(\"xyzXYZ\")); // Output: 3\n        System.out.println(solution.countDistinctCharacters(\"Jerry\")); // Output: 4\n    }\n}"}
{"task_id": "Java/16", "generation": "        // Create a set to store distinct characters\n        Set<Character> charSet = new HashSet<>();\n        \n        // Convert the string to lowercase to make case-insensitive\n        string = string.toLowerCase();\n        \n        // Iterate through each character in the string\n        for(char c : string.toCharArray()) {\n            // Add the character to the set\n            charSet.add(c);\n        }\n        \n        // Return the size of the set which represents the number of distinct characters\n        return charSet.size();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.countDistinctCharacters(\"xyzXYZ\")); // Output: 3\n        System.out.println(solution.countDistinctCharacters(\"Jerry\")); // Output: 4\n    }\n}"}
{"task_id": "Java/17", "generation": "        List<Integer> beats = new ArrayList<>();\n        String[] notes = string.split(\" \");\n        \n        for (String note : notes) {\n            if (note.equals(\"o\")) {\n                beats.add(4);\n            } else if (note.equals(\"o|\")) {\n                beats.add(2);\n            } else if (note.equals(\".|\")) {\n                beats.add(1);\n            }\n        }\n        \n        return beats;\n    }\n}"}
{"task_id": "Java/17", "generation": "        List<Integer> beats = new ArrayList<>();\n        String[] notes = string.split(\" \");\n        \n        for (String note : notes) {\n            if (note.equals(\"o\")) {\n                beats.add(4);\n            } else if (note.equals(\"o|\")) {\n                beats.add(2);\n            } else if (note.equals(\".|\")) {\n                beats.add(1);\n            }\n        }\n        \n        return beats;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the parseMusic function\n        System.out.println(solution.parseMusic(\"o o| .| o| o| .| .| .| .| o o\")); // [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    }\n}"}
{"task_id": "Java/17", "generation": "        List<Integer> beats = new ArrayList<>();\n        String[] notes = string.split(\" \");\n        \n        for (String note : notes) {\n            if (note.equals(\"o\")) {\n                beats.add(4);\n            } else if (note.equals(\"o|\")) {\n                beats.add(2);\n            } else if (note.equals(\".|\")) {\n                beats.add(1);\n            }\n        }\n        \n        return beats;\n    }\n}"}
{"task_id": "Java/17", "generation": "        List<Integer> beatsList = new ArrayList<>();\n        String[] notes = string.split(\" \");\n        \n        for (String note : notes) {\n            switch (note) {\n                case \"o\":\n                    beatsList.add(4);\n                    break;\n                case \"o|\":\n                    beatsList.add(2);\n                    break;\n                case \".|\":\n                    beatsList.add(1);\n                    break;\n                default:\n                    break;\n            }\n        }\n        \n        return beatsList;\n    }\n}"}
{"task_id": "Java/17", "generation": "        List<Integer> beatsList = new ArrayList<>();\n        \n        String[] notesArr = string.split(\" \");\n        for (String note : notesArr) {\n            if (note.equals(\"o\")) {\n                beatsList.add(4);\n            } else if (note.equals(\"o|\")) {\n                beatsList.add(2);\n            } else if (note.equals(\".|\")) {\n                beatsList.add(1);\n            }\n        }\n        \n        return beatsList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.parseMusic(\"o o| .| o| o| .| .| .| .| o o\"));\n    }\n}"}
{"task_id": "Java/18", "generation": "        if (string == null || string.length() == 0 || substring == null || substring.length() == 0) {\n            return 0;\n        }\n\n        int count = 0;\n        int index = 0;\n\n        while (index != -1) {\n            index = string.indexOf(substring, index);\n            if (index != -1) {\n                count++;\n                index++;\n            }\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.howManyTimes(\"\", \"a\")); // 0\n        System.out.println(solution.howManyTimes(\"aaa\", \"a\")); // 3\n        System.out.println(solution.howManyTimes(\"aaaa\", \"aa\")); // 3\n    }\n}"}
{"task_id": "Java/18", "generation": "        int count = 0;\n        if (string == null || substring == null || string.length() == 0 || substring.length() == 0) {\n            return count;\n        }\n        \n        int index = 0;\n        while (index < string.length()) {\n            index = string.indexOf(substring, index);\n            if (index == -1) {\n                break;\n            }\n            count++;\n            index++;\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.howManyTimes(\"\", \"a\")); // 0\n        System.out.println(solution.howManyTimes(\"aaa\", \"a\")); // 3\n        System.out.println(solution.howManyTimes(\"aaaa\", \"aa\")); // 3\n    }\n}"}
{"task_id": "Java/18", "generation": "        if (string == null || substring == null || string.isEmpty() || substring.isEmpty()) {\n            return 0;\n        }\n        \n        int count = 0;\n        int lastIndex = 0;\n        \n        while (lastIndex != -1) {\n            lastIndex = string.indexOf(substring, lastIndex);\n            \n            if (lastIndex != -1) {\n                count++;\n                lastIndex += 1;\n            }\n        }\n        \n        return count;\n    }\n}"}
{"task_id": "Java/18", "generation": "        if (string == null || substring == null || substring.length() == 0) {\n            return 0;\n        }\n        \n        int count = 0;\n        int index = 0;\n        \n        while (index < string.length()) {\n            index = string.indexOf(substring, index);\n            if (index == -1) {\n                break;\n            }\n            count++;\n            index++;\n        }\n        \n        return count;\n    }\n}"}
{"task_id": "Java/18", "generation": "        if (string == null || substring == null || string.isEmpty() || substring.isEmpty()) {\n            return 0;\n        }\n        \n        int count = 0;\n        int index = 0;\n        \n        while (index != -1) {\n            index = string.indexOf(substring, index);\n            if (index != -1) {\n                count++;\n                index++;\n            }\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.howManyTimes(\"\", \"a\")); // 0\n        System.out.println(solution.howManyTimes(\"aaa\", \"a\")); // 3\n        System.out.println(solution.howManyTimes(\"aaaa\", \"aa\")); // 3\n    }\n}"}
{"task_id": "Java/19", "generation": "        // Split the input string by space\n        String[] numArr = numbers.split(\" \");\n        \n        // Create a map to store the mapping of numerals to numbers\n        Map<String, Integer> numeralToNumber = new HashMap<>();\n        numeralToNumber.put(\"zero\", 0);\n        numeralToNumber.put(\"one\", 1);\n        numeralToNumber.put(\"two\", 2);\n        numeralToNumber.put(\"three\", 3);\n        numeralToNumber.put(\"four\", 4);\n        numeralToNumber.put(\"five\", 5);\n        numeralToNumber.put(\"six\", 6);\n        numeralToNumber.put(\"seven\", 7);\n        numeralToNumber.put(\"eight\", 8);\n        numeralToNumber.put(\"nine\", 9);\n        \n        // Create a list to store the numbers corresponding to the numerals\n        List<Integer> numList = new ArrayList<>();\n        \n        // Convert numerals to numbers and store in the list\n        for (String numeral : numArr) {\n            numList.add(numeralToNumber.get(numeral));\n        }\n        \n        // Sort the list of numbers\n        Collections.sort(numList);\n        \n        // Create a new string with sorted numerals\n        StringBuilder sortedNums = new StringBuilder();\n        for (int num : numList) {\n            for (Map.Entry<String, Integer> entry : numeralToNumber.entrySet()) {\n                if (entry.getValue() == num) {\n                    sortedNums.append(entry.getKey()).append(\" \");\n                    break;\n                }\n            }\n        }\n        \n        // Remove the trailing space and return the sorted numerals\n        return sortedNums.toString().trim();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the sortNumbers method\n        System.out.println(solution.sortNumbers(\"three one five\")); // Output: \"one three five\"\n    }\n}"}
{"task_id": "Java/19", "generation": "        // Split the input string by space\n        String[] nums = numbers.split(\" \");\n        \n        // Create a map to store the mapping of numeral to number\n        Map<String, Integer> numeralToNumber = new HashMap<>();\n        numeralToNumber.put(\"zero\", 0);\n        numeralToNumber.put(\"one\", 1);\n        numeralToNumber.put(\"two\", 2);\n        numeralToNumber.put(\"three\", 3);\n        numeralToNumber.put(\"four\", 4);\n        numeralToNumber.put(\"five\", 5);\n        numeralToNumber.put(\"six\", 6);\n        numeralToNumber.put(\"seven\", 7);\n        numeralToNumber.put(\"eight\", 8);\n        numeralToNumber.put(\"nine\", 9);\n        \n        // Create a list to store the numbers\n        List<Integer> numberList = new ArrayList<>();\n        \n        // Convert numerals to numbers and add to the list\n        for (String num : nums) {\n            numberList.add(numeralToNumber.get(num));\n        }\n        \n        // Sort the numbers\n        Collections.sort(numberList);\n        \n        // Convert numbers back to numerals and create the output string\n        StringBuilder result = new StringBuilder();\n        for (int num : numberList) {\n            for (Map.Entry<String, Integer> entry : numeralToNumber.entrySet()) {\n                if (entry.getValue() == num) {\n                    result.append(entry.getKey()).append(\" \");\n                    break;\n                }\n            }\n        }\n        \n        return result.toString().trim();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.sortNumbers(\"three one five\"));\n    }\n}"}
{"task_id": "Java/19", "generation": "        String[] numberals = numbers.split(\" \");\n        Map<String, Integer> numberMap = new HashMap<>();\n        \n        // Map each numberal to its corresponding numerical value\n        numberMap.put(\"zero\", 0);\n        numberMap.put(\"one\", 1);\n        numberMap.put(\"two\", 2);\n        numberMap.put(\"three\", 3);\n        numberMap.put(\"four\", 4);\n        numberMap.put(\"five\", 5);\n        numberMap.put(\"six\", 6);\n        numberMap.put(\"seven\", 7);\n        numberMap.put(\"eight\", 8);\n        numberMap.put(\"nine\", 9);\n        \n        // Sort the numberals based on their numerical value\n        Arrays.sort(numberals, (a, b) -> numberMap.get(a) - numberMap.get(b));\n        \n        // Convert the sorted numberals back to a string\n        String sortedNumbers = String.join(\" \", numberals);\n        \n        return sortedNumbers;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the sortNumbers method\n        System.out.println(solution.sortNumbers(\"three one five\")); // \"one three five\"\n    }\n}"}
{"task_id": "Java/19", "generation": "        // Create a map to store the mapping of numberals to their corresponding integer values\n        Map<String, Integer> numberMap = new HashMap<>();\n        numberMap.put(\"zero\", 0);\n        numberMap.put(\"one\", 1);\n        numberMap.put(\"two\", 2);\n        numberMap.put(\"three\", 3);\n        numberMap.put(\"four\", 4);\n        numberMap.put(\"five\", 5);\n        numberMap.put(\"six\", 6);\n        numberMap.put(\"seven\", 7);\n        numberMap.put(\"eight\", 8);\n        numberMap.put(\"nine\", 9);\n        \n        // Split the input string into individual numberals\n        String[] numberals = numbers.split(\" \");\n        \n        // Create a list to store the integer values of the numberals\n        List<Integer> numberValues = new ArrayList<>();\n        \n        // Convert each numberal to its corresponding integer value and add it to the list\n        for (String numberal : numberals) {\n            numberValues.add(numberMap.get(numberal));\n        }\n        \n        // Sort the list of integer values\n        Collections.sort(numberValues);\n        \n        // Create a new string with the sorted numberals\n        StringBuilder sortedNumbers = new StringBuilder();\n        for (int i = 0; i < numberValues.size(); i++) {\n            for (Map.Entry<String, Integer> entry : numberMap.entrySet()) {\n                if (entry.getValue() == numberValues.get(i)) {\n                    sortedNumbers.append(entry.getKey()).append(\" \");\n                }\n            }\n        }\n        \n        return sortedNumbers.toString().trim();\n    }\n}"}
{"task_id": "Java/19", "generation": "        // Create a map to store the mapping of numberals to numbers\n        Map<String, Integer> numberMap = new HashMap<>();\n        numberMap.put(\"zero\", 0);\n        numberMap.put(\"one\", 1);\n        numberMap.put(\"two\", 2);\n        numberMap.put(\"three\", 3);\n        numberMap.put(\"four\", 4);\n        numberMap.put(\"five\", 5);\n        numberMap.put(\"six\", 6);\n        numberMap.put(\"seven\", 7);\n        numberMap.put(\"eight\", 8);\n        numberMap.put(\"nine\", 9);\n        \n        // Split the input string into an array of numberals\n        String[] numberals = numbers.split(\" \");\n        \n        // Convert the numberals to numbers and sort them\n        List<Integer> numberList = new ArrayList<>();\n        for (String numeral : numberals) {\n            numberList.add(numberMap.get(numeral));\n        }\n        Collections.sort(numberList);\n        \n        // Convert the sorted numbers back to numberals\n        StringBuilder sb = new StringBuilder();\n        for (int num : numberList) {\n            for (Map.Entry<String, Integer> entry : numberMap.entrySet()) {\n                if (entry.getValue() == num) {\n                    sb.append(entry.getKey()).append(\" \");\n                    break;\n                }\n            }\n        }\n        \n        // Remove the trailing whitespace and return the result\n        return sb.toString().trim();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.sortNumbers(\"three one five\")); // \"one three five\"\n    }\n}"}
{"task_id": "Java/20", "generation": "        // Sort the list of numbers\n        Collections.sort(numbers);\n\n        double minDiff = Double.MAX_VALUE;\n        List<Double> result = new ArrayList<>();\n\n        // Iterate through the sorted list to find the two closest numbers\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = numbers.get(i+1) - numbers.get(i);\n            if (diff < minDiff) {\n                minDiff = diff;\n                result.clear();\n                result.add(numbers.get(i));\n                result.add(numbers.get(i+1));\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Double> test1 = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\n        List<Double> result1 = solution.findClosestElements(test1);\n        System.out.println(result1);\n\n        List<Double> test2 = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0);\n        List<Double> result2 = solution.findClosestElements(test2);\n        System.out.println(result2);\n    }\n}"}
{"task_id": "Java/20", "generation": "        List<Double> result = new ArrayList<>();\n        if (numbers == null || numbers.size() < 2) {\n            return result;\n        }\n        \n        Collections.sort(numbers);\n        \n        double minDiff = Double.MAX_VALUE;\n        double first = 0.0;\n        double second = 0.0;\n        \n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = Math.abs(numbers.get(i) - numbers.get(i + 1));\n            if (diff < minDiff) {\n                minDiff = diff;\n                first = numbers.get(i);\n                second = numbers.get(i + 1);\n            }\n        }\n        \n        result.add(first);\n        result.add(second);\n        \n        return result;\n    }\n}"}
{"task_id": "Java/20", "generation": "        if (numbers.size() < 2) {\n            throw new IllegalArgumentException(\"List must contain at least two numbers\");\n        }\n\n        Collections.sort(numbers);\n\n        double minDiff = Double.MAX_VALUE;\n        int index1 = 0;\n        int index2 = 0;\n\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = numbers.get(i + 1) - numbers.get(i);\n            if (diff < minDiff) {\n                minDiff = diff;\n                index1 = i;\n                index2 = i + 1;\n            }\n        }\n\n        List<Double> result = new ArrayList<>();\n        result.add(numbers.get(index1));\n        result.add(numbers.get(index2));\n\n        return result;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Double> numbers1 = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\n        List<Double> result1 = solution.findClosestElements(numbers1);\n        System.out.println(result1);\n\n        List<Double> numbers2 = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0);\n        List<Double> result2 = solution.findClosestElements(numbers2);\n        System.out.println(result2);\n    }\n}"}
{"task_id": "Java/20", "generation": "        Collections.sort(numbers);\n        double minDiff = Double.MAX_VALUE;\n        double num1 = 0.0;\n        double num2 = 0.0;\n        \n        for(int i=0; i<numbers.size()-1; i++) {\n            double diff = numbers.get(i+1) - numbers.get(i);\n            if(diff < minDiff) {\n                minDiff = diff;\n                num1 = numbers.get(i);\n                num2 = numbers.get(i+1);\n            }\n        }\n        \n        List<Double> result = new ArrayList<>();\n        result.add(num1);\n        result.add(num2);\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test 1\n        List<Double> numbers1 = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\n        System.out.println(solution.findClosestElements(numbers1)); // Output: [2.0, 2.2]\n        \n        // Test 2\n        List<Double> numbers2 = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0);\n        System.out.println(solution.findClosestElements(numbers2)); // Output: [2.0, 2.0]\n    }\n}"}
{"task_id": "Java/20", "generation": "        // Sort the numbers in ascending order\n        Collections.sort(numbers);\n\n        double minDiff = Double.MAX_VALUE;\n        double num1 = 0;\n        double num2 = 0;\n\n        // Iterate through the list to find the two closest numbers\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = numbers.get(i + 1) - numbers.get(i);\n            if (diff < minDiff) {\n                minDiff = diff;\n                num1 = numbers.get(i);\n                num2 = numbers.get(i + 1);\n            }\n        }\n\n        List<Double> result = new ArrayList<>();\n        result.add(num1);\n        result.add(num2);\n\n        return result;\n    }\n}"}
{"task_id": "Java/21", "generation": "        // Find the smallest and largest numbers in the list\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        \n        // Calculate the range of the numbers\n        double range = max - min;\n        \n        // Apply the linear transform to each number in the list\n        List<Double> rescaledNumbers = new ArrayList<>();\n        for (double num : numbers) {\n            double rescaledNum = (num - min) / range;\n            rescaledNumbers.add(rescaledNum);\n        }\n        \n        return rescaledNumbers;\n    }\n}"}
{"task_id": "Java/21", "generation": "        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        \n        List<Double> rescaled = new ArrayList<>();\n        for (double num : numbers) {\n            double rescaledNum = (num - min) / (max - min);\n            rescaled.add(rescaledNum);\n        }\n        \n        return rescaled;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Double> numbers = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0);\n        List<Double> rescaled = solution.rescaleToUnit(numbers);\n        \n        System.out.println(rescaled);\n    }\n}"}
{"task_id": "Java/21", "generation": "        if (numbers == null || numbers.size() < 2) {\n            throw new IllegalArgumentException(\"Input list must contain at least two elements\");\n        }\n        \n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        \n        List<Double> rescaledNumbers = new ArrayList<>();\n        for (double num : numbers) {\n            double rescaledNum = (num - min) / (max - min);\n            rescaledNumbers.add(rescaledNum);\n        }\n        \n        return rescaledNumbers;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Double> numbers = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0);\n        List<Double> rescaledNumbers = solution.rescaleToUnit(numbers);\n        \n        System.out.println(rescaledNumbers);\n    }\n}"}
{"task_id": "Java/21", "generation": "        double min = numbers.get(0);\n        double max = numbers.get(0);\n        \n        // Find the minimum and maximum values in the list\n        for (double num : numbers) {\n            if (num < min) {\n                min = num;\n            }\n            if (num > max) {\n                max = num;\n            }\n        }\n        \n        // Calculate the range of values\n        double range = max - min;\n        \n        // Apply the linear transformation to rescale the values\n        List<Double> rescaledNumbers = new ArrayList<>();\n        for (double num : numbers) {\n            double rescaledNum = (num - min) / range;\n            rescaledNumbers.add(rescaledNum);\n        }\n        \n        return rescaledNumbers;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Double> numbers = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0);\n        List<Double> rescaledNumbers = solution.rescaleToUnit(numbers);\n        \n        System.out.println(rescaledNumbers);\n    }\n}"}
{"task_id": "Java/21", "generation": "        if (numbers == null || numbers.size() < 2) {\n            throw new IllegalArgumentException(\"Input list must have at least two elements.\");\n        }\n\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n\n        List<Double> rescaled = new ArrayList<>();\n        for (double num : numbers) {\n            double rescaledNum = (num - min) / (max - min);\n            rescaled.add(rescaledNum);\n        }\n\n        return rescaled;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Double> numbers = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0);\n        List<Double> rescaledNumbers = solution.rescaleToUnit(numbers);\n        System.out.println(rescaledNumbers);\n    }\n}"}
{"task_id": "Java/22", "generation": "        List<Integer> integers = new ArrayList<>();\n\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                integers.add((Integer) value);\n            }\n        }\n\n        return integers;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Object> values1 = Arrays.asList('a', 3.14, 5);\n        List<Object> values2 = Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of());\n\n        System.out.println(solution.filterIntergers(values1)); // [5]\n        System.out.println(solution.filterIntergers(values2)); // [1, 2, 3]\n    }\n}"}
{"task_id": "Java/22", "generation": "        List<Integer> integers = new ArrayList<>();\n        for (Object obj : values) {\n            if (obj instanceof Integer) {\n                integers.add((Integer) obj);\n            }\n        }\n        return integers;\n    }\n}"}
{"task_id": "Java/22", "generation": "        List<Integer> integers = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                integers.add((Integer) value);\n            }\n        }\n        return integers;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Object> test1 = Arrays.asList('a', 3.14, 5);\n        List<Object> test2 = Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of());\n        \n        System.out.println(solution.filterIntergers(test1));\n        System.out.println(solution.filterIntergers(test2));\n    }\n}"}
{"task_id": "Java/22", "generation": "        List<Integer> integers = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                integers.add((Integer) value);\n            }\n        }\n        return integers;\n    }\n}"}
{"task_id": "Java/22", "generation": "        List<Integer> integers = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                integers.add((Integer) value);\n            }\n        }\n        return integers;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.filterIntergers(Arrays.asList('a', 3.14, 5))); // [5]\n        System.out.println(solution.filterIntergers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))); // [1, 2, 3]\n    }\n}"}
{"task_id": "Java/23", "generation": "        return string.length();\n    }\n\n    /**\n    Reverse a given string\n    >>> reverseString(\"abc\")\n    \"cba\"\n    >>> reverseString(\"\")\n    \"\"\n     */\n    public String reverseString(String string) {\n        return new StringBuilder(string).reverse().toString();\n    }\n\n    /**\n    Check if a given string is a palindrome\n    >>> isPalindrome(\"racecar\")\n    true\n    >>> isPalindrome(\"hello\")\n    false\n     */\n    public boolean isPalindrome(String string) {\n        String reversed = reverseString(string);\n        return string.equals(reversed);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test strlen method\n        System.out.println(solution.strlen(\"abc\")); // Output: 3\n        System.out.println(solution.strlen(\"\")); // Output: 0\n\n        // Test reverseString method\n        System.out.println(solution.reverseString(\"abc\")); // Output: \"cba\"\n        System.out.println(solution.reverseString(\"\")); // Output: \"\"\n\n        // Test isPalindrome method\n        System.out.println(solution.isPalindrome(\"racecar\")); // Output: true\n        System.out.println(solution.isPalindrome(\"hello\")); // Output: false\n    }\n}"}
{"task_id": "Java/23", "generation": "        return string.length();\n    }\n\n    /**\n    Reverse the given string\n    >>> reverseString(\"hello\")\n    \"olleh\"\n    >>> reverseString(\"world\")\n    \"dlrow\"\n     */\n    public String reverseString(String string) {\n        StringBuilder sb = new StringBuilder(string);\n        return sb.reverse().toString();\n    }\n\n    /**\n    Check if the given string is a palindrome\n    >>> isPalindrome(\"racecar\")\n    true\n    >>> isPalindrome(\"hello\")\n    false\n     */\n    public boolean isPalindrome(String string) {\n        String reversed = reverseString(string);\n        return string.equals(reversed);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.strlen(\"\")); // 0\n        System.out.println(solution.strlen(\"abc\")); // 3\n\n        System.out.println(solution.reverseString(\"hello\")); // \"olleh\"\n        System.out.println(solution.reverseString(\"world\")); // \"dlrow\"\n\n        System.out.println(solution.isPalindrome(\"racecar\")); // true\n        System.out.println(solution.isPalindrome(\"hello\")); // false\n    }\n}"}
{"task_id": "Java/23", "generation": "        return string.length();\n    }\n\n    /**\n    Reverse a given string\n    >>> reverseString(\"hello\")\n    \"olleh\"\n    >>> reverseString(\"12345\")\n    \"54321\"\n     */\n    public String reverseString(String string) {\n        StringBuilder reversed = new StringBuilder();\n        for (int i = string.length() - 1; i >= 0; i--) {\n            reversed.append(string.charAt(i));\n        }\n        return reversed.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.strlen(\"\"));\n        System.out.println(solution.strlen(\"abc\"));\n\n        System.out.println(solution.reverseString(\"hello\"));\n        System.out.println(solution.reverseString(\"12345\"));\n    }\n}"}
{"task_id": "Java/23", "generation": "        return string.length();\n    }\n\n    /**\n    Return true if given string is a palindrome, false otherwise\n    >>> isPalindrome(\"racecar\")\n    true\n    >>> isPalindrome(\"hello\")\n    false\n     */\n    public boolean isPalindrome(String string) {\n        int left = 0;\n        int right = string.length() - 1;\n        while (left < right) {\n            if (string.charAt(left) != string.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.strlen(\"\")); // 0\n        System.out.println(solution.strlen(\"abc\")); // 3\n\n        System.out.println(solution.isPalindrome(\"racecar\")); // true\n        System.out.println(solution.isPalindrome(\"hello\")); // false\n    }\n}"}
{"task_id": "Java/23", "generation": "        return string.length();\n    }\n\n    /**\n    Check if a string is empty\n    >>> isEmpty(\"\")\n    true\n    >>> isEmpty(\"abc\")\n    false\n     */\n    public boolean isEmpty(String string) {\n        return string.isEmpty();\n    }\n\n    /**\n    Convert string to uppercase\n    >>> toUpper(\"hello\")\n    \"HELLO\"\n    >>> toUpper(\"abc\")\n    \"ABC\"\n     */\n    public String toUpper(String string) {\n        return string.toUpperCase();\n    }\n\n    /**\n    Convert string to lowercase\n    >>> toLower(\"HELLO\")\n    \"hello\"\n    >>> toLower(\"ABC\")\n    \"abc\"\n     */\n    public String toLower(String string) {\n        return string.toLowerCase();\n    }\n\n    /**\n    Reverse a string\n    >>> reverseString(\"hello\")\n    \"olleh\"\n    >>> reverseString(\"abc\")\n    \"cba\"\n     */\n    public String reverseString(String string) {\n        return new StringBuilder(string).reverse().toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.strlen(\"abc\"));\n        System.out.println(solution.isEmpty(\"\"));\n        System.out.println(solution.toUpper(\"hello\"));\n        System.out.println(solution.toLower(\"HELLO\"));\n        System.out.println(solution.reverseString(\"hello\"));\n    }\n}"}
{"task_id": "Java/24", "generation": "        // Iterate from n-1 to 1\n        for (int i = n-1; i >= 1; i--) {\n            // Check if i divides n evenly\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return -1; // If no divisor found\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.largestDivisor(15)); // 5\n        System.out.println(solution.largestDivisor(20)); // 10\n        System.out.println(solution.largestDivisor(7)); // 1\n    }\n}"}
{"task_id": "Java/24", "generation": "        for (int i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return 1;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        int n = 15;\n        System.out.println(sol.largestDivisor(n));\n    }\n}"}
{"task_id": "Java/24", "generation": "        for (int i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return 1; // If no divisor is found, return 1\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.largestDivisor(15)); // Output should be 5\n        System.out.println(solution.largestDivisor(20)); // Output should be 10\n        System.out.println(solution.largestDivisor(7)); // Output should be 1\n    }\n}"}
{"task_id": "Java/24", "generation": "        int largestDivisor = 0;\n        \n        for (int i = 1; i < n; i++) {\n            if (n % i == 0) {\n                largestDivisor = i;\n            }\n        }\n        \n        return largestDivisor;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.largestDivisor(15)); // 5\n    }\n}"}
{"task_id": "Java/24", "generation": "        for (int i = n - 1; i >= 1; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return -1; // Return -1 if no divisor is found\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the largestDivisor function\n        System.out.println(solution.largestDivisor(15)); // Output should be 5\n    }\n}"}
{"task_id": "Java/25", "generation": "        List<Integer> factors = new ArrayList<>();\n        \n        for (int i = 2; i*i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        \n        if (n > 1) {\n            factors.add(n);\n        }\n        \n        return factors;\n    }\n}"}
{"task_id": "Java/25", "generation": "        List<Integer> factors = new ArrayList<>();\n        \n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        \n        return factors;\n    }\n}"}
{"task_id": "Java/25", "generation": "        List<Integer> factors = new ArrayList<>();\n        \n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        \n        return factors;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.factorize(8)); // [2, 2, 2]\n        System.out.println(solution.factorize(25)); // [5, 5]\n        System.out.println(solution.factorize(70)); // [2, 5, 7]\n    }\n}"}
{"task_id": "Java/25", "generation": "        List<Integer> factors = new ArrayList<>();\n        \n        for (int i = 2; i * i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        \n        if (n > 1) {\n            factors.add(n);\n        }\n        \n        return factors;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.factorize(8)); // [2, 2, 2]\n        System.out.println(solution.factorize(25)); // [5, 5]\n        System.out.println(solution.factorize(70)); // [2, 5, 7]\n    }\n}"}
{"task_id": "Java/25", "generation": "        List<Integer> factors = new ArrayList<>();\n        \n        // Check for 2's as factors\n        while (n % 2 == 0) {\n            factors.add(2);\n            n = n / 2;\n        }\n        \n        // Check for other prime factors\n        for (int i = 3; i <= Math.sqrt(n); i = i + 2) {\n            while (n % i == 0) {\n                factors.add(i);\n                n = n / i;\n            }\n        }\n        \n        // If n is a prime number greater than 2\n        if (n > 2) {\n            factors.add(n);\n        }\n        \n        return factors;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.factorize(8)); // [2, 2, 2]\n        System.out.println(solution.factorize(25)); // [5, 5]\n        System.out.println(solution.factorize(70)); // [2, 5, 7]\n    }\n}"}
{"task_id": "Java/26", "generation": "        Set<Integer> seen = new HashSet<>();\n        List<Integer> result = new ArrayList<>();\n        \n        for (Integer num : numbers) {\n            if (!seen.contains(num)) {\n                seen.add(num);\n                result.add(num);\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> numbers = Arrays.asList(1, 2, 3, 2, 4);\n        List<Integer> result = solution.removeDuplicates(numbers);\n        \n        System.out.println(result);\n    }\n}"}
{"task_id": "Java/26", "generation": "        Set<Integer> uniqueNumbers = new LinkedHashSet<>(numbers);\n        return uniqueNumbers.stream().collect(Collectors.toList());\n    }\n}"}
{"task_id": "Java/26", "generation": "        Set<Integer> uniqueNumbers = new LinkedHashSet<>(numbers);\n        return new ArrayList<>(uniqueNumbers);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 2, 4);\n        List<Integer> result = solution.removeDuplicates(numbers);\n\n        System.out.println(result);\n    }\n}"}
{"task_id": "Java/26", "generation": "        Set<Integer> uniqueNumbers = new LinkedHashSet<>(numbers);\n        return new ArrayList<>(uniqueNumbers);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> testList = Arrays.asList(1, 2, 3, 2, 4);\n        List<Integer> result = solution.removeDuplicates(testList);\n        System.out.println(result);\n    }\n}"}
{"task_id": "Java/26", "generation": "        Set<Integer> set = new HashSet<>();\n        List<Integer> result = new ArrayList<>();\n\n        for (Integer num : numbers) {\n            if (!set.contains(num)) {\n                result.add(num);\n                set.add(num);\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 2, 4);\n        List<Integer> result = solution.removeDuplicates(numbers);\n\n        System.out.println(result);\n    }\n}"}
{"task_id": "Java/27", "generation": "        // Convert string to char array\n        char[] charArray = string.toCharArray();\n\n        // Flip the case of each character in the array\n        for (int i = 0; i < charArray.length; i++) {\n            if (Character.isLowerCase(charArray[i])) {\n                charArray[i] = Character.toUpperCase(charArray[i]);\n            } else if (Character.isUpperCase(charArray[i])) {\n                charArray[i] = Character.toLowerCase(charArray[i]);\n            }\n        }\n\n        // Convert char array back to string and return\n        return new String(charArray);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test the flipCase method\n        String testString = \"Hello\";\n        System.out.println(solution.flipCase(testString)); // Expected output: \"hELLO\"\n    }\n}"}
{"task_id": "Java/27", "generation": "        StringBuilder sb = new StringBuilder();\n        \n        for (char c : string.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n            } else if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n            } else {\n                sb.append(c);\n            }\n        }\n        \n        return sb.toString();\n    }\n}"}
{"task_id": "Java/27", "generation": "        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            // Check if the character is uppercase\n            if (Character.isUpperCase(chars[i])) {\n                chars[i] = Character.toLowerCase(chars[i]);\n            } else if (Character.isLowerCase(chars[i])) {\n                chars[i] = Character.toUpperCase(chars[i]);\n            }\n        }\n        return new String(chars);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.flipCase(\"Hello\")); // Output: \"hELLO\"\n    }\n}"}
{"task_id": "Java/27", "generation": "        char[] charArray = string.toCharArray();\n        \n        for (int i = 0; i < charArray.length; i++) {\n            char c = charArray[i];\n            if (Character.isUpperCase(c)) {\n                charArray[i] = Character.toLowerCase(c);\n            } else if (Character.isLowerCase(c)) {\n                charArray[i] = Character.toUpperCase(c);\n            }\n        }\n        \n        return new String(charArray);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the flipCase method\n        System.out.println(solution.flipCase(\"Hello\")); // Output: \"hELLO\"\n        System.out.println(solution.flipCase(\"wOrLD\")); // Output: \"WoRld\"\n        System.out.println(solution.flipCase(\"abc123\")); // Output: \"ABC123\"\n    }\n}"}
{"task_id": "Java/27", "generation": "        char[] charArray = string.toCharArray();\n        for (int i = 0; i < charArray.length; i++) {\n            char c = charArray[i];\n            if (Character.isUpperCase(c)) {\n                charArray[i] = Character.toLowerCase(c);\n            } else if (Character.isLowerCase(c)) {\n                charArray[i] = Character.toUpperCase(c);\n            }\n        }\n        return new String(charArray);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        String testString1 = \"Hello\";\n        System.out.println(solution.flipCase(testString1)); // hELLO\n        \n        String testString2 = \"WORLD\";\n        System.out.println(solution.flipCase(testString2)); // world\n        \n        String testString3 = \"HeLLo WoRLD\";\n        System.out.println(solution.flipCase(testString3)); // hEllO wOrld\n    }\n}"}
{"task_id": "Java/28", "generation": "        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.concatenate(List.of())); // \"\"\n        System.out.println(solution.concatenate(Arrays.asList(\"a\", \"b\", \"c\"))); // \"abc\"\n    }\n}"}
{"task_id": "Java/28", "generation": "        StringBuilder sb = new StringBuilder();\n        for (String str : strings) {\n            sb.append(str);\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.concatenate(new ArrayList<>()));\n        System.out.println(solution.concatenate(Arrays.asList(\"a\", \"b\", \"c\")));\n    }\n}"}
{"task_id": "Java/28", "generation": "        StringBuilder sb = new StringBuilder();\n        for(String str : strings){\n            sb.append(str);\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.concatenate(Collections.emptyList())); // Output: \"\"\n        System.out.println(solution.concatenate(Arrays.asList(\"a\", \"b\", \"c\"))); // Output: \"abc\"\n    }\n}"}
{"task_id": "Java/28", "generation": "        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.concatenate(Arrays.asList(\"a\", \"b\", \"c\")));\n    }\n}"}
{"task_id": "Java/28", "generation": "        StringBuilder sb = new StringBuilder();\n        for (String str : strings) {\n            sb.append(str);\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.concatenate(Arrays.asList(\"a\", \"b\", \"c\")));\n        System.out.println(solution.concatenate(Arrays.asList()));\n    }\n}"}
{"task_id": "Java/29", "generation": "        return strings.stream()\n                .filter(str -> str.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}"}
{"task_id": "Java/29", "generation": "        return strings.stream()\n            .filter(str -> str.startsWith(prefix))\n            .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")); // [\"abc\", \"array\"]\n        System.out.println(solution.filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"b\")); // [\"bcd\"]\n        System.out.println(solution.filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"c\")); // [\"cde\"]\n        System.out.println(solution.filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"d\")); // []\n    }\n}"}
{"task_id": "Java/29", "generation": "        return strings.stream()\n                .filter(str -> str.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.filterByPrefix(List.of(), \"a\")); // []\n        System.out.println(solution.filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")); // [\"abc\", \"array\"]\n    }\n}"}
{"task_id": "Java/29", "generation": "        return strings.stream()\n                      .filter(s -> s.startsWith(prefix))\n                      .collect(Collectors.toList());\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.filterByPrefix(List.of(), \"a\")); // []\n        System.out.println(solution.filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")); // [\"abc\", \"array\"]\n    }\n}"}
{"task_id": "Java/29", "generation": "        return strings.stream()\n                      .filter(s -> s.startsWith(prefix))\n                      .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.filterByPrefix(List.of(), \"a\")); // []\n        System.out.println(solution.filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")); // [\"abc\", \"array\"]\n    }\n}"}
{"task_id": "Java/30", "generation": "        return l.stream()\n                .filter(num -> num > 0)\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> l1 = Arrays.asList(-1, 2, -4, 5, 6);\n        System.out.println(solution.getPositive(l1)); // [2, 5, 6]\n\n        List<Integer> l2 = Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\n        System.out.println(solution.getPositive(l2)); // [5, 3, 2, 3, 9, 123, 1]\n    }\n}"}
{"task_id": "Java/30", "generation": "        return l.stream()\n                .filter(n -> n > 0)\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> l1 = Arrays.asList(-1, 2, -4, 5, 6);\n        List<Integer> l2 = Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\n\n        System.out.println(solution.getPositive(l1)); // [2, 5, 6]\n        System.out.println(solution.getPositive(l2)); // [5, 3, 2, 3, 9, 123, 1]\n    }\n}"}
{"task_id": "Java/30", "generation": "        return l.stream()\n                .filter(num -> num > 0)\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> input1 = Arrays.asList(-1, 2, -4, 5, 6);\n        List<Integer> input2 = Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\n\n        System.out.println(solution.getPositive(input1)); // [2, 5, 6]\n        System.out.println(solution.getPositive(input2)); // [5, 3, 2, 3, 9, 123, 1]\n    }\n}"}
{"task_id": "Java/30", "generation": "        return l.stream()\n                .filter(num -> num > 0)\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> test1 = Arrays.asList(-1, 2, -4, 5, 6);\n        System.out.println(solution.getPositive(test1)); // [2, 5, 6]\n\n        List<Integer> test2 = Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\n        System.out.println(solution.getPositive(test2)); // [5, 3, 2, 3, 9, 123, 1]\n    }\n}"}
{"task_id": "Java/30", "generation": "        return l.stream()\n            .filter(num -> num > 0)\n            .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> list1 = Arrays.asList(-1, 2, -4, 5, 6);\n        System.out.println(solution.getPositive(list1)); // [2, 5, 6]\n\n        List<Integer> list2 = Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\n        System.out.println(solution.getPositive(list2)); // [5, 3, 2, 3, 9, 123, 1]\n    }\n}"}
{"task_id": "Java/31", "generation": "        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.isPrime(6)); // false\n        System.out.println(solution.isPrime(101)); // true\n        System.out.println(solution.isPrime(11)); // true\n        System.out.println(solution.isPrime(13441)); // true\n        System.out.println(solution.isPrime(61)); // true\n        System.out.println(solution.isPrime(4)); // false\n        System.out.println(solution.isPrime(1)); // false\n    }\n}"}
{"task_id": "Java/31", "generation": "        if (n <= 1) {\n            return false;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.isPrime(6)); // false\n        System.out.println(solution.isPrime(101)); // true\n        System.out.println(solution.isPrime(11)); // true\n        System.out.println(solution.isPrime(13441)); // true\n        System.out.println(solution.isPrime(61)); // true\n        System.out.println(solution.isPrime(4)); // false\n        System.out.println(solution.isPrime(1)); // false\n    }\n}"}
{"task_id": "Java/31", "generation": "        if (n <= 1) {\n            return false;\n        }\n        if (n <= 3) {\n            return true;\n        }\n        if (n % 2 == 0 || n % 3 == 0) {\n            return false;\n        }\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.isPrime(6)); // false\n        System.out.println(solution.isPrime(101)); // true\n        System.out.println(solution.isPrime(11)); // true\n        System.out.println(solution.isPrime(13441)); // true\n        System.out.println(solution.isPrime(61)); // true\n        System.out.println(solution.isPrime(4)); // false\n        System.out.println(solution.isPrime(1)); // false\n    }\n}"}
{"task_id": "Java/31", "generation": "        if (n <= 1) {\n            return false;\n        }\n        if (n <= 3) {\n            return true;\n        }\n        if (n % 2 == 0 || n % 3 == 0) {\n            return false;\n        }\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.isPrime(6));\n        System.out.println(solution.isPrime(101));\n        System.out.println(solution.isPrime(11));\n        System.out.println(solution.isPrime(13441));\n        System.out.println(solution.isPrime(61));\n        System.out.println(solution.isPrime(4));\n        System.out.println(solution.isPrime(1));\n    }\n}"}
{"task_id": "Java/31", "generation": "        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/32", "generation": "        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"Input list must have an even number of coefficients.\");\n        }\n        \n        double maxCoeff = 0;\n        for (double coeff : xs) {\n            if (coeff != 0 && Math.abs(coeff) > Math.abs(maxCoeff)) {\n                maxCoeff = coeff;\n            }\n        }\n        \n        // Use binary search to find zero point\n        double left = -1e9;\n        double right = 1e9;\n        while (right - left > 1e-9) {\n            double mid = (left + right) / 2;\n            if (poly(xs, mid) > 0) {\n                left = mid;\n            } else {\n                right = mid;\n            }\n        }\n        \n        return right;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Double> xs1 = Arrays.asList(1.0, 2.0);\n        List<Double> xs2 = Arrays.asList(-6.0, 11.0, -6.0, 1.0);\n        \n        System.out.println(solution.findZero(xs1)); // -0.5\n        System.out.println(solution.findZero(xs2)); // 1.0\n    }\n}"}
{"task_id": "Java/32", "generation": "        // Check if the number of coefficients is even\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"Number of coefficients must be even\");\n        }\n        \n        // Find the largest non-zero coefficient\n        double largestNonZero = 0;\n        for (double coefficient : xs) {\n            if (coefficient != 0 && coefficient > largestNonZero) {\n                largestNonZero = coefficient;\n            }\n        }\n        \n        // Calculate possible zero points\n        List<Double> possibleZeroPoints = new ArrayList<>();\n        for (int i = 1; i <= Math.abs(largestNonZero); i++) {\n            if (poly(xs, i) == 0) {\n                possibleZeroPoints.add((double) i);\n            }\n            if (poly(xs, -i) == 0) {\n                possibleZeroPoints.add((double) -i);\n            }\n        }\n        \n        // Return the first zero point found\n        if (!possibleZeroPoints.isEmpty()) {\n            return possibleZeroPoints.get(0);\n        } else {\n            throw new IllegalArgumentException(\"No zero point found\");\n        }\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.findZero(Arrays.asList(1.0, 2.0))); // Expected output: -0.5\n        System.out.println(solution.findZero(Arrays.asList(-6.0, 11.0, -6.0, 1.0))); // Expected output: 1.0\n    }\n}"}
{"task_id": "Java/32", "generation": "        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"Number of coefficients must be even\");\n        }\n        \n        double maxNonZero = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (Math.abs(xs.get(i)) > 0) {\n                maxNonZero = Math.abs(xs.get(i));\n            }\n        }\n        \n        List<Double> reversedCoefficients = new ArrayList<>();\n        for (int i = xs.size() - 1; i >= 0; i--) {\n            reversedCoefficients.add(xs.get(i));\n        }\n        \n        double result = 0;\n        for (int i = 0; i < reversedCoefficients.size(); i++) {\n            result += reversedCoefficients.get(i) * Math.pow(-1, i) / maxNonZero;\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Double> xs1 = Arrays.asList(1.0, 2.0);\n        System.out.println(solution.poly(xs1, -0.5)); // Expected output: 0.0\n\n        List<Double> xs2 = Arrays.asList(-6.0, 11.0, -6.0, 1.0);\n        System.out.println(solution.poly(xs2, 1.0)); // Expected output: 0.0\n    }\n}"}
{"task_id": "Java/32", "generation": "        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"Coefficients list must have an even number of elements.\");\n        }\n        \n        double maxCoeff = 0;\n        for (double coeff : xs) {\n            if (coeff != 0 && Math.abs(coeff) > Math.abs(maxCoeff)) {\n                maxCoeff = coeff;\n            }\n        }\n        \n        // Using Newton's method to find zero point\n        double x = 0.0;\n        double epsilon = 0.0001;\n        double dx;\n        \n        do {\n            double fx = poly(xs, x);\n            double fpx = 0;\n            for (int i = 1; i < xs.size(); i++) {\n                fpx += i * xs.get(i) * Math.pow(x, i - 1);\n            }\n            dx = fx / fpx;\n            x -= dx;\n        } while (Math.abs(dx) > epsilon);\n        \n        return x;\n    }\n    \n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        \n        List<Double> xs1 = Arrays.asList(1.0, 2.0);\n        System.out.println(sol.findZero(xs1)); // -0.5\n        \n        List<Double> xs2 = Arrays.asList(-6.0, 11.0, -6.0, 1.0);\n        System.out.println(sol.findZero(xs2)); // 1.0\n    }\n}"}
{"task_id": "Java/32", "generation": "        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"Input list must have an even number of coefficients\");\n        }\n        \n        double largestNonZeroCoefficient = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) != 0) {\n                largestNonZeroCoefficient = xs.get(i);\n            }\n        }\n        \n        List<Double> derivativeCoefficients = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i += 2) {\n            derivativeCoefficients.add(xs.get(i) * i);\n        }\n        \n        double x = 1.0; // Initial guess for Newton's method\n        double tolerance = 1e-6;\n        double dx;\n        \n        do {\n            double fx = poly(xs, x);\n            double fpx = poly(derivativeCoefficients, x);\n            dx = -fx / fpx;\n            x += dx;\n        } while (Math.abs(dx) > tolerance);\n        \n        return x;\n    }\n    \n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.findZero(Arrays.asList(1.0, 2.0))); // Expected output: -0.5\n        System.out.println(sol.findZero(Arrays.asList(-6.0, 11.0, -6.0, 1.0))); // Expected output: 1.0\n    }\n}"}
{"task_id": "Java/33", "generation": "        List<Integer> result = new ArrayList<>(l);\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                List<Integer> subList = new ArrayList<>();\n                for (int j = i; j < l.size(); j += 3) {\n                    subList.add(l.get(j));\n                }\n                Collections.sort(subList);\n                for (int j = i, k = 0; j < l.size(); j += 3, k++) {\n                    result.set(j, subList.get(k));\n                }\n            }\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/33", "generation": "        List<Integer> result = new ArrayList<>();\n        List<Integer> divisibleByThree = new ArrayList<>();\n\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                divisibleByThree.add(l.get(i));\n            } else {\n                result.add(l.get(i));\n            }\n        }\n\n        Collections.sort(divisibleByThree);\n\n        int j = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                result.add(divisibleByThree.get(j));\n                j++;\n            } else {\n                result.add(l.get(i));\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n\n        List<Integer> test1 = Arrays.asList(1, 2, 3);\n        List<Integer> test2 = Arrays.asList(5, 6, 3, 4, 8, 9, 2);\n\n        System.out.println(sol.sortThird(test1)); // [1, 2, 3]\n        System.out.println(sol.sortThird(test2)); // [2, 6, 3, 4, 8, 9, 5]\n    }\n}"}
{"task_id": "Java/33", "generation": "        List<Integer> result = new ArrayList<>(l);\n        List<Integer> divisibleByThree = new ArrayList<>();\n        \n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                divisibleByThree.add(l.get(i));\n            }\n        }\n        \n        Collections.sort(divisibleByThree);\n        \n        int j = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                result.set(i, divisibleByThree.get(j));\n                j++;\n            }\n        }\n        \n        return result;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> list1 = Arrays.asList(1, 2, 3);\n        List<Integer> result1 = solution.sortThird(list1);\n        System.out.println(result1);  // [1, 2, 3]\n        \n        List<Integer> list2 = Arrays.asList(5, 6, 3, 4, 8, 9, 2);\n        List<Integer> result2 = solution.sortThird(list2);\n        System.out.println(result2);  // [2, 6, 3, 4, 8, 9, 5]\n    }\n}"}
{"task_id": "Java/33", "generation": "        List<Integer> result = new ArrayList<>(l);\n        List<Integer> temp = new ArrayList<>();\n\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                temp.add(l.get(i));\n            }\n        }\n\n        Collections.sort(temp);\n\n        int index = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                result.set(i, temp.get(index));\n                index++;\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test the provided examples\n        System.out.println(solution.sortThird(Arrays.asList(1, 2, 3))); // [1, 2, 3]\n        System.out.println(solution.sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))); // [2, 6, 3, 4, 8, 9, 5]\n    }\n}"}
{"task_id": "Java/33", "generation": "        List<Integer> result = new ArrayList<>();\n\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                List<Integer> sublist = new ArrayList<>();\n                for (int j = i; j < Math.min(i + 3, l.size()); j++) {\n                    sublist.add(l.get(j));\n                }\n                Collections.sort(sublist);\n                result.addAll(sublist);\n            } else {\n                result.add(l.get(i));\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.sortThird(Arrays.asList(1, 2, 3)));\n        System.out.println(solution.sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2)));\n    }\n}"}
{"task_id": "Java/34", "generation": "        // Remove duplicates by adding elements to a HashSet\n        Set<Integer> set = new HashSet<>(l);\n        \n        // Convert HashSet back to ArrayList\n        List<Integer> uniqueList = new ArrayList<>(set);\n        \n        // Sort the list\n        Collections.sort(uniqueList);\n        \n        return uniqueList;\n    }\n}"}
{"task_id": "Java/34", "generation": "        Set<Integer> set = new HashSet<>(l);\n        List<Integer> uniqueList = new ArrayList<>(set);\n        Collections.sort(uniqueList);\n        return uniqueList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> list = Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123);\n        System.out.println(solution.unique(list));\n    }\n}"}
{"task_id": "Java/34", "generation": "        Set<Integer> uniqueSet = new HashSet<>(l);\n        List<Integer> uniqueList = new ArrayList<>(uniqueSet);\n        Collections.sort(uniqueList);\n        return uniqueList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> input = Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123);\n        List<Integer> result = solution.unique(input);\n        System.out.println(result);\n    }\n}"}
{"task_id": "Java/34", "generation": "        // Create a set to store unique elements\n        Set<Integer> uniqueSet = new HashSet<>();\n        \n        // Add all elements from the list to the set\n        uniqueSet.addAll(l);\n        \n        // Create a list to store the sorted unique elements\n        List<Integer> uniqueList = new ArrayList<>(uniqueSet);\n        \n        // Sort the list\n        Collections.sort(uniqueList);\n        \n        return uniqueList;\n    }\n}"}
{"task_id": "Java/34", "generation": "        Set<Integer> uniqueSet = new HashSet<>(l);\n        List<Integer> uniqueList = new ArrayList<>(uniqueSet);\n        Collections.sort(uniqueList);\n        return uniqueList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> list = Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123);\n        List<Integer> uniqueList = solution.unique(list);\n        \n        System.out.println(uniqueList);\n    }\n}"}
{"task_id": "Java/35", "generation": "        int max = Integer.MIN_VALUE;\n        for (int num : l) {\n            if (num > max) {\n                max = num;\n            }\n        }\n        return max;\n    }\n}"}
{"task_id": "Java/35", "generation": "        int max = Integer.MIN_VALUE;\n        for (int num : l) {\n            if (num > max) {\n                max = num;\n            }\n        }\n        return max;\n    }\n}"}
{"task_id": "Java/35", "generation": "        int max = Integer.MIN_VALUE;\n        for (int num : l) {\n            if (num > max) {\n                max = num;\n            }\n        }\n        return max;\n    }\n}"}
{"task_id": "Java/35", "generation": "        int max = Integer.MIN_VALUE;\n        for(int num : l) {\n            if(num > max) {\n                max = num;\n            }\n        }\n        return max;\n    }\n}"}
{"task_id": "Java/35", "generation": "        if (l == null || l.size() == 0) {\n            throw new IllegalArgumentException(\"List is empty\");\n        }\n        \n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        \n        return max;\n    }\n}"}
{"task_id": "Java/36", "generation": "        int count = 0;\n        \n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String numStr = String.valueOf(i);\n                for (int j = 0; j < numStr.length(); j++) {\n                    if (numStr.charAt(j) == '7') {\n                        count++;\n                    }\n                }\n            }\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fizzBuzz(50)); // 0\n        System.out.println(solution.fizzBuzz(78)); // 2\n        System.out.println(solution.fizzBuzz(79)); // 3\n    }\n}"}
{"task_id": "Java/36", "generation": "        int count = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String str = String.valueOf(i);\n                for (char c : str.toCharArray()) {\n                    if (c == '7') {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fizzBuzz(50));\n        System.out.println(solution.fizzBuzz(78));\n        System.out.println(solution.fizzBuzz(79));\n    }\n}"}
{"task_id": "Java/36", "generation": "        int count = 0;\n        \n        for(int i=1; i<n; i++) {\n            if(i % 11 == 0 || i % 13 == 0) {\n                String numStr = String.valueOf(i);\n                for(int j=0; j<numStr.length(); j++) {\n                    if(numStr.charAt(j) == '7') {\n                        count++;\n                    }\n                }\n            }\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.fizzBuzz(50)); // 0\n        System.out.println(solution.fizzBuzz(78)); // 2\n        System.out.println(solution.fizzBuzz(79)); // 3\n    }\n}"}
{"task_id": "Java/36", "generation": "        int count = 0;\n        for (int i = 1; i < n; i++) {\n            if ((i % 11 == 0 || i % 13 == 0) && containsSeven(i)) {\n                count++;\n            }\n        }\n        return count;\n    }\n    \n    public boolean containsSeven(int num) {\n        while (num > 0) {\n            if (num % 10 == 7) {\n                return true;\n            }\n            num = num / 10;\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fizzBuzz(50));\n        System.out.println(solution.fizzBuzz(78));\n        System.out.println(solution.fizzBuzz(79));\n    }\n}"}
{"task_id": "Java/36", "generation": "        int count = 0;\n        for (int i = 1; i < n; i++) {\n            if ((i % 11 == 0 || i % 13 == 0) && containsSeven(i)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public boolean containsSeven(int num) {\n        while (num > 0) {\n            if (num % 10 == 7) {\n                return true;\n            }\n            num /= 10;\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fizzBuzz(50));\n        System.out.println(solution.fizzBuzz(78));\n        System.out.println(solution.fizzBuzz(79));\n    }\n}"}
{"task_id": "Java/37", "generation": "        List<Integer> evenIndices = new ArrayList<>();\n        List<Integer> sortedEvenIndices = new ArrayList<>();\n        \n        // Separate even and odd indices\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                evenIndices.add(l.get(i));\n            } else {\n                sortedEvenIndices.add(l.get(i));\n            }\n        }\n        \n        // Sort the even indices\n        Collections.sort(sortedEvenIndices);\n        \n        // Combine the lists back together\n        List<Integer> result = new ArrayList<>();\n        int evenIndex = 0;\n        int sortedEvenIndex = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                result.add(evenIndices.get(evenIndex));\n                evenIndex++;\n            } else {\n                result.add(sortedEvenIndices.get(sortedEvenIndex));\n                sortedEvenIndex++;\n            }\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/37", "generation": "        List<Integer> evenIndices = new ArrayList<>();\n        List<Integer> sortedEvenIndices = new ArrayList<>();\n        \n        // Separate even indices values from the list\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                evenIndices.add(l.get(i));\n            }\n        }\n        \n        // Sort the even indices values\n        Collections.sort(evenIndices);\n        \n        // Merge the sorted even indices values back into the list\n        int evenIndex = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                sortedEvenIndices.add(evenIndices.get(evenIndex));\n                evenIndex++;\n            } else {\n                sortedEvenIndices.add(l.get(i));\n            }\n        }\n        \n        return sortedEvenIndices;\n    }\n}"}
{"task_id": "Java/37", "generation": "        List<Integer> sortedEven = new ArrayList<>(l);\n        List<Integer> evenValues = new ArrayList<>();\n\n        // Get even values from the list\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                evenValues.add(l.get(i));\n            }\n        }\n\n        // Sort even values\n        Collections.sort(evenValues);\n\n        // Replace even values in the sorted list\n        int index = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                sortedEven.set(i, evenValues.get(index));\n                index++;\n            }\n        }\n\n        return sortedEven;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> test1 = Arrays.asList(1, 2, 3);\n        List<Integer> result1 = solution.sortEven(test1);\n        System.out.println(result1);\n\n        List<Integer> test2 = Arrays.asList(5, 6, 3, 4);\n        List<Integer> result2 = solution.sortEven(test2);\n        System.out.println(result2);\n    }\n}"}
{"task_id": "Java/37", "generation": "        List<Integer> result = new ArrayList<>(l);\n        List<Integer> evenIndices = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                evenIndices.add(l.get(i));\n            }\n        }\n        Collections.sort(evenIndices);\n        int index = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                result.set(i, evenIndices.get(index));\n                index++;\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        List<Integer> l1 = Arrays.asList(1, 2, 3);\n        List<Integer> l2 = Arrays.asList(5, 6, 3, 4);\n\n        System.out.println(sol.sortEven(l1));\n        System.out.println(sol.sortEven(l2));\n    }\n}"}
{"task_id": "Java/37", "generation": "        List<Integer> sortedEven = new ArrayList<>();\n        List<Integer> evenIndices = new ArrayList<>();\n\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                evenIndices.add(l.get(i));\n            } else {\n                sortedEven.add(l.get(i));\n            }\n        }\n\n        Collections.sort(evenIndices);\n\n        for (int i = 0, j = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                sortedEven.add(i, evenIndices.get(j));\n                j++;\n            }\n        }\n\n        return sortedEven;\n    }\n}"}
{"task_id": "Java/38", "generation": "        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        String encoded = sol.encodeCyclic(\"abcde\");\n        System.out.println(\"Encoded: \" + encoded);\n        String decoded = sol.decodeCyclic(encoded);\n        System.out.println(\"Decoded: \" + decoded);\n    }\n}"}
{"task_id": "Java/38", "generation": "        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group in reverse order. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String s = \"abcde\";\n        String encoded = solution.encodeCyclic(s);\n        System.out.println(\"Encoded string: \" + encoded);\n        String decoded = solution.decodeCyclic(encoded);\n        System.out.println(\"Decoded string: \" + decoded);\n    }\n}"}
{"task_id": "Java/38", "generation": "        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test encodeCyclic\n        String input1 = \"abcde\";\n        System.out.println(\"Input: \" + input1);\n        System.out.println(\"Encoded: \" + solution.encodeCyclic(input1));\n\n        // Test decodeCyclic\n        String input2 = \"bcaed\";\n        System.out.println(\"Input: \" + input2);\n        System.out.println(\"Decoded: \" + solution.decodeCyclic(input2));\n    }\n}"}
{"task_id": "Java/38", "generation": "        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String input = \"abcde\";\n        String encoded = solution.encodeCyclic(input);\n        System.out.println(\"Encoded: \" + encoded);\n        String decoded = solution.decodeCyclic(encoded);\n        System.out.println(\"Decoded: \" + decoded);\n    }\n}"}
{"task_id": "Java/38", "generation": "        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // reverse cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        String input = \"hello\";\n        String encoded = solution.encodeCyclic(input);\n        System.out.println(\"Encoded: \" + encoded);\n\n        String decoded = solution.decodeCyclic(encoded);\n        System.out.println(\"Decoded: \" + decoded);\n    }\n}"}
{"task_id": "Java/39", "generation": "        int count = 0;\n        int num = 1;\n        \n        while (count < n) {\n            num++;\n            if (isPrime(num) && isFibonacci(num)) {\n                count++;\n            }\n        }\n        \n        return num;\n    }\n    \n    public boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    \n    public boolean isFibonacci(int num) {\n        return isPerfectSquare(5*num*num + 4) || isPerfectSquare(5*num*num - 4);\n    }\n    \n    public boolean isPerfectSquare(int num) {\n        int sqrt = (int) Math.sqrt(num);\n        return sqrt*sqrt == num;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.primeFib(1)); // 2\n        System.out.println(solution.primeFib(2)); // 3\n        System.out.println(solution.primeFib(3)); // 5\n        System.out.println(solution.primeFib(4)); // 13\n        System.out.println(solution.primeFib(5)); // 89\n    }\n}"}
{"task_id": "Java/39", "generation": "        int count = 0;\n        int num = 2;\n        while (count < n) {\n            if (isFibonacci(num) && isPrime(num)) {\n                count++;\n            }\n            num++;\n        }\n        return num - 1;\n    }\n\n    public boolean isFibonacci(int n) {\n        if (n == 0 || n == 1) {\n            return true;\n        }\n        int a = 0;\n        int b = 1;\n        int c = a + b;\n        while (c < n) {\n            a = b;\n            b = c;\n            c = a + b;\n        }\n        return c == n;\n    }\n\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.primeFib(1));\n        System.out.println(sol.primeFib(2));\n        System.out.println(sol.primeFib(3));\n        System.out.println(sol.primeFib(4));\n        System.out.println(sol.primeFib(5));\n    }\n}"}
{"task_id": "Java/39", "generation": "        int count = 0;\n        int i = 2;\n        \n        while (count < n) {\n            if (isFibonacci(i) && isPrime(i)) {\n                count++;\n            }\n            i++;\n        }\n        \n        return i-1;\n    }\n    \n    public boolean isFibonacci(int num) {\n        int a = 0;\n        int b = 1;\n        \n        while (a <= num) {\n            if (a == num) {\n                return true;\n            }\n            \n            int temp = b;\n            b = a + b;\n            a = temp;\n        }\n        \n        return false;\n    }\n    \n    public boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.primeFib(1));\n        System.out.println(solution.primeFib(2));\n        System.out.println(solution.primeFib(3));\n        System.out.println(solution.primeFib(4));\n        System.out.println(solution.primeFib(5));\n    }\n}"}
{"task_id": "Java/39", "generation": "        if (n <= 0) {\n            return -1;\n        }\n        \n        int count = 0;\n        int num = 2;\n        \n        while (count < n) {\n            if (isFibonacci(num) && isPrime(num)) {\n                count++;\n            }\n            num++;\n        }\n        \n        return num - 1;\n    }\n    \n    public boolean isFibonacci(int num) {\n        int a = 0;\n        int b = 1;\n        \n        while (a < num) {\n            int temp = a;\n            a = b;\n            b = temp + b;\n        }\n        \n        return a == num;\n    }\n    \n    public boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.primeFib(1));\n        System.out.println(solution.primeFib(2));\n        System.out.println(solution.primeFib(3));\n        System.out.println(solution.primeFib(4));\n        System.out.println(solution.primeFib(5));\n    }\n}"}
{"task_id": "Java/39", "generation": "        int count = 0;\n        int num = 2;\n        \n        while (count < n) {\n            if (isFibonacci(num) && isPrime(num)) {\n                count++;\n            }\n            num++;\n        }\n        \n        return num - 1;\n    }\n    \n    public boolean isFibonacci(int n) {\n        int a = 0;\n        int b = 1;\n        \n        while (a < n) {\n            int temp = a;\n            a = b;\n            b = temp + b;\n        }\n        \n        return a == n;\n    }\n    \n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.primeFib(1));\n        System.out.println(solution.primeFib(2));\n        System.out.println(solution.primeFib(3));\n        System.out.println(solution.primeFib(4));\n        System.out.println(solution.primeFib(5));\n    }\n}"}
{"task_id": "Java/40", "generation": "        // Sort the list\n        Collections.sort(l);\n\n        // Iterate through the list\n        for (int i = 0; i < l.size() - 2; i++) {\n            int left = i + 1;\n            int right = l.size() - 1;\n            int target = -l.get(i);\n\n            while (left < right) {\n                int sum = l.get(left) + l.get(right);\n                if (sum == target) {\n                    return true;\n                } else if (sum < target) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n\n        return false;\n    }\n}"}
{"task_id": "Java/40", "generation": "        // Sort the list\n        Collections.sort(l);\n        \n        // Iterate through the list\n        for (int i = 0; i < l.size() - 2; i++) {\n            int left = i + 1;\n            int right = l.size() - 1;\n            int target = -l.get(i);\n            \n            while (left < right) {\n                int sum = l.get(left) + l.get(right);\n                if (sum == target) {\n                    return true;\n                } else if (sum < target) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n        \n        return false;\n    }\n}"}
{"task_id": "Java/40", "generation": "        if (l.size() < 3) {\n            return false;\n        }\n\n        Collections.sort(l);\n\n        for (int i = 0; i < l.size() - 2; i++) {\n            int left = i + 1;\n            int right = l.size() - 1;\n\n            while (left < right) {\n                int sum = l.get(i) + l.get(left) + l.get(right);\n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.triplesSumToZero(Arrays.asList(1, 3, 5, 0))); // false\n        System.out.println(solution.triplesSumToZero(Arrays.asList(1, 3, -2, 1))); // true\n        System.out.println(solution.triplesSumToZero(Arrays.asList(1, 2, 3, 7))); // false\n        System.out.println(solution.triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))); // true\n        System.out.println(solution.triplesSumToZero(Arrays.asList(1))); // false\n    }\n}"}
{"task_id": "Java/40", "generation": "        if (l.size() < 3) {\n            return false;\n        }\n\n        Collections.sort(l);\n\n        for (int i = 0; i < l.size() - 2; i++) {\n            int left = i + 1;\n            int right = l.size() - 1;\n\n            while (left < right) {\n                int sum = l.get(i) + l.get(left) + l.get(right);\n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n\n        System.out.println(sol.triplesSumToZero(Arrays.asList(1, 3, 5, 0))); // false\n        System.out.println(sol.triplesSumToZero(Arrays.asList(1, 3, -2, 1))); // true\n        System.out.println(sol.triplesSumToZero(Arrays.asList(1, 2, 3, 7))); // false\n        System.out.println(sol.triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))); // true\n        System.out.println(sol.triplesSumToZero(Arrays.asList(1))); // false\n    }\n}"}
{"task_id": "Java/40", "generation": "        if (l.size() < 3) {\n            return false;\n        }\n\n        Collections.sort(l);\n\n        for (int i = 0; i < l.size() - 2; i++) {\n            int left = i + 1;\n            int right = l.size() - 1;\n            while (left < right) {\n                int sum = l.get(i) + l.get(left) + l.get(right);\n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.triplesSumToZero(Arrays.asList(1, 3, 5, 0))); // false\n        System.out.println(solution.triplesSumToZero(Arrays.asList(1, 3, -2, 1))); // true\n        System.out.println(solution.triplesSumToZero(Arrays.asList(1, 2, 3, 7))); // false\n        System.out.println(solution.triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))); // true\n        System.out.println(solution.triplesSumToZero(Arrays.asList(1))); // false\n    }\n}"}
{"task_id": "Java/41", "generation": "        // Calculate the number of collisions\n        // Each car moving left to right will collide with one car moving right to left\n        // Therefore, the number of collisions will be equal to the number of cars\n        return n;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test case 1\n        int n1 = 5;\n        System.out.println(\"Number of collisions for n = 5: \" + solution.carRaceCollision(n1)); // Output: 5\n        \n        // Test case 2\n        int n2 = 0;\n        System.out.println(\"Number of collisions for n = 0: \" + solution.carRaceCollision(n2)); // Output: 0\n        \n        // Test case 3\n        int n3 = 10;\n        System.out.println(\"Number of collisions for n = 10: \" + solution.carRaceCollision(n3)); // Output: 10\n    }\n}"}
{"task_id": "Java/41", "generation": "        // Calculate the number of collisions\n        // Each car moving left to right will collide with each car moving right to left\n        // So the total number of collisions will be n * n\n        return n * n;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.carRaceCollision(1)); // Output: 1\n        System.out.println(solution.carRaceCollision(2)); // Output: 4\n        System.out.println(solution.carRaceCollision(3)); // Output: 9\n        System.out.println(solution.carRaceCollision(4)); // Output: 16\n    }\n}"}
{"task_id": "Java/41", "generation": "        // Initialize a counter to keep track of collisions\n        int collisions = 0;\n\n        // Calculate the number of collisions using the formula n*(n-1)/2\n        collisions = n * (n - 1) / 2;\n\n        return collisions;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.carRaceCollision(1)); // Output: 0\n        System.out.println(solution.carRaceCollision(2)); // Output: 1\n        System.out.println(solution.carRaceCollision(3)); // Output: 3\n        System.out.println(solution.carRaceCollision(4)); // Output: 6\n    }\n}"}
{"task_id": "Java/41", "generation": "        // Total number of collisions\n        int collisions = 0;\n        \n        // Calculate the number of collisions by using the formula n * (n - 1) / 2\n        collisions = n * (n - 1) / 2;\n        \n        // Return the total number of collisions\n        return collisions;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.carRaceCollision(1)); // Output: 0\n        System.out.println(solution.carRaceCollision(2)); // Output: 1\n        System.out.println(solution.carRaceCollision(3)); // Output: 3\n        System.out.println(solution.carRaceCollision(4)); // Output: 6\n        System.out.println(solution.carRaceCollision(5)); // Output: 10\n    }\n}"}
{"task_id": "Java/41", "generation": "        // Initialize total collisions to 0\n        int totalCollisions = 0;\n        \n        // Calculate the number of collisions that will occur\n        // Since each pair of cars will eventually collide, the total number of collisions\n        // will be equal to the number of cars\n        totalCollisions = n;\n        \n        // Return the total number of collisions\n        return totalCollisions;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.carRaceCollision(5)); // Output: 5\n        System.out.println(solution.carRaceCollision(10)); // Output: 10\n        System.out.println(solution.carRaceCollision(0)); // Output: 0\n        System.out.println(solution.carRaceCollision(1)); // Output: 1\n        System.out.println(solution.carRaceCollision(20)); // Output: 20\n    }\n}"}
{"task_id": "Java/42", "generation": "        return l.stream().map(num -> num + 1).collect(Collectors.toList());\n    }\n}"}
{"task_id": "Java/42", "generation": "        return l.stream()\n                .map(num -> num + 1)\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> l1 = Arrays.asList(1, 2, 3);\n        List<Integer> l2 = Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123);\n\n        System.out.println(solution.incrList(l1));\n        System.out.println(solution.incrList(l2));\n    }\n}"}
{"task_id": "Java/42", "generation": "        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}"}
{"task_id": "Java/42", "generation": "        return l.stream()\n            .map(num -> num + 1)\n            .collect(Collectors.toList());\n    }\n}"}
{"task_id": "Java/42", "generation": "        return l.stream()\n                .map(num -> num + 1)\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> test1 = Arrays.asList(1, 2, 3);\n        List<Integer> test2 = Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123);\n\n        System.out.println(solution.incrList(test1)); // [2, 3, 4]\n        System.out.println(solution.incrList(test2)); // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    }\n}"}
{"task_id": "Java/43", "generation": "        Set<Integer> set = new HashSet<>();\n        for (int num : l) {\n            if (set.contains(-num)) {\n                return true;\n            }\n            set.add(num);\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/43", "generation": "        Set<Integer> set = new HashSet<>();\n        \n        for(int num : l) {\n            if(set.contains(-num)) {\n                return true;\n            }\n            set.add(num);\n        }\n        \n        return false;\n    }\n}"}
{"task_id": "Java/43", "generation": "        Set<Integer> set = new HashSet<>();\n        \n        for (int num : l) {\n            if (set.contains(-num)) {\n                return true;\n            }\n            set.add(num);\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.pairsSumToZero(Arrays.asList(1, 3, 5, 0))); // false\n        System.out.println(solution.pairsSumToZero(Arrays.asList(1, 3, -2, 1))); // false\n        System.out.println(solution.pairsSumToZero(Arrays.asList(1, 2, 3, 7))); // false\n        System.out.println(solution.pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))); // true\n        System.out.println(solution.pairsSumToZero(Arrays.asList(1))); // false\n    }\n}"}
{"task_id": "Java/43", "generation": "        Set<Integer> set = new HashSet<>();\n\n        for (int num : l) {\n            if (set.contains(-num)) {\n                return true;\n            }\n            set.add(num);\n        }\n\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.pairsSumToZero(Arrays.asList(1, 3, 5, 0))); // false\n        System.out.println(solution.pairsSumToZero(Arrays.asList(1, 3, -2, 1))); // false\n        System.out.println(solution.pairsSumToZero(Arrays.asList(1, 2, 3, 7))); // false\n        System.out.println(solution.pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))); // true\n        System.out.println(solution.pairsSumToZero(Arrays.asList(1))); // false\n    }\n}"}
{"task_id": "Java/43", "generation": "        Set<Integer> set = new HashSet<>();\n        for (int num : l) {\n            if (set.contains(-num)) {\n                return true;\n            } else {\n                set.add(num);\n            }\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/44", "generation": "        StringBuilder result = new StringBuilder();\n        while (x > 0) {\n            int remainder = x % base;\n            result.insert(0, remainder);\n            x = x / base;\n        }\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.changeBase(8, 3)); // \"22\"\n        System.out.println(solution.changeBase(8, 2)); // \"1000\"\n        System.out.println(solution.changeBase(7, 2)); // \"111\"\n    }\n}"}
{"task_id": "Java/44", "generation": "        if (base < 2 || base > 9) {\n            return \"Invalid base\";\n        }\n        \n        StringBuilder result = new StringBuilder();\n        \n        while (x > 0) {\n            int remainder = x % base;\n            result.insert(0, remainder);\n            x = x / base;\n        }\n        \n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.changeBase(8, 3)); // \"22\"\n        System.out.println(solution.changeBase(8, 2)); // \"1000\"\n        System.out.println(solution.changeBase(7, 2)); // \"111\"\n    }\n}"}
{"task_id": "Java/44", "generation": "        if (base < 2 || base > 9) {\n            return \"Invalid base. Base numbers should be between 2 and 9.\";\n        }\n\n        StringBuilder result = new StringBuilder();\n        while (x > 0) {\n            result.insert(0, x % base);\n            x /= base;\n        }\n\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.changeBase(8, 3)); // Output: \"22\"\n        System.out.println(solution.changeBase(8, 2)); // Output: \"1000\"\n        System.out.println(solution.changeBase(7, 2)); // Output: \"111\"\n    }\n}"}
{"task_id": "Java/44", "generation": "        if (base < 2 || base > 9) {\n            return \"Invalid base\";\n        }\n\n        StringBuilder result = new StringBuilder();\n        int quotient = x;\n\n        while (quotient > 0) {\n            int remainder = quotient % base;\n            result.insert(0, remainder);\n            quotient = quotient / base;\n        }\n\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.changeBase(8, 3)); // \"22\"\n        System.out.println(solution.changeBase(8, 2)); // \"1000\"\n        System.out.println(solution.changeBase(7, 2)); // \"111\"\n    }\n}"}
{"task_id": "Java/44", "generation": "        if (base < 2 || base > 9) {\n            return \"Invalid base\";\n        }\n        \n        StringBuilder result = new StringBuilder();\n        \n        while (x > 0) {\n            int remainder = x % base;\n            result.insert(0, remainder);\n            x /= base;\n        }\n        \n        return result.toString();\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.changeBase(8, 3)); // \"22\"\n        System.out.println(solution.changeBase(8, 2)); // \"1000\"\n        System.out.println(solution.changeBase(7, 2)); // \"111\"\n    }\n}"}
{"task_id": "Java/45", "generation": "        return 0.5 * a * h;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter the length of a side: \");\n        double a = scanner.nextDouble();\n        \n        System.out.print(\"Enter the height: \");\n        double h = scanner.nextDouble();\n        \n        double area = solution.triangleArea(a, h);\n        System.out.println(\"The area of the triangle is: \" + area);\n    }\n}"}
{"task_id": "Java/45", "generation": "        return 0.5 * a * h;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.println(\"Enter the length of the side of the triangle:\");\n        double side = scanner.nextDouble();\n\n        System.out.println(\"Enter the height of the triangle:\");\n        double height = scanner.nextDouble();\n\n        double area = solution.triangleArea(side, height);\n        System.out.println(\"The area of the triangle is: \" + area);\n    }\n}"}
{"task_id": "Java/45", "generation": "        return 0.5 * a * h;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the triangleArea method\n        System.out.println(solution.triangleArea(5, 3)); // 7.5\n    }\n}"}
{"task_id": "Java/45", "generation": "        return 0.5 * a * h;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.println(\"Enter the length of the side of the triangle: \");\n        double side = scanner.nextDouble();\n\n        System.out.println(\"Enter the height of the triangle: \");\n        double height = scanner.nextDouble();\n\n        double area = sol.triangleArea(side, height);\n        System.out.println(\"The area of the triangle is: \" + area);\n\n        scanner.close();\n    }\n}"}
{"task_id": "Java/45", "generation": "        return 0.5 * a * h;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the triangleArea method\n        System.out.println(solution.triangleArea(5, 3)); // 7.5\n    }\n}"}
{"task_id": "Java/46", "generation": "        if (n == 0 || n == 1) {\n            return 0;\n        }\n        \n        if (n == 2) {\n            return 2;\n        }\n        \n        if (n == 3) {\n            return 0;\n        }\n        \n        int a = 0, b = 0, c = 2, d = 0;\n        for (int i = 4; i <= n; i++) {\n            int sum = a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n            d = sum;\n        }\n        \n        return d;\n    }\n}"}
{"task_id": "Java/46", "generation": "        if (n == 0 || n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 2;\n        }\n        \n        int[] dp = new int[n+1];\n        dp[0] = 0;\n        dp[1] = 0;\n        dp[2] = 2;\n        dp[3] = 0;\n        \n        for (int i = 4; i <= n; i++) {\n            dp[i] = dp[i-1] + dp[i-2] + dp[i-3] + dp[i-4];\n        }\n        \n        return dp[n];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fib4(5)); // Output: 4\n        System.out.println(solution.fib4(6)); // Output: 8\n        System.out.println(solution.fib4(7)); // Output: 14\n    }\n}"}
{"task_id": "Java/46", "generation": "        if (n == 0 || n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 2;\n        } else if (n == 3) {\n            return 0;\n        } else {\n            int[] fib = new int[n + 1];\n            fib[0] = 0;\n            fib[1] = 0;\n            fib[2] = 2;\n            fib[3] = 0;\n            \n            for (int i = 4; i <= n; i++) {\n                fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3] + fib[i - 4];\n            }\n            \n            return fib[n];\n        }\n    }\n}"}
{"task_id": "Java/46", "generation": "        if (n < 2) {\n            return 0;\n        }\n        \n        int[] fibArray = new int[n+1];\n        fibArray[0] = 0;\n        fibArray[1] = 0;\n        fibArray[2] = 2;\n        fibArray[3] = 0;\n        \n        for (int i = 4; i <= n; i++) {\n            fibArray[i] = fibArray[i-1] + fibArray[i-2] + fibArray[i-3] + fibArray[i-4];\n        }\n        \n        return fibArray[n];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fib4(5)); // Output: 4\n        System.out.println(solution.fib4(6)); // Output: 8\n        System.out.println(solution.fib4(7)); // Output: 14\n    }\n}"}
{"task_id": "Java/46", "generation": "        if (n == 0 || n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 2;\n        } else if (n == 3) {\n            return 0;\n        }\n        \n        int[] fib4Arr = new int[n + 1];\n        fib4Arr[0] = 0;\n        fib4Arr[1] = 0;\n        fib4Arr[2] = 2;\n        fib4Arr[3] = 0;\n        \n        for (int i = 4; i <= n; i++) {\n            fib4Arr[i] = fib4Arr[i-1] + fib4Arr[i-2] + fib4Arr[i-3] + fib4Arr[i-4];\n        }\n        \n        return fib4Arr[n];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fib4(5)); // Output: 4\n        System.out.println(solution.fib4(6)); // Output: 8\n        System.out.println(solution.fib4(7)); // Output: 14\n    }\n}"}
{"task_id": "Java/47", "generation": "        // Sort the list\n        Collections.sort(l);\n\n        // Get the size of the list\n        int size = l.size();\n\n        // Check if the size is even or odd\n        if (size % 2 == 0) {\n            // If the size is even, return the average of the middle two elements\n            return (l.get(size / 2 - 1) + l.get(size / 2)) / 2.0;\n        } else {\n            // If the size is odd, return the middle element\n            return l.get(size / 2);\n        }\n    }\n}"}
{"task_id": "Java/47", "generation": "        Collections.sort(l);\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (double)(l.get(n / 2 - 1) + l.get(n / 2)) / 2.0;\n        } else {\n            return (double)l.get(n / 2);\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n\n        List<Integer> l1 = Arrays.asList(3, 1, 2, 4, 5);\n        System.out.println(sol.median(l1));\n\n        List<Integer> l2 = Arrays.asList(-10, 4, 6, 1000, 10, 20);\n        System.out.println(sol.median(l2));\n    }\n}"}
{"task_id": "Java/47", "generation": "        Collections.sort(l);\n        int size = l.size();\n        if (size % 2 == 0) {\n            int mid1 = l.get(size / 2 - 1);\n            int mid2 = l.get(size / 2);\n            return (double) (mid1 + mid2) / 2;\n        } else {\n            return (double) l.get(size / 2);\n        }\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        \n        List<Integer> l1 = Arrays.asList(3, 1, 2, 4, 5);\n        System.out.println(sol.median(l1)); // Output: 3\n        \n        List<Integer> l2 = Arrays.asList(-10, 4, 6, 1000, 10, 20);\n        System.out.println(sol.median(l2)); // Output: 15.0\n    }\n}"}
{"task_id": "Java/47", "generation": "        Collections.sort(l);\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n / 2 - 1) + l.get(n / 2)) / 2.0;\n        } else {\n            return l.get(n / 2);\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        List<Integer> l1 = Arrays.asList(3, 1, 2, 4, 5);\n        System.out.println(sol.median(l1));\n\n        List<Integer> l2 = Arrays.asList(-10, 4, 6, 1000, 10, 20);\n        System.out.println(sol.median(l2));\n    }\n}"}
{"task_id": "Java/47", "generation": "        // Sort the list\n        Collections.sort(l);\n        \n        // Find the middle index\n        int n = l.size();\n        int mid = n / 2;\n        \n        // Check if the number of elements is odd or even\n        if (n % 2 == 0) {\n            // If even, return the average of the two middle elements\n            return (l.get(mid - 1) + l.get(mid)) / 2.0;\n        } else {\n            // If odd, return the middle element\n            return l.get(mid);\n        }\n    }\n}"}
{"task_id": "Java/48", "generation": "        if (text == null || text.length() == 0) {\n            return true;\n        }\n        \n        int left = 0;\n        int right = text.length() - 1;\n        \n        while (left < right) {\n            if (text.charAt(left) != text.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "Java/48", "generation": "        if (text == null || text.length() <= 1) {\n            return true;\n        }\n        \n        int start = 0;\n        int end = text.length() - 1;\n        \n        while (start < end) {\n            if (text.charAt(start) != text.charAt(end)) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.isPalindrome(\"\")); // true\n        System.out.println(solution.isPalindrome(\"aba\")); // true\n        System.out.println(solution.isPalindrome(\"aaaaa\")); // true\n        System.out.println(solution.isPalindrome(\"zbcd\")); // false\n    }\n}"}
{"task_id": "Java/48", "generation": "        if (text == null || text.length() <= 1) {\n            return true;\n        }\n        \n        int left = 0;\n        int right = text.length() - 1;\n        \n        while (left < right) {\n            if (text.charAt(left) != text.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.isPalindrome(\"\"));\n        System.out.println(solution.isPalindrome(\"aba\"));\n        System.out.println(solution.isPalindrome(\"aaaaa\"));\n        System.out.println(solution.isPalindrome(\"zbcd\"));\n    }\n}"}
{"task_id": "Java/48", "generation": "        if (text == null || text.length() == 0) {\n            return true;\n        }\n        \n        int left = 0;\n        int right = text.length() - 1;\n        \n        while (left < right) {\n            if (text.charAt(left) != text.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "Java/48", "generation": "        if (text == null || text.length() <= 1) {\n            return true;\n        }\n        \n        int start = 0;\n        int end = text.length() - 1;\n        \n        while (start < end) {\n            if (text.charAt(start) != text.charAt(end)) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.isPalindrome(\"\"));\n        System.out.println(solution.isPalindrome(\"aba\"));\n        System.out.println(solution.isPalindrome(\"aaaaa\"));\n        System.out.println(solution.isPalindrome(\"zbcd\"));\n    }\n}"}
{"task_id": "Java/49", "generation": "        if (p == 0) {\n            return 1;\n        }\n        \n        long result = 1;\n        long base = n % p;\n        \n        while (p > 0) {\n            if (p % 2 == 1) {\n                result = (result * base) % p;\n            }\n            base = (base * base) % p;\n            p /= 2;\n        }\n        \n        return (int) result;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.modp(3, 5)); // 3\n        System.out.println(solution.modp(1101, 101)); // 2\n        System.out.println(solution.modp(0, 101)); // 1\n        System.out.println(solution.modp(3, 11)); // 8\n        System.out.println(solution.modp(100, 101)); // 1\n    }\n}"}
{"task_id": "Java/49", "generation": "        if (n == 0) {\n            return 1;\n        }\n        \n        long result = 1;\n        long base = 2;\n        \n        while (n > 0) {\n            if (n % 2 == 1) {\n                result = (result * base) % p;\n            }\n            base = (base * base) % p;\n            n = n / 2;\n        }\n        \n        return (int) result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.modp(3, 5)); // Output: 3\n        System.out.println(solution.modp(1101, 101)); // Output: 2\n        System.out.println(solution.modp(0, 101)); // Output: 1\n        System.out.println(solution.modp(3, 11)); // Output: 8\n        System.out.println(solution.modp(100, 101)); // Output: 1\n    }\n}"}
{"task_id": "Java/49", "generation": "        if (n == 0) {\n            return 1;\n        }\n        long result = 1;\n        long base = 2;\n        long num = n;\n        while (num > 0) {\n            if (num % 2 == 1) {\n                result = (result * base) % p;\n            }\n            base = (base * base) % p;\n            num = num / 2;\n        }\n        return (int) result;\n    }\n}"}
{"task_id": "Java/49", "generation": "        if (n == 0) {\n            return 1;\n        }\n        long result = 1;\n        long base = 2;\n        long exp = n;\n        \n        while (exp > 0) {\n            if (exp % 2 == 1) {\n                result = (result * base) % p;\n            }\n            base = (base * base) % p;\n            exp /= 2;\n        }\n        \n        return (int) result;\n    }\n}"}
{"task_id": "Java/49", "generation": "        return (int) Math.pow(2, n) % p;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.modp(3, 5));  // 3\n        System.out.println(solution.modp(1101, 101));  // 2\n        System.out.println(solution.modp(0, 101));  // 1\n        System.out.println(solution.modp(3, 11));  // 8\n        System.out.println(solution.modp(100, 101));  // 1\n    }\n}"}
{"task_id": "Java/50", "generation": "        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 5 - 'a' + 26) % 26));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        String input = \"hello\";\n        String encoded = solution.encodeShift(input);\n        System.out.println(\"Encoded string: \" + encoded);\n\n        String decoded = solution.decodeShift(encoded);\n        System.out.println(\"Decoded string: \" + decoded);\n    }\n}"}
{"task_id": "Java/50", "generation": "        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 5 - 'a' + 26) % 26));\n        }\n        return sb.toString();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        String input = \"hello\";\n        String encoded = solution.encodeShift(input);\n        System.out.println(\"Encoded string: \" + encoded);\n        \n        String decoded = solution.decodeShift(encoded);\n        System.out.println(\"Decoded string: \" + decoded);\n    }\n}"}
{"task_id": "Java/50", "generation": "        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 5 - 'a' + 26) % 26));\n        }\n        return sb.toString();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        String originalText = \"hello\";\n        String encodedText = solution.encodeShift(originalText);\n        System.out.println(\"Encoded Text: \" + encodedText);\n        \n        String decodedText = solution.decodeShift(encodedText);\n        System.out.println(\"Decoded Text: \" + decodedText);\n    }\n}"}
{"task_id": "Java/50", "generation": "        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 5 - 'a' + 26) % 26));\n        }\n        return sb.toString();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        String input = \"hello\";\n        String encoded = solution.encodeShift(input);\n        System.out.println(\"Encoded string: \" + encoded);\n\n        String decoded = solution.decodeShift(encoded);\n        System.out.println(\"Decoded string: \" + decoded);\n    }\n}"}
{"task_id": "Java/50", "generation": "        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 5 - 'a' + 26) % 26));\n        }\n        return sb.toString();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        String input = \"hello\";\n        String encoded = solution.encodeShift(input);\n        System.out.println(\"Encoded String: \" + encoded);\n\n        String decoded = solution.decodeShift(encoded);\n        System.out.println(\"Decoded String: \" + decoded);\n    }\n}"}
{"task_id": "Java/51", "generation": "        StringBuilder result = new StringBuilder();\n        \n        for (char c : text.toCharArray()) {\n            if (!isVowel(c)) {\n                result.append(c);\n            }\n        }\n        \n        return result.toString();\n    }\n    \n    private boolean isVowel(char c) {\n        c = Character.toLowerCase(c);\n        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.removeVowels(\"\")); // \"\"\n        System.out.println(solution.removeVowels(\"abcdef\\nghijklm\")); // \"bcdf\\nghjklm\"\n        System.out.println(solution.removeVowels(\"abcdef\")); // \"bcdf\"\n        System.out.println(solution.removeVowels(\"aaaaa\")); // \"\"\n        System.out.println(solution.removeVowels(\"aaBAA\")); // \"B\"\n        System.out.println(solution.removeVowels(\"zbcd\")); // \"zbcd\"\n    }\n}"}
{"task_id": "Java/51", "generation": "        StringBuilder result = new StringBuilder();\n        \n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' &&\n                c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n                result.append(c);\n            }\n        }\n        \n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.removeVowels(\"abcdef\\nghijklm\")); // \"bcdf\\nghjklm\"\n        System.out.println(solution.removeVowels(\"abcdef\")); // \"bcdf\"\n        System.out.println(solution.removeVowels(\"aaaaa\")); // \"\"\n        System.out.println(solution.removeVowels(\"aaBAA\")); // \"B\"\n        System.out.println(solution.removeVowels(\"zbcd\")); // \"zbcd\"\n    }\n}"}
{"task_id": "Java/51", "generation": "        StringBuilder result = new StringBuilder();\n\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (!(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\n                  c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')) {\n                result.append(c);\n            }\n        }\n\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.removeVowels(\"\")); // \"\"\n        System.out.println(solution.removeVowels(\"abcdef\\nghijklm\")); // \"bcdf\\nghjklm\"\n        System.out.println(solution.removeVowels(\"abcdef\")); // \"bcdf\"\n        System.out.println(solution.removeVowels(\"aaaaa\")); // \"\"\n        System.out.println(solution.removeVowels(\"aaBAA\")); // \"B\"\n        System.out.println(solution.removeVowels(\"zbcd\")); // \"zbcd\"\n    }\n}"}
{"task_id": "Java/51", "generation": "        StringBuilder result = new StringBuilder();\n        \n        for (char c : text.toCharArray()) {\n            if (!isVowel(c)) {\n                result.append(c);\n            }\n        }\n        \n        return result.toString();\n    }\n    \n    private boolean isVowel(char c) {\n        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\n               c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U';\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.removeVowels(\"\")); // \"\"\n        System.out.println(solution.removeVowels(\"abcdef\\nghijklm\")); // \"bcdf\\nghjklm\"\n        System.out.println(solution.removeVowels(\"abcdef\")); // \"bcdf\"\n        System.out.println(solution.removeVowels(\"aaaaa\")); // \"\"\n        System.out.println(solution.removeVowels(\"aaBAA\")); // \"B\"\n        System.out.println(solution.removeVowels(\"zbcd\")); // \"zbcd\"\n    }\n}"}
{"task_id": "Java/51", "generation": "        StringBuilder result = new StringBuilder();\n        \n        for(char c : text.toCharArray()) {\n            if(c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' &&\n               c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n                result.append(c);\n            }\n        }\n        \n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n\n        System.out.println(sol.removeVowels(\"\")); // Expected output: \"\"\n        System.out.println(sol.removeVowels(\"abcdef\\nghijklm\")); // Expected output: \"bcdf\\nghjklm\"\n        System.out.println(sol.removeVowels(\"abcdef\")); // Expected output: \"bcdf\"\n        System.out.println(sol.removeVowels(\"aaaaa\")); // Expected output: \"\"\n        System.out.println(sol.removeVowels(\"aaBAA\")); // Expected output: \"B\"\n        System.out.println(sol.removeVowels(\"zbcd\")); // Expected output: \"zbcd\"\n    }\n}"}
{"task_id": "Java/52", "generation": "        for (int num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/52", "generation": "        for(int num : l) {\n            if(num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/52", "generation": "        for (int num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> l1 = Arrays.asList(1, 2, 4, 10);\n        int t1 = 100;\n        System.out.println(solution.belowThreshold(l1, t1)); // true\n        \n        List<Integer> l2 = Arrays.asList(1, 20, 4, 10);\n        int t2 = 5;\n        System.out.println(solution.belowThreshold(l2, t2)); // false\n    }\n}"}
{"task_id": "Java/52", "generation": "        for (int num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> l1 = Arrays.asList(1, 2, 4, 10);\n        System.out.println(solution.belowThreshold(l1, 100)); // true\n\n        List<Integer> l2 = Arrays.asList(1, 20, 4, 10);\n        System.out.println(solution.belowThreshold(l2, 5)); // false\n    }\n}"}
{"task_id": "Java/52", "generation": "        for (int num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> list1 = Arrays.asList(1, 2, 4, 10);\n        System.out.println(solution.belowThreshold(list1, 100)); // true\n        \n        List<Integer> list2 = Arrays.asList(1, 20, 4, 10);\n        System.out.println(solution.belowThreshold(list2, 5)); // false\n    }\n}"}
{"task_id": "Java/53", "generation": "        return x + y;\n    }\n\n    /**\n    Subtract number y from x\n    >>> subtract(10, 7)\n    3\n    >>> subtract(20, 5)\n    15\n     */\n    public int subtract(int x, int y) {\n        return x - y;\n    }\n\n    /**\n    Multiply two numbers x and y\n    >>> multiply(4, 5)\n    20\n    >>> multiply(3, 8)\n    24\n     */\n    public int multiply(int x, int y) {\n        return x * y;\n    }\n\n    /**\n    Divide number x by y\n    >>> divide(10, 2)\n    5\n    >>> divide(20, 4)\n    5\n     */\n    public int divide(int x, int y) {\n        return x / y;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(\"Adding 2 and 3: \" + solution.add(2, 3));\n        System.out.println(\"Subtracting 7 from 10: \" + solution.subtract(10, 7));\n        System.out.println(\"Multiplying 4 and 5: \" + solution.multiply(4, 5));\n        System.out.println(\"Dividing 10 by 2: \" + solution.divide(10, 2));\n    }\n}"}
{"task_id": "Java/53", "generation": "        return x + y;\n    }\n\n    /**\n    Subtract number y from x\n    >>> subtract(5, 3)\n    2\n    >>> subtract(10, 7)\n    3\n     */\n    public int subtract(int x, int y) {\n        return x - y;\n    }\n\n    /**\n    Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n     */\n    public int multiply(int x, int y) {\n        return x * y;\n    }\n\n    /**\n    Divide number x by y\n    >>> divide(10, 2)\n    5\n    >>> divide(15, 3)\n    5\n     */\n    public int divide(int x, int y) {\n        return x / y;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(\"Adding 2 and 3: \" + solution.add(2, 3));\n        System.out.println(\"Subtracting 5 from 3: \" + solution.subtract(3, 5));\n        System.out.println(\"Multiplying 2 and 3: \" + solution.multiply(2, 3));\n        System.out.println(\"Dividing 10 by 2: \" + solution.divide(10, 2));\n    }\n}"}
{"task_id": "Java/53", "generation": "        return x + y;\n    }\n\n    /**\n    Subtract number y from x\n    >>> subtract(5, 2)\n    3\n    >>> subtract(10, 7)\n    3\n     */\n    public int subtract(int x, int y) {\n        return x - y;\n    }\n\n    /**\n    Multiply two numbers x and y\n    >>> multiply(3, 4)\n    12\n    >>> multiply(5, 2)\n    10\n     */\n    public int multiply(int x, int y) {\n        return x * y;\n    }\n\n    /**\n    Divide number x by y\n    >>> divide(10, 2)\n    5\n    >>> divide(15, 3)\n    5\n     */\n    public int divide(int x, int y) {\n        return x / y;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(\"Addition:\");\n        System.out.println(solution.add(2, 3));\n        System.out.println(solution.add(5, 7));\n\n        System.out.println(\"Subtraction:\");\n        System.out.println(solution.subtract(5, 2));\n        System.out.println(solution.subtract(10, 7));\n\n        System.out.println(\"Multiplication:\");\n        System.out.println(solution.multiply(3, 4));\n        System.out.println(solution.multiply(5, 2));\n\n        System.out.println(\"Division:\");\n        System.out.println(solution.divide(10, 2));\n        System.out.println(solution.divide(15, 3));\n    }\n}"}
{"task_id": "Java/53", "generation": "        return x + y;\n    }\n\n    /**\n    Subtract number y from x\n    >>> subtract(5, 2)\n    3\n    >>> subtract(10, 5)\n    5\n     */\n    public int subtract(int x, int y) {\n        return x - y;\n    }\n\n    /**\n    Multiply two numbers x and y\n    >>> multiply(3, 4)\n    12\n    >>> multiply(2, 5)\n    10\n     */\n    public int multiply(int x, int y) {\n        return x * y;\n    }\n\n    /**\n    Divide number x by y\n    >>> divide(10, 2)\n    5\n    >>> divide(12, 3)\n    4\n     */\n    public int divide(int x, int y) {\n        if (y == 0) {\n            throw new IllegalArgumentException(\"Cannot divide by zero\");\n        }\n        return x / y;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(\"2 + 3 = \" + solution.add(2, 3));\n        System.out.println(\"5 - 2 = \" + solution.subtract(5, 2));\n        System.out.println(\"3 * 4 = \" + solution.multiply(3, 4));\n        System.out.println(\"10 / 2 = \" + solution.divide(10, 2));\n    }\n}"}
{"task_id": "Java/53", "generation": "        return x + y;\n    }\n\n    /**\n    Subtract number y from x\n    >>> subtract(10, 3)\n    7\n    >>> subtract(20, 5)\n    15\n     */\n    public int subtract(int x, int y) {\n        return x - y;\n    }\n\n    /**\n    Multiply two numbers x and y\n    >>> multiply(4, 5)\n    20\n    >>> multiply(6, 8)\n    48\n     */\n    public int multiply(int x, int y) {\n        return x * y;\n    }\n\n    /**\n    Divide number x by y\n    >>> divide(15, 3)\n    5\n    >>> divide(30, 6)\n    5\n     */\n    public int divide(int x, int y) {\n        return x / y;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(\"Adding 2 and 3: \" + solution.add(2, 3));\n        System.out.println(\"Subtracting 10 from 3: \" + solution.subtract(10, 3));\n        System.out.println(\"Multiplying 4 and 5: \" + solution.multiply(4, 5));\n        System.out.println(\"Dividing 15 by 3: \" + solution.divide(15, 3));\n    }\n}"}
{"task_id": "Java/54", "generation": "        if (s0.length() != s1.length()) {\n            return false;\n        }\n        \n        Map<Character, Integer> charCount = new HashMap<>();\n        \n        for (char c : s0.toCharArray()) {\n            charCount.put(c, charCount.getOrDefault(c, 0) + 1);\n        }\n        \n        for (char c : s1.toCharArray()) {\n            if (!charCount.containsKey(c) || charCount.get(c) == 0) {\n                return false;\n            }\n            charCount.put(c, charCount.get(c) - 1);\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "Java/54", "generation": "        if (s0.length() != s1.length()) {\n            return false;\n        }\n        \n        char[] chars0 = s0.toCharArray();\n        char[] chars1 = s1.toCharArray();\n        \n        Arrays.sort(chars0);\n        Arrays.sort(chars1);\n        \n        return Arrays.equals(chars0, chars1);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")); // true\n        System.out.println(solution.sameChars(\"abcd\", \"dddddddabc\")); // true\n        System.out.println(solution.sameChars(\"dddddddabc\", \"abcd\")); // true\n        System.out.println(solution.sameChars(\"eabcd\", \"dddddddabc\")); // false\n        System.out.println(solution.sameChars(\"abcd\", \"dddddddabce\")); // false\n        System.out.println(solution.sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")); // false\n    }\n}"}
{"task_id": "Java/54", "generation": "        // Convert strings to character arrays\n        char[] s0Chars = s0.toCharArray();\n        char[] s1Chars = s1.toCharArray();\n\n        // Sort character arrays\n        Arrays.sort(s0Chars);\n        Arrays.sort(s1Chars);\n\n        // Convert sorted character arrays back to strings\n        String sortedS0 = new String(s0Chars);\n        String sortedS1 = new String(s1Chars);\n\n        // Check if sorted strings are equal\n        return sortedS0.equals(sortedS1);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")); // true\n        System.out.println(solution.sameChars(\"abcd\", \"dddddddabc\")); // true\n        System.out.println(solution.sameChars(\"dddddddabc\", \"abcd\")); // true\n        System.out.println(solution.sameChars(\"eabcd\", \"dddddddabc\")); // false\n        System.out.println(solution.sameChars(\"abcd\", \"dddddddabce\")); // false\n        System.out.println(solution.sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")); // false\n    }\n}"}
{"task_id": "Java/54", "generation": "        if (s0.length() != s1.length()) {\n            return false;\n        }\n        \n        char[] arr0 = s0.toCharArray();\n        char[] arr1 = s1.toCharArray();\n        \n        Arrays.sort(arr0);\n        Arrays.sort(arr1);\n        \n        return Arrays.equals(arr0, arr1);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")); // true\n        System.out.println(solution.sameChars(\"abcd\", \"dddddddabc\")); // true\n        System.out.println(solution.sameChars(\"dddddddabc\", \"abcd\")); // true\n        System.out.println(solution.sameChars(\"eabcd\", \"dddddddabc\")); // false\n        System.out.println(solution.sameChars(\"abcd\", \"dddddddabce\")); // false\n        System.out.println(solution.sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")); // false\n    }\n}"}
{"task_id": "Java/54", "generation": "        // Create a map to store character frequencies of s0\n        Map<Character, Integer> map = new HashMap<>();\n        \n        // Iterate through s0 and update character frequencies in map\n        for (char c : s0.toCharArray()) {\n            map.put(c, map.getOrDefault(c, 0) + 1);\n        }\n        \n        // Iterate through s1 and decrement character frequencies in map\n        for (char c : s1.toCharArray()) {\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) - 1);\n                if (map.get(c) == 0) {\n                    map.remove(c);\n                }\n            }\n        }\n        \n        // If map is empty, characters are the same\n        return map.isEmpty();\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")); // true\n        System.out.println(solution.sameChars(\"abcd\", \"dddddddabc\")); // true\n        System.out.println(solution.sameChars(\"dddddddabc\", \"abcd\")); // true\n        System.out.println(solution.sameChars(\"eabcd\", \"dddddddabc\")); // false\n        System.out.println(solution.sameChars(\"abcd\", \"dddddddabce\")); // false\n        System.out.println(solution.sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")); // false\n    }\n}"}
{"task_id": "Java/55", "generation": "        if (n <= 1) {\n            return n;\n        }\n        int a = 0;\n        int b = 1;\n        for (int i = 2; i <= n; i++) {\n            int temp = a + b;\n            a = b;\n            b = temp;\n        }\n        return b;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fib(10));\n        System.out.println(solution.fib(1));\n        System.out.println(solution.fib(8));\n    }\n}"}
{"task_id": "Java/55", "generation": "        if (n <= 1) {\n            return n;\n        }\n        int[] fibNums = new int[n + 1];\n        fibNums[0] = 0;\n        fibNums[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            fibNums[i] = fibNums[i - 1] + fibNums[i - 2];\n        }\n        return fibNums[n];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fib(10));\n        System.out.println(solution.fib(1));\n        System.out.println(solution.fib(8));\n    }\n}"}
{"task_id": "Java/55", "generation": "        if (n <= 1) {\n            return n;\n        }\n        \n        int a = 0;\n        int b = 1;\n        int sum = 0;\n        \n        for (int i = 2; i <= n; i++) {\n            sum = a + b;\n            a = b;\n            b = sum;\n        }\n        \n        return sum;\n    }\n}"}
{"task_id": "Java/55", "generation": "        if (n <= 1) {\n            return n;\n        }\n        \n        int prev1 = 0;\n        int prev2 = 1;\n        int fibNum = 0;\n        \n        for (int i = 2; i <= n; i++) {\n            fibNum = prev1 + prev2;\n            prev1 = prev2;\n            prev2 = fibNum;\n        }\n        \n        return fibNum;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.fib(10)); // Output: 55\n        System.out.println(solution.fib(1)); // Output: 1\n        System.out.println(solution.fib(8)); // Output: 21\n    }\n}"}
{"task_id": "Java/55", "generation": "        if (n <= 1) {\n            return n;\n        }\n        \n        int[] fib = new int[n+1];\n        fib[0] = 0;\n        fib[1] = 1;\n        \n        for (int i = 2; i <= n; i++) {\n            fib[i] = fib[i-1] + fib[i-2];\n        }\n        \n        return fib[n];\n    }\n}"}
{"task_id": "Java/56", "generation": "        Stack<Character> stack = new Stack<>();\n        \n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '<') {\n                stack.push(bracket);\n            } else if (bracket == '>') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n}"}
{"task_id": "Java/56", "generation": "        Stack<Character> stack = new Stack<>();\n        \n        for (int i = 0; i < brackets.length(); i++) {\n            char bracket = brackets.charAt(i);\n            \n            if (bracket == '<') {\n                stack.push(bracket);\n            } else if (bracket == '>') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.correctBracketing(\"<\")); // false\n        System.out.println(solution.correctBracketing(\"<>\")); // true\n        System.out.println(solution.correctBracketing(\"<<><>>\")); // true\n        System.out.println(solution.correctBracketing(\"><<>\")); // false\n    }\n}"}
{"task_id": "Java/56", "generation": "        Stack<Character> stack = new Stack<>();\n        \n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '<') {\n                stack.push(bracket);\n            } else if (bracket == '>') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n}"}
{"task_id": "Java/56", "generation": "        Stack<Character> stack = new Stack<>();\n        \n        for(char c : brackets.toCharArray()) {\n            if(c == '<') {\n                stack.push(c);\n            } else if(c == '>') {\n                if(stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n}"}
{"task_id": "Java/56", "generation": "        Stack<Character> stack = new Stack<>();\n        \n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '<') {\n                stack.push(bracket);\n            } else if (bracket == '>') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.correctBracketing(\"<\")); // false\n        System.out.println(solution.correctBracketing(\"<>\")); // true\n        System.out.println(solution.correctBracketing(\"<<><>>\")); // true\n        System.out.println(solution.correctBracketing(\"><<>\")); // false\n    }\n}"}
{"task_id": "Java/57", "generation": "        boolean increasing = true;\n        boolean decreasing = true;\n        \n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n                increasing = false;\n            }\n            if (l.get(i) > l.get(i - 1)) {\n                decreasing = false;\n            }\n        }\n        \n        return increasing || decreasing;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> list1 = Arrays.asList(1, 2, 4, 20);\n        List<Integer> list2 = Arrays.asList(1, 20, 4, 10);\n        List<Integer> list3 = Arrays.asList(4, 1, 0, -10);\n        \n        System.out.println(solution.monotonic(list1)); // true\n        System.out.println(solution.monotonic(list2)); // false\n        System.out.println(solution.monotonic(list3)); // true\n    }\n}"}
{"task_id": "Java/57", "generation": "        boolean increasing = true;\n        boolean decreasing = true;\n\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n                increasing = false;\n            }\n            if (l.get(i) > l.get(i - 1)) {\n                decreasing = false;\n            }\n        }\n\n        return increasing || decreasing;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> l1 = Arrays.asList(1, 2, 4, 20);\n        System.out.println(solution.monotonic(l1)); // true\n\n        List<Integer> l2 = Arrays.asList(1, 20, 4, 10);\n        System.out.println(solution.monotonic(l2)); // false\n\n        List<Integer> l3 = Arrays.asList(4, 1, 0, -10);\n        System.out.println(solution.monotonic(l3)); // true\n    }\n}"}
{"task_id": "Java/57", "generation": "        boolean increasing = true;\n        boolean decreasing = true;\n        \n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n                increasing = false;\n            }\n            if (l.get(i) > l.get(i - 1)) {\n                decreasing = false;\n            }\n        }\n        \n        return increasing || decreasing;\n    }\n}"}
{"task_id": "Java/57", "generation": "        boolean increasing = true;\n        boolean decreasing = true;\n\n        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1)) {\n                increasing = false;\n            }\n            if (l.get(i) < l.get(i + 1)) {\n                decreasing = false;\n            }\n        }\n\n        return increasing || decreasing;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.monotonic(Arrays.asList(1, 2, 4, 20))); // true\n        System.out.println(solution.monotonic(Arrays.asList(1, 20, 4, 10))); // false\n        System.out.println(solution.monotonic(Arrays.asList(4, 1, 0, -10))); // true\n    }\n}"}
{"task_id": "Java/57", "generation": "        boolean increasing = true;\n        boolean decreasing = true;\n        \n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i-1)) {\n                increasing = false;\n            }\n            if (l.get(i) > l.get(i-1)) {\n                decreasing = false;\n            }\n        }\n        \n        return increasing || decreasing;\n    }\n}"}
{"task_id": "Java/58", "generation": "        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        \n        // Find common elements using set intersection\n        set1.retainAll(set2);\n        \n        // Convert set to list and sort\n        List<Integer> commonElements = new ArrayList<>(set1);\n        Collections.sort(commonElements);\n        \n        return commonElements;\n    }\n}"}
{"task_id": "Java/58", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        \n        for (int num : set1) {\n            if (set2.contains(num)) {\n                result.add(num);\n            }\n        }\n        \n        Collections.sort(result);\n        \n        return result;\n    }\n}"}
{"task_id": "Java/58", "generation": "        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        \n        set1.retainAll(set2);\n        \n        List<Integer> result = new ArrayList<>(set1);\n        Collections.sort(result);\n        \n        return result;\n    }\n}"}
{"task_id": "Java/58", "generation": "        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        \n        set1.retainAll(set2);\n        \n        List<Integer> commonElements = new ArrayList<>(set1);\n        Collections.sort(commonElements);\n        \n        return commonElements;\n    }\n}"}
{"task_id": "Java/58", "generation": "        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        \n        set1.retainAll(set2);\n        \n        List<Integer> result = new ArrayList<>(set1);\n        Collections.sort(result);\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> l1 = Arrays.asList(1, 4, 3, 34, 653, 2, 5);\n        List<Integer> l2 = Arrays.asList(5, 7, 1, 5, 9, 653, 121);\n        System.out.println(solution.common(l1, l2));\n        \n        l1 = Arrays.asList(5, 3, 2, 8);\n        l2 = Arrays.asList(3, 2);\n        System.out.println(solution.common(l1, l2));\n    }\n}"}
{"task_id": "Java/59", "generation": "        int factor = 2;\n        while (n > factor) {\n            if (n % factor == 0) {\n                n /= factor;\n            } else {\n                factor++;\n            }\n        }\n        return factor;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.largestPrimeFactor(13195)); // 29\n        System.out.println(solution.largestPrimeFactor(2048)); // 2\n    }\n}"}
{"task_id": "Java/59", "generation": "        int largestPrime = 0;\n        \n        // Find all prime factors of n\n        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        \n        // Find the largest prime factor\n        for (int factor : factors) {\n            if (isPrime(factor) && factor > largestPrime) {\n                largestPrime = factor;\n            }\n        }\n        \n        return largestPrime;\n    }\n    \n    // Helper method to check if a number is prime\n    public boolean isPrime(int num) {\n        if (num < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\nclass Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.largestPrimeFactor(13195)); // Output: 29\n        System.out.println(solution.largestPrimeFactor(2048)); // Output: 2\n    }\n}"}
{"task_id": "Java/59", "generation": "        int largestPrime = 2;\n        while (n % 2 == 0) {\n            n = n / 2;\n        }\n        for (int i = 3; i <= Math.sqrt(n); i = i + 2) {\n            while (n % i == 0) {\n                largestPrime = i;\n                n = n / i;\n            }\n        }\n        if (n > largestPrime) {\n            largestPrime = n;\n        }\n        return largestPrime;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.largestPrimeFactor(13195)); // Output should be 29\n        System.out.println(solution.largestPrimeFactor(2048)); // Output should be 2\n    }\n}"}
{"task_id": "Java/59", "generation": "        int largestPrime = 0;\n        \n        // Find all prime factors of n\n        while (n % 2 == 0) {\n            largestPrime = 2;\n            n /= 2;\n        }\n        \n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                largestPrime = i;\n                n /= i;\n            }\n        }\n        \n        // If n is a prime number greater than 2\n        if (n > 2) {\n            largestPrime = n;\n        }\n        \n        return largestPrime;\n    }\n}"}
{"task_id": "Java/59", "generation": "        int largestPrime = 2;\n\n        while (n % 2 == 0) {\n            n /= 2;\n        }\n\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                largestPrime = i;\n                n /= i;\n            }\n        }\n\n        if (n > 2) {\n            largestPrime = n;\n        }\n\n        return largestPrime;\n    }\n}"}
{"task_id": "Java/60", "generation": "        return n * (n + 1) / 2;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.sumToN(30));\n        System.out.println(solution.sumToN(100));\n        System.out.println(solution.sumToN(5));\n        System.out.println(solution.sumToN(10));\n        System.out.println(solution.sumToN(1));\n    }\n}"}
{"task_id": "Java/60", "generation": "        return (n * (n + 1)) / 2;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.sumToN(30)); // Output: 465\n        System.out.println(solution.sumToN(100)); // Output: 5050\n        System.out.println(solution.sumToN(5)); // Output: 15\n        System.out.println(solution.sumToN(10)); // Output: 55\n        System.out.println(solution.sumToN(1)); // Output: 1\n    }\n}"}
{"task_id": "Java/60", "generation": "        return n * (n + 1) / 2;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.sumToN(30)); // Output: 465\n        System.out.println(sol.sumToN(100)); // Output: 5050\n        System.out.println(sol.sumToN(5)); // Output: 15\n        System.out.println(sol.sumToN(10)); // Output: 55\n        System.out.println(sol.sumToN(1)); // Output: 1\n    }\n}"}
{"task_id": "Java/60", "generation": "        return n * (n + 1) / 2;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.sumToN(30));\n        System.out.println(solution.sumToN(100));\n        System.out.println(solution.sumToN(5));\n        System.out.println(solution.sumToN(10));\n        System.out.println(solution.sumToN(1));\n    }\n}"}
{"task_id": "Java/60", "generation": "        return (n * (n + 1)) / 2;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.sumToN(30));\n        System.out.println(solution.sumToN(100));\n        System.out.println(solution.sumToN(5));\n        System.out.println(solution.sumToN(10));\n        System.out.println(solution.sumToN(1));\n    }\n}"}
{"task_id": "Java/61", "generation": "        Stack<Character> stack = new Stack<>();\n        \n        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n            \n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.correctBracketing(\"(\")); // false\n        System.out.println(solution.correctBracketing(\"()\")); // true\n        System.out.println(solution.correctBracketing(\"(()())\")); // true\n        System.out.println(solution.correctBracketing(\")(()\")); // false\n    }\n}"}
{"task_id": "Java/61", "generation": "        Stack<Character> stack = new Stack<>();\n\n        for(char bracket : brackets.toCharArray()) {\n            if(bracket == '(') {\n                stack.push(bracket);\n            } else if(bracket == ')') {\n                if(stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n\n        return stack.isEmpty();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.correctBracketing(\"(\")); // false\n        System.out.println(solution.correctBracketing(\"()\")); // true\n        System.out.println(solution.correctBracketing(\"(()())\")); // true\n        System.out.println(solution.correctBracketing(\")(()\")); // false\n    }\n}"}
{"task_id": "Java/61", "generation": "        Stack<Character> stack = new Stack<>();\n        \n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.correctBracketing(\"(\")); // false\n        System.out.println(solution.correctBracketing(\"()\")); // true\n        System.out.println(solution.correctBracketing(\"(()())\")); // true\n        System.out.println(solution.correctBracketing(\")(()\")); // false\n    }\n}"}
{"task_id": "Java/61", "generation": "        Stack<Character> stack = new Stack<>();\n\n        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n\n        return stack.isEmpty();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.correctBracketing(\"(\")); // false\n        System.out.println(solution.correctBracketing(\"()\")); // true\n        System.out.println(solution.correctBracketing(\"(()())\")); // true\n        System.out.println(solution.correctBracketing(\")(()\")); // false\n    }\n}"}
{"task_id": "Java/61", "generation": "        Stack<Character> stack = new Stack<>();\n        \n        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n            \n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.correctBracketing(\"(\")); // false\n        System.out.println(solution.correctBracketing(\"()\")); // true\n        System.out.println(solution.correctBracketing(\"(()())\")); // true\n        System.out.println(solution.correctBracketing(\")(()\")); // false\n    }\n}"}
{"task_id": "Java/62", "generation": "        List<Integer> derivatives = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            derivatives.add(xs.get(i) * i);\n        }\n        return derivatives;\n    }\n}"}
{"task_id": "Java/62", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i < xs.size(); i++) {\n            int coefficient = xs.get(i);\n            int power = i - 1;\n            result.add(coefficient * power);\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/62", "generation": "        List<Integer> derivative = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            derivative.add(xs.get(i) * i);\n        }\n        return derivative;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> polynomial1 = Arrays.asList(3, 1, 2, 4, 5);\n        List<Integer> polynomial2 = Arrays.asList(1, 2, 3);\n\n        System.out.println(solution.derivative(polynomial1)); // [1, 4, 12, 20]\n        System.out.println(solution.derivative(polynomial2)); // [2, 6]\n    }\n}"}
{"task_id": "Java/62", "generation": "        List<Integer> derivative = new ArrayList<>();\n\n        for (int i = 1; i < xs.size(); i++) {\n            derivative.add(xs.get(i) * i);\n        }\n\n        return derivative;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> polynomial1 = Arrays.asList(3, 1, 2, 4, 5);\n        List<Integer> derivative1 = solution.derivative(polynomial1);\n        System.out.println(derivative1);\n\n        List<Integer> polynomial2 = Arrays.asList(1, 2, 3);\n        List<Integer> derivative2 = solution.derivative(polynomial2);\n        System.out.println(derivative2);\n    }\n}"}
{"task_id": "Java/62", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/63", "generation": "        if (n == 0 || n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 1;\n        }\n        \n        int[] fibfib = new int[n + 1];\n        fibfib[0] = 0;\n        fibfib[1] = 0;\n        fibfib[2] = 1;\n        \n        for (int i = 3; i <= n; i++) {\n            fibfib[i] = fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3];\n        }\n        \n        return fibfib[n];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fibfib(1)); // Output: 0\n        System.out.println(solution.fibfib(5)); // Output: 4\n        System.out.println(solution.fibfib(8)); // Output: 24\n    }\n}"}
{"task_id": "Java/63", "generation": "        if (n == 0 || n == 1) {\n            return 0;\n        }\n        \n        int[] fibfib = new int[n + 1];\n        fibfib[0] = 0;\n        fibfib[1] = 0;\n        fibfib[2] = 1;\n        \n        for (int i = 3; i <= n; i++) {\n            fibfib[i] = fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3];\n        }\n        \n        return fibfib[n];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.fibfib(1)); // 0\n        System.out.println(solution.fibfib(5)); // 4\n        System.out.println(solution.fibfib(8)); // 24\n    }\n}"}
{"task_id": "Java/63", "generation": "        if (n == 0 || n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 1;\n        }\n        \n        int[] fibfib = new int[n+1];\n        fibfib[0] = 0;\n        fibfib[1] = 0;\n        fibfib[2] = 1;\n        \n        for (int i = 3; i <= n; i++) {\n            fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3];\n        }\n        \n        return fibfib[n];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fibfib(1)); // 0\n        System.out.println(solution.fibfib(5)); // 4\n        System.out.println(solution.fibfib(8)); // 24\n    }\n}"}
{"task_id": "Java/63", "generation": "        if (n == 0 || n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 1;\n        }\n        \n        int[] fibfib = new int[n+1];\n        fibfib[0] = 0;\n        fibfib[1] = 0;\n        fibfib[2] = 1;\n        \n        for (int i = 3; i <= n; i++) {\n            fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3];\n        }\n        \n        return fibfib[n];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fibfib(1)); // 0\n        System.out.println(solution.fibfib(5)); // 4\n        System.out.println(solution.fibfib(8)); // 24\n    }\n}"}
{"task_id": "Java/63", "generation": "        if (n == 0 || n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        \n        int[] fibfib = new int[n + 1];\n        fibfib[0] = 0;\n        fibfib[1] = 0;\n        fibfib[2] = 1;\n        \n        for (int i = 3; i <= n; i++) {\n            fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3];\n        }\n        \n        return fibfib[n];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fibfib(1)); // Output: 0\n        System.out.println(solution.fibfib(5)); // Output: 4\n        System.out.println(solution.fibfib(8)); // Output: 24\n    }\n}"}
{"task_id": "Java/64", "generation": "        int count = 0;\n        char[] vowels = {'a', 'e', 'i', 'o', 'u', 'y'};\n        char[] word = s.toLowerCase().toCharArray();\n        \n        for (int i = 0; i < word.length; i++) {\n            for (char vowel : vowels) {\n                if (word[i] == vowel) {\n                    if (i == word.length - 1 && vowel == 'y') {\n                        count++;\n                    } else if (i != word.length - 1) {\n                        count++;\n                    }\n                }\n            }\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.vowelsCount(\"abcde\")); // Output: 2\n        System.out.println(solution.vowelsCount(\"ACEDY\")); // Output: 3\n    }\n}"}
{"task_id": "Java/64", "generation": "        // Convert the input string to lowercase for case-insensitivity\n        s = s.toLowerCase();\n\n        // Initialize a count variable to keep track of the number of vowels\n        int count = 0;\n\n        // Iterate through each character in the string\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            // Check if the character is a vowel\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            }\n            // Check if 'y' is a vowel at the end of the word\n            if (c == 'y' && i == s.length() - 1) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.vowelsCount(\"abcde\")); // Output: 2\n        System.out.println(solution.vowelsCount(\"ACEDY\")); // Output: 3\n    }\n}"}
{"task_id": "Java/64", "generation": "        s = s.toLowerCase();\n        int count = 0;\n        \n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            } else if (i == s.length() - 1 && c == 'y') {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.vowelsCount(\"abcde\")); // Output: 2\n        System.out.println(solution.vowelsCount(\"ACEDY\")); // Output: 3\n    }\n}"}
{"task_id": "Java/64", "generation": "        s = s.toLowerCase();\n        int count = 0;\n        for(int i=0; i<s.length(); i++){\n            char c = s.charAt(i);\n            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'){\n                count++;\n            }\n            if(c == 'y' && i == s.length()-1){\n                count++;\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/64", "generation": "        // Convert the input string to lowercase for case-insensitivity\n        s = s.toLowerCase();\n        \n        int count = 0;\n        // Loop through each character in the string\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            // Check if the character is a vowel\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            }\n        }\n        \n        // Check if the last character is 'y' and it is at the end of the word\n        if (s.charAt(s.length() - 1) == 'y') {\n            count++;\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.vowelsCount(\"abcde\")); // Output: 2\n        System.out.println(solution.vowelsCount(\"ACEDY\")); // Output: 3\n    }\n}"}
{"task_id": "Java/65", "generation": "        // Convert integer x to a string\n        String str = String.valueOf(x);\n\n        // Get the number of digits in x\n        int numDigits = str.length();\n\n        // Handle case where shift is greater than number of digits\n        if (shift > numDigits) {\n            // Reverse the string and return\n            StringBuilder reversed = new StringBuilder(str);\n            return reversed.reverse().toString();\n        }\n\n        // Shift the digits right by shift\n        String shiftedStr = str.substring(numDigits - shift) + str.substring(0, numDigits - shift);\n\n        return shiftedStr;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n\n        System.out.println(sol.circularShift(12, 1)); // Output: \"21\"\n        System.out.println(sol.circularShift(12, 2)); // Output: \"12\"\n    }\n}"}
{"task_id": "Java/65", "generation": "        // Convert integer to string for easier manipulation\n        String numStr = String.valueOf(x);\n        \n        // Get length of the number\n        int length = numStr.length();\n        \n        // Handle case where shift is greater than number of digits\n        if (shift >= length) {\n            // Reverse the digits and return\n            return new StringBuilder(numStr).reverse().toString();\n        }\n        \n        // Circular shift right by 'shift' positions\n        String shiftedStr = numStr.substring(length - shift) + numStr.substring(0, length - shift);\n        \n        return shiftedStr;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.circularShift(12, 1)); // Output: 21\n        System.out.println(solution.circularShift(12, 2)); // Output: 12\n    }\n}"}
{"task_id": "Java/65", "generation": "        // Convert integer to string\n        String num = String.valueOf(x);\n        \n        // Get the number of digits\n        int n = num.length();\n        \n        // Calculate the effective shift\n        shift = shift % n;\n        \n        // If shift is 0 or equal to number of digits, return the number as is\n        if (shift == 0 || shift == n) {\n            return num;\n        }\n        \n        // If shift is greater than number of digits, reverse the number\n        if (shift > n) {\n            return new StringBuilder(num).reverse().toString();\n        }\n        \n        // Circular shift the digits\n        String shiftedNum = num.substring(n - shift) + num.substring(0, n - shift);\n        \n        return shiftedNum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.circularShift(12, 1)); // Output: \"21\"\n        System.out.println(solution.circularShift(12, 2)); // Output: \"12\"\n    }\n}"}
{"task_id": "Java/65", "generation": "        String num = Integer.toString(x);\n        int len = num.length();\n        \n        // If shift is greater than the number of digits, reverse the digits\n        if (shift > len) {\n            StringBuilder reversed = new StringBuilder(num);\n            return reversed.reverse().toString();\n        }\n        \n        // Circular shift the digits right by shift\n        StringBuilder shifted = new StringBuilder();\n        for (int i = 0; i < len; i++) {\n            shifted.append(num.charAt((i + shift) % len));\n        }\n        \n        return shifted.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.circularShift(12, 1)); // \"21\"\n        System.out.println(solution.circularShift(12, 2)); // \"12\"\n    }\n}"}
{"task_id": "Java/65", "generation": "        // Convert integer to string\n        String numStr = String.valueOf(x);\n        \n        // Get the number of digits\n        int numDigits = numStr.length();\n        \n        // Handle case when shift is greater than number of digits\n        shift = shift % numDigits;\n        \n        // Handle case when shift is 0\n        if(shift == 0) {\n            return numStr;\n        }\n        \n        // Circular shift the digits\n        String shiftedNumStr = numStr.substring(numDigits - shift) + numStr.substring(0, numDigits - shift);\n        \n        return shiftedNumStr;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.circularShift(12, 1)); // Output: \"21\"\n        System.out.println(solution.circularShift(12, 2)); // Output: \"12\"\n    }\n}"}
{"task_id": "Java/66", "generation": "        int sum = 0;\n        \n        for(char c : s.toCharArray()) {\n            if(Character.isUpperCase(c)) {\n                sum += (int)c;\n            }\n        }\n        \n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.digitSum(\"\")); // Expected: 0\n        System.out.println(solution.digitSum(\"abAB\")); // Expected: 131\n        System.out.println(solution.digitSum(\"abcCd\")); // Expected: 67\n        System.out.println(solution.digitSum(\"helloE\")); // Expected: 69\n        System.out.println(solution.digitSum(\"woArBld\")); // Expected: 131\n        System.out.println(solution.digitSum(\"aAaaaXa\")); // Expected: 153\n    }\n}"}
{"task_id": "Java/66", "generation": "        int sum = 0;\n        \n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += (int) c;\n            }\n        }\n        \n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.digitSum(\"\")); // Output: 0\n        System.out.println(solution.digitSum(\"abAB\")); // Output: 131\n        System.out.println(solution.digitSum(\"abcCd\")); // Output: 67\n        System.out.println(solution.digitSum(\"helloE\")); // Output: 69\n        System.out.println(solution.digitSum(\"woArBld\")); // Output: 131\n        System.out.println(solution.digitSum(\"aAaaaXa\")); // Output: 153\n    }\n}"}
{"task_id": "Java/66", "generation": "        int sum = 0;\n        \n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += (int) c;\n            }\n        }\n        \n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.digitSum(\"\")); // 0\n        System.out.println(solution.digitSum(\"abAB\")); // 131\n        System.out.println(solution.digitSum(\"abcCd\")); // 67\n        System.out.println(solution.digitSum(\"helloE\")); // 69\n        System.out.println(solution.digitSum(\"woArBld\")); // 131\n        System.out.println(solution.digitSum(\"aAaaaXa\")); // 153\n    }\n}"}
{"task_id": "Java/66", "generation": "        int sum = 0;\n        \n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += (int) c;\n            }\n        }\n        \n        return sum;\n    }\n}"}
{"task_id": "Java/66", "generation": "        int sum = 0;\n        \n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += (int) c;\n            }\n        }\n        \n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.digitSum(\"\")); // 0\n        System.out.println(solution.digitSum(\"abAB\")); // 131\n        System.out.println(solution.digitSum(\"abcCd\")); // 67\n        System.out.println(solution.digitSum(\"helloE\")); // 69\n        System.out.println(solution.digitSum(\"woArBld\")); // 131\n        System.out.println(solution.digitSum(\"aAaaaXa\")); // 153\n    }\n}"}
{"task_id": "Java/67", "generation": "        // Split the string to extract the number of apples and oranges\n        String[] parts = s.split(\" \");\n        int apples = Integer.parseInt(parts[0]);\n        int oranges = Integer.parseInt(parts[3]);\n        \n        // Calculate the number of mango fruits\n        int mango = n - apples - oranges;\n        \n        return mango;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.fruitDistribution(\"5 apples and 6 oranges\", 19)); // Output: 8\n        System.out.println(solution.fruitDistribution(\"0 apples and 1 oranges\", 3)); // Output: 2\n        System.out.println(solution.fruitDistribution(\"2 apples and 3 oranges\", 100)); // Output: 95\n        System.out.println(solution.fruitDistribution(\"100 apples and 1 oranges\", 120)); // Output: 19\n    }\n}"}
{"task_id": "Java/67", "generation": "        String[] parts = s.split(\" \");\n        int apples = 0;\n        int oranges = 0;\n        \n        for (int i = 0; i < parts.length; i++) {\n            if (parts[i].equals(\"apples\")) {\n                apples = Integer.parseInt(parts[i-1]);\n            } else if (parts[i].equals(\"oranges\")) {\n                oranges = Integer.parseInt(parts[i-1]);\n            }\n        }\n        \n        return n - apples - oranges;\n    }\n}"}
{"task_id": "Java/67", "generation": "        // Split the input string by spaces to get individual words\n        String[] words = s.split(\" \");\n        \n        // Initialize variables to store the number of apples and oranges\n        int apples = 0;\n        int oranges = 0;\n        \n        // Loop through the words to find the numbers of apples and oranges\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].equals(\"apples\")) {\n                apples = Integer.parseInt(words[i - 1]);\n            } else if (words[i].equals(\"oranges\")) {\n                oranges = Integer.parseInt(words[i - 1]);\n            }\n        }\n        \n        // Calculate the number of mango fruits in the basket\n        int mango = n - apples - oranges;\n        \n        return mango;\n    }\n}"}
{"task_id": "Java/67", "generation": "        // Split the string by space\n        String[] parts = s.split(\" \");\n        \n        // Initialize variables to keep track of the number of apples and oranges\n        int apples = 0;\n        int oranges = 0;\n        \n        // Loop through the parts array to find the number of apples and oranges\n        for (int i = 0; i < parts.length; i++) {\n            if (parts[i].equals(\"apples\")) {\n                apples = Integer.parseInt(parts[i-1]);\n            } else if (parts[i].equals(\"oranges\")) {\n                oranges = Integer.parseInt(parts[i-1]);\n            }\n        }\n        \n        // Calculate the number of mango fruits and return it\n        return n - apples - oranges;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.fruitDistribution(\"5 apples and 6 oranges\", 19)); // 8\n        System.out.println(solution.fruitDistribution(\"0 apples and 1 oranges\", 3)); // 2\n        System.out.println(solution.fruitDistribution(\"2 apples and 3 oranges\", 100)); // 95\n        System.out.println(solution.fruitDistribution(\"100 apples and 1 oranges\", 120)); // 19\n    }\n}"}
{"task_id": "Java/67", "generation": "        // Split the input string by spaces\n        String[] parts = s.split(\" \");\n        \n        // Initialize variables to store the number of apples and oranges\n        int apples = 0;\n        int oranges = 0;\n        \n        // Iterate through the parts of the input string\n        for (int i = 0; i < parts.length; i++) {\n            // Check if the part contains \"apples\" or \"oranges\" and extract the number\n            if (parts[i].equals(\"apples\")) {\n                apples = Integer.parseInt(parts[i - 1]);\n            } else if (parts[i].equals(\"oranges\")) {\n                oranges = Integer.parseInt(parts[i - 1]);\n            }\n        }\n        \n        // Calculate the number of mango fruits in the basket\n        int mango = n - apples - oranges;\n        \n        return mango;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.fruitDistribution(\"5 apples and 6 oranges\", 19)); // 8\n        System.out.println(solution.fruitDistribution(\"0 apples and 1 oranges\", 3)); // 2\n        System.out.println(solution.fruitDistribution(\"2 apples and 3 oranges\", 100)); // 95\n        System.out.println(solution.fruitDistribution(\"100 apples and 1 oranges\", 120)); // 19\n    }\n}"}
{"task_id": "Java/68", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        int smallestEvenValue = Integer.MAX_VALUE;\n        int smallestIndex = Integer.MAX_VALUE;\n        \n        for (int i = 0; i < arr.size(); i++) {\n            int current = arr.get(i);\n            if (current % 2 == 0 && current < smallestEvenValue) {\n                smallestEvenValue = current;\n                smallestIndex = i;\n            }\n        }\n        \n        if (smallestEvenValue == Integer.MAX_VALUE) {\n            return result;\n        }\n        \n        result.add(smallestEvenValue);\n        result.add(smallestIndex);\n        \n        return result;\n    }\n}"}
{"task_id": "Java/68", "generation": "        List<Integer> result = new ArrayList<>();\n\n        int smallestEvenValue = Integer.MAX_VALUE;\n        int smallestIndex = Integer.MAX_VALUE;\n\n        for (int i = 0; i < arr.size(); i++) {\n            int node = arr.get(i);\n            if (node % 2 == 0 && node < smallestEvenValue) {\n                smallestEvenValue = node;\n                smallestIndex = i;\n            }\n        }\n\n        if (smallestEvenValue != Integer.MAX_VALUE) {\n            result.add(smallestEvenValue);\n            result.add(smallestIndex);\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> arr1 = Arrays.asList(4, 2, 3);\n        List<Integer> arr2 = Arrays.asList(1, 2, 3);\n        List<Integer> arr3 = new ArrayList<>();\n        List<Integer> arr4 = Arrays.asList(5, 0, 3, 0, 4, 2);\n\n        System.out.println(solution.pluck(arr1)); // [2, 1]\n        System.out.println(solution.pluck(arr2)); // [2, 1]\n        System.out.println(solution.pluck(arr3)); // []\n        System.out.println(solution.pluck(arr4)); // [0, 1]\n    }\n}"}
{"task_id": "Java/68", "generation": "        List<Integer> result = new ArrayList<>();\n\n        int smallestEvenValue = Integer.MAX_VALUE;\n        int smallestIndex = Integer.MAX_VALUE;\n\n        for (int i = 0; i < arr.size(); i++) {\n            int node = arr.get(i);\n            if (node % 2 == 0 && node < smallestEvenValue) {\n                smallestEvenValue = node;\n                smallestIndex = i;\n            }\n        }\n\n        if (smallestEvenValue != Integer.MAX_VALUE) {\n            result.add(smallestEvenValue);\n            result.add(smallestIndex);\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.pluck(Arrays.asList(4, 2, 3))); // [2, 1]\n        System.out.println(solution.pluck(Arrays.asList(1, 2, 3))); // [2, 1]\n        System.out.println(solution.pluck(new ArrayList<>())); // []\n        System.out.println(solution.pluck(Arrays.asList(5, 0, 3, 0, 4, 2))); // [0, 1]\n    }\n}"}
{"task_id": "Java/68", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        int minEvenValue = Integer.MAX_VALUE;\n        int minEvenIndex = Integer.MAX_VALUE;\n        \n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0 && arr.get(i) < minEvenValue) {\n                minEvenValue = arr.get(i);\n                minEvenIndex = i;\n            }\n        }\n        \n        if (minEvenValue == Integer.MAX_VALUE) {\n            return result;\n        }\n        \n        result.add(minEvenValue);\n        result.add(minEvenIndex);\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> arr1 = new ArrayList<>(Arrays.asList(4, 2, 3));\n        List<Integer> arr2 = new ArrayList<>(Arrays.asList(1, 2, 3));\n        List<Integer> arr3 = new ArrayList<>();\n        List<Integer> arr4 = new ArrayList<>(Arrays.asList(5, 0, 3, 0, 4, 2));\n\n        System.out.println(solution.pluck(arr1)); // Output: [2, 1]\n        System.out.println(solution.pluck(arr2)); // Output: [2, 1]\n        System.out.println(solution.pluck(arr3)); // Output: []\n        System.out.println(solution.pluck(arr4)); // Output: [0, 1]\n    }\n}"}
{"task_id": "Java/68", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        int smallestValue = Integer.MAX_VALUE;\n        int smallestIndex = -1;\n        \n        for (int i = 0; i < arr.size(); i++) {\n            int current = arr.get(i);\n            if (current % 2 == 0 && current < smallestValue) {\n                smallestValue = current;\n                smallestIndex = i;\n            }\n        }\n        \n        if (smallestIndex != -1) {\n            result.add(smallestValue);\n            result.add(smallestIndex);\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/69", "generation": "        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        \n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n        \n        int maxNum = -1;\n        for (int num : frequencyMap.keySet()) {\n            if (frequencyMap.get(num) >= num && num > maxNum) {\n                maxNum = num;\n            }\n        }\n        \n        return maxNum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.search(Arrays.asList(4, 1, 2, 2, 3, 1))); // Output should be 2\n        System.out.println(solution.search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4))); // Output should be 3\n        System.out.println(solution.search(Arrays.asList(5, 5, 4, 4, 4))); // Output should be -1\n    }\n}"}
{"task_id": "Java/69", "generation": "        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        \n        // Count the frequency of each integer in the list\n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n        \n        int maxNum = -1;\n        // Iterate through the frequency map to find the maximum integer that satisfies the condition\n        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n            if (entry.getKey() > entry.getValue() && entry.getKey() > maxNum) {\n                maxNum = entry.getKey();\n            }\n        }\n        \n        return maxNum;\n    }\n}"}
{"task_id": "Java/69", "generation": "        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        \n        // Count the frequency of each integer in the list\n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n        \n        // Find the greatest integer that meets the condition\n        int result = -1;\n        for (int num : frequencyMap.keySet()) {\n            if (num > frequencyMap.get(num) && num > result) {\n                result = num;\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.search(Arrays.asList(4, 1, 2, 2, 3, 1))); // Output should be 2\n        System.out.println(solution.search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4))); // Output should be 3\n        System.out.println(solution.search(Arrays.asList(5, 5, 4, 4, 4))); // Output should be -1\n    }\n}"}
{"task_id": "Java/69", "generation": "        Map<Integer, Integer> freqMap = new HashMap<>();\n        \n        // Count the frequency of each integer in the list\n        for (int num : lst) {\n            freqMap.put(num, freqMap.getOrDefault(num, 0) + 1);\n        }\n        \n        // Iterate through the map to find the greatest integer that satisfies the condition\n        int result = -1;\n        for (Map.Entry<Integer, Integer> entry : freqMap.entrySet()) {\n            int num = entry.getKey();\n            int freq = entry.getValue();\n            if (num > freq && freq >= num) {\n                result = Math.max(result, num);\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.search(Arrays.asList(4, 1, 2, 2, 3, 1))); // Output: 2\n        System.out.println(solution.search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4))); // Output: 3\n        System.out.println(solution.search(Arrays.asList(5, 5, 4, 4, 4))); // Output: -1\n    }\n}"}
{"task_id": "Java/69", "generation": "        Map<Integer, Integer> freqMap = new HashMap<>();\n        for (int num : lst) {\n            freqMap.put(num, freqMap.getOrDefault(num, 0) + 1);\n        }\n        \n        int maxNum = -1;\n        for (int num : lst) {\n            if (num > maxNum && freqMap.get(num) >= num) {\n                maxNum = num;\n            }\n        }\n        \n        return maxNum;\n    }\n}"}
{"task_id": "Java/70", "generation": "        // Sort the list in ascending order\n        Collections.sort(lst);\n\n        // Initialize two pointers, one at the beginning and one at the end of the list\n        int left = 0;\n        int right = lst.size() - 1;\n\n        // Initialize a new list to store the result\n        List<Integer> result = new ArrayList<>();\n\n        // Keep adding elements in a strange order\n        while (left <= right) {\n            // Add the minimum value\n            result.add(lst.get(left));\n            left++;\n\n            // Add the maximum value if it's different from the minimum\n            if (left <= right) {\n                result.add(lst.get(right));\n                right--;\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.strangeSortList(Arrays.asList(1, 2, 3, 4))); // [1, 4, 2, 3]\n        System.out.println(solution.strangeSortList(Arrays.asList(5, 5, 5, 5))); // [5, 5, 5, 5]\n        System.out.println(solution.strangeSortList(Arrays.asList())); // []\n    }\n}"}
{"task_id": "Java/70", "generation": "        // Sort the list in ascending order\n        Collections.sort(lst);\n\n        List<Integer> result = new ArrayList<>();\n\n        int left = 0;\n        int right = lst.size() - 1;\n\n        while (left <= right) {\n            // Add the minimum value\n            result.add(lst.get(left));\n            left++;\n\n            // Add the maximum value if there are more elements left\n            if (left <= right) {\n                result.add(lst.get(right));\n                right--;\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.strangeSortList(Arrays.asList(1, 2, 3, 4))); // [1, 4, 2, 3]\n        System.out.println(solution.strangeSortList(Arrays.asList(5, 5, 5, 5))); // [5, 5, 5, 5]\n        System.out.println(solution.strangeSortList(Arrays.asList())); // []\n    }\n}"}
{"task_id": "Java/70", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        // Sort the list in ascending order\n        Collections.sort(lst);\n        \n        int left = 0, right = lst.size() - 1;\n        \n        while(left <= right){\n            if(left == right){\n                result.add(lst.get(left));\n                break;\n            }\n            result.add(lst.get(left));\n            result.add(lst.get(right));\n            left++;\n            right--;\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.strangeSortList(Arrays.asList(1, 2, 3, 4))); // Output: [1, 4, 2, 3]\n        System.out.println(solution.strangeSortList(Arrays.asList(5, 5, 5, 5))); // Output: [5, 5, 5, 5]\n        System.out.println(solution.strangeSortList(Arrays.asList())); // Output: []\n    }\n}"}
{"task_id": "Java/70", "generation": "        List<Integer> result = new ArrayList<>();\n        if (lst.isEmpty()) {\n            return result;\n        }\n        \n        Collections.sort(lst);\n        int left = 0;\n        int right = lst.size() - 1;\n        \n        while (left <= right) {\n            result.add(lst.get(left));\n            if (left != right) {\n                result.add(lst.get(right));\n            }\n            left++;\n            right--;\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/70", "generation": "        List<Integer> result = new ArrayList<>();\n        Collections.sort(lst);\n        \n        int left = 0;\n        int right = lst.size() - 1;\n        \n        while (left <= right) {\n            if (left == right) {\n                result.add(lst.get(left));\n                break;\n            }\n            \n            result.add(lst.get(left));\n            result.add(lst.get(right));\n            \n            left++;\n            right--;\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.strangeSortList(Arrays.asList(1, 2, 3, 4))); // [1, 4, 2, 3]\n        System.out.println(solution.strangeSortList(Arrays.asList(5, 5, 5, 5))); // [5, 5, 5, 5]\n        System.out.println(solution.strangeSortList(Arrays.asList())); // []\n    }\n}"}
{"task_id": "Java/71", "generation": "        // Check if the three sides form a valid triangle\n        if (a + b > c && a + c > b && b + c > a) {\n            // Calculate the semi-perimeter of the triangle\n            double s = (a + b + c) / 2;\n            // Calculate the area of the triangle using Heron's formula\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            // Round the area to 2 decimal points\n            return Math.round(area * 100.0) / 100.0;\n        } else {\n            return -1;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.triangleArea(3, 4, 5)); // Output: 6.0\n        System.out.println(solution.triangleArea(1, 2, 10)); // Output: -1\n    }\n}"}
{"task_id": "Java/71", "generation": "        // Check if the sides form a valid triangle\n        if (a + b > c && a + c > b && b + c > a) {\n            // Calculate the area of the triangle using Heron's formula\n            double s = (a + b + c) / 2;\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            // Round the area to 2 decimal points\n            return Math.round(area * 100) / 100.0;\n        } else {\n            // Sides do not form a valid triangle\n            return -1;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.triangleArea(3, 4, 5)); // 6.0\n        System.out.println(solution.triangleArea(1, 2, 10)); // -1\n    }\n}"}
{"task_id": "Java/71", "generation": "        // Check if the three sides form a valid triangle\n        if (a + b > c && a + c > b && b + c > a) {\n            // Calculate the semi-perimeter of the triangle\n            double s = (a + b + c) / 2;\n            // Calculate the area of the triangle using Heron's formula\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            // Round the area to 2 decimal points\n            return Math.round(area * 100.0) / 100.0;\n        } else {\n            // Return -1 if the sides do not form a valid triangle\n            return -1;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.triangleArea(3, 4, 5)); // Output: 6.0\n        System.out.println(solution.triangleArea(1, 2, 10)); // Output: -1\n    }\n}"}
{"task_id": "Java/71", "generation": "        if (a + b > c && a + c > b && b + c > a) {\n            double s = (a + b + c) / 2;\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            return Math.round(area * 100.0) / 100.0;\n        } else {\n            return -1;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.triangleArea(3, 4, 5)); // Output: 6.0\n        System.out.println(solution.triangleArea(1, 2, 10)); // Output: -1\n    }\n}"}
{"task_id": "Java/71", "generation": "        // Check if the three sides form a valid triangle\n        if (a + b > c && a + c > b && b + c > a) {\n            // Calculate the semi-perimeter of the triangle\n            double s = (a + b + c) / 2;\n            // Calculate the area of the triangle using Heron's formula\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            // Return the area rounded to 2 decimal points\n            return Math.round(area * 100.0) / 100.0;\n        } else {\n            // Return -1 if the sides do not form a valid triangle\n            return -1;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.triangleArea(3, 4, 5)); // Output: 6.0\n        System.out.println(solution.triangleArea(1, 2, 10)); // Output: -1\n    }\n}"}
{"task_id": "Java/72", "generation": "        // Check if the list is balanced (palindromic)\n        boolean isBalanced = checkIfBalanced(q);\n\n        // Calculate the sum of the elements in the list\n        int sum = calculateSum(q);\n\n        // Check if the sum is less than or equal to the maximum possible weight\n        if (isBalanced && sum <= w) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    // Helper function to check if the list is balanced (palindromic)\n    private boolean checkIfBalanced(List<Integer> q) {\n        int left = 0;\n        int right = q.size() - 1;\n\n        while (left < right) {\n            if (!q.get(left).equals(q.get(right))) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n\n        return true;\n    }\n\n    // Helper function to calculate the sum of the elements in the list\n    private int calculateSum(List<Integer> q) {\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.willItFly(Arrays.asList(1, 2), 5)); // false\n        System.out.println(solution.willItFly(Arrays.asList(3, 2, 3), 1)); // false\n        System.out.println(solution.willItFly(Arrays.asList(3, 2, 3), 9)); // true\n        System.out.println(solution.willItFly(Arrays.asList(3), 5)); // true\n    }\n}"}
{"task_id": "Java/72", "generation": "        // Check if the list is balanced (palindromic)\n        int left = 0;\n        int right = q.size() - 1;\n        while (left < right) {\n            if (!q.get(left).equals(q.get(right))) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        // Check if the sum of elements is less than or equal to the maximum weight\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n        \n        return sum <= w;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.willItFly(Arrays.asList(1, 2), 5)); // false\n        System.out.println(solution.willItFly(Arrays.asList(3, 2, 3), 1)); // false\n        System.out.println(solution.willItFly(Arrays.asList(3, 2, 3), 9)); // true\n        System.out.println(solution.willItFly(Arrays.asList(3), 5)); // true\n    }\n}"}
{"task_id": "Java/72", "generation": "        // Check if the list is balanced (palindromic)\n        List<Integer> reversed = new ArrayList<>(q);\n        Collections.reverse(reversed);\n        if (!q.equals(reversed)) {\n            return false;\n        }\n        \n        // Check if the sum of elements is less than or equal to the maximum weight\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n        \n        return sum <= w;\n    }\n}"}
{"task_id": "Java/72", "generation": "        // Check if the list is balanced (palindromic)\n        if (!isBalanced(q)) {\n            return false;\n        }\n        \n        // Calculate the sum of the elements in the list\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n        \n        // Check if the sum is less than or equal to the maximum possible weight\n        return sum <= w;\n    }\n    \n    // Helper function to check if the list is balanced (palindromic)\n    private boolean isBalanced(List<Integer> q) {\n        int left = 0;\n        int right = q.size() - 1;\n        \n        while (left < right) {\n            if (q.get(left) != q.get(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.willItFly(Arrays.asList(1, 2), 5)); // false\n        System.out.println(solution.willItFly(Arrays.asList(3, 2, 3), 1)); // false\n        System.out.println(solution.willItFly(Arrays.asList(3, 2, 3), 9)); // true\n        System.out.println(solution.willItFly(Arrays.asList(3), 5)); // true\n    }\n}"}
{"task_id": "Java/72", "generation": "        // Check if the list is balanced (palindromic)\n        int i = 0;\n        int j = q.size() - 1;\n        while (i < j) {\n            if (!q.get(i).equals(q.get(j))) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        \n        // Check if the sum of elements is less than or equal to the maximum weight\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n        \n        return sum <= w;\n    }\n}"}
{"task_id": "Java/73", "generation": "        int n = arr.size();\n        int[][] dp = new int[n][n];\n        \n        for(int len = 2; len <= n; len++) {\n            for(int i = 0; i < n - len + 1; i++) {\n                int j = i + len - 1;\n                if(arr.get(i) == arr.get(j)) {\n                    dp[i][j] = dp[i + 1][j - 1];\n                } else {\n                    dp[i][j] = 1 + Math.min(dp[i + 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n        \n        return dp[0][n-1];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> arr1 = Arrays.asList(1, 2, 3, 5, 4, 7, 9, 6);\n        List<Integer> arr2 = Arrays.asList(1, 2, 3, 4, 3, 2, 2);\n        List<Integer> arr3 = Arrays.asList(1, 2, 3, 2, 1);\n\n        System.out.println(solution.smallestChange(arr1)); // Output: 4\n        System.out.println(solution.smallestChange(arr2)); // Output: 1\n        System.out.println(solution.smallestChange(arr3)); // Output: 0\n    }\n}"}
{"task_id": "Java/73", "generation": "        if (arr == null || arr.size() == 0) {\n            return 0;\n        }\n        \n        int n = arr.size();\n        int[][] dp = new int[n][n];\n        \n        for (int len = 2; len <= n; len++) {\n            for (int i = 0; i < n - len + 1; i++) {\n                int j = i + len - 1;\n                if (arr.get(i) == arr.get(j)) {\n                    dp[i][j] = dp[i + 1][j - 1];\n                } else {\n                    dp[i][j] = Math.min(dp[i + 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n        \n        return dp[0][n - 1];\n    }\n}"}
{"task_id": "Java/73", "generation": "        int n = arr.size();\n        int[][] dp = new int[n][n];\n\n        for (int len = 2; len <= n; len++) {\n            for (int i = 0; i < n - len + 1; i++) {\n                int j = i + len - 1;\n\n                if (arr.get(i) == arr.get(j)) {\n                    dp[i][j] = dp[i + 1][j - 1];\n                } else {\n                    dp[i][j] = 1 + Math.min(dp[i + 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n\n        return dp[0][n - 1];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> arr1 = Arrays.asList(1, 2, 3, 5, 4, 7, 9, 6);\n        List<Integer> arr2 = Arrays.asList(1, 2, 3, 4, 3, 2, 2);\n        List<Integer> arr3 = Arrays.asList(1, 2, 3, 2, 1);\n\n        System.out.println(solution.smallestChange(arr1)); // Output should be 4\n        System.out.println(solution.smallestChange(arr2)); // Output should be 1\n        System.out.println(solution.smallestChange(arr3)); // Output should be 0\n    }\n}"}
{"task_id": "Java/73", "generation": "        int n = arr.size();\n        int[][] dp = new int[n][n];\n\n        // Fill the dp table with the minimum number of changes needed to make a subarray palindrome\n        for (int len = 2; len <= n; len++) {\n            for (int i = 0; i < n - len + 1; i++) {\n                int j = i + len - 1;\n                if (arr.get(i) == arr.get(j)) {\n                    dp[i][j] = dp[i + 1][j - 1];\n                } else {\n                    dp[i][j] = 1 + Math.min(dp[i + 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n\n        return dp[0][n - 1];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> arr1 = Arrays.asList(1, 2, 3, 5, 4, 7, 9, 6);\n        List<Integer> arr2 = Arrays.asList(1, 2, 3, 4, 3, 2, 2);\n        List<Integer> arr3 = Arrays.asList(1, 2, 3, 2, 1);\n\n        System.out.println(solution.smallestChange(arr1)); // 4\n        System.out.println(solution.smallestChange(arr2)); // 1\n        System.out.println(solution.smallestChange(arr3)); // 0\n    }\n}"}
{"task_id": "Java/73", "generation": "        int n = arr.size();\n        int[][] dp = new int[n][n];\n\n        for (int len = 2; len <= n; len++) {\n            for (int i = 0; i < n - len + 1; i++) {\n                int j = i + len - 1;\n                if (arr.get(i) == arr.get(j)) {\n                    dp[i][j] = dp[i + 1][j - 1];\n                } else {\n                    dp[i][j] = 1 + Math.min(dp[i][j - 1], dp[i + 1][j]);\n                }\n            }\n        }\n\n        return dp[0][n - 1];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> arr1 = Arrays.asList(1, 2, 3, 5, 4, 7, 9, 6);\n        List<Integer> arr2 = Arrays.asList(1, 2, 3, 4, 3, 2, 2);\n        List<Integer> arr3 = Arrays.asList(1, 2, 3, 2, 1);\n\n        System.out.println(solution.smallestChange(arr1)); // Output: 4\n        System.out.println(solution.smallestChange(arr2)); // Output: 1\n        System.out.println(solution.smallestChange(arr3)); // Output: 0\n    }\n}"}
{"task_id": "Java/74", "generation": "        int sum1 = 0;\n        int sum2 = 0;\n        \n        for (String s : lst1) {\n            sum1 += s.length();\n        }\n        \n        for (String s : lst2) {\n            sum2 += s.length();\n        }\n        \n        if (sum1 < sum2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.totalMatch(Arrays.asList(), Arrays.asList())); // []\n        System.out.println(solution.totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\"))); // [\"hI\", \"Hi\"]\n        System.out.println(solution.totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\"))); // [\"hi\", \"admin\"]\n        System.out.println(solution.totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\"))); // [\"hI\", \"hi\", \"hi\"]\n        System.out.println(solution.totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\"))); // [\"4\"]\n    }\n}"}
{"task_id": "Java/74", "generation": "        int totalChars1 = 0;\n        int totalChars2 = 0;\n        \n        for (String str : lst1) {\n            totalChars1 += str.length();\n        }\n        \n        for (String str : lst2) {\n            totalChars2 += str.length();\n        }\n        \n        if (totalChars1 < totalChars2) {\n            return lst1;\n        } else if (totalChars2 < totalChars1) {\n            return lst2;\n        } else {\n            return lst1;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases from the examples\n        System.out.println(solution.totalMatch(Arrays.asList(), Arrays.asList())); // []\n        System.out.println(solution.totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\"))); // [\"hI\", \"Hi\"]\n        System.out.println(solution.totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\"))); // [\"hi\", \"admin\"]\n        System.out.println(solution.totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\"))); // [\"hI\", \"hi\", \"hi\"]\n        System.out.println(solution.totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\"))); // [\"4\"]\n    }\n}"}
{"task_id": "Java/74", "generation": "        int total1 = getTotalChars(lst1);\n        int total2 = getTotalChars(lst2);\n\n        if (total1 < total2 || (total1 == total2 && lst1.size() <= lst2.size())) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n\n    private int getTotalChars(List<String> lst) {\n        int total = 0;\n        for (String str : lst) {\n            total += str.length();\n        }\n        return total;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.totalMatch(Arrays.asList(), Arrays.asList())); // []\n        System.out.println(solution.totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\"))); // [\"hI\", \"Hi\"]\n        System.out.println(solution.totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\"))); // [\"hi\", \"admin\"]\n        System.out.println(solution.totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\"))); // [\"hI\", \"hi\", \"hi\"]\n        System.out.println(solution.totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\"))); // [\"4\"]\n    }\n}"}
{"task_id": "Java/74", "generation": "        int total1 = 0;\n        int total2 = 0;\n        \n        for (String str : lst1) {\n            total1 += str.length();\n        }\n        \n        for (String str : lst2) {\n            total2 += str.length();\n        }\n        \n        if (total1 < total2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.totalMatch(Arrays.asList(), Arrays.asList())); // []\n        System.out.println(solution.totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\"))); // [\"hI\", \"Hi\"]\n        System.out.println(solution.totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\"))); // [\"hi\", \"admin\"]\n        System.out.println(solution.totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\"))); // [\"hI\", \"hi\", \"hi\"]\n        System.out.println(solution.totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\"))); // [\"4\"]\n    }\n}"}
{"task_id": "Java/74", "generation": "        if (totalChars(lst1) < totalChars(lst2)) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n    \n    private int totalChars(List<String> lst) {\n        int total = 0;\n        for (String str : lst) {\n            total += str.length();\n        }\n        return total;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.totalMatch(Arrays.asList(), Arrays.asList())); // []\n        System.out.println(solution.totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\"))); // [\"hI\", \"Hi\"]\n        System.out.println(solution.totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\"))); // [\"hi\", \"admin\"]\n        System.out.println(solution.totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\"))); // [\"hI\", \"hi\", \"hi\"]\n        System.out.println(solution.totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\"))); // [\"4\"]\n    }\n}"}
{"task_id": "Java/75", "generation": "        if (a < 6) {\n            return false;\n        }\n        \n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < 100; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        \n        for (int i = 0; i < primes.size(); i++) {\n            for (int j = i + 1; j < primes.size(); j++) {\n                for (int k = j + 1; k < primes.size(); k++) {\n                    if (primes.get(i) * primes.get(j) * primes.get(k) == a) {\n                        return true;\n                    }\n                }\n            }\n        }\n        \n        return false;\n    }\n    \n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int num = 30;\n        System.out.println(solution.isMultiplyPrime(num));\n    }\n}"}
{"task_id": "Java/75", "generation": "        // Check if the number is less than 6, as we need at least 3 prime numbers to multiply\n        if (a < 6) {\n            return false;\n        }\n        \n        // Check if the number is divisible by 2 or 3\n        if (a % 2 == 0 || a % 3 == 0) {\n            return false;\n        }\n        \n        // Check for other prime factors\n        for (int i = 5; i*i <= a; i += 6) {\n            if (a % i == 0 || a % (i + 2) == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.isMultiplyPrime(30)); // true\n        System.out.println(solution.isMultiplyPrime(24)); // false\n        System.out.println(solution.isMultiplyPrime(17)); // false\n    }\n}"}
{"task_id": "Java/75", "generation": "        // Check if the number is less than 6 (since 2, 3, and 5 are the first three prime numbers)\n        if (a < 6) {\n            return false;\n        }\n        \n        // Check if the number is divisible by 2, 3, and 5\n        if (a % 2 == 0 && a % 3 == 0 && a % 5 == 0) {\n            return true;\n        }\n        \n        // Check if the number is divisible by any combination of 3 prime numbers less than the number\n        for (int i = 2; i < a; i++) {\n            for (int j = i + 1; j < a; j++) {\n                for (int k = j + 1; k < a; k++) {\n                    if (i * j * k == a) {\n                        return true;\n                    }\n                }\n            }\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.isMultiplyPrime(30)); // true\n        System.out.println(solution.isMultiplyPrime(35)); // false\n        System.out.println(solution.isMultiplyPrime(42)); // false\n        System.out.println(solution.isMultiplyPrime(60)); // true\n    }\n}"}
{"task_id": "Java/75", "generation": "        // Check if number is less than 2\n        if (a < 2) {\n            return false;\n        }\n        \n        // Check if number is prime\n        for (int i = 2; i * i <= a; i++) {\n            if (a % i == 0) {\n                return false;\n            }\n        }\n        \n        // Generate a list of prime numbers less than 100\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < 100; i++) {\n            boolean isPrime = true;\n            for (int j = 2; j * j <= i; j++) {\n                if (i % j == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                primes.add(i);\n            }\n        }\n        \n        // Check if the number is the product of 3 prime numbers\n        for (int i = 0; i < primes.size(); i++) {\n            for (int j = i+1; j < primes.size(); j++) {\n                for (int k = j+1; k < primes.size(); k++) {\n                    if (primes.get(i) * primes.get(j) * primes.get(k) == a) {\n                        return true;\n                    }\n                }\n            }\n        }\n        \n        return false;\n    }\n}"}
{"task_id": "Java/75", "generation": "        // Generate a list of prime numbers less than 100\n        List<Integer> primes = generatePrimes();\n\n        // Iterate through all combinations of 3 prime numbers\n        for (int i = 0; i < primes.size(); i++) {\n            for (int j = i + 1; j < primes.size(); j++) {\n                for (int k = j + 1; k < primes.size(); k++) {\n                    if (primes.get(i) * primes.get(j) * primes.get(k) == a) {\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    // Helper function to generate a list of prime numbers less than 100\n    private List<Integer> generatePrimes() {\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < 100; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n\n    // Helper function to check if a number is prime\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.isMultiplyPrime(30)); // true\n    }\n}"}
{"task_id": "Java/76", "generation": "        if (x == 1) {\n            return true;\n        }\n        \n        int power = 1;\n        while (Math.pow(n, power) <= x) {\n            if (Math.pow(n, power) == x) {\n                return true;\n            }\n            power++;\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.isSimplePower(1, 4)); // true\n        System.out.println(solution.isSimplePower(2, 2)); // true\n        System.out.println(solution.isSimplePower(8, 2)); // true\n        System.out.println(solution.isSimplePower(3, 2)); // false\n        System.out.println(solution.isSimplePower(3, 1)); // false\n        System.out.println(solution.isSimplePower(5, 3)); // false\n    }\n}"}
{"task_id": "Java/76", "generation": "        // Base case: if x is 1 and n is not 1, return true\n        if (x == 1 && n != 1) {\n            return true;\n        }\n        \n        // Iterate through possible powers of n until we reach x or exceed it\n        for (int i = 1; Math.pow(n, i) <= x; i++) {\n            if (Math.pow(n, i) == x) {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.isSimplePower(1, 4)); // true\n        System.out.println(solution.isSimplePower(2, 2)); // true\n        System.out.println(solution.isSimplePower(8, 2)); // true\n        System.out.println(solution.isSimplePower(3, 2)); // false\n        System.out.println(solution.isSimplePower(3, 1)); // false\n        System.out.println(solution.isSimplePower(5, 3)); // false\n    }\n}"}
{"task_id": "Java/76", "generation": "        if (x <= 0 || n <= 0) {\n            return false;\n        }\n        \n        int power = 1;\n        while (power < x) {\n            power *= n;\n        }\n        \n        return power == x;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.isSimplePower(1, 4)); // true\n        System.out.println(solution.isSimplePower(2, 2)); // true\n        System.out.println(solution.isSimplePower(8, 2)); // true\n        System.out.println(solution.isSimplePower(3, 2)); // false\n        System.out.println(solution.isSimplePower(3, 1)); // false\n        System.out.println(solution.isSimplePower(5, 3)); // false\n    }\n}"}
{"task_id": "Java/76", "generation": "        if(x == 1) {\n            return true;\n        }\n        \n        int power = 1;\n        while(power < x) {\n            power *= n;\n        }\n        \n        return power == x;\n    }\n}"}
{"task_id": "Java/76", "generation": "        if (x == 1) {\n            return true;\n        }\n        \n        double result = Math.log(x) / Math.log(n);\n        \n        return result == (int)result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.isSimplePower(1, 4)); // true\n        System.out.println(solution.isSimplePower(2, 2)); // true\n        System.out.println(solution.isSimplePower(8, 2)); // true\n        System.out.println(solution.isSimplePower(3, 2)); // false\n        System.out.println(solution.isSimplePower(3, 1)); // false\n        System.out.println(solution.isSimplePower(5, 3)); // false\n    }\n}"}
{"task_id": "Java/77", "generation": "        int cubeRoot = (int)Math.cbrt(Math.abs(a));\n        return (a == Math.pow(cubeRoot, 3));\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.iscube(1)); // true\n        System.out.println(solution.iscube(2)); // false\n        System.out.println(solution.iscube(-1)); // true\n        System.out.println(solution.iscube(64)); // true\n        System.out.println(solution.iscube(0)); // true\n        System.out.println(solution.iscube(180)); // false\n    }\n}"}
{"task_id": "Java/77", "generation": "        if (a == 0) {\n            return true;\n        } else {\n            int cubeRoot = (int) Math.cbrt(a);\n            return cubeRoot * cubeRoot * cubeRoot == a;\n        }\n    }\n}"}
{"task_id": "Java/77", "generation": "        double cubeRoot = Math.cbrt(Math.abs(a)); // Find the cube root of the absolute value of a\n        int cube = (int) cubeRoot; // Convert the cube root to an integer\n        \n        // Check if the cube of cube is equal to a\n        return a == cube * cube * cube;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.iscube(1)); // true\n        System.out.println(solution.iscube(2)); // false\n        System.out.println(solution.iscube(-1)); // true\n        System.out.println(solution.iscube(64)); // true\n        System.out.println(solution.iscube(0)); // true\n        System.out.println(solution.iscube(180)); // false\n    }\n}"}
{"task_id": "Java/77", "generation": "        // If a is negative, make it positive\n        if (a < 0) {\n            a = -a;\n        }\n        \n        // Find the cube root of a\n        double cubeRoot = Math.cbrt(a);\n        \n        // Check if cubeRoot is an integer\n        return Math.ceil(cubeRoot) == cubeRoot;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.iscube(1)); // true\n        System.out.println(solution.iscube(2)); // false\n        System.out.println(solution.iscube(-1)); // true\n        System.out.println(solution.iscube(64)); // true\n        System.out.println(solution.iscube(0)); // true\n        System.out.println(solution.iscube(180)); // false\n    }\n}"}
{"task_id": "Java/77", "generation": "        if (a == 0) {\n            return true;\n        }\n        \n        int cubeRoot = (int) Math.cbrt(Math.abs(a));\n        \n        return Math.pow(cubeRoot, 3) == Math.abs(a);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.iscube(1)); // true\n        System.out.println(solution.iscube(2)); // false\n        System.out.println(solution.iscube(-1)); // true\n        System.out.println(solution.iscube(64)); // true\n        System.out.println(solution.iscube(0)); // true\n        System.out.println(solution.iscube(180)); // false\n    }\n}"}
{"task_id": "Java/78", "generation": "        int count = 0;\n        Set<Character> primeDigits = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n\n        for (char c : num.toCharArray()) {\n            if (primeDigits.contains(c)) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.hexKey(\"AB\")); // 1\n        System.out.println(solution.hexKey(\"1077E\")); // 2\n        System.out.println(solution.hexKey(\"ABED1A33\")); // 4\n        System.out.println(solution.hexKey(\"123456789ABCDEF0\")); // 6\n        System.out.println(solution.hexKey(\"2020\")); // 2\n    }\n}"}
{"task_id": "Java/78", "generation": "        // Define a set to store prime hexadecimal digits\n        Set<Character> primes = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n\n        int count = 0;\n        for (char c : num.toCharArray()) {\n            if (primes.contains(c)) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.hexKey(\"AB\")); // Output: 1\n        System.out.println(solution.hexKey(\"1077E\")); // Output: 2\n        System.out.println(solution.hexKey(\"ABED1A33\")); // Output: 4\n        System.out.println(solution.hexKey(\"123456789ABCDEF0\")); // Output: 6\n        System.out.println(solution.hexKey(\"2020\")); // Output: 2\n    }\n}"}
{"task_id": "Java/78", "generation": "        // Initialize a counter to keep track of prime hexadecimal digits\n        int count = 0;\n\n        // Create a set to store all prime hexadecimal digits\n        Set<Character> primes = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n\n        // Iterate through each character in the input hexadecimal number\n        for (char c : num.toCharArray()) {\n            // Check if the character is a prime hexadecimal digit\n            if (primes.contains(c)) {\n                count++;\n            }\n        }\n\n        // Return the count of prime hexadecimal digits\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.hexKey(\"AB\")); // 1\n        System.out.println(solution.hexKey(\"1077E\")); // 2\n        System.out.println(solution.hexKey(\"ABED1A33\")); // 4\n        System.out.println(solution.hexKey(\"123456789ABCDEF0\")); // 6\n        System.out.println(solution.hexKey(\"2020\")); // 2\n    }\n}"}
{"task_id": "Java/78", "generation": "        int count = 0;\n        Set<Character> primes = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n        \n        for (char c : num.toCharArray()) {\n            if (primes.contains(c)) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.hexKey(\"AB\")); // 1\n        System.out.println(solution.hexKey(\"1077E\")); // 2\n        System.out.println(solution.hexKey(\"ABED1A33\")); // 4\n        System.out.println(solution.hexKey(\"123456789ABCDEF0\")); // 6\n        System.out.println(solution.hexKey(\"2020\")); // 2\n    }\n}"}
{"task_id": "Java/78", "generation": "        // Initialize a set to store all the prime hexadecimal digits\n        Set<Character> primes = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n\n        // Initialize a counter to keep track of the number of prime hexadecimal digits\n        int count = 0;\n\n        // Loop through each character in the input hexadecimal number\n        for (char c : num.toCharArray()) {\n            // If the character is a prime hexadecimal digit, increment the count\n            if (primes.contains(c)) {\n                count++;\n            }\n        }\n\n        // Return the final count of prime hexadecimal digits\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.hexKey(\"AB\")); // Output: 1\n        System.out.println(solution.hexKey(\"1077E\")); // Output: 2\n        System.out.println(solution.hexKey(\"ABED1A33\")); // Output: 4\n        System.out.println(solution.hexKey(\"123456789ABCDEF0\")); // Output: 6\n        System.out.println(solution.hexKey(\"2020\")); // Output: 2\n    }\n}"}
{"task_id": "Java/79", "generation": "        String binary = Integer.toBinaryString(decimal);\n        return \"db\" + binary + \"db\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.decimalToBinary(15)); // should return \"db1111db\"\n        System.out.println(solution.decimalToBinary(32)); // should return \"db100000db\"\n    }\n}"}
{"task_id": "Java/79", "generation": "        String binary = Integer.toBinaryString(decimal);\n        return \"db\" + binary + \"db\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.decimalToBinary(15)); // should return \"db1111db\"\n        System.out.println(solution.decimalToBinary(32)); // should return \"db100000db\"\n    }\n}"}
{"task_id": "Java/79", "generation": "        String binary = Integer.toBinaryString(decimal);\n        return \"db\" + binary + \"db\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases to validate the solution\n        System.out.println(solution.decimalToBinary(15)); // Output: db1111db\n        System.out.println(solution.decimalToBinary(32)); // Output: db100000db\n    }\n}"}
{"task_id": "Java/79", "generation": "        String binary = Integer.toBinaryString(decimal);\n        return \"db\" + binary + \"db\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.decimalToBinary(15)); // should print \"db1111db\"\n        System.out.println(solution.decimalToBinary(32)); // should print \"db100000db\"\n    }\n}"}
{"task_id": "Java/79", "generation": "        String binary = Integer.toBinaryString(decimal);\n        return \"db\" + binary + \"db\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.decimalToBinary(15));   // \"db1111db\"\n        System.out.println(solution.decimalToBinary(32));   // \"db100000db\"\n    }\n}"}
{"task_id": "Java/80", "generation": "        if (s.length() < 3) {\n            return false;\n        }\n        \n        for (int i = 0; i <= s.length() - 3; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.isHappy(\"a\")); // false\n        System.out.println(solution.isHappy(\"aa\")); // false\n        System.out.println(solution.isHappy(\"abcd\")); // true\n        System.out.println(solution.isHappy(\"aabb\")); // false\n        System.out.println(solution.isHappy(\"adb\")); // true\n        System.out.println(solution.isHappy(\"xyy\")); // false\n    }\n}"}
{"task_id": "Java/80", "generation": "        if (s.length() < 3) {\n            return false;\n        }\n        \n        for (int i = 0; i < s.length() - 2; i++) {\n            char c1 = s.charAt(i);\n            char c2 = s.charAt(i + 1);\n            char c3 = s.charAt(i + 2);\n            \n            if (c1 == c2 || c1 == c3 || c2 == c3) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.isHappy(\"a\")); // false\n        System.out.println(solution.isHappy(\"aa\")); // false\n        System.out.println(solution.isHappy(\"abcd\")); // true\n        System.out.println(solution.isHappy(\"aabb\")); // false\n        System.out.println(solution.isHappy(\"adb\")); // true\n        System.out.println(solution.isHappy(\"xyy\")); // false\n    }\n}"}
{"task_id": "Java/80", "generation": "        if (s.length() < 3) {\n            return false;\n        }\n        \n        for (int i = 0; i <= s.length() - 3; i++) {\n            char c1 = s.charAt(i);\n            char c2 = s.charAt(i + 1);\n            char c3 = s.charAt(i + 2);\n            \n            if (c1 == c2 || c2 == c3 || c1 == c3) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Testing the examples\n        System.out.println(solution.isHappy(\"a\")); // false\n        System.out.println(solution.isHappy(\"aa\")); // false\n        System.out.println(solution.isHappy(\"abcd\")); // true\n        System.out.println(solution.isHappy(\"aabb\")); // false\n        System.out.println(solution.isHappy(\"adb\")); // true\n        System.out.println(solution.isHappy(\"xyy\")); // false\n    }\n}"}
{"task_id": "Java/80", "generation": "        if (s.length() < 3) {\n            return false;\n        }\n        \n        for (int i = 0; i <= s.length() - 3; i++) {\n            char c1 = s.charAt(i);\n            char c2 = s.charAt(i + 1);\n            char c3 = s.charAt(i + 2);\n            \n            if (c1 == c2 || c1 == c3 || c2 == c3) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "Java/80", "generation": "        if (s.length() < 3) {\n            return false;\n        }\n        \n        for (int i = 0; i <= s.length() - 3; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.isHappy(\"a\")); // false\n        System.out.println(solution.isHappy(\"aa\")); // false\n        System.out.println(solution.isHappy(\"abcd\")); // true\n        System.out.println(solution.isHappy(\"aabb\")); // false\n        System.out.println(solution.isHappy(\"adb\")); // true\n        System.out.println(solution.isHappy(\"xyy\")); // false\n    }\n}"}
{"task_id": "Java/81", "generation": "        List<String> letterGrades = new ArrayList<>();\n        \n        for (Double grade : grades) {\n            if (grade == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        \n        return letterGrades;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Double> grades = Arrays.asList(4.0, 3.0, 1.7, 2.0, 3.5);\n        List<String> letterGrades = solution.numericalLetterGrade(grades);\n        \n        System.out.println(letterGrades);\n    }\n}"}
{"task_id": "Java/81", "generation": "        List<String> letterGrades = new ArrayList<>();\n        \n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        \n        return letterGrades;\n    }\n}"}
{"task_id": "Java/81", "generation": "        List<String> letterGrades = new ArrayList<>();\n\n        for (Double grade : grades) {\n            if (grade == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n\n        return letterGrades;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Double> grades = Arrays.asList(4.0, 3.0, 1.7, 2.0, 3.5);\n        List<String> letterGrades = solution.numericalLetterGrade(grades);\n        System.out.println(letterGrades);\n    }\n}"}
{"task_id": "Java/81", "generation": "        List<String> letterGrades = new ArrayList<>();\n        \n        for (Double grade : grades) {\n            if (grade == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        \n        return letterGrades;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Double> grades = Arrays.asList(4.0, 3.0, 1.7, 2.0, 3.5);\n        List<String> result = solution.numericalLetterGrade(grades);\n\n        System.out.println(result);\n    }\n}"}
{"task_id": "Java/81", "generation": "        List<String> letterGrades = new ArrayList<>();\n\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n\n        return letterGrades;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Double> grades = Arrays.asList(4.0, 3.0, 1.7, 2.0, 3.5);\n        List<String> letterGrades = solution.numericalLetterGrade(grades);\n        System.out.println(letterGrades);\n    }\n}"}
{"task_id": "Java/82", "generation": "        int length = string.length();\n        \n        if (length <= 1) {\n            return false;\n        }\n        \n        for (int i = 2; i < length; i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.primeLength(\"Hello\")); // true\n        System.out.println(solution.primeLength(\"abcdcba\")); // true\n        System.out.println(solution.primeLength(\"kittens\")); // true\n        System.out.println(solution.primeLength(\"orange\")); // false\n    }\n}"}
{"task_id": "Java/82", "generation": "        int length = string.length();\n        \n        if (length <= 1) {\n            return false;\n        }\n        \n        for (int i = 2; i < length; i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "Java/82", "generation": "        int length = string.length();\n        \n        if (length <= 1) {\n            return false;\n        }\n        \n        for (int i = 2; i < length; i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.primeLength(\"Hello\")); // true\n        System.out.println(solution.primeLength(\"abcdcba\")); // true\n        System.out.println(solution.primeLength(\"kittens\")); // true\n        System.out.println(solution.primeLength(\"orange\")); // false\n    }\n}"}
{"task_id": "Java/82", "generation": "        int length = string.length();\n        \n        if (length <= 1) {\n            return false;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "Java/82", "generation": "        int length = string.length();\n        if (length <= 1) {\n            return false;\n        }\n        \n        for (int i = 2; i < Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "Java/83", "generation": "        // Count of numbers that start with 1\n        int startsWithOne = (int) Math.pow(10, n-1);\n        \n        // Count of numbers that end with 1\n        int endsWithOne = (int) Math.pow(10, n-1);\n        \n        // Count of numbers that start and end with 1 (double counting)\n        int startsAndEndsWithOne = (int) Math.pow(10, n-2);\n        \n        // Subtract the double counting\n        int total = startsWithOne + endsWithOne - startsAndEndsWithOne;\n        \n        return total;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        int n = 3;\n        System.out.println(sol.startsOneEnds(n)); // Output: 200\n    }\n}"}
{"task_id": "Java/83", "generation": "        if (n <= 0) {\n            return 0;\n        }\n        \n        // Count of numbers that start with 1\n        int startWithOne = (int) Math.pow(10, n-1);\n        \n        // Count of numbers that end with 1\n        int endWithOne = 1;\n        \n        return startWithOne + endWithOne;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.startsOneEnds(1)); // Output: 2\n        System.out.println(solution.startsOneEnds(2)); // Output: 20\n        System.out.println(solution.startsOneEnds(3)); // Output: 200\n        System.out.println(solution.startsOneEnds(4)); // Output: 2000\n    }\n}"}
{"task_id": "Java/83", "generation": "        if (n <= 0) {\n            return 0;\n        }\n        \n        int count = 0;\n        \n        // Count the numbers of n-digit positive integers that start with 1\n        count += Math.pow(10, n-1);\n        \n        // Count the numbers of n-digit positive integers that end with 1\n        count += Math.pow(10, n-1);\n        \n        // Subtract the numbers that start and end with 1 (double counting)\n        count -= Math.pow(10, n-2);\n        \n        return count;\n    }\n}"}
{"task_id": "Java/83", "generation": "        // Count of numbers starting with 1 is 9 * 10^(n-1)\n        int startWithOne = 9 * (int) Math.pow(10, n-1);\n        \n        // Count of numbers ending with 1 is 10^(n-1)\n        int endWithOne = (int) Math.pow(10, n-1);\n        \n        // Subtract the overlap (numbers that start and end with 1)\n        int overlap = (n > 1) ? (int) Math.pow(10, n-2) : 0;\n        \n        return startWithOne + endWithOne - overlap;\n    }\n}"}
{"task_id": "Java/83", "generation": "        if(n <= 0) {\n            return 0;\n        }\n        \n        // Count of numbers that start with 1\n        int startWithOne = (int) Math.pow(10, n-1);\n        \n        // Count of numbers that end with 1\n        int endWithOne = 1;\n        \n        return startWithOne + endWithOne;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.startsOneEnds(1)); // Output: 2\n        System.out.println(solution.startsOneEnds(2)); // Output: 20\n        System.out.println(solution.startsOneEnds(3)); // Output: 200\n    }\n}"}
{"task_id": "Java/84", "generation": "        // Convert the integer N to binary string representation\n        String binary = Integer.toBinaryString(N);\n        \n        // Initialize a variable to store the sum of digits\n        int sum = 0;\n        \n        // Loop through each character in the binary string\n        for (int i = 0; i < binary.length(); i++) {\n            // Convert the character to integer and add it to the sum\n            sum += Character.getNumericValue(binary.charAt(i));\n        }\n        \n        // Convert the sum to binary string representation and return it\n        return Integer.toBinaryString(sum);\n    }\n}"}
{"task_id": "Java/84", "generation": "        // Convert the integer N to binary string\n        String binaryString = Integer.toBinaryString(N);\n        \n        // Initialize sum variable to keep track of sum of digits\n        int sum = 0;\n        \n        // Iterate through each character in the binary string\n        for(char ch : binaryString.toCharArray()) {\n            // Convert character to integer and add it to sum\n            sum += Character.getNumericValue(ch);\n        }\n        \n        // Convert sum to binary string and return\n        return Integer.toBinaryString(sum);\n    }\n}"}
{"task_id": "Java/84", "generation": "        int sum = 0;\n        \n        while (N > 0) {\n            sum += N % 2;\n            N = N / 2;\n        }\n        \n        return Integer.toBinaryString(sum);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.solve(1000)); // Output: 1\n        System.out.println(solution.solve(150)); // Output: 110\n        System.out.println(solution.solve(147)); // Output: 1100\n    }\n}"}
{"task_id": "Java/84", "generation": "        // Convert the integer N to binary string\n        String binaryString = Integer.toBinaryString(N);\n        \n        // Calculate the sum of digits in the binary string\n        int sum = 0;\n        for(int i = 0; i < binaryString.length(); i++) {\n            sum += Character.getNumericValue(binaryString.charAt(i));\n        }\n        \n        // Convert the sum to binary string and return\n        return Integer.toBinaryString(sum);\n    }\n}\n\nclass Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.solve(1000)); // Output: \"1\"\n        System.out.println(solution.solve(150)); // Output: \"110\"\n        System.out.println(solution.solve(147)); // Output: \"1100\"\n    }\n}"}
{"task_id": "Java/84", "generation": "        // Convert the integer to binary string\n        String binary = Integer.toBinaryString(N);\n        \n        // Calculate the sum of digits in binary\n        int sum = 0;\n        for(int i = 0; i < binary.length(); i++) {\n            sum += Character.getNumericValue(binary.charAt(i));\n        }\n        \n        // Convert the sum to binary string\n        String binarySum = Integer.toBinaryString(sum);\n        \n        return binarySum;\n    }\n}\n\nclass Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.solve(1000)); // Output: \"1\"\n        System.out.println(solution.solve(150)); // Output: \"110\"\n        System.out.println(solution.solve(147)); // Output: \"1100\"\n    }\n}"}
{"task_id": "Java/85", "generation": "        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/85", "generation": "        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        List<Integer> lst1 = Arrays.asList(4, 2, 6, 7);\n        System.out.println(solution.add(lst1)); // Output: 2\n        \n        List<Integer> lst2 = Arrays.asList(1, 3, 5, 7, 9);\n        System.out.println(solution.add(lst2)); // Output: 0\n        \n        List<Integer> lst3 = Arrays.asList(10, 20, 30, 40);\n        System.out.println(solution.add(lst3)); // Output: 20\n    }\n}"}
{"task_id": "Java/85", "generation": "        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test 1\n        List<Integer> lst1 = Arrays.asList(4, 2, 6, 7);\n        System.out.println(solution.add(lst1)); // Output: 2\n\n        // Test 2\n        List<Integer> lst2 = Arrays.asList(1, 3, 5, 7, 9);\n        System.out.println(solution.add(lst2)); // Output: 0\n\n        // Test 3\n        List<Integer> lst3 = Arrays.asList(2, 4, 6, 8, 10);\n        System.out.println(solution.add(lst3)); // Output: 14\n    }\n}"}
{"task_id": "Java/85", "generation": "        int sum = 0;\n\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<Integer> lst1 = Arrays.asList(4, 2, 6, 7);\n        System.out.println(solution.add(lst1)); // Output: 2\n\n        // Test case 2\n        List<Integer> lst2 = Arrays.asList(1, 3, 5, 7, 9);\n        System.out.println(solution.add(lst2)); // Output: 0\n\n        // Test case 3\n        List<Integer> lst3 = Arrays.asList(2, 4, 6, 8, 10, 12, 14, 16);\n        System.out.println(solution.add(lst3)); // Output: 36\n    }\n}"}
{"task_id": "Java/85", "generation": "        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/86", "generation": "        String result = \"\";\n        String[] words = s.split(\" \");\n\n        for (int i = 0; i < words.length; i++) {\n            char[] charArray = words[i].toCharArray();\n            Arrays.sort(charArray);\n            result += new String(charArray);\n\n            if (i != words.length - 1) {\n                result += \" \";\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.antiShuffle(\"Hi\")); // \"Hi\"\n        System.out.println(solution.antiShuffle(\"hello\")); // \"ehllo\"\n        System.out.println(solution.antiShuffle(\"Hello World!!!\")); // \"Hello !!!Wdlor\"\n    }\n}"}
{"task_id": "Java/86", "generation": "        // Split the input string by space to get individual words\n        String[] words = s.split(\" \");\n        \n        // Initialize a StringBuilder to store the result\n        StringBuilder result = new StringBuilder();\n        \n        // Iterate through each word in the input string\n        for (String word : words) {\n            char[] chars = word.toCharArray(); // Convert the word to char array\n            \n            // Sort the characters in ascending order based on ascii value\n            Arrays.sort(chars);\n            \n            // Append the sorted characters back to the result StringBuilder\n            result.append(chars).append(\" \");\n        }\n        \n        // Remove the extra space at the end and return the result string\n        return result.toString().trim();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.antiShuffle(\"Hi\")); // Output: Hi\n        System.out.println(solution.antiShuffle(\"hello\")); // Output: ehllo\n        System.out.println(solution.antiShuffle(\"Hello World!!!\")); // Output: Hello !!!Wdlor\n    }\n}"}
{"task_id": "Java/86", "generation": "        String[] words = s.split(\" \");\n        StringBuilder result = new StringBuilder();\n\n        for (String word : words) {\n            char[] chars = word.toCharArray();\n            Arrays.sort(chars);\n            result.append(chars);\n            result.append(\" \");\n        }\n        \n        return result.toString().trim();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.antiShuffle(\"Hi\")); // Hi\n        System.out.println(solution.antiShuffle(\"hello\")); // ehllo\n        System.out.println(solution.antiShuffle(\"Hello World!!!\")); // Hello !!!Wdlor\n    }\n}"}
{"task_id": "Java/86", "generation": "        StringBuilder result = new StringBuilder();\n        String[] words = s.split(\" \");\n        \n        for (String word : words) {\n            char[] chars = word.toCharArray();\n            Arrays.sort(chars);\n            result.append(chars).append(\" \");\n        }\n        \n        return result.toString().trim();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.antiShuffle(\"Hi\")); // Hi\n        System.out.println(solution.antiShuffle(\"hello\")); // ehllo\n        System.out.println(solution.antiShuffle(\"Hello World!!!\")); // Hello !!!Wdlor\n    }\n}"}
{"task_id": "Java/86", "generation": "        String[] words = s.split(\" \");\n        StringBuilder result = new StringBuilder();\n\n        for (String word : words) {\n            char[] chars = word.toCharArray();\n            Arrays.sort(chars);\n            result.append(chars).append(\" \");\n        }\n\n        return result.toString().trim();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.antiShuffle(\"Hi\")); // Hi\n        System.out.println(solution.antiShuffle(\"hello\")); // ehllo\n        System.out.println(solution.antiShuffle(\"Hello World!!!\")); // Hello !!!Wdlor\n    }\n}"}
{"task_id": "Java/87", "generation": "        List<List<Integer>> result = new ArrayList<>();\n        \n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    List<Integer> coordinate = new ArrayList<>();\n                    coordinate.add(i);\n                    coordinate.add(j);\n                    result.add(coordinate);\n                }\n            }\n        }\n        \n        // Sort coordinates by row in ascending order\n        Collections.sort(result, (a, b) -> a.get(0) - b.get(0));\n        \n        // Sort coordinates of the same row by column in descending order\n        for (List<Integer> coordinate : result) {\n            coordinate.set(1, -coordinate.get(1));\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<List<Integer>> lst1 = new ArrayList<>();\n        lst1.add(Arrays.asList(1,2,3,4,5,6));\n        lst1.add(Arrays.asList(1,2,3,4,1,6));\n        lst1.add(Arrays.asList(1,2,3,4,5,1));\n        System.out.println(solution.getRow(lst1, 1)); // [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n\n        List<List<Integer>> lst2 = new ArrayList<>();\n        System.out.println(solution.getRow(lst2, 1)); // []\n\n        List<List<Integer>> lst3 = new ArrayList<>();\n        lst3.add(new ArrayList<>());\n        lst3.add(Arrays.asList(1));\n        lst3.add(Arrays.asList(1, 2, 3));\n        System.out.println(solution.getRow(lst3, 3)); // [[2, 2]]\n    }\n}"}
{"task_id": "Java/87", "generation": "        List<List<Integer>> result = new ArrayList<>();\n        \n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    List<Integer> coordinate = new ArrayList<>();\n                    coordinate.add(i);\n                    coordinate.add(j);\n                    result.add(coordinate);\n                }\n            }\n        }\n        \n        // Sort coordinates by rows in ascending order\n        Collections.sort(result, new Comparator<List<Integer>>() {\n            @Override\n            public int compare(List<Integer> o1, List<Integer> o2) {\n                return o1.get(0).compareTo(o2.get(0));\n            }\n        });\n        \n        // Sort coordinates of the same row by columns in descending order\n        for (List<Integer> coordinate : result) {\n            Collections.sort(coordinate, new Comparator<Integer>() {\n                @Override\n                public int compare(Integer o1, Integer o2) {\n                    return o2.compareTo(o1);\n                }\n            });\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/87", "generation": "        List<List<Integer>> result = new ArrayList<>();\n        \n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    List<Integer> coordinate = new ArrayList<>();\n                    coordinate.add(i);\n                    coordinate.add(j);\n                    result.add(coordinate);\n                }\n            }\n        }\n        \n        // Sort coordinates by rows in ascending order\n        result.sort(Comparator.comparingInt(coord -> coord.get(0)));\n        \n        // Sort coordinates of the same row by columns in descending order\n        for (List<Integer> coord : result) {\n            int row = coord.get(0);\n            List<Integer> currentRow = lst.get(row);\n            currentRow.sort(Comparator.reverseOrder());\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<List<Integer>> lst1 = Arrays.asList(\n            Arrays.asList(1,2,3,4,5,6),\n            Arrays.asList(1,2,3,4,1,6),\n            Arrays.asList(1,2,3,4,5,1)\n        );\n        System.out.println(solution.getRow(lst1, 1)); // [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n        \n        List<List<Integer>> lst2 = new ArrayList<>();\n        System.out.println(solution.getRow(lst2, 1)); // []\n        \n        List<List<Integer>> lst3 = Arrays.asList(\n            Arrays.asList(),\n            Arrays.asList(1),\n            Arrays.asList(1, 2, 3)\n        );\n        System.out.println(solution.getRow(lst3, 3)); // [[2, 2]]\n    }\n}"}
{"task_id": "Java/87", "generation": "        List<List<Integer>> result = new ArrayList<>();\n\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    List<Integer> coordinates = new ArrayList<>();\n                    coordinates.add(i);\n                    coordinates.add(j);\n                    result.add(coordinates);\n                }\n            }\n        }\n\n        result.sort((a, b) -> a.get(0) - b.get(0));\n        result.sort((a, b) -> b.get(1) - a.get(1));\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<List<Integer>> lst = new ArrayList<>();\n        lst.add(Arrays.asList(1, 2, 3, 4, 5, 6));\n        lst.add(Arrays.asList(1, 2, 3, 4, 1, 6));\n        lst.add(Arrays.asList(1, 2, 3, 4, 5, 1));\n\n        int x = 1;\n\n        List<List<Integer>> result = solution.getRow(lst, x);\n        for (List<Integer> coordinates : result) {\n            System.out.println(coordinates);\n        }\n    }\n}"}
{"task_id": "Java/87", "generation": "        List<List<Integer>> result = new ArrayList<>();\n        \n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    List<Integer> coordinate = new ArrayList<>();\n                    coordinate.add(i);\n                    coordinate.add(j);\n                    result.add(coordinate);\n                }\n            }\n        }\n        \n        result.sort(Comparator.comparingInt(c -> c.get(0)));\n        result.forEach(c -> Collections.sort(c, Collections.reverseOrder()));\n        \n        return result;\n    }\n}"}
{"task_id": "Java/88", "generation": "        List<Integer> sortedArray = new ArrayList<>(array);\n        \n        // check if sum of first and last element is odd or even\n        int sum = sortedArray.get(0) + sortedArray.get(sortedArray.size() - 1);\n        \n        // sort the array based on the sum\n        if (sum % 2 == 0) {\n            Collections.sort(sortedArray, Collections.reverseOrder());\n        } else {\n            Collections.sort(sortedArray);\n        }\n        \n        return sortedArray;\n    }\n}"}
{"task_id": "Java/88", "generation": "        List<Integer> sortedArray = new ArrayList<>(array);\n        \n        if(array.size() == 0) {\n            return sortedArray;\n        }\n        \n        int sum = sortedArray.get(0) + sortedArray.get(sortedArray.size() - 1);\n        \n        if(sum % 2 == 0) {\n            Collections.sort(sortedArray, Collections.reverseOrder());\n        } else {\n            Collections.sort(sortedArray);\n        }\n        \n        return sortedArray;\n    }\n}"}
{"task_id": "Java/88", "generation": "        List<Integer> sortedArray = new ArrayList<>(array);\n        int sum = sortedArray.get(0) + sortedArray.get(sortedArray.size() - 1);\n\n        if (sum % 2 == 0) {\n            Collections.sort(sortedArray, Collections.reverseOrder());\n        } else {\n            Collections.sort(sortedArray);\n        }\n\n        return sortedArray;\n    }\n}"}
{"task_id": "Java/88", "generation": "        List<Integer> sortedArray = new ArrayList<>(array);\n        \n        if(array.size() == 0) {\n            return sortedArray;\n        }\n\n        int sum = sortedArray.get(0) + sortedArray.get(sortedArray.size() - 1);\n\n        if(sum % 2 == 0) {\n            Collections.sort(sortedArray, Collections.reverseOrder());\n        } else {\n            Collections.sort(sortedArray);\n        }\n\n        return sortedArray;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.sortArray(Arrays.asList())); // []\n        System.out.println(solution.sortArray(Arrays.asList(5))); // [5]\n        System.out.println(solution.sortArray(Arrays.asList(2, 4, 3, 0, 1, 5))); // [0, 1, 2, 3, 4, 5]\n        System.out.println(solution.sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6))); // [6, 5, 4, 3, 2, 1, 0]\n    }\n}"}
{"task_id": "Java/88", "generation": "        List<Integer> copyArray = new ArrayList<>(array);\n\n        int sum = copyArray.get(0) + copyArray.get(copyArray.size() - 1);\n\n        if (sum % 2 == 0) {\n            Collections.sort(copyArray, Collections.reverseOrder());\n        } else {\n            Collections.sort(copyArray);\n        }\n\n        return copyArray;\n    }\n}"}
{"task_id": "Java/89", "generation": "        StringBuilder encrypted = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n                char encryptedChar = (char) (c + 2 * 2);\n                if (Character.isLowerCase(c)) {\n                    if (encryptedChar > 'z') {\n                        encryptedChar = (char) ('a' + (encryptedChar - 'z' - 1));\n                    }\n                } else {\n                    if (encryptedChar > 'Z') {\n                        encryptedChar = (char) ('A' + (encryptedChar - 'Z' - 1));\n                    }\n                }\n                encrypted.append(encryptedChar);\n            } else {\n                encrypted.append(c);\n            }\n        }\n        return encrypted.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.encrypt(\"hi\")); // Output: \"lm\"\n        System.out.println(solution.encrypt(\"asdfghjkl\")); // Output: \"ewhjklnop\"\n        System.out.println(solution.encrypt(\"gf\")); // Output: \"kj\"\n        System.out.println(solution.encrypt(\"et\")); // Output: \"ix\"\n    }\n}"}
{"task_id": "Java/89", "generation": "        StringBuilder encryptedString = new StringBuilder();\n        \n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            \n            if (Character.isLowerCase(c)) {\n                int shifted = (c - 'a' + 2) % 26 + 'a';\n                encryptedString.append((char) shifted);\n            } else if (Character.isUpperCase(c)) {\n                int shifted = (c - 'A' + 2) % 26 + 'A';\n                encryptedString.append((char) shifted);\n            } else {\n                encryptedString.append(c);\n            }\n        }\n        \n        return encryptedString.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.encrypt(\"hi\")); // Output: \"lm\"\n        System.out.println(solution.encrypt(\"asdfghjkl\")); // Output: \"ewhjklnop\"\n        System.out.println(solution.encrypt(\"gf\")); // Output: \"kj\"\n        System.out.println(solution.encrypt(\"et\")); // Output: \"ix\"\n    }\n}"}
{"task_id": "Java/89", "generation": "        StringBuilder sb = new StringBuilder();\n        \n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                char encryptedChar = (char) (c + 2 * 2);\n                if (c >= 'a' && c <= 'z') {\n                    if (encryptedChar > 'z') {\n                        encryptedChar = (char) ('a' + (encryptedChar - 'z') - 1);\n                    }\n                } else if (c >= 'A' && c <= 'Z') {\n                    if (encryptedChar > 'Z') {\n                        encryptedChar = (char) ('A' + (encryptedChar - 'Z') - 1);\n                    }\n                }\n                sb.append(encryptedChar);\n            } else {\n                sb.append(c);\n            }\n        }\n        \n        return sb.toString();\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.encrypt(\"hi\")); // \"lm\"\n        System.out.println(solution.encrypt(\"asdfghjkl\")); // \"ewhjklnop\"\n        System.out.println(solution.encrypt(\"gf\")); // \"kj\"\n        System.out.println(solution.encrypt(\"et\")); // \"ix\"\n    }\n}"}
{"task_id": "Java/89", "generation": "        // Define the alphabet to be used for encryption\n        String alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n\n        // Initialize a StringBuilder to store the encrypted string\n        StringBuilder encrypted = new StringBuilder();\n\n        // Iterate through each character in the input string\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            int index = alphabet.indexOf(c);\n\n            // Encrypt the character by shifting it down by two multiplied to two places\n            char encryptedChar = alphabet.charAt((index + 2*2) % 26);\n            encrypted.append(encryptedChar);\n        }\n\n        // Convert the StringBuilder to a string and return\n        return encrypted.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.encrypt(\"hi\")); // Output: \"lm\"\n        System.out.println(solution.encrypt(\"asdfghjkl\")); // Output: \"ewhjklnop\"\n        System.out.println(solution.encrypt(\"gf\")); // Output: \"kj\"\n        System.out.println(solution.encrypt(\"et\")); // Output: \"ix\"\n    }\n}"}
{"task_id": "Java/89", "generation": "        StringBuilder encrypted = new StringBuilder();\n        \n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            \n            if (Character.isLetter(c)) {\n                char encryptedChar = (char) (c + 2 * 2);\n                \n                if (Character.isLowerCase(c)) {\n                    if (encryptedChar > 'z') {\n                        encryptedChar = (char) ('a' + (encryptedChar - 'z') - 1);\n                    }\n                } else {\n                    if (encryptedChar > 'Z') {\n                        encryptedChar = (char) ('A' + (encryptedChar - 'Z') - 1);\n                    }\n                }\n                \n                encrypted.append(encryptedChar);\n            } else {\n                encrypted.append(c);\n            }\n        }\n        \n        return encrypted.toString();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.encrypt(\"hi\")); // \"lm\"\n        System.out.println(solution.encrypt(\"asdfghjkl\")); // \"ewhjklnop\"\n        System.out.println(solution.encrypt(\"gf\")); // \"kj\"\n        System.out.println(solution.encrypt(\"et\")); // \"ix\"\n    }\n}"}
{"task_id": "Java/90", "generation": "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n        \n        Set<Integer> set = new TreeSet<>(lst);\n        if (set.size() < 2) {\n            return Optional.empty();\n        }\n        \n        Iterator<Integer> it = set.iterator();\n        it.next();\n        \n        return Optional.of(it.next());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.nextSmallest(Arrays.asList(1, 2, 3, 4, 5))); // Optional[2]\n        System.out.println(solution.nextSmallest(Arrays.asList(5, 1, 4, 3, 2))); // Optional[2]\n        System.out.println(solution.nextSmallest(Arrays.asList())); // Optional.empty\n        System.out.println(solution.nextSmallest(Arrays.asList(1, 1))); // Optional.empty\n    }\n}"}
{"task_id": "Java/90", "generation": "        // Check if the list is empty or has only one element\n        if (lst == null || lst.size() < 2) {\n            return Optional.empty();\n        }\n        \n        // Sort the list\n        Collections.sort(lst);\n        \n        // Find the 2nd smallest element\n        int smallest = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) > smallest) {\n                return Optional.of(lst.get(i));\n            }\n        }\n        \n        return Optional.empty();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.nextSmallest(Arrays.asList(1, 2, 3, 4, 5))); // Optional[2]\n        System.out.println(solution.nextSmallest(Arrays.asList(5, 1, 4, 3, 2))); // Optional[2]\n        System.out.println(solution.nextSmallest(Arrays.asList())); // Optional.empty\n        System.out.println(solution.nextSmallest(Arrays.asList(1, 1))); // Optional.empty\n    }\n}"}
{"task_id": "Java/90", "generation": "        // Sort the list\n        Collections.sort(lst);\n\n        // Remove duplicates\n        lst = new ArrayList<>(new LinkedHashSet<>(lst));\n\n        // Check if there are at least 2 elements in the list\n        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\n        // Return the second smallest element\n        return Optional.of(lst.get(1));\n    }\n}"}
{"task_id": "Java/90", "generation": "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n        \n        TreeSet<Integer> set = new TreeSet<>(lst);\n        \n        Iterator<Integer> iterator = set.iterator();\n        iterator.next(); // skip the smallest element\n        \n        if (iterator.hasNext()) {\n            return Optional.of(iterator.next());\n        } else {\n            return Optional.empty();\n        }\n    }\n}"}
{"task_id": "Java/90", "generation": "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\n        Set<Integer> set = new TreeSet<>(lst);\n        List<Integer> uniqueList = new ArrayList<>(set);\n\n        if (uniqueList.size() < 2) {\n            return Optional.empty();\n        }\n\n        return Optional.of(uniqueList.get(1));\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.nextSmallest(Arrays.asList(1, 2, 3, 4, 5))); // Optional[2]\n        System.out.println(solution.nextSmallest(Arrays.asList(5, 1, 4, 3, 2))); // Optional[2]\n        System.out.println(solution.nextSmallest(Arrays.asList())); // Optional.empty\n        System.out.println(solution.nextSmallest(Arrays.asList(1, 1))); // Optional.empty\n    }\n}"}
{"task_id": "Java/91", "generation": "        // Split the input string into sentences using delimiters '.', '?' or '!'\n        String[] sentences = S.split(\"[.?!]\");\n\n        // Count the number of boredom sentences\n        int boredomCount = 0;\n        for (String sentence : sentences) {\n            // Check if the sentence starts with \"I\"\n            if (sentence.trim().startsWith(\"I\")) {\n                boredomCount++;\n            }\n        }\n\n        return boredomCount;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.isBored(\"Hello world\")); // 0\n        System.out.println(solution.isBored(\"The sky is blue. The sun is shining. I love this weather\")); // 1\n    }\n}"}
{"task_id": "Java/91", "generation": "        int count = 0;\n        String[] sentences = S.split(\"[.?!]\");\n        \n        for (String sentence : sentences) {\n            String trimmedSentence = sentence.trim();\n            if (trimmedSentence.startsWith(\"I\")) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.isBored(\"Hello world\")); // 0\n        System.out.println(solution.isBored(\"The sky is blue. The sun is shining. I love this weather\")); // 1\n    }\n}"}
{"task_id": "Java/91", "generation": "        String[] sentences = S.split(\"[.!?]\");\n        int boredomCount = 0;\n\n        for (String sentence : sentences) {\n            if (sentence.trim().startsWith(\"I\")) {\n                boredomCount++;\n            }\n        }\n\n        return boredomCount;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.isBored(\"Hello world\")); // 0\n        System.out.println(solution.isBored(\"The sky is blue. The sun is shining. I love this weather\")); // 1\n    }\n}"}
{"task_id": "Java/91", "generation": "        int boredomCount = 0;\n        String[] sentences = S.split(\"[.?!]\");\n        \n        for (String sentence : sentences) {\n            if (sentence.trim().startsWith(\"I\")) {\n                boredomCount++;\n            }\n        }\n        \n        return boredomCount;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.isBored(\"Hello world\")); // 0\n        System.out.println(solution.isBored(\"The sky is blue. The sun is shining. I love this weather\")); // 1\n    }\n}"}
{"task_id": "Java/91", "generation": "        // Split the string into individual sentences\n        String[] sentences = S.split(\"[.?!]\");\n\n        // Initialize count of boredoms\n        int boredomCount = 0;\n\n        // Check each sentence for boredom\n        for (String sentence : sentences) {\n            // Trim leading and trailing whitespace\n            sentence = sentence.trim();\n            // Check if sentence starts with \"I\"\n            if (sentence.startsWith(\"I \")) {\n                boredomCount++;\n            }\n        }\n\n        return boredomCount;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.isBored(\"Hello world\")); // 0\n        System.out.println(solution.isBored(\"The sky is blue. The sun is shining. I love this weather\")); // 1\n    }\n}"}
{"task_id": "Java/92", "generation": "        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int a = (int) x;\n            int b = (int) y;\n            int c = (int) z;\n            return a == b + c || b == a + c || c == a + b;\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.anyInt(5, 2, 7)); // true\n        System.out.println(solution.anyInt(3, 2, 2)); // false\n        System.out.println(solution.anyInt(3, -2, 1)); // true\n        System.out.println(solution.anyInt(3.6, -2.2, 2)); // false\n    }\n}"}
{"task_id": "Java/92", "generation": "        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int num1 = (int) x;\n            int num2 = (int) y;\n            int num3 = (int) z;\n            \n            if (num1 == num2 + num3 || num2 == num1 + num3 || num3 == num1 + num2) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.anyInt(5, 2, 7)); // true\n        System.out.println(solution.anyInt(3, 2, 2)); // false\n        System.out.println(solution.anyInt(3, -2, 1)); // true\n        System.out.println(solution.anyInt(3.6, -2.2, 2)); // false\n    }\n}"}
{"task_id": "Java/92", "generation": "        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int num1 = (int) x;\n            int num2 = (int) y;\n            int num3 = (int) z;\n            \n            return num1 == num2 + num3 || num2 == num1 + num3 || num3 == num1 + num2;\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.anyInt(5, 2, 7)); // true\n        System.out.println(solution.anyInt(3, 2, 2)); // false\n        System.out.println(solution.anyInt(3, -2, 1)); // true\n        System.out.println(solution.anyInt(3.6, -2.2, 2)); // false\n    }\n}"}
{"task_id": "Java/92", "generation": "        if (!(x instanceof Integer) || !(y instanceof Integer) || !(z instanceof Integer)) {\n            return false;\n        }\n\n        int a = (int) x;\n        int b = (int) y;\n        int c = (int) z;\n\n        return a == b + c || b == a + c || c == a + b;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.anyInt(5, 2, 7)); // true\n        System.out.println(solution.anyInt(3, 2, 2)); // false\n        System.out.println(solution.anyInt(3, -2, 1)); // true\n        System.out.println(solution.anyInt(3.6, -2.2, 2)); // false\n    }\n}"}
{"task_id": "Java/92", "generation": "        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int num1 = (int) x;\n            int num2 = (int) y;\n            int num3 = (int) z;\n            \n            return num1 == num2 + num3 || num2 == num1 + num3 || num3 == num1 + num2;\n        } else {\n            return false;\n        }\n    }\n}"}
{"task_id": "Java/93", "generation": "        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        StringBuilder encodedMessage = new StringBuilder();\n\n        for (char c : message.toCharArray()) {\n            if (Character.isLetter(c)) {\n                if (Character.isUpperCase(c)) {\n                    c = Character.toLowerCase(c);\n                    c = (char) (c + 2);\n                    if (Arrays.asList(vowels).contains(c)) {\n                        c = Character.toUpperCase(c);\n                    }\n                } else {\n                    c = (char) (c + 2);\n                }\n            }\n\n            encodedMessage.append(c);\n        }\n\n        return encodedMessage.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.encode(\"test\")); // \"TGST\"\n        System.out.println(solution.encode(\"This is a message\")); // \"tHKS KS C MGSSCGG\"\n    }\n}"}
{"task_id": "Java/93", "generation": "        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        StringBuilder encodedMessage = new StringBuilder();\n\n        for (char c : message.toCharArray()) {\n            char encodedChar = c;\n\n            // Swap case of letters\n            if (Character.isLetter(c)) {\n                if (Character.isUpperCase(c)) {\n                    encodedChar = Character.toLowerCase(c);\n                } else {\n                    encodedChar = Character.toUpperCase(c);\n                }\n            }\n\n            // Replace vowels with letter 2 places ahead in alphabet\n            if (Arrays.asList(vowels).contains(Character.toLowerCase(c))) {\n                encodedChar = (char) (Character.toLowerCase(c) + 2);\n                if (encodedChar > 'z') {\n                    encodedChar = (char) ('a' + (encodedChar - 'z') - 1);\n                }\n            }\n\n            encodedMessage.append(encodedChar);\n        }\n\n        return encodedMessage.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.encode(\"test\")); // \"TGST\"\n        System.out.println(solution.encode(\"This is a message\")); // \"tHKS KS C MGSSCGG\"\n    }\n}"}
{"task_id": "Java/93", "generation": "        StringBuilder encodedMessage = new StringBuilder();\n        \n        for (char c : message.toCharArray()) {\n            if (Character.isLetter(c)) {\n                if (Character.isUpperCase(c)) {\n                    char encodedChar = (char) ((c + 2 - 'A') % 26 + 'A');\n                    encodedChar = Character.isVowel(encodedChar) ? Character.toUpperCase(encodedChar) : encodedChar;\n                    encodedMessage.append(encodedChar);\n                } else {\n                    char encodedChar = (char) ((c + 2 - 'a') % 26 + 'a');\n                    encodedChar = Character.isVowel(encodedChar) ? Character.toLowerCase(encodedChar) : encodedChar;\n                    encodedMessage.append(encodedChar);\n                }\n            } else {\n                encodedMessage.append(c);\n            }\n        }\n        \n        return encodedMessage.toString();\n    }\n}"}
{"task_id": "Java/93", "generation": "        if (message == null || message.length() == 0) {\n            return \"\";\n        }\n\n        StringBuilder encodedMessage = new StringBuilder();\n\n        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if (Character.isLetter(c)) {\n                if (Character.isLowerCase(c)) {\n                    // Swap case\n                    c = Character.toUpperCase(c);\n                } else {\n                    c = Character.toLowerCase(c);\n                }\n\n                if (isVowel(c)) {\n                    // Replace vowels with letter 2 places ahead in alphabet\n                    c = (char) (c + 2);\n                }\n            }\n\n            encodedMessage.append(c);\n        }\n\n        return encodedMessage.toString();\n    }\n\n    private boolean isVowel(char c) {\n        return c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U'\n                || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.encode(\"test\")); // TGST\n        System.out.println(solution.encode(\"This is a message\")); // tHKS KS C MGSSCGG\n    }\n}"}
{"task_id": "Java/93", "generation": "        StringBuilder encodedMessage = new StringBuilder();\n\n        for (char c : message.toCharArray()) {\n            if (Character.isLetter(c)) {\n                if (Character.isLowerCase(c)) {\n                    encodedMessage.append(Character.toUpperCase(c));\n                } else {\n                    encodedMessage.append(Character.toLowerCase(c));\n                }\n\n                if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\n                        c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n                    char replacement = (char) (c + 2);\n                    if (replacement > 'z') {\n                        replacement = (char) (c - 24);\n                    }\n                    encodedMessage.append(replacement);\n                }\n            } else {\n                encodedMessage.append(c);\n            }\n        }\n\n        return encodedMessage.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.encode(\"test\")); // \"TGST\"\n        System.out.println(solution.encode(\"This is a message\")); // \"tHKS KS C MGSSCGG\"\n    }\n}"}
{"task_id": "Java/94", "generation": "        int maxPrime = 0;\n        for (int num : lst) {\n            if (isPrime(num) && num > maxPrime) {\n                maxPrime = num;\n            }\n        }\n        \n        return sumDigits(maxPrime);\n    }\n    \n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    \n    private int sumDigits(int num) {\n        int sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> lst1 = new ArrayList<>(Arrays.asList(0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3));\n        List<Integer> lst2 = new ArrayList<>(Arrays.asList(1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1));\n        List<Integer> lst3 = new ArrayList<>(Arrays.asList(1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3));\n        List<Integer> lst4 = new ArrayList<>(Arrays.asList(0,724,32,71,99,32,6,0,5,91,83,0,5,6));\n        List<Integer> lst5 = new ArrayList<>(Arrays.asList(0,81,12,3,1,21));\n        List<Integer> lst6 = new ArrayList<>(Arrays.asList(0,8,1,2,1,7));\n        \n        System.out.println(solution.skjkasdkd(lst1)); // 10\n        System.out.println(solution.skjkasdkd(lst2)); // 25\n        System.out.println(solution.skjkasdkd(lst3)); // 13\n        System.out.println(solution.skjkasdkd(lst4)); // 11\n        System.out.println(solution.skjkasdkd(lst5)); // 3\n        System.out.println(solution.skjkasdkd(lst6)); // 7\n    }\n}"}
{"task_id": "Java/94", "generation": "        int maxPrime = 0;\n        for (int num : lst) {\n            if (isPrime(num) && num > maxPrime) {\n                maxPrime = num;\n            }\n        }\n        return sumOfDigits(maxPrime);\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private int sumOfDigits(int num) {\n        int sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> lst1 = new ArrayList<>(Arrays.asList(0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3));\n        System.out.println(solution.skjkasdkd(lst1)); // Output should be 10\n\n        List<Integer> lst2 = new ArrayList<>(Arrays.asList(1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1));\n        System.out.println(solution.skjkasdkd(lst2)); // Output should be 25\n\n        List<Integer> lst3 = new ArrayList<>(Arrays.asList(1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3));\n        System.out.println(solution.skjkasdkd(lst3)); // Output should be 13\n\n        List<Integer> lst4 = new ArrayList<>(Arrays.asList(0,724,32,71,99,32,6,0,5,91,83,0,5,6));\n        System.out.println(solution.skjkasdkd(lst4)); // Output should be 11\n\n        List<Integer> lst5 = new ArrayList<>(Arrays.asList(0,81,12,3,1,21));\n        System.out.println(solution.skjkasdkd(lst5)); // Output should be 3\n\n        List<Integer> lst6 = new ArrayList<>(Arrays.asList(0,8,1,2,1,7));\n        System.out.println(solution.skjkasdkd(lst6)); // Output should be 7\n    }\n}"}
{"task_id": "Java/94", "generation": "        // Find the largest prime number in the list\n        int maxPrime = 0;\n        for (int num : lst) {\n            if (isPrime(num) && num > maxPrime) {\n                maxPrime = num;\n            }\n        }\n        \n        // Calculate the sum of digits of the largest prime number\n        int sum = 0;\n        while (maxPrime > 0) {\n            sum += maxPrime % 10;\n            maxPrime /= 10;\n        }\n        \n        return sum;\n    }\n    \n    // Helper function to check if a number is prime\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> lst1 = Arrays.asList(0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3);\n        System.out.println(solution.skjkasdkd(lst1)); // Output should be 10\n\n        List<Integer> lst2 = Arrays.asList(1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1);\n        System.out.println(solution.skjkasdkd(lst2)); // Output should be 25\n\n        List<Integer> lst3 = Arrays.asList(1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3);\n        System.out.println(solution.skjkasdkd(lst3)); // Output should be 13\n\n        List<Integer> lst4 = Arrays.asList(0,724,32,71,99,32,6,0,5,91,83,0,5,6);\n        System.out.println(solution.skjkasdkd(lst4)); // Output should be 11\n\n        List<Integer> lst5 = Arrays.asList(0,81,12,3,1,21);\n        System.out.println(solution.skjkasdkd(lst5)); // Output should be 3\n\n        List<Integer> lst6 = Arrays.asList(0,8,1,2,1,7);\n        System.out.println(solution.skjkasdkd(lst6)); // Output should be 7\n    }\n}"}
{"task_id": "Java/94", "generation": "        int maxPrime = 0;\n        for (int num : lst) {\n            if (isPrime(num) && num > maxPrime) {\n                maxPrime = num;\n            }\n        }\n        \n        int sum = 0;\n        while (maxPrime > 0) {\n            sum += maxPrime % 10;\n            maxPrime /= 10;\n        }\n        \n        return sum;\n    }\n    \n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/94", "generation": "        int maxPrime = 0;\n        for (int num : lst) {\n            if (isPrime(num) && num > maxPrime) {\n                maxPrime = num;\n            }\n        }\n        \n        if (maxPrime == 0) {\n            return 0;\n        }\n        \n        int sum = 0;\n        while (maxPrime > 0) {\n            sum += maxPrime % 10;\n            maxPrime /= 10;\n        }\n        \n        return sum;\n    }\n    \n    public boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> lst1 = Arrays.asList(0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3);\n        System.out.println(solution.skjkasdkd(lst1)); // Output should be 10\n\n        List<Integer> lst2 = Arrays.asList(1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1);\n        System.out.println(solution.skjkasdkd(lst2)); // Output should be 25\n\n        List<Integer> lst3 = Arrays.asList(1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3);\n        System.out.println(solution.skjkasdkd(lst3)); // Output should be 13\n\n        List<Integer> lst4 = Arrays.asList(0,724,32,71,99,32,6,0,5,91,83,0,5,6);\n        System.out.println(solution.skjkasdkd(lst4)); // Output should be 11\n\n        List<Integer> lst5 = Arrays.asList(0,81,12,3,1,21);\n        System.out.println(solution.skjkasdkd(lst5)); // Output should be 3\n\n        List<Integer> lst6 = Arrays.asList(0,8,1,2,1,7);\n        System.out.println(solution.skjkasdkd(lst6)); // Output should be 7\n    }\n}"}
{"task_id": "Java/95", "generation": "        if(dict.isEmpty()){\n            return false;\n        }\n        \n        boolean allLower = true;\n        boolean allUpper = true;\n        \n        for(Object key : dict.keySet()){\n            if(!(key instanceof String)){\n                return false;\n            }\n            \n            String strKey = (String)key;\n            if(!strKey.equals(strKey.toLowerCase())){\n                allLower = false;\n            }\n            if(!strKey.equals(strKey.toUpperCase())){\n                allUpper = false;\n            }\n        }\n        \n        return allLower || allUpper;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        Map<Object, Object> dict1 = new HashMap<>();\n        dict1.put(\"a\", \"apple\");\n        dict1.put(\"b\", \"banana\");\n        System.out.println(solution.checkDictCase(dict1)); // Output should be True\n\n        Map<Object, Object> dict2 = new HashMap<>();\n        dict2.put(\"a\", \"apple\");\n        dict2.put(\"A\", \"banana\");\n        dict2.put(\"B\", \"banana\");\n        System.out.println(solution.checkDictCase(dict2)); // Output should be False\n\n        Map<Object, Object> dict3 = new HashMap<>();\n        dict3.put(\"a\", \"apple\");\n        dict3.put(8, \"banana\");\n        dict3.put(\"a\", \"apple\");\n        System.out.println(solution.checkDictCase(dict3)); // Output should be False\n\n        Map<Object, Object> dict4 = new HashMap<>();\n        dict4.put(\"Name\", \"John\");\n        dict4.put(\"Age\", \"36\");\n        dict4.put(\"City\", \"Houston\");\n        System.out.println(solution.checkDictCase(dict4)); // Output should be False\n\n        Map<Object, Object> dict5 = new HashMap<>();\n        dict5.put(\"STATE\", \"NC\");\n        dict5.put(\"ZIP\", \"12345\");\n        System.out.println(solution.checkDictCase(dict5)); // Output should be True\n    }\n}"}
{"task_id": "Java/95", "generation": "        if (dict.isEmpty()) {\n            return false;\n        }\n        \n        boolean allLowerCase = true;\n        boolean allUpperCase = true;\n        \n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            \n            String keyString = (String) key;\n            if (!keyString.equals(keyString.toLowerCase())) {\n                allLowerCase = false;\n            }\n            if (!keyString.equals(keyString.toUpperCase())) {\n                allUpperCase = false;\n            }\n        }\n        \n        return allLowerCase || allUpperCase;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        Map<Object, Object> dict1 = new HashMap<>();\n        dict1.put(\"a\", \"apple\");\n        dict1.put(\"b\", \"banana\");\n        System.out.println(solution.checkDictCase(dict1)); // true\n        \n        Map<Object, Object> dict2 = new HashMap<>();\n        dict2.put(\"a\", \"apple\");\n        dict2.put(\"A\", \"banana\");\n        dict2.put(\"B\", \"banana\");\n        System.out.println(solution.checkDictCase(dict2)); // false\n        \n        Map<Object, Object> dict3 = new HashMap<>();\n        dict3.put(\"a\", \"apple\");\n        dict3.put(8, \"banana\");\n        dict3.put(\"a\", \"apple\");\n        System.out.println(solution.checkDictCase(dict3)); // false\n        \n        Map<Object, Object> dict4 = new HashMap<>();\n        dict4.put(\"Name\", \"John\");\n        dict4.put(\"Age\", \"36\");\n        dict4.put(\"City\", \"Houston\");\n        System.out.println(solution.checkDictCase(dict4)); // false\n        \n        Map<Object, Object> dict5 = new HashMap<>();\n        dict5.put(\"STATE\", \"NC\");\n        dict5.put(\"ZIP\", \"12345\");\n        System.out.println(solution.checkDictCase(dict5)); // true\n    }\n}"}
{"task_id": "Java/95", "generation": "        if (dict.isEmpty()) {\n            return false;\n        }\n\n        boolean allLower = true;\n        boolean allUpper = true;\n\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n\n            String strKey = (String) key;\n            if (!strKey.equals(strKey.toLowerCase())) {\n                allLower = false;\n            }\n            if (!strKey.equals(strKey.toUpperCase())) {\n                allUpper = false;\n            }\n        }\n\n        return allLower || allUpper;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        Map<Object, Object> map1 = new HashMap<>();\n        map1.put(\"a\", \"apple\");\n        map1.put(\"b\", \"banana\");\n        System.out.println(solution.checkDictCase(map1)); // should return true\n\n        Map<Object, Object> map2 = new HashMap<>();\n        map2.put(\"a\", \"apple\");\n        map2.put(\"A\", \"banana\");\n        map2.put(\"B\", \"banana\");\n        System.out.println(solution.checkDictCase(map2)); // should return false\n\n        Map<Object, Object> map3 = new HashMap<>();\n        map3.put(\"a\", \"apple\");\n        map3.put(8, \"banana\");\n        map3.put(\"a\", \"apple\");\n        System.out.println(solution.checkDictCase(map3)); // should return false\n\n        Map<Object, Object> map4 = new HashMap<>();\n        map4.put(\"Name\", \"John\");\n        map4.put(\"Age\", \"36\");\n        map4.put(\"City\", \"Houston\");\n        System.out.println(solution.checkDictCase(map4)); // should return false\n\n        Map<Object, Object> map5 = new HashMap<>();\n        map5.put(\"STATE\", \"NC\");\n        map5.put(\"ZIP\", \"12345\");\n        System.out.println(solution.checkDictCase(map5)); // should return true\n    }\n}"}
{"task_id": "Java/95", "generation": "        if (dict.isEmpty()) {\n            return false;\n        }\n        \n        boolean isLowerCase = true;\n        boolean isUpperCase = true;\n        \n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            String strKey = (String) key;\n            if (!strKey.equals(strKey.toLowerCase())) {\n                isLowerCase = false;\n            }\n            if (!strKey.equals(strKey.toUpperCase())) {\n                isUpperCase = false;\n            }\n        }\n        \n        return isLowerCase || isUpperCase;\n    }\n}"}
{"task_id": "Java/95", "generation": "        if (dict.isEmpty()) {\n            return false;\n        }\n        \n        boolean allLowerCase = true;\n        boolean allUpperCase = true;\n        \n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            String keyStr = (String) key;\n            if (!keyStr.equals(keyStr.toLowerCase())) {\n                allLowerCase = false;\n            }\n            if (!keyStr.equals(keyStr.toUpperCase())) {\n                allUpperCase = false;\n            }\n        }\n        \n        return allLowerCase || allUpperCase;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        Map<Object, Object> dict1 = new HashMap<>();\n        dict1.put(\"a\", \"apple\");\n        dict1.put(\"b\", \"banana\");\n        System.out.println(solution.checkDictCase(dict1)); // should return true\n\n        Map<Object, Object> dict2 = new HashMap<>();\n        dict2.put(\"a\", \"apple\");\n        dict2.put(\"A\", \"banana\");\n        dict2.put(\"B\", \"banana\");\n        System.out.println(solution.checkDictCase(dict2)); // should return false\n\n        Map<Object, Object> dict3 = new HashMap<>();\n        dict3.put(\"a\", \"apple\");\n        dict3.put(8, \"banana\");\n        dict3.put(\"a\", \"apple\");\n        System.out.println(solution.checkDictCase(dict3)); // should return false\n\n        Map<Object, Object> dict4 = new HashMap<>();\n        dict4.put(\"Name\", \"John\");\n        dict4.put(\"Age\", \"36\");\n        dict4.put(\"City\", \"Houston\");\n        System.out.println(solution.checkDictCase(dict4)); // should return false\n\n        Map<Object, Object> dict5 = new HashMap<>();\n        dict5.put(\"STATE\", \"NC\");\n        dict5.put(\"ZIP\", \"12345\");\n        System.out.println(solution.checkDictCase(dict5)); // should return true\n    }\n}"}
{"task_id": "Java/96", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        if (n <= 1) {\n            return result;\n        }\n        \n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                result.add(i);\n            }\n        }\n        \n        return result;\n    }\n    \n    public boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.countUpTo(5)); // [2, 3]\n        System.out.println(solution.countUpTo(11)); // [2, 3, 5, 7]\n        System.out.println(solution.countUpTo(0)); // []\n        System.out.println(solution.countUpTo(20)); // [2, 3, 5, 7, 11, 13, 17, 19]\n        System.out.println(solution.countUpTo(1)); // []\n        System.out.println(solution.countUpTo(18)); // [2, 3, 5, 7, 11, 13, 17]\n    }\n}"}
{"task_id": "Java/96", "generation": "        List<Integer> primes = new ArrayList<>();\n        \n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        \n        return primes;\n    }\n    \n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/96", "generation": "        List<Integer> primes = new ArrayList<>();\n        \n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        \n        return primes;\n    }\n    \n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "Java/96", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                result.add(i);\n            }\n        }\n        \n        return result;\n    }\n    \n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\nclass Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.countUpTo(5)); // [2,3]\n        System.out.println(solution.countUpTo(11)); // [2,3,5,7]\n        System.out.println(solution.countUpTo(0)); // []\n        System.out.println(solution.countUpTo(20)); // [2,3,5,7,11,13,17,19]\n        System.out.println(solution.countUpTo(1)); // []\n        System.out.println(solution.countUpTo(18)); // [2,3,5,7,11,13,17]\n    }\n}"}
{"task_id": "Java/96", "generation": "        List<Integer> result = new ArrayList<>();\n        if (n <= 1) {\n            return result;\n        }\n\n        boolean[] isPrime = new boolean[n];\n        Arrays.fill(isPrime, true);\n        isPrime[0] = false;\n        isPrime[1] = false;\n\n        for (int i = 2; i < Math.sqrt(n); i++) {\n            if (isPrime[i]) {\n                for (int j = i * i; j < n; j += i) {\n                    isPrime[j] = false;\n                }\n            }\n        }\n\n        for (int i = 2; i < n; i++) {\n            if (isPrime[i]) {\n                result.add(i);\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.countUpTo(5));  // [2, 3]\n        System.out.println(solution.countUpTo(11)); // [2, 3, 5, 7]\n        System.out.println(solution.countUpTo(0));  // []\n        System.out.println(solution.countUpTo(20)); // [2, 3, 5, 7, 11, 13, 17, 19]\n        System.out.println(solution.countUpTo(1));  // []\n        System.out.println(solution.countUpTo(18)); // [2, 3, 5, 7, 11, 13, 17]\n    }\n}"}
{"task_id": "Java/97", "generation": "        // Get the unit digits of both numbers\n        int unitA = Math.abs(a % 10);\n        int unitB = Math.abs(b % 10);\n        \n        // Calculate the product of the unit digits\n        int product = unitA * unitB;\n        \n        return product;\n    }\n}"}
{"task_id": "Java/97", "generation": "        // Get the unit digits of both numbers\n        int unitA = Math.abs(a) % 10;\n        int unitB = Math.abs(b) % 10;\n        \n        // Return the product of the unit digits\n        return unitA * unitB;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.multiply(148, 412)); // 16\n        System.out.println(solution.multiply(19, 28)); // 72\n        System.out.println(solution.multiply(2020, 1851)); // 0\n        System.out.println(solution.multiply(14, -15)); // 20\n    }\n}"}
{"task_id": "Java/97", "generation": "        // Get the unit digits of both numbers\n        int unitA = Math.abs(a) % 10;\n        int unitB = Math.abs(b) % 10;\n        \n        // Return the product of the unit digits\n        return unitA * unitB;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.multiply(148, 412)); // 16\n        System.out.println(solution.multiply(19, 28)); // 72\n        System.out.println(solution.multiply(2020, 1851)); // 0\n        System.out.println(solution.multiply(14, -15)); // 20\n    }\n}"}
{"task_id": "Java/97", "generation": "        int unitA = Math.abs(a % 10);\n        int unitB = Math.abs(b % 10);\n        \n        return unitA * unitB;\n    }\n}"}
{"task_id": "Java/97", "generation": "        int unitDigitA = Math.abs(a % 10);\n        int unitDigitB = Math.abs(b % 10);\n        \n        return unitDigitA * unitDigitB;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.multiply(148, 412)); // Output: 16\n        System.out.println(solution.multiply(19, 28)); // Output: 72\n        System.out.println(solution.multiply(2020, 1851)); // Output: 0\n        System.out.println(solution.multiply(14, -15)); // Output: 20\n    }\n}"}
{"task_id": "Java/98", "generation": "        int count = 0;\n        \n        for (int i = 0; i < s.length(); i += 2) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c) && isVowel(c)) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n    \n    private boolean isVowel(char c) {\n        return c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U';\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.countUpper(\"aBCdEf\")); // 1\n        System.out.println(solution.countUpper(\"abcdefg\")); // 0\n        System.out.println(solution.countUpper(\"dBBE\")); // 0\n    }\n}"}
{"task_id": "Java/98", "generation": "        int count = 0;\n        \n        for (int i = 0; i < s.length(); i += 2) {\n            char c = s.charAt(i);\n            if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.countUpper(\"aBCdEf\")); // 1\n        System.out.println(solution.countUpper(\"abcdefg\")); // 0\n        System.out.println(solution.countUpper(\"dBBE\")); // 0\n    }\n}"}
{"task_id": "Java/98", "generation": "        int count = 0;\n        \n        for (int i = 0; i < s.length(); i += 2) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c) && isVowel(c)) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n    \n    private boolean isVowel(char c) {\n        return c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U';\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.countUpper(\"aBCdEf\")); // 1\n        System.out.println(solution.countUpper(\"abcdefg\")); // 0\n        System.out.println(solution.countUpper(\"dBBE\")); // 0\n    }\n}"}
{"task_id": "Java/98", "generation": "        int count = 0;\n        \n        for (int i = 0; i < s.length(); i += 2) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c) && isVowel(c)) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n    \n    private boolean isVowel(char c) {\n        return c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U';\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.countUpper(\"aBCdEf\")); // 1\n        System.out.println(solution.countUpper(\"abcdefg\")); // 0\n        System.out.println(solution.countUpper(\"dBBE\")); // 0\n    }\n}"}
{"task_id": "Java/98", "generation": "        int count = 0;\n        \n        for (int i = 0; i < s.length(); i += 2) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c) && (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}"}
{"task_id": "Java/99", "generation": "        double num = Double.parseDouble(value);\n        int lower = (int) Math.floor(num);\n        int upper = (int) Math.ceil(num);\n\n        if (num - lower < upper - num) {\n            return lower;\n        } else {\n            return upper;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.closest_integer(\"10\")); // 10\n        System.out.println(solution.closest_integer(\"15.3\")); // 15\n        System.out.println(solution.closest_integer(\"14.5\")); // 15\n        System.out.println(solution.closest_integer(\"-14.5\")); // -15\n    }\n}"}
{"task_id": "Java/99", "generation": "        double num = Double.parseDouble(value);\n        int lower = (int) Math.floor(num);\n        int upper = (int) Math.ceil(num);\n        \n        if (num - lower < upper - num) {\n            return lower;\n        } else {\n            return upper;\n        }\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.countUpper(\"10\")); // 10\n        System.out.println(solution.countUpper(\"15.3\")); // 15\n        System.out.println(solution.countUpper(\"14.5\")); // 15\n        System.out.println(solution.countUpper(\"-14.5\")); // -15\n    }\n}"}
{"task_id": "Java/99", "generation": "        // Check if the input value is null or empty\n        if (value == null || value.isEmpty()) {\n            throw new IllegalArgumentException(\"Input value cannot be null or empty\");\n        }\n\n        // Remove any whitespace from the input value\n        value = value.trim();\n\n        // Check if the input value contains a decimal point\n        if (value.contains(\".\")) {\n            // Split the input value into integer and decimal parts\n            String[] parts = value.split(\"\\\\.\");\n            int integerPart = Integer.parseInt(parts[0]);\n            int decimalPart = Integer.parseInt(parts[1]);\n\n            // Check if the decimal part is closer to 0 or 1\n            if (decimalPart < 5) {\n                return integerPart;\n            } else {\n                return integerPart + 1;\n            }\n        } else {\n            // If the input value does not contain a decimal point, return the integer value\n            return Integer.parseInt(value);\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.closest_integer(\"10\")); // 10\n        System.out.println(solution.closest_integer(\"15.3\")); // 15\n        System.out.println(solution.closest_integer(\"14.5\")); // 15\n        System.out.println(solution.closest_integer(\"-14.5\")); // -15\n    }\n}"}
{"task_id": "Java/99", "generation": "        double num = Double.parseDouble(value);\n        int lower = (int) Math.floor(num);\n        int upper = (int) Math.ceil(num);\n\n        if (Math.abs(num - lower) == Math.abs(num - upper)) {\n            if (num >= 0) {\n                return upper;\n            } else {\n                return lower;\n            }\n        } else if (Math.abs(num - lower) < Math.abs(num - upper)) {\n            return lower;\n        } else {\n            return upper;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.closest_integer(\"10\")); // 10\n        System.out.println(solution.closest_integer(\"15.3\")); // 15\n        System.out.println(solution.closest_integer(\"14.5\")); // 15\n        System.out.println(solution.closest_integer(\"-14.5\")); // -15\n    }\n}"}
{"task_id": "Java/99", "generation": "        double num = Double.parseDouble(value);\n        int lower = (int) Math.floor(num);\n        int upper = (int) Math.ceil(num);\n        \n        if (num - lower < upper - num) {\n            return lower;\n        } else if (num - lower > upper - num) {\n            return upper;\n        } else {\n            if (num >= 0) {\n                return upper;\n            } else {\n                return lower;\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.countUpper(\"10\")); // Output: 10\n        System.out.println(solution.countUpper(\"15.3\")); // Output: 15\n        System.out.println(solution.countUpper(\"14.5\")); // Output: 15\n        System.out.println(solution.countUpper(\"-14.5\")); // Output: -15\n        System.out.println(solution.countUpper(\"-15.5\")); // Output: -16\n        System.out.println(solution.countUpper(\"0\")); // Output: 0\n    }\n}"}
{"task_id": "Java/100", "generation": "        List<Integer> result = new ArrayList<>();\n        int stones = n;\n        result.add(stones);\n        \n        for (int i = 1; i < n; i++) {\n            if (stones % 2 == 0) {\n                stones += 1;\n            } else {\n                stones += 2;\n            }\n            result.add(stones);\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test the makeAPile function\n        System.out.println(solution.makeAPile(3)); // [3, 5, 7]\n    }\n}"}
{"task_id": "Java/100", "generation": "        List<Integer> levels = new ArrayList<>();\n        levels.add(n);\n        \n        for (int i = 1; i < n; i++) {\n            if (n % 2 == 0) {\n                n += 2;\n            } else {\n                n += 1;\n            }\n            levels.add(n);\n        }\n        \n        return levels;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the makeAPile method\n        System.out.println(solution.makeAPile(3)); // [3, 5, 7]\n    }\n}"}
{"task_id": "Java/100", "generation": "        List<Integer> pile = new ArrayList<>();\n        pile.add(n);\n        \n        while (n > 1) {\n            if (n % 2 == 0) {\n                n += 2;\n            } else {\n                n += 2;\n            }\n            pile.add(n);\n        }\n        \n        return pile;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test the example case\n        System.out.println(solution.makeAPile(3)); // Output should be [3, 5, 7]\n    }\n}"}
{"task_id": "Java/100", "generation": "        List<Integer> result = new ArrayList<>();\n        result.add(n);\n        int stones = n;\n\n        for (int i = 1; i < n; i++) {\n            if (stones % 2 == 0) {\n                stones += 1;\n            } else {\n                stones += 2;\n            }\n            result.add(stones);\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test the makeAPile function\n        System.out.println(solution.makeAPile(3)); // [3, 5, 7]\n    }\n}"}
{"task_id": "Java/100", "generation": "        List<Integer> result = new ArrayList<>();\n        result.add(n);\n        for (int i = 1; i < n; i++) {\n            if (n % 2 == 0) {\n                n += 2;\n            } else {\n                n += 1;\n            }\n            result.add(n);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.makeAPile(3)); // [3, 5, 7]\n        System.out.println(solution.makeAPile(5)); // [5, 6, 7, 8, 9]\n    }\n}"}
{"task_id": "Java/101", "generation": "        List<String> words = new ArrayList<>();\n        String[] split = s.split(\"[,\\\\s]+\");\n        for (String word : split) {\n            words.add(word);\n        }\n        return words;\n    }\n}"}
{"task_id": "Java/101", "generation": "        List<String> words = new ArrayList<>();\n        \n        String[] splitWords = s.split(\"[,\\\\s]+\");\n        \n        for (String word : splitWords) {\n            words.add(word);\n        }\n        \n        return words;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.wordStrings(\"Hi, my name is John\")); // [Hi, my, name, is, John]\n        System.out.println(solution.wordStrings(\"One, two, three, four, five, six\")); // [One, two, three, four, five, six]\n    }\n}"}
{"task_id": "Java/101", "generation": "        List<String> result = new ArrayList<>();\n        \n        String[] words = s.split(\"[,\\\\s]+\");\n        \n        for (String word : words) {\n            result.add(word);\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/101", "generation": "        List<String> words = new ArrayList<>();\n        \n        // Split the input string by commas or spaces\n        String[] splitWords = s.split(\"[,\\\\s]+\");\n        \n        // Add each word to the list\n        for (String word : splitWords) {\n            words.add(word);\n        }\n        \n        return words;\n    }\n}"}
{"task_id": "Java/101", "generation": "        List<String> words = new ArrayList<>();\n        \n        String[] splitWords = s.split(\"[,\\\\s]+\");\n        \n        for (String word : splitWords) {\n            words.add(word);\n        }\n        \n        return words;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.wordStrings(\"Hi, my name is John\"));\n        System.out.println(solution.wordStrings(\"One, two, three, four, five, six\"));\n    }\n}"}
{"task_id": "Java/102", "generation": "        // Initialize the maxEvenNum to be -1\n        int maxEvenNum = -1;\n        \n        // Loop through the range [x, y] inclusive\n        for (int i = x; i <= y; i++) {\n            // Check if the number is even and greater than the current maxEvenNum\n            if (i % 2 == 0 && i > maxEvenNum) {\n                maxEvenNum = i;\n            }\n        }\n        \n        // Return the maxEvenNum\n        return maxEvenNum;\n    }\n}"}
{"task_id": "Java/102", "generation": "        // Initialize the result as -1\n        int result = -1;\n        \n        // Loop through the range [x, y]\n        for (int i = y; i >= x; i--) {\n            // Check if the number is even\n            if (i % 2 == 0) {\n                // If even, update the result and break the loop\n                result = i;\n                break;\n            }\n        }\n        \n        // Return the result\n        return result;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.chooseNum(12, 15)); // Output should be 14\n        System.out.println(solution.chooseNum(13, 12)); // Output should be -1\n    }\n}"}
{"task_id": "Java/102", "generation": "        for (int i = y; i >= x; i--) {\n            if (i % 2 == 0) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}"}
{"task_id": "Java/102", "generation": "        int maxEven = -1;\n        \n        for (int i = y; i >= x; i--) {\n            if (i % 2 == 0) {\n                maxEven = i;\n                break;\n            }\n        }\n        \n        return maxEven;\n    }\n}"}
{"task_id": "Java/102", "generation": "        // Initialize a variable to store the biggest even number found\n        int biggestEven = -1;\n        \n        // Iterate through the range [x, y]\n        for (int i = x; i <= y; i++) {\n            // Check if the current number is even and bigger than the current biggestEven\n            if (i % 2 == 0 && i > biggestEven) {\n                biggestEven = i;\n            }\n        }\n        \n        return biggestEven;\n    }\n}"}
{"task_id": "Java/103", "generation": "        if (n > m) {\n            return -1;\n        }\n        \n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        \n        int avg = Math.round((float) sum / (m - n + 1));\n        \n        return Integer.toBinaryString(avg);\n    }\n}"}
{"task_id": "Java/103", "generation": "        if (n > m) {\n            return -1;\n        }\n        \n        int sum = 0;\n        int count = 0;\n        \n        for (int i = n; i <= m; i++) {\n            sum += i;\n            count++;\n        }\n        \n        int avg = (int) Math.round((double) sum / count);\n        \n        return Integer.toBinaryString(avg);\n    }\n}"}
{"task_id": "Java/103", "generation": "        if (n > m) {\n            return -1;\n        }\n        \n        int sum = 0;\n        int count = 0;\n        \n        for (int i = n; i <= m; i++) {\n            sum += i;\n            count++;\n        }\n        \n        int avg = Math.round((float)sum / count);\n        \n        return Integer.toBinaryString(avg);\n    }\n}"}
{"task_id": "Java/103", "generation": "        if (n > m) {\n            return -1;\n        }\n        \n        int sum = 0;\n        int count = 0;\n        \n        for (int i = n; i <= m; i++) {\n            sum += i;\n            count++;\n        }\n        \n        int avg = Math.round((float) sum / count);\n        \n        String binaryAvg = Integer.toBinaryString(avg);\n        \n        return binaryAvg;\n    }\n}"}
{"task_id": "Java/103", "generation": "        if (n > m) {\n            return -1;\n        }\n        \n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        \n        int avg = Math.round(sum / (m - n + 1));\n        \n        return Integer.toBinaryString(avg);\n    }\n}"}
{"task_id": "Java/104", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int num : x) {\n            boolean hasEvenDigit = false;\n            int temp = num;\n            while (temp > 0) {\n                int digit = temp % 10;\n                if (digit % 2 == 0) {\n                    hasEvenDigit = true;\n                    break;\n                }\n                temp /= 10;\n            }\n            if (!hasEvenDigit) {\n                result.add(num);\n            }\n        }\n        \n        Collections.sort(result);\n        \n        return result;\n    }\n}"}
{"task_id": "Java/104", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (Integer num : x) {\n            boolean hasEvenDigit = false;\n            int temp = num;\n            while (temp > 0) {\n                int digit = temp % 10;\n                if (digit % 2 == 0) {\n                    hasEvenDigit = true;\n                    break;\n                }\n                temp /= 10;\n            }\n            if (!hasEvenDigit) {\n                result.add(num);\n            }\n        }\n        \n        Collections.sort(result);\n        \n        return result;\n    }\n}"}
{"task_id": "Java/104", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int num : x) {\n            if (hasNoEvenDigit(num)) {\n                result.add(num);\n            }\n        }\n        \n        Collections.sort(result);\n        \n        return result;\n    }\n    \n    private boolean hasNoEvenDigit(int num) {\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                return false;\n            }\n            num /= 10;\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/104", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int num : x) {\n            boolean hasEvenDigit = false;\n            int temp = num;\n            while (temp > 0) {\n                int digit = temp % 10;\n                if (digit % 2 == 0) {\n                    hasEvenDigit = true;\n                    break;\n                }\n                temp = temp / 10;\n            }\n            if (!hasEvenDigit) {\n                result.add(num);\n            }\n        }\n        \n        Collections.sort(result);\n        \n        return result;\n    }\n}"}
{"task_id": "Java/104", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int num : x) {\n            boolean hasEvenDigit = false;\n            int temp = num;\n            while (temp > 0) {\n                int digit = temp % 10;\n                if (digit % 2 == 0) {\n                    hasEvenDigit = true;\n                    break;\n                }\n                temp /= 10;\n            }\n            if (!hasEvenDigit) {\n                result.add(num);\n            }\n        }\n        \n        Collections.sort(result);\n        \n        return result;\n    }\n}"}
{"task_id": "Java/105", "generation": "        List<String> result = new ArrayList<>();\n        \n        List<Integer> filteredArr = arr.stream()\n                                    .filter(num -> num >= 1 && num <= 9)\n                                    .sorted()\n                                    .collect(Collectors.toList());\n        \n        Collections.reverse(filteredArr);\n        \n        Map<Integer, String> numToStringMap = new HashMap<>();\n        numToStringMap.put(1, \"One\");\n        numToStringMap.put(2, \"Two\");\n        numToStringMap.put(3, \"Three\");\n        numToStringMap.put(4, \"Four\");\n        numToStringMap.put(5, \"Five\");\n        numToStringMap.put(6, \"Six\");\n        numToStringMap.put(7, \"Seven\");\n        numToStringMap.put(8, \"Eight\");\n        numToStringMap.put(9, \"Nine\");\n        \n        for (int num : filteredArr) {\n            result.add(numToStringMap.get(num));\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> arr1 = Arrays.asList(2, 1, 1, 4, 5, 8, 2, 3);\n        System.out.println(solution.byLength(arr1)); // [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n        List<Integer> arr2 = Arrays.asList();\n        System.out.println(solution.byLength(arr2)); // []\n\n        List<Integer> arr3 = Arrays.asList(1, -1, 55);\n        System.out.println(solution.byLength(arr3)); // [\"One\"]\n    }\n}"}
{"task_id": "Java/105", "generation": "        List<String> result = new ArrayList<>();\n        \n        // Sort the array of integers that are between 1 and 9 inclusive\n        Collections.sort(arr);\n        List<Integer> sortedArr = new ArrayList<>();\n        for (Integer num : arr) {\n            if (num >= 1 && num <= 9) {\n                sortedArr.add(num);\n            }\n        }\n        \n        Collections.reverse(sortedArr);\n        \n        // Replace each digit by its corresponding name\n        for (Integer num : sortedArr) {\n            switch(num) {\n                case 1:\n                    result.add(\"One\");\n                    break;\n                case 2:\n                    result.add(\"Two\");\n                    break;\n                case 3:\n                    result.add(\"Three\");\n                    break;\n                case 4:\n                    result.add(\"Four\");\n                    break;\n                case 5:\n                    result.add(\"Five\");\n                    break;\n                case 6:\n                    result.add(\"Six\");\n                    break;\n                case 7:\n                    result.add(\"Seven\");\n                    break;\n                case 8:\n                    result.add(\"Eight\");\n                    break;\n                case 9:\n                    result.add(\"Nine\");\n                    break;\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> arr1 = Arrays.asList(2, 1, 1, 4, 5, 8, 2, 3);\n        List<Integer> arr2 = Arrays.asList(1, -1, 55);\n        List<Integer> arr3 = new ArrayList<>();\n\n        System.out.println(solution.byLength(arr1)); // [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n        System.out.println(solution.byLength(arr2)); // [\"One\"]\n        System.out.println(solution.byLength(arr3)); // []\n    }\n}"}
{"task_id": "Java/105", "generation": "        List<String> result = new ArrayList<>();\n        \n        List<Integer> filteredArr = new ArrayList<>();\n        for (int num : arr) {\n            if (num >= 1 && num <= 9) {\n                filteredArr.add(num);\n            }\n        }\n        \n        Collections.sort(filteredArr);\n        Collections.reverse(filteredArr);\n        \n        for (int num : filteredArr) {\n            switch (num) {\n                case 1:\n                    result.add(\"One\");\n                    break;\n                case 2:\n                    result.add(\"Two\");\n                    break;\n                case 3:\n                    result.add(\"Three\");\n                    break;\n                case 4:\n                    result.add(\"Four\");\n                    break;\n                case 5:\n                    result.add(\"Five\");\n                    break;\n                case 6:\n                    result.add(\"Six\");\n                    break;\n                case 7:\n                    result.add(\"Seven\");\n                    break;\n                case 8:\n                    result.add(\"Eight\");\n                    break;\n                case 9:\n                    result.add(\"Nine\");\n                    break;\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> arr1 = Arrays.asList(2, 1, 1, 4, 5, 8, 2, 3);\n        List<String> result1 = solution.byLength(arr1);\n        System.out.println(result1);\n\n        List<Integer> arr2 = Arrays.asList(1, -1, 55);\n        List<String> result2 = solution.byLength(arr2);\n        System.out.println(result2);\n\n        List<Integer> arr3 = new ArrayList<>(); // Empty array\n        List<String> result3 = solution.byLength(arr3);\n        System.out.println(result3);\n    }\n}"}
{"task_id": "Java/105", "generation": "        List<String> result = new ArrayList<>();\n        \n        if (arr == null || arr.isEmpty()) {\n            return result;\n        }\n        \n        List<Integer> validIntegers = new ArrayList<>();\n        \n        for (int num : arr) {\n            if (num >= 1 && num <= 9) {\n                validIntegers.add(num);\n            }\n        }\n        \n        Collections.sort(validIntegers);\n        Collections.reverse(validIntegers);\n        \n        for (int num : validIntegers) {\n            switch (num) {\n                case 1:\n                    result.add(\"One\");\n                    break;\n                case 2:\n                    result.add(\"Two\");\n                    break;\n                case 3:\n                    result.add(\"Three\");\n                    break;\n                case 4:\n                    result.add(\"Four\");\n                    break;\n                case 5:\n                    result.add(\"Five\");\n                    break;\n                case 6:\n                    result.add(\"Six\");\n                    break;\n                case 7:\n                    result.add(\"Seven\");\n                    break;\n                case 8:\n                    result.add(\"Eight\");\n                    break;\n                case 9:\n                    result.add(\"Nine\");\n                    break;\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> arr1 = Arrays.asList(2, 1, 1, 4, 5, 8, 2, 3);\n        System.out.println(solution.byLength(arr1));\n        \n        List<Integer> arr2 = Arrays.asList(1, -1, 55);\n        System.out.println(solution.byLength(arr2));\n        \n        List<Integer> arr3 = new ArrayList<>();\n        System.out.println(solution.byLength(arr3));\n    }\n}"}
{"task_id": "Java/105", "generation": "        List<String> result = new ArrayList<>();\n        \n        // Sort the integers between 1 and 9\n        arr.removeIf(n -> n < 1 || n > 9); // Remove numbers outside the range\n        Collections.sort(arr);\n        \n        // Reverse the array\n        Collections.reverse(arr);\n        \n        // Replace each digit with its corresponding name\n        for (int num : arr) {\n            switch (num) {\n                case 1:\n                    result.add(\"One\");\n                    break;\n                case 2:\n                    result.add(\"Two\");\n                    break;\n                case 3:\n                    result.add(\"Three\");\n                    break;\n                case 4:\n                    result.add(\"Four\");\n                    break;\n                case 5:\n                    result.add(\"Five\");\n                    break;\n                case 6:\n                    result.add(\"Six\");\n                    break;\n                case 7:\n                    result.add(\"Seven\");\n                    break;\n                case 8:\n                    result.add(\"Eight\");\n                    break;\n                case 9:\n                    result.add(\"Nine\");\n                    break;\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> arr1 = Arrays.asList(2, 1, 1, 4, 5, 8, 2, 3);\n        System.out.println(solution.byLength(arr1)); // Output: [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n        List<Integer> arr2 = new ArrayList<>();\n        System.out.println(solution.byLength(arr2)); // Output: []\n\n        List<Integer> arr3 = Arrays.asList(1, -1, 55);\n        System.out.println(solution.byLength(arr3)); // Output: [\"One\"]\n    }\n}"}
{"task_id": "Java/106", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sum(i));\n            }\n        }\n        \n        return result;\n    }\n    \n    public int factorial(int n) {\n        if (n == 0) {\n            return 1;\n        }\n        \n        int result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        \n        return result;\n    }\n    \n    public int sum(int n) {\n        return n * (n + 1) / 2;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.f(5)); // [1, 2, 6, 24, 15]\n    }\n}"}
{"task_id": "Java/106", "generation": "        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sumUpTo(i));\n            }\n        }\n        return result;\n    }\n\n    private int factorial(int n) {\n        int result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n\n    private int sumUpTo(int n) {\n        return (n * (n + 1)) / 2;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.f(5)); // [1, 2, 6, 24, 15]\n    }\n}"}
{"task_id": "Java/106", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sumOfNumbers(i));\n            }\n        }\n        \n        return result;\n    }\n    \n    private int factorial(int n) {\n        int result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n    \n    private int sumOfNumbers(int n) {\n        return (n * (n + 1)) / 2;\n    }\n}"}
{"task_id": "Java/106", "generation": "        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                res.add(factorial(i));\n            } else {\n                res.add(sumFrom1ToN(i));\n            }\n        }\n        return res;\n    }\n\n    private int factorial(int n) {\n        if (n == 0) {\n            return 1;\n        }\n        return n * factorial(n - 1);\n    }\n\n    private int sumFrom1ToN(int n) {\n        return n * (n + 1) / 2;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.f(5)); // [1, 2, 6, 24, 15]\n    }\n}"}
{"task_id": "Java/106", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sumOfNumbers(i));\n            }\n        }\n        \n        return result;\n    }\n    \n    public int factorial(int n) {\n        int fact = 1;\n        for (int i = 1; i <= n; i++) {\n            fact *= i;\n        }\n        return fact;\n    }\n    \n    public int sumOfNumbers(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/107", "generation": "        // Initialize variables to count even and odd palindromes\n        int even = 0;\n        int odd = 0;\n\n        // Iterate through numbers from 1 to n\n        for (int i = 1; i <= n; i++) {\n            // Check if the number is a palindrome\n            if (isPalindrome(i)) {\n                // Check if the palindrome is even or odd\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n\n        // Create a list to store the counts of even and odd palindromes\n        List<Integer> result = new ArrayList<>();\n        result.add(even);\n        result.add(odd);\n\n        return result;\n    }\n\n    // Helper function to check if a number is a palindrome\n    private boolean isPalindrome(int num) {\n        String str = String.valueOf(num);\n        int left = 0;\n        int right = str.length() - 1;\n\n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.evenOddPalindrome(3)); // Output: (1, 2)\n        System.out.println(solution.evenOddPalindrome(12)); // Output: (4, 6)\n    }\n}"}
{"task_id": "Java/107", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        int evenCount = 0;\n        int oddCount = 0;\n        \n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n        \n        result.add(evenCount);\n        result.add(oddCount);\n        \n        return result;\n    }\n    \n    // Helper function to check if a number is palindrome\n    private boolean isPalindrome(int num) {\n        String str = String.valueOf(num);\n        int left = 0;\n        int right = str.length() - 1;\n        \n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.evenOddPalindrome(3)); // Output: [1, 2]\n        System.out.println(solution.evenOddPalindrome(12)); // Output: [4, 6]\n    }\n}"}
{"task_id": "Java/107", "generation": "        int evenCount = 0;\n        int oddCount = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n\n        List<Integer> result = new ArrayList<>();\n        result.add(evenCount);\n        result.add(oddCount);\n\n        return result;\n    }\n\n    // Function to check if a number is palindrome\n    private boolean isPalindrome(int num) {\n        int reversed = 0;\n        int original = num;\n\n        while (num > 0) {\n            int digit = num % 10;\n            reversed = reversed * 10 + digit;\n            num /= 10;\n        }\n\n        return original == reversed;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> result1 = solution.evenOddPalindrome(3);\n        System.out.println(\"Output 1: \" + result1);\n\n        List<Integer> result2 = solution.evenOddPalindrome(12);\n        System.out.println(\"Output 2: \" + result2);\n    }\n}"}
{"task_id": "Java/107", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        int evenCount = 0;\n        int oddCount = 0;\n        \n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n        \n        result.add(evenCount);\n        result.add(oddCount);\n        \n        return result;\n    }\n    \n    private boolean isPalindrome(int num) {\n        String str = String.valueOf(num);\n        int left = 0;\n        int right = str.length() - 1;\n        \n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.evenOddPalindrome(3)); // Output: (1, 2)\n        System.out.println(solution.evenOddPalindrome(12)); // Output: (4, 6)\n    }\n}"}
{"task_id": "Java/107", "generation": "        List<Integer> res = new ArrayList<>();\n        int even = 0;\n        int odd = 0;\n        \n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        \n        res.add(even);\n        res.add(odd);\n        \n        return res;\n    }\n    \n    public boolean isPalindrome(int num) {\n        String str = String.valueOf(num);\n        int left = 0;\n        int right = str.length() - 1;\n        \n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.evenOddPalindrome(3)); // Output: (1, 2)\n        System.out.println(solution.evenOddPalindrome(12)); // Output: (4, 6)\n    }\n}"}
{"task_id": "Java/108", "generation": "        int count = 0;\n        \n        for(int num : arr) {\n            int sum = 0;\n            int temp = num;\n            \n            while(temp != 0) {\n                sum += temp % 10;\n                temp /= 10;\n            }\n            \n            if(sum > 0) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}"}
{"task_id": "Java/108", "generation": "        int count = 0;\n        for (int num : arr) {\n            if (hasSumOfDigitsGreaterThanZero(num)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private boolean hasSumOfDigitsGreaterThanZero(int num) {\n        int sum = 0;\n        while (num != 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum > 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.countNums(Arrays.asList())); // Expected: 0\n        System.out.println(solution.countNums(Arrays.asList(-1, 11, -11))); // Expected: 1\n        System.out.println(solution.countNums(Arrays.asList(1, 1, 2))); // Expected: 3\n    }\n}"}
{"task_id": "Java/108", "generation": "        int count = 0;\n        \n        for (int num : arr) {\n            int sum = 0;\n            int n = Math.abs(num);\n            while (n != 0) {\n                sum += n % 10;\n                n /= 10;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}"}
{"task_id": "Java/108", "generation": "        int count = 0;\n        for (int num : arr) {\n            int sum = 0;\n            String numStr = String.valueOf(num);\n            boolean negative = false;\n            for (int i = 0; i < numStr.length(); i++) {\n                char c = numStr.charAt(i);\n                if (c == '-') {\n                    negative = true;\n                } else if (Character.isDigit(c)) {\n                    int digit = Character.getNumericValue(c);\n                    if (negative) {\n                        digit *= -1;\n                        negative = false;\n                    }\n                    sum += digit;\n                }\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.countNums(Arrays.asList())); // Output: 0\n        System.out.println(solution.countNums(Arrays.asList(-1, 11, -11))); // Output: 1\n        System.out.println(solution.countNums(Arrays.asList(1, 1, 2))); // Output: 3\n    }\n}"}
{"task_id": "Java/108", "generation": "        int count = 0;\n        for (int num : arr) {\n            int sum = 0;\n            if (num < 0) {\n                sum -= num % 10;\n                num /= 10;\n            }\n            while (num != 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> arr1 = Arrays.asList();\n        List<Integer> arr2 = Arrays.asList(-1, 11, -11);\n        List<Integer> arr3 = Arrays.asList(1, 1, 2);\n\n        System.out.println(solution.countNums(arr1)); // Output: 0\n        System.out.println(solution.countNums(arr2)); // Output: 1\n        System.out.println(solution.countNums(arr3)); // Output: 3\n    }\n}"}
{"task_id": "Java/109", "generation": "        if(arr.size() == 0){\n            return true;\n        }\n\n        List<Integer> sortedArr = new ArrayList<>(arr);\n        Collections.sort(sortedArr);\n\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.equals(sortedArr)) {\n                return true;\n            }\n            int lastElement = arr.get(arr.size() - 1);\n            arr.remove(arr.size() - 1);\n            arr.add(0, lastElement);\n        }\n\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.moveOneBall(Arrays.asList(3, 4, 5, 1, 2))); // true\n        System.out.println(solution.moveOneBall(Arrays.asList(3, 5, 4, 1, 2))); // false\n    }\n}"}
{"task_id": "Java/109", "generation": "        if (arr.isEmpty()) {\n            return true;\n        }\n        \n        List<Integer> sortedArr = new ArrayList<>(arr);\n        Collections.sort(sortedArr);\n\n        int n = arr.size();\n        for (int i = 0; i < n; i++) {\n            if (arr.equals(sortedArr)) {\n                return true;\n            }\n            Collections.rotate(arr, 1);\n        }\n\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.moveOneBall(Arrays.asList(3, 4, 5, 1, 2))); // true\n        System.out.println(solution.moveOneBall(Arrays.asList(3, 5, 4, 1, 2))); // false\n    }\n}"}
{"task_id": "Java/109", "generation": "        if(arr.isEmpty()){\n            return true;\n        }\n        \n        List<Integer> sortedArr = new ArrayList<>(arr);\n        Collections.sort(sortedArr);\n        \n        for(int i = 0; i < arr.size(); i++){\n            if(arr.equals(sortedArr)){\n                return true;\n            }\n            Collections.rotate(arr, 1);\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.moveOneBall(Arrays.asList(3, 4, 5, 1, 2))); // true\n        System.out.println(solution.moveOneBall(Arrays.asList(3, 5, 4, 1, 2))); // false\n    }\n}"}
{"task_id": "Java/109", "generation": "        if (arr == null || arr.size() == 0) {\n            return true;\n        }\n\n        List<Integer> sortedArr = new ArrayList<>(arr);\n        Collections.sort(sortedArr);\n\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.equals(sortedArr)) {\n                return true;\n            }\n            Collections.rotate(arr, 1);\n        }\n\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.moveOneBall(Arrays.asList(3, 4, 5, 1, 2))); // true\n        System.out.println(solution.moveOneBall(Arrays.asList(3, 5, 4, 1, 2))); // false\n    }\n}"}
{"task_id": "Java/109", "generation": "        if (arr.isEmpty()) {\n            return true;\n        }\n\n        List<Integer> sortedArr = new ArrayList<>(arr);\n        Collections.sort(sortedArr);\n\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.equals(sortedArr)) {\n                return true;\n            }\n            Collections.rotate(arr, 1);\n        }\n\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.moveOneBall(Arrays.asList(3, 4, 5, 1, 2))); // true\n        System.out.println(solution.moveOneBall(Arrays.asList(3, 5, 4, 1, 2))); // false\n    }\n}"}
{"task_id": "Java/110", "generation": "        // Count the number of odd elements in lst1\n        int oddCount = 0;\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCount++;\n            }\n        }\n        \n        // If lst1 already contains all even numbers, return \"YES\"\n        if (oddCount == 0) {\n            return \"YES\";\n        }\n        \n        // If lst1 contains odd numbers, check if there are enough even numbers in lst2 to exchange\n        int evenCount = 0;\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                evenCount++;\n            }\n        }\n        \n        if (evenCount >= oddCount) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}"}
{"task_id": "Java/110", "generation": "        // Count the number of odd numbers in lst1\n        int oddCount = 0;\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCount++;\n            }\n        }\n        \n        // If all elements in lst1 are already even, return \"YES\"\n        if (oddCount == 0) {\n            return \"YES\";\n        }\n        \n        // If there are odd numbers in lst1, check if there are enough even numbers in lst2 to exchange\n        int evenCount = 0;\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                evenCount++;\n            }\n        }\n        \n        // If there are enough even numbers in lst2 to exchange with odd numbers in lst1, return \"YES\"\n        if (evenCount >= oddCount) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}"}
{"task_id": "Java/110", "generation": "        // Count the number of odd numbers in lst1\n        int oddCount = 0;\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCount++;\n            }\n        }\n        \n        // If there are no odd numbers in lst1, return \"YES\"\n        if (oddCount == 0) {\n            return \"YES\";\n        }\n        \n        // If there are odd numbers in lst1, check if there are enough even numbers in lst2 to exchange\n        int evenCount = 0;\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                evenCount++;\n            }\n        }\n        \n        // If there are enough even numbers in lst2 to exchange with odd numbers in lst1, return \"YES\"\n        if (evenCount >= oddCount) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}"}
{"task_id": "Java/110", "generation": "        int oddCount = 0;\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCount++;\n            }\n        }\n        \n        if (oddCount % 2 == 0) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}"}
{"task_id": "Java/110", "generation": "        // Count the number of odd elements in lst1\n        int oddCount = 0;\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCount++;\n            }\n        }\n        \n        // If there are no odd elements in lst1, return \"YES\"\n        if (oddCount == 0) {\n            return \"YES\";\n        }\n        \n        // Check if there are enough even elements in lst2 to exchange with odd elements in lst1\n        int evenCount = 0;\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                evenCount++;\n            }\n        }\n        \n        // If there are enough even elements in lst2 to exchange with odd elements in lst1, return \"YES\"\n        if (evenCount >= oddCount) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}"}
{"task_id": "Java/111", "generation": "        Map<String, Integer> map = new HashMap<>();\n        \n        if (test == null || test.isEmpty()) {\n            return map;\n        }\n        \n        String[] letters = test.split(\" \");\n        Map<String, Integer> countMap = new HashMap<>();\n        int maxCount = 0;\n        \n        for (String letter : letters) {\n            countMap.put(letter, countMap.getOrDefault(letter, 0) + 1);\n            maxCount = Math.max(maxCount, countMap.get(letter));\n        }\n        \n        for (Map.Entry<String, Integer> entry : countMap.entrySet()) {\n            if (entry.getValue() == maxCount) {\n                map.put(entry.getKey(), entry.getValue());\n            }\n        }\n        \n        return map;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.histogram(\"a b c\")); // {\"a\": 1, \"b\": 1, \"c\": 1}\n        System.out.println(solution.histogram(\"a b b a\")); // {\"a\": 2, \"b\": 2}\n        System.out.println(solution.histogram(\"a b c a b\")); // {\"a\": 2, \"b\": 2}\n        System.out.println(solution.histogram(\"b b b b a\")); // {\"b\": 4}\n        System.out.println(solution.histogram(\"\")); // {}\n    }\n}"}
{"task_id": "Java/111", "generation": "        Map<String, Integer> result = new HashMap<>();\n        \n        test = test.replace(\" \", \"\"); // remove spaces\n        \n        if (test.isEmpty()) {\n            return result;\n        }\n        \n        String[] letters = test.split(\"\");\n        \n        Map<String, Integer> countMap = new HashMap<>();\n        int maxCount = 0;\n        \n        for (String letter : letters) {\n            countMap.put(letter, countMap.getOrDefault(letter, 0) + 1);\n            maxCount = Math.max(maxCount, countMap.get(letter));\n        }\n        \n        for (Map.Entry<String, Integer> entry : countMap.entrySet()) {\n            if (entry.getValue() == maxCount) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.histogram(\"a b c\")); // {\"a\": 1, \"b\": 1, \"c\": 1}\n        System.out.println(solution.histogram(\"a b b a\")); // {\"a\": 2, \"b\": 2}\n        System.out.println(solution.histogram(\"a b c a b\")); // {\"a\": 2, \"b\": 2}\n        System.out.println(solution.histogram(\"b b b b a\")); // {\"b\": 4}\n        System.out.println(solution.histogram(\"\")); // {}\n    }\n}"}
{"task_id": "Java/111", "generation": "        Map<String, Integer> result = new HashMap<>();\n        \n        if (test == null || test.isEmpty()) {\n            return result;\n        }\n        \n        String[] letters = test.split(\" \");\n        Map<String, Integer> counts = new HashMap<>();\n        int maxCount = 0;\n        \n        for (String letter : letters) {\n            counts.put(letter, counts.getOrDefault(letter, 0) + 1);\n            maxCount = Math.max(maxCount, counts.get(letter));\n        }\n        \n        for (Map.Entry<String, Integer> entry : counts.entrySet()) {\n            if (entry.getValue() == maxCount) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/111", "generation": "        Map<String, Integer> dict = new HashMap<>();\n        String[] letters = test.split(\" \");\n        \n        for (String letter : letters) {\n            dict.put(letter, dict.getOrDefault(letter, 0) + 1);\n        }\n        \n        int maxCount = 0;\n        for (int count : dict.values()) {\n            maxCount = Math.max(maxCount, count);\n        }\n        \n        Map<String, Integer> result = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : dict.entrySet()) {\n            if (entry.getValue() == maxCount) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/111", "generation": "        Map<String, Integer> result = new HashMap<>();\n        \n        if(test == null || test.isEmpty()) {\n            return result;\n        }\n        \n        String[] letters = test.split(\" \");\n        Map<String, Integer> countMap = new HashMap<>();\n        \n        for(String letter : letters) {\n            countMap.put(letter, countMap.getOrDefault(letter, 0) + 1);\n        }\n        \n        int maxCount = Collections.max(countMap.values());\n        \n        for(Map.Entry<String, Integer> entry : countMap.entrySet()) {\n            if(entry.getValue() == maxCount) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.histogram(\"a b c\")); // {\"a\": 1, \"b\": 1, \"c\": 1}\n        System.out.println(solution.histogram(\"a b b a\")); // {\"a\": 2, \"b\": 2}\n        System.out.println(solution.histogram(\"a b c a b\")); // {\"a\": 2, \"b\": 2}\n        System.out.println(solution.histogram(\"b b b b a\")); // {\"b\": 4}\n        System.out.println(solution.histogram(\"\")); // {}\n    }\n}"}
{"task_id": "Java/112", "generation": "        // Remove characters in s that are equal to any character in c\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (c.indexOf(ch) == -1) {\n                sb.append(ch);\n            }\n        }\n        \n        // Check if the result string is palindrome\n        String result = sb.toString();\n        boolean isPalindrome = isPalindrome(result);\n        \n        List<Object> res = new ArrayList<>();\n        res.add(result);\n        res.add(isPalindrome);\n        \n        return res;\n    }\n    \n    private boolean isPalindrome(String s) {\n        int left = 0;\n        int right = s.length() - 1;\n        \n        while (left < right) {\n            if (s.charAt(left) != s.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "Java/112", "generation": "        // Remove characters in s that are equal to any character in c\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (c.indexOf(ch) == -1) {\n                sb.append(ch);\n            }\n        }\n        \n        // Check if the result string is palindrome\n        String result = sb.toString();\n        boolean isPalindrome = isPalindrome(result);\n        \n        List<Object> tuple = new ArrayList<>();\n        tuple.add(result);\n        tuple.add(isPalindrome);\n        \n        return tuple;\n    }\n    \n    // Helper function to check if a string is palindrome\n    private boolean isPalindrome(String s) {\n        int left = 0;\n        int right = s.length() - 1;\n        \n        while (left < right) {\n            if (s.charAt(left) != s.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.reverseDelete(\"abcde\", \"ae\")); // (\"bcd\", false)\n        System.out.println(solution.reverseDelete(\"abcdef\", \"b\")); // (\"acdef\", false)\n        System.out.println(solution.reverseDelete(\"abcdedcba\", \"ab\")); // (\"cdedc\", true)\n    }\n}"}
{"task_id": "Java/112", "generation": "        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (c.indexOf(ch) == -1) {\n                sb.append(ch);\n            }\n        }\n        \n        String result = sb.toString();\n        String reversed = new StringBuilder(result).reverse().toString();\n        \n        boolean isPalindrome = result.equals(reversed);\n        \n        List<Object> output = new ArrayList<>();\n        output.add(result);\n        output.add(isPalindrome);\n        \n        return output;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.reverseDelete(\"abcde\", \"ae\")); // [\"bcd\", false]\n        System.out.println(solution.reverseDelete(\"abcdef\", \"b\")); // [\"acdef\", false]\n        System.out.println(solution.reverseDelete(\"abcdedcba\", \"ab\")); // [\"cdedc\", true]\n    }\n}"}
{"task_id": "Java/112", "generation": "        // Delete characters in s that are equal to any character in c\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (c.indexOf(ch) == -1) {\n                sb.append(ch);\n            }\n        }\n        \n        // Check if the result string is palindrome\n        String result = sb.toString();\n        boolean isPalindrome = isPalindrome(result);\n        \n        // Return the result string and true/false for palindrome check\n        List<Object> output = new ArrayList<>();\n        output.add(result);\n        output.add(isPalindrome);\n        \n        return output;\n    }\n    \n    // Helper function to check if a string is palindrome\n    private boolean isPalindrome(String s) {\n        int left = 0;\n        int right = s.length() - 1;\n        \n        while (left < right) {\n            if (s.charAt(left) != s.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.reverseDelete(\"abcde\", \"ae\")); // (\"bcd\", false)\n        System.out.println(solution.reverseDelete(\"abcdef\", \"b\")); // (\"acdef\", false)\n        System.out.println(solution.reverseDelete(\"abcdedcba\", \"ab\")); // (\"cdedc\", true)\n    }\n}"}
{"task_id": "Java/112", "generation": "        // Delete characters in s that are equal to any character in c\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (c.indexOf(ch) == -1) {\n                sb.append(ch);\n            }\n        }\n        \n        // Check if the result string is palindrome\n        String result = sb.toString();\n        boolean isPalindrome = isPalindrome(result);\n        \n        // Return the result string and true/false for the check\n        List<Object> res = new ArrayList<>();\n        res.add(result);\n        res.add(isPalindrome);\n        \n        return res;\n    }\n    \n    private boolean isPalindrome(String s) {\n        int left = 0;\n        int right = s.length() - 1;\n        \n        while (left < right) {\n            if (s.charAt(left) != s.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.reverseDelete(\"abcde\", \"ae\")); // [\"bcd\", false]\n        System.out.println(solution.reverseDelete(\"abcdef\", \"b\")); // [\"acdef\", false]\n        System.out.println(solution.reverseDelete(\"abcdedcba\", \"ab\")); // [\"cdedc\", true]\n    }\n}"}
{"task_id": "Java/113", "generation": "        List<String> res = new ArrayList<>();\n        \n        for (String str : lst) {\n            int count = 0;\n            for (char c : str.toCharArray()) {\n                if (Character.isDigit(c) && (c - '0') % 2 != 0) {\n                    count++;\n                }\n            }\n            String newStr = str.replace(\"i\", String.valueOf(count));\n            newStr = newStr.replace(\"n\", \"d\");\n            res.add(\"the number of odd elements \" + newStr + \" of the input.\");\n        }\n        \n        return res;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<String> test1 = Arrays.asList(\"1234567\");\n        List<String> test2 = Arrays.asList(\"3\",\"11111111\");\n\n        System.out.println(solution.oddCount(test1));\n        System.out.println(solution.oddCount(test2));\n    }\n}"}
{"task_id": "Java/113", "generation": "        List<String> result = new ArrayList<>();\n        \n        for (String s : lst) {\n            int count = 0;\n            for (char c : s.toCharArray()) {\n                if (Character.isDigit(c) && (c - '0') % 2 != 0) {\n                    count++;\n                }\n            }\n            result.add(\"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + s + \" of the \" + count + \"nput.\");\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<String> test1 = Arrays.asList(\"1234567\");\n        List<String> test2 = Arrays.asList(\"3\", \"11111111\");\n\n        System.out.println(solution.oddCount(test1));\n        System.out.println(solution.oddCount(test2));\n    }\n}"}
{"task_id": "Java/113", "generation": "        List<String> result = new ArrayList<>();\n        \n        for (String str : lst) {\n            int count = 0;\n            for (char c : str.toCharArray()) {\n                if (Character.isDigit(c) && (c - '0') % 2 != 0) {\n                    count++;\n                }\n            }\n            String replacedStr = str.replaceAll(\"i\", String.valueOf(count))\n                                    .replaceAll(\"I\", String.valueOf(count));\n            result.add(\"the number of odd elements \" + count + \"n the str\" + replacedStr + \" of the \" + count + \"nput.\");\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<String> input1 = Arrays.asList(\"1234567\");\n        List<String> input2 = Arrays.asList(\"3\", \"11111111\");\n        \n        List<String> result1 = solution.oddCount(input1);\n        List<String> result2 = solution.oddCount(input2);\n        \n        for (String str : result1) {\n            System.out.println(str);\n        }\n        \n        for (String str : result2) {\n            System.out.println(str);\n        }\n    }\n}"}
{"task_id": "Java/113", "generation": "        List<String> result = new ArrayList<>();\n        \n        for (String str : lst) {\n            int oddCount = 0;\n            for (char c : str.toCharArray()) {\n                if (Character.isDigit(c) && (c - '0') % 2 != 0) {\n                    oddCount++;\n                }\n            }\n            String newStr = str.replaceAll(\"\\\\d\", String.valueOf(oddCount));\n            result.add(\"the number of odd elements in the string \" + newStr + \" of the input.\");\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<String> input1 = Arrays.asList(\"1234567\");\n        List<String> input2 = Arrays.asList(\"3\", \"11111111\");\n\n        System.out.println(solution.oddCount(input1));\n        System.out.println(solution.oddCount(input2));\n    }\n}"}
{"task_id": "Java/113", "generation": "        List<String> result = new ArrayList<>();\n        \n        for (String str : lst) {\n            int oddCount = 0;\n            for (char c : str.toCharArray()) {\n                if (Character.isDigit(c) && (c - '0') % 2 != 0) {\n                    oddCount++;\n                }\n            }\n            String output = \"the number of odd elements \" + oddCount + \"n the str\" + oddCount + \"ng \" + str + \" of the \" + oddCount + \"nput.\";\n            result.add(output);\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/114", "generation": "        int n = nums.size();\n        int minSum = nums.get(0);\n        int currSum = 0;\n\n        for (int i = 0; i < n; i++) {\n            currSum = Math.min(nums.get(i), currSum + nums.get(i));\n            minSum = Math.min(minSum, currSum);\n        }\n\n        return minSum;\n    }\n}"}
{"task_id": "Java/114", "generation": "        if (nums == null || nums.size() == 0) {\n            return 0;\n        }\n\n        int minSum = nums.get(0);\n        int currentSum = 0;\n\n        for (int num : nums) {\n            currentSum = Math.min(num, currentSum + num);\n            minSum = Math.min(minSum, currentSum);\n        }\n\n        return minSum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4))); // Output should be 1\n        System.out.println(solution.minSubArraySum(Arrays.asList(-1, -2, -3))); // Output should be -6\n    }\n}"}
{"task_id": "Java/114", "generation": "        int minSum = Integer.MAX_VALUE;\n        int currentSum = 0;\n        \n        for (int num : nums) {\n            currentSum += num;\n            minSum = Math.min(minSum, currentSum);\n            if (currentSum > 0) {\n                currentSum = 0;\n            }\n        }\n        \n        return minSum;\n    }\n}\n\nclass Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> nums1 = Arrays.asList(2, 3, 4, 1, 2, 4);\n        System.out.println(solution.minSubArraySum(nums1)); // Output should be 1\n        \n        List<Integer> nums2 = Arrays.asList(-1, -2, -3);\n        System.out.println(solution.minSubArraySum(nums2)); // Output should be -6\n    }\n}"}
{"task_id": "Java/114", "generation": "        if (nums == null || nums.size() == 0) {\n            return 0;\n        }\n        \n        int minSum = Integer.MAX_VALUE;\n        int currentSum = 0;\n        \n        for (int i = 0; i < nums.size(); i++) {\n            currentSum = Math.min(nums.get(i), currentSum + nums.get(i));\n            minSum = Math.min(minSum, currentSum);\n        }\n        \n        return minSum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> nums1 = Arrays.asList(2, 3, 4, 1, 2, 4);\n        List<Integer> nums2 = Arrays.asList(-1, -2, -3);\n        \n        System.out.println(solution.minSubArraySum(nums1)); // Output: 1\n        System.out.println(solution.minSubArraySum(nums2)); // Output: -6\n    }\n}"}
{"task_id": "Java/114", "generation": "        int n = nums.size();\n        if (n == 0) {\n            return 0;\n        }\n\n        int minSum = Integer.MAX_VALUE;\n        int currSum = 0;\n\n        for (int i = 0; i < n; i++) {\n            currSum = Math.min(nums.get(i), currSum + nums.get(i));\n            minSum = Math.min(minSum, currSum);\n        }\n\n        return minSum;\n    }\n}"}
{"task_id": "Java/115", "generation": "        int count = 0;\n        int rows = grid.size();\n        int cols = grid.get(0).size();\n\n        for (int i = 0; i < cols; i++) {\n            int sum = 0;\n            for (int j = 0; j < rows; j++) {\n                sum += grid.get(j).get(i);\n            }\n            count += (int) Math.ceil((double) sum / capacity);\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Example 1\n        List<List<Integer>> grid1 = new ArrayList<>();\n        grid1.add(Arrays.asList(0, 0, 1, 0));\n        grid1.add(Arrays.asList(0, 1, 0, 0));\n        grid1.add(Arrays.asList(1, 1, 1, 1));\n        int capacity1 = 1;\n        System.out.println(solution.maxFill(grid1, capacity1)); // Output: 6\n\n        // Example 2\n        List<List<Integer>> grid2 = new ArrayList<>();\n        grid2.add(Arrays.asList(0, 0, 1, 1));\n        grid2.add(Arrays.asList(0, 0, 0, 0));\n        grid2.add(Arrays.asList(1, 1, 1, 1));\n        grid2.add(Arrays.asList(0, 1, 1, 1));\n        int capacity2 = 2;\n        System.out.println(solution.maxFill(grid2, capacity2)); // Output: 5\n\n        // Example 3\n        List<List<Integer>> grid3 = new ArrayList<>();\n        grid3.add(Arrays.asList(0, 0, 0));\n        grid3.add(Arrays.asList(0, 0, 0));\n        int capacity3 = 5;\n        System.out.println(solution.maxFill(grid3, capacity3)); // Output: 0\n    }\n}"}
{"task_id": "Java/115", "generation": "        int count = 0;\n        for (List<Integer> row : grid) {\n            int sum = row.stream().mapToInt(Integer::intValue).sum();\n            count += (int) Math.ceil((double) sum / capacity);\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/115", "generation": "        int rows = grid.size();\n        int cols = grid.get(0).size();\n        int count = 0;\n\n        for (int j = 0; j < cols; j++) {\n            int maxHeight = 0;\n            for (int i = 0; i < rows; i++) {\n                maxHeight = Math.max(maxHeight, grid.get(i).get(j));\n            }\n            count += maxHeight;\n        }\n\n        return count * capacity;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<List<Integer>> grid1 = new ArrayList<>();\n        grid1.add(Arrays.asList(0, 0, 1, 0));\n        grid1.add(Arrays.asList(0, 1, 0, 0));\n        grid1.add(Arrays.asList(1, 1, 1, 1));\n        System.out.println(solution.maxFill(grid1, 1)); // Output: 6\n\n        List<List<Integer>> grid2 = new ArrayList<>();\n        grid2.add(Arrays.asList(0, 0, 1, 1));\n        grid2.add(Arrays.asList(0, 0, 0, 0));\n        grid2.add(Arrays.asList(1, 1, 1, 1));\n        grid2.add(Arrays.asList(0, 1, 1, 1));\n        System.out.println(solution.maxFill(grid2, 2)); // Output: 5\n\n        List<List<Integer>> grid3 = new ArrayList<>();\n        grid3.add(Arrays.asList(0, 0, 0));\n        grid3.add(Arrays.asList(0, 0, 0));\n        System.out.println(solution.maxFill(grid3, 5)); // Output: 0\n    }\n}"}
{"task_id": "Java/115", "generation": "        int wells = grid.size();\n        int buckets = grid.get(0).size();\n        int count = 0;\n\n        for (int j = 0; j < buckets; j++) {\n            int totalWater = 0;\n            for (int i = 0; i < wells; i++) {\n                totalWater += grid.get(i).get(j);\n            }\n            while (totalWater > 0) {\n                totalWater -= capacity;\n                count++;\n            }\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<List<Integer>> grid1 = new ArrayList<>();\n        grid1.add(Arrays.asList(0,0,1,0));\n        grid1.add(Arrays.asList(0,1,0,0));\n        grid1.add(Arrays.asList(1,1,1,1));\n        System.out.println(solution.maxFill(grid1, 1)); // Output: 6\n\n        List<List<Integer>> grid2 = new ArrayList<>();\n        grid2.add(Arrays.asList(0,0,1,1));\n        grid2.add(Arrays.asList(0,0,0,0));\n        grid2.add(Arrays.asList(1,1,1,1));\n        grid2.add(Arrays.asList(0,1,1,1));\n        System.out.println(solution.maxFill(grid2, 2)); // Output: 5\n\n        List<List<Integer>> grid3 = new ArrayList<>();\n        grid3.add(Arrays.asList(0,0,0));\n        grid3.add(Arrays.asList(0,0,0));\n        System.out.println(solution.maxFill(grid3, 5)); // Output: 0\n    }\n}"}
{"task_id": "Java/115", "generation": "        int rows = grid.size();\n        int cols = grid.get(0).size();\n        int result = 0;\n\n        for (int col = 0; col < cols; col++) {\n            int currentCapacity = 0;\n            for (int row = 0; row < rows; row++) {\n                if (grid.get(row).get(col) == 1) {\n                    int remainingCapacity = capacity - currentCapacity;\n                    if (remainingCapacity > 0) {\n                        currentCapacity += remainingCapacity;\n                        result++;\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<List<Integer>> grid1 = new ArrayList<>();\n        grid1.add(Arrays.asList(0, 0, 1, 0));\n        grid1.add(Arrays.asList(0, 1, 0, 0));\n        grid1.add(Arrays.asList(1, 1, 1, 1));\n        int capacity1 = 1;\n        System.out.println(solution.maxFill(grid1, capacity1)); // Output: 6\n\n        List<List<Integer>> grid2 = new ArrayList<>();\n        grid2.add(Arrays.asList(0, 0, 1, 1));\n        grid2.add(Arrays.asList(0, 0, 0, 0));\n        grid2.add(Arrays.asList(1, 1, 1, 1));\n        grid2.add(Arrays.asList(0, 1, 1, 1));\n        int capacity2 = 2;\n        System.out.println(solution.maxFill(grid2, capacity2)); // Output: 5\n\n        List<List<Integer>> grid3 = new ArrayList<>();\n        grid3.add(Arrays.asList(0, 0, 0));\n        grid3.add(Arrays.asList(0, 0, 0));\n        int capacity3 = 5;\n        System.out.println(solution.maxFill(grid3, capacity3)); // Output: 0\n    }\n}"}
{"task_id": "Java/116", "generation": "        Collections.sort(arr, (a, b) -> {\n            int countA = Integer.bitCount(Math.abs(a));\n            int countB = Integer.bitCount(Math.abs(b));\n            \n            if(countA == countB) {\n                return a - b;\n            }\n            \n            return countA - countB;\n        });\n        \n        return arr;\n    }\n}"}
{"task_id": "Java/116", "generation": "        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                int onesA = Integer.bitCount(Math.abs(a));\n                int onesB = Integer.bitCount(Math.abs(b));\n                \n                if (onesA != onesB) {\n                    return onesA - onesB;\n                } else {\n                    return a - b;\n                }\n            }\n        });\n\n        return arr;\n    }\n}"}
{"task_id": "Java/116", "generation": "        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                int countA = Integer.bitCount(a);\n                int countB = Integer.bitCount(b);\n                if (countA == countB) {\n                    return a - b;\n                }\n                return countA - countB;\n            }\n        });\n        return arr;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5)));\n        System.out.println(solution.sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2)));\n        System.out.println(solution.sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4)));\n    }\n}"}
{"task_id": "Java/116", "generation": "        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                int countA = Integer.bitCount(Math.abs(a));\n                int countB = Integer.bitCount(Math.abs(b));\n\n                if (countA == countB) {\n                    return a - b;\n                } else {\n                    return countA - countB;\n                }\n            }\n        });\n\n        return arr;\n    }\n}"}
{"task_id": "Java/116", "generation": "        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                int onesCount1 = Integer.bitCount(o1);\n                int onesCount2 = Integer.bitCount(o2);\n                \n                if (onesCount1 == onesCount2) {\n                    return o1 - o2;\n                }\n                \n                return onesCount1 - onesCount2;\n            }\n        });\n        \n        return arr;\n    }\n}"}
{"task_id": "Java/117", "generation": "        List<String> result = new ArrayList<>();\n        \n        if (s.isEmpty()) {\n            return result;\n        }\n        \n        String[] words = s.split(\" \");\n        \n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                if (!isVowel(c)) {\n                    count++;\n                }\n            }\n            if (count == n) {\n                result.add(word);\n            }\n        }\n        \n        return result;\n    }\n    \n    private boolean isVowel(char c) {\n        c = Character.toLowerCase(c);\n        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.selectWords(\"Mary had a little lamb\", 4)); // [\"little\"]\n        System.out.println(solution.selectWords(\"Mary had a little lamb\", 3)); // [\"Mary\", \"lamb\"]\n        System.out.println(solution.selectWords(\"simple white space\", 2)); // []\n        System.out.println(solution.selectWords(\"Hello world\", 4)); // [\"world\"]\n        System.out.println(solution.selectWords(\"Uncle sam\", 3)); // [\"Uncle\"]\n    }\n}"}
{"task_id": "Java/117", "generation": "        List<String> result = new ArrayList<>();\n        \n        if (s.isEmpty()) {\n            return result;\n        }\n        \n        String[] words = s.split(\" \");\n        \n        for (String word : words) {\n            int consonantCount = 0;\n            for (char c : word.toCharArray()) {\n                if (Character.isLetter(c) && !isVowel(c)) {\n                    consonantCount++;\n                }\n            }\n            if (consonantCount == n) {\n                result.add(word);\n            }\n        }\n        \n        return result;\n    }\n    \n    private boolean isVowel(char c) {\n        return \"AEIOUaeiou\".indexOf(c) != -1;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.selectWords(\"Mary had a little lamb\", 4)); // [\"little\"]\n        System.out.println(solution.selectWords(\"Mary had a little lamb\", 3)); // [\"Mary\", \"lamb\"]\n        System.out.println(solution.selectWords(\"simple white space\", 2)); // []\n        System.out.println(solution.selectWords(\"Hello world\", 4)); // [\"world\"]\n        System.out.println(solution.selectWords(\"Uncle sam\", 3)); // [\"Uncle\"]\n    }\n}"}
{"task_id": "Java/117", "generation": "        List<String> result = new ArrayList<>();\n        if (s.isEmpty()) {\n            return result;\n        }\n        \n        String[] words = s.split(\" \");\n        \n        for (String word : words) {\n            int consonantCount = 0;\n            for (char c : word.toCharArray()) {\n                if (isConsonant(c)) {\n                    consonantCount++;\n                }\n            }\n            if (consonantCount == n) {\n                result.add(word);\n            }\n        }\n        \n        return result;\n    }\n    \n    private boolean isConsonant(char c) {\n        c = Character.toLowerCase(c);\n        return c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && Character.isLetter(c);\n    }\n}"}
{"task_id": "Java/117", "generation": "        List<String> result = new ArrayList<>();\n        \n        if (s.isEmpty()) {\n            return result;\n        }\n        \n        String[] words = s.split(\" \");\n        \n        for (String word : words) {\n            int consonantCount = 0;\n            for (char c : word.toCharArray()) {\n                if (isConsonant(c)) {\n                    consonantCount++;\n                }\n            }\n            if (consonantCount == n) {\n                result.add(word);\n            }\n        }\n        \n        return result;\n    }\n    \n    private boolean isConsonant(char c) {\n        return \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\".indexOf(c) != -1;\n    }\n}"}
{"task_id": "Java/117", "generation": "        List<String> result = new ArrayList<>();\n        \n        if (s.isEmpty()) {\n            return result;\n        }\n        \n        String[] words = s.split(\" \");\n        \n        for (String word : words) {\n            int consonantCount = 0;\n            for (char c : word.toCharArray()) {\n                if (isConsonant(c)) {\n                    consonantCount++;\n                }\n            }\n            if (consonantCount == n) {\n                result.add(word);\n            }\n        }\n        \n        return result;\n    }\n    \n    private boolean isConsonant(char c) {\n        c = Character.toLowerCase(c);\n        return !(\"aeiou\".indexOf(c) != -1 || !Character.isLetter(c));\n    }\n}"}
{"task_id": "Java/118", "generation": "        // Initialize variables to store the index of the closest vowel\n        int closestVowelIndex = -1;\n        \n        // Iterate over the characters of the word from right to left\n        for (int i = word.length() - 2; i > 0; i--) {\n            char c = word.charAt(i);\n            if (isConsonant(c)) {\n                // Check if the character is a consonant\n                // If it is a consonant, find the closest vowel to its left\n                int j = i - 1;\n                while (j >= 0) {\n                    if (isVowel(word.charAt(j))) {\n                        closestVowelIndex = j;\n                        break;\n                    }\n                    j--;\n                }\n                if (closestVowelIndex != -1) {\n                    break;\n                }\n            }\n        }\n        \n        // If a closest vowel is found, return the vowel character\n        if (closestVowelIndex != -1) {\n            return String.valueOf(word.charAt(closestVowelIndex));\n        } else {\n            return \"\"; // Return empty string if no vowel meets the condition\n        }\n    }\n    \n    // Helper method to check if a character is a vowel\n    private boolean isVowel(char c) {\n        return \"aeiouAEIOU\".indexOf(c) != -1;\n    }\n    \n    // Helper method to check if a character is a consonant\n    private boolean isConsonant(char c) {\n        return Character.isLetter(c) && !isVowel(c);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.getClosestVowel(\"yogurt\")); // \"u\"\n        System.out.println(solution.getClosestVowel(\"FULL\")); // \"U\"\n        System.out.println(solution.getClosestVowel(\"quick\")); // \"\"\n        System.out.println(solution.getClosestVowel(\"ab\")); // \"\"\n    }\n}"}
{"task_id": "Java/118", "generation": "        int len = word.length();\n        for (int i = len - 2; i > 0; i--) {\n            char currentChar = word.charAt(i);\n            if (!isVowel(currentChar)) {\n                char prevChar = word.charAt(i - 1);\n                char nextChar = word.charAt(i + 1);\n                if (isVowel(prevChar) && isVowel(nextChar)) {\n                    return String.valueOf(currentChar);\n                }\n            }\n        }\n        return \"\";\n    }\n\n    private boolean isVowel(char c) {\n        return \"aeiouAEIOU\".indexOf(c) != -1;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.getClosestVowel(\"yogurt\")); // \"u\"\n        System.out.println(solution.getClosestVowel(\"FULL\")); // \"U\"\n        System.out.println(solution.getClosestVowel(\"quick\")); // \"\"\n        System.out.println(solution.getClosestVowel(\"ab\")); // \"\"\n    }\n}"}
{"task_id": "Java/118", "generation": "        // Initialize a set to store vowels\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n\n        // Initialize variables to store the closest vowel\n        char closestVowel = ' ';\n        int minDistance = Integer.MAX_VALUE;\n\n        // Iterate through the word starting from the second character\n        for (int i = 1; i < word.length() - 1; i++) {\n            // Check if the character is a consonant and the surrounding characters are consonants\n            if (!vowels.contains(word.charAt(i)) && !vowels.contains(word.charAt(i - 1)) && !vowels.contains(word.charAt(i + 1))) {\n                // Calculate the distance to the closest vowel\n                int distance = Math.min(i, word.length() - i - 1);\n                if (distance < minDistance) {\n                    closestVowel = word.charAt(i);\n                    minDistance = distance;\n                }\n            }\n        }\n\n        // Return the closest vowel found or empty string if none found\n        return closestVowel == ' ' ? \"\" : String.valueOf(closestVowel);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.getClosestVowel(\"yogurt\")); // \"u\"\n        System.out.println(solution.getClosestVowel(\"FULL\")); // \"U\"\n        System.out.println(solution.getClosestVowel(\"quick\")); // \"\"\n        System.out.println(solution.getClosestVowel(\"ab\")); // \"\"\n    }\n}"}
{"task_id": "Java/118", "generation": "        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        char[] consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'};\n        \n        int closestIndex = -1;\n        \n        for (int i = word.length() - 2; i > 0; i--) {\n            char currentChar = word.charAt(i);\n            \n            if (Arrays.binarySearch(vowels, currentChar) >= 0) {\n                closestIndex = i;\n                break;\n            } else if (Arrays.binarySearch(consonants, currentChar) >= 0) {\n                continue;\n            } else {\n                break;\n            }\n        }\n        \n        if (closestIndex == -1) {\n            return \"\";\n        } else {\n            return String.valueOf(word.charAt(closestIndex));\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.getClosestVowel(\"yogurt\")); // \"u\"\n        System.out.println(solution.getClosestVowel(\"FULL\")); // \"U\"\n        System.out.println(solution.getClosestVowel(\"quick\")); // \"\"\n        System.out.println(solution.getClosestVowel(\"ab\")); // \"\"\n    }\n}"}
{"task_id": "Java/118", "generation": "        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u'));\n        char[] chars = word.toCharArray();\n        \n        List<Integer> consonants = new ArrayList<>();\n        for (int i = chars.length - 1; i >= 0; i--) {\n            char c = Character.toLowerCase(chars[i]);\n            if (!vowels.contains(c) && Character.isLetter(c)) {\n                consonants.add(i);\n            } else if (vowels.contains(c) && !consonants.isEmpty()) {\n                return Character.toString(chars[i]);\n            }\n        }\n        \n        return \"\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.getClosestVowel(\"yogurt\")); // \"u\"\n        System.out.println(solution.getClosestVowel(\"FULL\")); // \"U\"\n        System.out.println(solution.getClosestVowel(\"quick\")); // \"\"\n        System.out.println(solution.getClosestVowel(\"ab\")); // \"\"\n    }\n}"}
{"task_id": "Java/119", "generation": "        String s1 = lst.get(0);\n        String s2 = lst.get(1);\n        \n        int balance = 0;\n        \n        for (char c : (s1 + s2).toCharArray()) {\n            if (c == '(') {\n                balance++;\n            } else {\n                balance--;\n            }\n            if (balance < 0) {\n                return \"No\";\n            }\n        }\n        \n        if (balance == 0) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n}"}
{"task_id": "Java/119", "generation": "        int openCount = 0;\n        int closeCount = 0;\n        \n        for (String str : lst) {\n            for (char c : str.toCharArray()) {\n                if (c == '(') {\n                    openCount++;\n                } else {\n                    closeCount++;\n                }\n            }\n        }\n        \n        if (openCount == closeCount) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.matchParens(Arrays.asList(\"()(\", \")\"))); // Yes\n        System.out.println(solution.matchParens(Arrays.asList(\")\", \")\"))); // No\n    }\n}"}
{"task_id": "Java/119", "generation": "        String s1 = lst.get(0);\n        String s2 = lst.get(1);\n        \n        int openCount = 0;\n        int closeCount = 0;\n        \n        for (int i = 0; i < s1.length(); i++) {\n            if (s1.charAt(i) == '(') {\n                openCount++;\n            } else {\n                closeCount++;\n            }\n        }\n        \n        for (int i = 0; i < s2.length(); i++) {\n            if (s2.charAt(i) == '(') {\n                openCount++;\n            } else {\n                closeCount++;\n            }\n        }\n        \n        if (openCount == closeCount) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.matchParens(Arrays.asList(\"()(\", \")\"))); // \"Yes\"\n        System.out.println(solution.matchParens(Arrays.asList(\")\", \")\"))); // \"No\"\n    }\n}"}
{"task_id": "Java/119", "generation": "        int openCount = 0;\n        int closeCount = 0;\n\n        for (String str : lst) {\n            for (char c : str.toCharArray()) {\n                if (c == '(') {\n                    openCount++;\n                } else {\n                    if (openCount > 0) {\n                        openCount--;\n                    } else {\n                        closeCount++;\n                    }\n                }\n            }\n        }\n\n        return (openCount == 0 && closeCount <= 1) ? \"Yes\" : \"No\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.matchParens(Arrays.asList(\"()(\", \")\"))); // Yes\n        System.out.println(solution.matchParens(Arrays.asList(\")\", \")\"))); // No\n    }\n}"}
{"task_id": "Java/119", "generation": "        // Concatenate the two strings\n        String concatenated = lst.get(0) + lst.get(1);\n        \n        // Check if the concatenated string has balanced parentheses\n        int count = 0;\n        for (char c : concatenated.toCharArray()) {\n            if (c == '(') {\n                count++;\n            } else if (c == ')') {\n                count--;\n            }\n            if (count < 0) {\n                return \"No\";\n            }\n        }\n        \n        return count == 0 ? \"Yes\" : \"No\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.matchParens(Arrays.asList(\"()(\", \")\"))); // \"Yes\"\n        System.out.println(solution.matchParens(Arrays.asList(\")\", \")\"))); // \"No\"\n    }\n}"}
{"task_id": "Java/120", "generation": "        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());\n        pq.addAll(arr);\n        \n        List<Integer> res = new ArrayList<>();\n        while(k-- > 0) {\n            res.add(pq.poll());\n        }\n        \n        return res;\n    }\n}"}
{"task_id": "Java/120", "generation": "        // Create a max heap to store the elements in the array\n        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\n\n        // Add all elements from the array to the max heap\n        maxHeap.addAll(arr);\n\n        // Create a list to store the maximum k numbers\n        List<Integer> result = new ArrayList<>();\n\n        // Remove the maximum element from the max heap k times and add it to the result list\n        for (int i = 0; i < k; i++) {\n            result.add(maxHeap.poll());\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> arr1 = new ArrayList<>(Arrays.asList(-3, -4, 5));\n        int k1 = 3;\n        System.out.println(solution.maximum(arr1, k1)); // Output: [-4, -3, 5]\n\n        List<Integer> arr2 = new ArrayList<>(Arrays.asList(4, -4, 4));\n        int k2 = 2;\n        System.out.println(solution.maximum(arr2, k2)); // Output: [4, 4]\n\n        List<Integer> arr3 = new ArrayList<>(Arrays.asList(-3, 2, 1, 2, -1, -2, 1));\n        int k3 = 1;\n        System.out.println(solution.maximum(arr3, k3)); // Output: [2]\n    }\n}"}
{"task_id": "Java/120", "generation": "        // Create a priority queue to store the maximum elements\n        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());\n\n        // Add all elements of the array to the priority queue\n        for (int num : arr) {\n            pq.offer(num);\n        }\n\n        // Create a sorted list to store the maximum k numbers\n        List<Integer> result = new ArrayList<>();\n\n        // Remove the maximum element from the priority queue k times\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n        }\n\n        return result;\n    }\n}"}
{"task_id": "Java/120", "generation": "        // Create a priority queue to store the k maximum numbers\n        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());\n        \n        // Add all elements of the array to the priority queue\n        for (int num : arr) {\n            pq.offer(num);\n        }\n        \n        // Create a list to store the k maximum numbers\n        List<Integer> result = new ArrayList<>();\n        \n        // Remove the k maximum numbers from the priority queue and add them to the result list\n        for (int i = 0; i < k; i++) {\n            result.add(pq.poll());\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/120", "generation": "        // Create a max heap\n        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\n        \n        // Add all elements of the array to the max heap\n        for (int num : arr) {\n            maxHeap.offer(num);\n        }\n        \n        // Create a list to store the maximum k numbers\n        List<Integer> result = new ArrayList<>();\n        \n        // Poll k times from the max heap and add to the result list\n        for (int i = 0; i < k; i++) {\n            result.add(maxHeap.poll());\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/121", "generation": "        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/121", "generation": "        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 != 0 && lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/121", "generation": "        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/121", "generation": "        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.solution(Arrays.asList(5, 8, 7, 1))); // 12\n        System.out.println(solution.solution(Arrays.asList(3, 3, 3, 3, 3))); // 9\n        System.out.println(solution.solution(Arrays.asList(30, 13, 24, 321))); // 0\n    }\n}"}
{"task_id": "Java/121", "generation": "        int sum = 0;\n        \n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        \n        return sum;\n    }\n}"}
{"task_id": "Java/122", "generation": "        int sum = 0;\n        int count = 0;\n        \n        for (int i = 0; i < k; i++) {\n            if (arr.get(i) >= 10 && arr.get(i) <= 99) {\n                sum += arr.get(i);\n                count++;\n            }\n        }\n        \n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> arr = new ArrayList<>(Arrays.asList(111, 21, 3, 4000, 5, 6, 7, 8, 9));\n        int k = 4;\n\n        System.out.println(solution.addElements(arr, k)); // Output: 24\n    }\n}"}
{"task_id": "Java/122", "generation": "        int sum = 0;\n        int count = 0;\n        \n        for (int i = 0; i < k; i++) {\n            if (arr.get(i) >= 10 && arr.get(i) <= 99) {\n                sum += arr.get(i);\n                count++;\n            }\n        }\n        \n        return sum;\n    }\n}"}
{"task_id": "Java/122", "generation": "        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i) >= 10 && arr.get(i) <= 99) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> arr = new ArrayList<>(Arrays.asList(111, 21, 3, 4000, 5, 6, 7, 8, 9));\n        int k = 4;\n\n        int result = solution.addElements(arr, k);\n        System.out.println(result);\n    }\n}"}
{"task_id": "Java/122", "generation": "        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i) >= 10 && arr.get(i) <= 99) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> arr = new ArrayList<>(Arrays.asList(111, 21, 3, 4000, 5, 6, 7, 8, 9));\n        int k = 4;\n\n        System.out.println(solution.addElements(arr, k)); // Output: 24\n    }\n}"}
{"task_id": "Java/122", "generation": "        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (Math.abs(arr.get(i)) < 100) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> arr = new ArrayList<>(Arrays.asList(111, 21, 3, 4000, 5, 6, 7, 8, 9));\n        int k = 4;\n\n        System.out.println(solution.addElements(arr, k)); // Output: 24\n    }\n}"}
{"task_id": "Java/123", "generation": "        List<Integer> result = new ArrayList<>();\n        Set<Integer> visited = new HashSet<>();\n        \n        while (n != 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                result.add(n);\n                visited.add(n);\n                n = 3 * n + 1;\n            }\n            if (visited.contains(n)) {\n                break;\n            }\n        }\n        \n        result.add(1);\n        Collections.sort(result);\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test the example\n        List<Integer> result = solution.getOddCollatz(5);\n        System.out.println(result);\n    }\n}"}
{"task_id": "Java/123", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i <= n; i++) {\n            if (isOddCollatz(i)) {\n                result.add(i);\n            }\n        }\n        \n        return result;\n    }\n    \n    private boolean isOddCollatz(int num) {\n        while (num != 1) {\n            if (num % 2 == 0) {\n                num = num / 2;\n            } else {\n                num = 3 * num + 1;\n                if (num % 2 == 0 && num != 1) {\n                    return false;\n                }\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.getOddCollatz(5)); // [1, 5]\n        System.out.println(solution.getOddCollatz(10)); // [1, 5, 9]\n    }\n}"}
{"task_id": "Java/123", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        // Base case\n        if (n <= 0) {\n            return result;\n        }\n        \n        // Add the first number to the result\n        result.add(n);\n        \n        // Generate the Collatz sequence\n        while (n != 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n            result.add(n);\n        }\n        \n        // Filter out the odd numbers\n        List<Integer> odds = new ArrayList<>();\n        for (int num : result) {\n            if (num % 2 != 0) {\n                odds.add(num);\n            }\n        }\n        \n        // Sort the odd numbers\n        Collections.sort(odds);\n        \n        return odds;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.getOddCollatz(5)); // [1, 5]\n        System.out.println(solution.getOddCollatz(10)); // [1]\n        System.out.println(solution.getOddCollatz(27)); // [1, 5, 13, 27]\n        System.out.println(solution.getOddCollatz(1)); // [1]\n    }\n}"}
{"task_id": "Java/123", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i <= n; i++) {\n            if (isOddCollatz(i)) {\n                result.add(i);\n            }\n        }\n        \n        return result;\n    }\n    \n    private boolean isOddCollatz(int num) {\n        while (num != 1) {\n            if (num % 2 == 0) {\n                num /= 2;\n            } else {\n                num = 3 * num + 1;\n                if (num % 2 == 0) {\n                    return false;\n                }\n            }\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "Java/123", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i <= n; i++) {\n            List<Integer> collatzSeq = new ArrayList<>();\n            collatzSeq.add(i);\n            \n            int num = i;\n            \n            while (num != 1) {\n                if (num % 2 == 0) {\n                    num /= 2;\n                } else {\n                    num = 3 * num + 1;\n                }\n                collatzSeq.add(num);\n            }\n            \n            if (collatzSeq.get(collatzSeq.size() - 1) % 2 != 0) {\n                result.add(collatzSeq.get(collatzSeq.size() - 1));\n            }\n        }\n        \n        Collections.sort(result);\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test the example in the prompt\n        System.out.println(solution.getOddCollatz(5)); // Output: [1, 5]\n\n        // Additional test cases\n        System.out.println(solution.getOddCollatz(10)); // Output: [1, 3, 5, 7]\n        System.out.println(solution.getOddCollatz(20)); // Output: [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\n    }\n}"}
{"task_id": "Java/124", "generation": "        // Check if the date string is empty\n        if(date.isEmpty()){\n            return false;\n        }\n\n        // Split the date string into day, month and year\n        String[] dateParts = date.split(\"-\");\n        if(dateParts.length != 3){\n            return false;\n        }\n\n        // Convert the day, month and year to integers\n        int day = Integer.parseInt(dateParts[1]);\n        int month = Integer.parseInt(dateParts[0]);\n        int year = Integer.parseInt(dateParts[2]);\n\n        // Check if the month is valid\n        if(month < 1 || month > 12){\n            return false;\n        }\n\n        // Check if the day is valid based on the month\n        if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12){\n            if(day < 1 || day > 31){\n                return false;\n            }\n        } else if(month == 4 || month == 6 || month == 9 || month == 11){\n            if(day < 1 || day > 30){\n                return false;\n            }\n        } else if(month == 2){\n            // Check for leap year in February\n            if((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)){\n                if(day < 1 || day > 29){\n                    return false;\n                }\n            } else {\n                if(day < 1 || day > 28){\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.validDate(\"03-11-2000\")); // true\n        System.out.println(solution.validDate(\"15-01-2012\")); // false\n        System.out.println(solution.validDate(\"04-0-2040\")); // false\n        System.out.println(solution.validDate(\"06-04-2020\")); // true\n        System.out.println(solution.validDate(\"06/04/2020\")); // false\n    }\n}"}
{"task_id": "Java/124", "generation": "        if (date.isEmpty()) {\n            return false;\n        }\n\n        String[] dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n            return false;\n        }\n\n        try {\n            int month = Integer.parseInt(dateParts[0]);\n            int day = Integer.parseInt(dateParts[1]);\n            int year = Integer.parseInt(dateParts[2]);\n\n            if (month < 1 || month > 12) {\n                return false;\n            }\n\n            if (day < 1 || day > 31) {\n                return false;\n            }\n\n            if ((month == 4 || month == 6 || month == 9 || month == 11) && day > 30) {\n                return false;\n            }\n\n            if (month == 2) {\n                if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) {\n                    if (day > 29) {\n                        return false;\n                    }\n                } else {\n                    if (day > 28) {\n                        return false;\n                    }\n                }\n            }\n\n            return true;\n\n        } catch (NumberFormatException e) {\n            return false;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.validDate(\"03-11-2000\")); // true\n        System.out.println(solution.validDate(\"15-01-2012\")); // false\n        System.out.println(solution.validDate(\"04-0-2040\")); // false\n        System.out.println(solution.validDate(\"06-04-2020\")); // true\n        System.out.println(solution.validDate(\"06/04/2020\")); // false\n    }\n}"}
{"task_id": "Java/124", "generation": "        if (date == null || date.isEmpty()) {\n            return false;\n        }\n\n        String[] dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n            return false;\n        }\n\n        int month = Integer.parseInt(dateParts[0]);\n        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        if (day < 1 || day > 31) {\n            return false;\n        }\n\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day > 30) {\n                return false;\n            }\n        } else if (month == 2) {\n            if (year % 4 == 0) {\n                if (day > 29) {\n                    return false;\n                }\n            } else {\n                if (day > 28) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.validDate(\"03-11-2000\")); // true\n        System.out.println(solution.validDate(\"15-01-2012\")); // false\n        System.out.println(solution.validDate(\"04-0-2040\")); // false\n        System.out.println(solution.validDate(\"06-04-2020\")); // true\n        System.out.println(solution.validDate(\"06/04/2020\")); // false\n    }\n}"}
{"task_id": "Java/124", "generation": "        if (date == null || date.isEmpty()) {\n            return false;\n        }\n\n        String[] dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n            return false;\n        }\n\n        int month = Integer.parseInt(dateParts[0]);\n        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        if (day < 1 || day > 31) {\n            return false;\n        }\n\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day > 30) {\n                return false;\n            }\n        } else if (month == 2) {\n            if (year % 4 == 0) {\n                if (day > 29) {\n                    return false;\n                }\n            } else {\n                if (day > 28) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.validDate(\"03-11-2000\")); // true\n        System.out.println(solution.validDate(\"15-01-2012\")); // false\n        System.out.println(solution.validDate(\"04-0-2040\")); // false\n        System.out.println(solution.validDate(\"06-04-2020\")); // true\n        System.out.println(solution.validDate(\"06/04/2020\")); // false\n    }\n}"}
{"task_id": "Java/124", "generation": "        // Check if the date string is empty\n        if(date.isEmpty()){\n            return false;\n        }\n\n        // Split the date string into day, month, and year\n        String[] parts = date.split(\"-\");\n        if(parts.length != 3){\n            return false;\n        }\n\n        // Check if the month is valid (between 1 and 12)\n        int month = Integer.parseInt(parts[0]);\n        if(month < 1 || month > 12){\n            return false;\n        }\n\n        // Check if the day is valid based on the month\n        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n        if(day < 1){\n            return false;\n        }\n\n        switch(month){\n            // Months with 31 days\n            case 1: case 3: case 5: case 7: case 8: case 10: case 12:\n                if(day > 31){\n                    return false;\n                }\n                break;\n            // Months with 30 days\n            case 4: case 6: case 9: case 11:\n                if(day > 30){\n                    return false;\n                }\n                break;\n            // February\n            case 2:\n                // Check for leap year\n                if(year % 4 == 0 && (year % 100 != 0 || year % 400 == 0)){\n                    if(day > 29){\n                        return false;\n                    }\n                } else {\n                    if(day > 28){\n                        return false;\n                    }\n                }\n                break;\n            default:\n                return false;\n        }\n\n        // Check if the year is valid (not negative)\n        if(year < 1){\n            return false;\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.validDate(\"03-11-2000\")); // true\n        System.out.println(solution.validDate(\"15-01-2012\")); // false\n        System.out.println(solution.validDate(\"04-0-2040\")); // false\n        System.out.println(solution.validDate(\"06-04-2020\")); // true\n        System.out.println(solution.validDate(\"06/04/2020\")); // false\n    }\n}"}
{"task_id": "Java/125", "generation": "        List<String> words = new ArrayList<>();\n        if (txt.contains(\" \")) {\n            words = Arrays.asList(txt.split(\" \"));\n        } else if (txt.contains(\",\")) {\n            words = Arrays.asList(txt.split(\",\"));\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c)) {\n                    int order = c - 'a';\n                    if (order % 2 != 0) {\n                        count++;\n                    }\n                }\n            }\n            return count;\n        }\n        return words;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.splitWords(\"Hello world!\")); // [\"Hello\", \"world!\"]\n        System.out.println(solution.splitWords(\"Hello,world!\")); // [\"Hello\", \"world!\"]\n        System.out.println(solution.splitWords(\"abcdef\")); // 3\n    }\n}"}
{"task_id": "Java/125", "generation": "        List<String> words = new ArrayList<>();\n        String[] splitBySpace = txt.split(\" \");\n        for (String word : splitBySpace) {\n            words.add(word);\n        }\n        \n        if (words.size() == 1 && !words.get(0).contains(\",\")) {\n            String[] splitByComma = txt.split(\",\");\n            for (String word : splitByComma) {\n                words.add(word);\n            }\n        }\n        \n        if (words.size() == 1) {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && (c - 'a') % 2 == 1) {\n                    count++;\n                }\n            }\n            return count;\n        }\n        \n        return words;\n    }\n}"}
{"task_id": "Java/125", "generation": "        List<String> wordsList = new ArrayList<>();\n        String[] words = txt.split(\"\\\\s+\");\n\n        if (words.length > 1) {\n            for (String word : words) {\n                wordsList.add(word);\n            }\n            return wordsList;\n        } else {\n            words = txt.split(\",\");\n            if (words.length > 1) {\n                for (String word : words) {\n                    wordsList.add(word);\n                }\n                return wordsList;\n            } else {\n                int count = 0;\n                for (char c : txt.toCharArray()) {\n                    if (Character.isLowerCase(c)) {\n                        int order = c - 'a';\n                        if (order % 2 == 1) {\n                            count++;\n                        }\n                    }\n                }\n                return count;\n            }\n        }\n    }\n}\n\nclass Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.splitWords(\"Hello world!\")); // [\"Hello\", \"world!\"]\n        System.out.println(solution.splitWords(\"Hello,world!\")); // [\"Hello\", \"world!\"]\n        System.out.println(solution.splitWords(\"abcdef\")); // 3\n    }\n}"}
{"task_id": "Java/125", "generation": "        List<String> result = new ArrayList<>();\n        if (txt.contains(\" \")) {\n            result = Arrays.asList(txt.split(\"\\\\s+\"));\n        } else if (txt.contains(\",\")) {\n            result = Arrays.asList(txt.split(\",\"));\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && ((c - 'a') % 2 == 1)) {\n                    count++;\n                }\n            }\n            return count;\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        // Test cases\n        System.out.println(solution.splitWords(\"Hello world!\")); // [\"Hello\", \"world!\"]\n        System.out.println(solution.splitWords(\"Hello,world!\")); // [\"Hello\", \"world!\"]\n        System.out.println(solution.splitWords(\"abcdef\")); // 3\n    }\n}"}
{"task_id": "Java/125", "generation": "        List<String> result = new ArrayList<>();\n        if (txt.contains(\" \")) {\n            result = Arrays.asList(txt.split(\" \"));\n        } else if (txt.contains(\",\")) {\n            result = Arrays.asList(txt.split(\",\"));\n        } else {\n            int count = 0;\n            for(char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && ((c - 'a') % 2 != 0)) {\n                    count++;\n                }\n            }\n            return count;\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.splitWords(\"Hello world!\")); // [\"Hello\", \"world!\"]\n        System.out.println(solution.splitWords(\"Hello,world!\")); // [\"Hello\", \"world!\"]\n        System.out.println(solution.splitWords(\"abcdef\")); // 3\n    }\n}"}
{"task_id": "Java/126", "generation": "        // Check if list is empty or has only one element\n        if (lst.size() <= 1) {\n            return true;\n        }\n\n        // Check for duplicates\n        Set<Integer> set = new HashSet<>();\n        for (int num : lst) {\n            if (!set.add(num)) {\n                return false;\n            }\n        }\n\n        // Check if list is sorted in ascending order\n        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i) > lst.get(i + 1)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}"}
{"task_id": "Java/126", "generation": "        // Check for duplicates\n        Set<Integer> set = new HashSet<>();\n        for (int num : lst) {\n            if (!set.add(num)) {\n                return false;\n            }\n        }\n        \n        // Check if the list is sorted in ascending order\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < lst.get(i - 1)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "Java/126", "generation": "        // Check if the list has more than one duplicate of the same number\n        Set<Integer> set = new HashSet<>();\n        for (int num : lst) {\n            if (!set.add(num)) {\n                return false;\n            }\n        }\n        \n        // Check if the list is sorted in ascending order\n        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i) > lst.get(i + 1)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "Java/126", "generation": "        Set<Integer> set = new HashSet<>();\n        int prev = Integer.MIN_VALUE;\n        \n        for (int num : lst) {\n            if (num < prev) {\n                return false;\n            }\n            \n            if (set.contains(num)) {\n                return false;\n            }\n            \n            set.add(num);\n            prev = num;\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "Java/126", "generation": "        int count = 0;\n        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i) > lst.get(i + 1)) {\n                return false;\n            }\n            if (lst.get(i).equals(lst.get(i + 1))) {\n                count++;\n                if (count > 1) {\n                    return false;\n                }\n            } else {\n                count = 0;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.isSorted(Arrays.asList(5))); // true\n        System.out.println(solution.isSorted(Arrays.asList(1, 2, 3, 4, 5))); // true\n        System.out.println(solution.isSorted(Arrays.asList(1, 3, 2, 4, 5))); // false\n        System.out.println(solution.isSorted(Arrays.asList(1, 2, 3, 4, 5, 6))); // true\n        System.out.println(solution.isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7))); // true\n        System.out.println(solution.isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7))); // false\n        System.out.println(solution.isSorted(Arrays.asList(1, 2, 2, 3, 3, 4))); // true\n        System.out.println(solution.isSorted(Arrays.asList(1, 2, 2, 2, 3, 4))); // false\n    }\n}"}
{"task_id": "Java/127", "generation": "        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n\n        int intersectionStart = Math.max(start1, start2);\n        int intersectionEnd = Math.min(end1, end2);\n\n        if (intersectionStart > intersectionEnd) {\n            return \"NO\";\n        }\n\n        int length = intersectionEnd - intersectionStart;\n\n        if (isPrime(length)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    // Helper function to check if a number is prime\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> interval1 = new ArrayList<>(Arrays.asList(1, 2));\n        List<Integer> interval2 = new ArrayList<>(Arrays.asList(2, 3));\n        System.out.println(solution.intersection(interval1, interval2)); // \"NO\"\n\n        interval1 = new ArrayList<>(Arrays.asList(-1, 1));\n        interval2 = new ArrayList<>(Arrays.asList(0, 4));\n        System.out.println(solution.intersection(interval1, interval2)); // \"NO\"\n\n        interval1 = new ArrayList<>(Arrays.asList(-3, -1));\n        interval2 = new ArrayList<>(Arrays.asList(-5, 5));\n        System.out.println(solution.intersection(interval1, interval2)); // \"YES\"\n    }\n}"}
{"task_id": "Java/127", "generation": "        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n        \n        int intersectStart = Math.max(start1, start2);\n        int intersectEnd = Math.min(end1, end2);\n        \n        if (intersectEnd < intersectStart) {\n            return \"NO\";\n        }\n        \n        int length = intersectEnd - intersectStart;\n        \n        if (isPrime(length)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n    \n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> interval1 = new ArrayList<>(Arrays.asList(1, 2));\n        List<Integer> interval2 = new ArrayList<>(Arrays.asList(2, 3));\n        System.out.println(solution.intersection(interval1, interval2)); // NO\n        \n        interval1 = new ArrayList<>(Arrays.asList(-1, 1));\n        interval2 = new ArrayList<>(Arrays.asList(0, 4));\n        System.out.println(solution.intersection(interval1, interval2)); // NO\n        \n        interval1 = new ArrayList<>(Arrays.asList(-3, -1));\n        interval2 = new ArrayList<>(Arrays.asList(-5, 5));\n        System.out.println(solution.intersection(interval1, interval2)); // YES\n    }\n}"}
{"task_id": "Java/127", "generation": "        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n        \n        int intersectionStart = Math.max(start1, start2);\n        int intersectionEnd = Math.min(end1, end2);\n        \n        if (intersectionStart > intersectionEnd) {\n            return \"NO\";\n        }\n        \n        int length = intersectionEnd - intersectionStart + 1;\n        \n        if (isPrime(length)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n    \n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> interval1 = new ArrayList<>(Arrays.asList(1, 2));\n        List<Integer> interval2 = new ArrayList<>(Arrays.asList(2, 3));\n        System.out.println(solution.intersection(interval1, interval2)); // \"NO\"\n        \n        interval1 = new ArrayList<>(Arrays.asList(-1, 1));\n        interval2 = new ArrayList<>(Arrays.asList(0, 4));\n        System.out.println(solution.intersection(interval1, interval2)); // \"NO\"\n        \n        interval1 = new ArrayList<>(Arrays.asList(-3, -1));\n        interval2 = new ArrayList<>(Arrays.asList(-5, 5));\n        System.out.println(solution.intersection(interval1, interval2)); // \"YES\"\n    }\n}"}
{"task_id": "Java/127", "generation": "        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n        \n        int startIntersection = Math.max(start1, start2);\n        int endIntersection = Math.min(end1, end2);\n        \n        if (startIntersection > endIntersection) {\n            return \"NO\";\n        }\n        \n        int length = endIntersection - startIntersection;\n        \n        if (isPrime(length)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n    \n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> interval1 = new ArrayList<>(Arrays.asList(1, 2));\n        List<Integer> interval2 = new ArrayList<>(Arrays.asList(2, 3));\n        System.out.println(solution.intersection(interval1, interval2)); // NO\n\n        interval1 = new ArrayList<>(Arrays.asList(-1, 1));\n        interval2 = new ArrayList<>(Arrays.asList(0, 4));\n        System.out.println(solution.intersection(interval1, interval2)); // NO\n\n        interval1 = new ArrayList<>(Arrays.asList(-3, -1));\n        interval2 = new ArrayList<>(Arrays.asList(-5, 5));\n        System.out.println(solution.intersection(interval1, interval2)); // YES\n    }\n}"}
{"task_id": "Java/127", "generation": "        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n        \n        int intersectionStart = Math.max(start1, start2);\n        int intersectionEnd = Math.min(end1, end2);\n        \n        if (intersectionStart > intersectionEnd) {\n            return \"NO\";\n        }\n        \n        int length = intersectionEnd - intersectionStart;\n        \n        if (isPrime(length)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n    \n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/128", "generation": "        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int product = 1;\n        int sum = 0;\n\n        for (int num : arr) {\n            product *= num == 0 ? 0 : num > 0 ? 1 : -1;\n            sum += Math.abs(num);\n        }\n\n        return Optional.of(product * sum);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.prodSigns(Arrays.asList(1, 2, 2, -4))); // Output: -9\n        System.out.println(solution.prodSigns(Arrays.asList(0, 1))); // Output: 0\n        System.out.println(solution.prodSigns(Arrays.asList())); // Output: None\n    }\n}"}
{"task_id": "Java/128", "generation": "        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int sum = 0;\n        int signProduct = 1;\n\n        for (int num : arr) {\n            if (num > 0) {\n                signProduct *= 1;\n            } else if (num < 0) {\n                signProduct *= -1;\n            }\n\n            sum += Math.abs(num);\n        }\n\n        return Optional.of(sum * signProduct);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.prodSigns(Arrays.asList(1, 2, 2, -4))); // Output: -9\n        System.out.println(solution.prodSigns(Arrays.asList(0, 1))); // Output: 0\n        System.out.println(solution.prodSigns(Arrays.asList())); // Output: None\n    }\n}"}
{"task_id": "Java/128", "generation": "        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int sum = 0;\n        int signProduct = 1;\n\n        for (int num : arr) {\n            signProduct *= Integer.signum(num);\n            sum += Math.abs(num);\n        }\n\n        return Optional.of(signProduct * sum);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.prodSigns(Arrays.asList(1, 2, 2, -4))); // Output: -9\n        System.out.println(solution.prodSigns(Arrays.asList(0, 1))); // Output: 0\n        System.out.println(solution.prodSigns(Arrays.asList())); // Output: Optional.empty\n    }\n}"}
{"task_id": "Java/128", "generation": "        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int product = 1;\n        int sum = 0;\n\n        for (int num : arr) {\n            if (num > 0) {\n                product *= 1;\n            } else if (num < 0) {\n                product *= -1;\n            }\n\n            sum += Math.abs(num);\n        }\n\n        return Optional.of(product * sum);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.prodSigns(Arrays.asList(1, 2, 2, -4))); // Output: -9\n        System.out.println(solution.prodSigns(Arrays.asList(0, 1))); // Output: 0\n        System.out.println(solution.prodSigns(Arrays.asList())); // Output: None\n    }\n}"}
{"task_id": "Java/128", "generation": "        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int product = 1;\n        int sum = 0;\n\n        for (int num : arr) {\n            if (num > 0) {\n                product *= 1;\n            } else if (num < 0) {\n                product *= -1;\n            }\n\n            sum += Math.abs(num);\n        }\n\n        return Optional.of(product * sum);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.prodSigns(Arrays.asList(1, 2, 2, -4))); // Output: -9\n        System.out.println(solution.prodSigns(Arrays.asList(0, 1))); // Output: 0\n        System.out.println(solution.prodSigns(Arrays.asList())); // Output: None\n    }\n}"}
{"task_id": "Java/129", "generation": "        // Initialize variables\n        int n = grid.size();\n        int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n        boolean[][] visited = new boolean[n][n];\n        List<Integer> path = new ArrayList<>();\n        \n        // Find the starting cell with minimum value\n        int minVal = Integer.MAX_VALUE;\n        int startX = 0;\n        int startY = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid.get(i).get(j) < minVal) {\n                    minVal = grid.get(i).get(j);\n                    startX = i;\n                    startY = j;\n                }\n            }\n        }\n        \n        // DFS to find the minimum path\n        dfs(grid, startX, startY, k, directions, visited, path);\n        \n        return path;\n    }\n    \n    private void dfs(List<List<Integer>> grid, int x, int y, int k, int[][] directions, boolean[][] visited, List<Integer> path) {\n        visited[x][y] = true;\n        path.add(grid.get(x).get(y));\n        \n        if (path.size() == k) {\n            return;\n        }\n        \n        for (int[] dir : directions) {\n            int newX = x + dir[0];\n            int newY = y + dir[1];\n            if (newX >= 0 && newX < grid.size() && newY >= 0 && newY < grid.get(0).size() && !visited[newX][newY]) {\n                dfs(grid, newX, newY, k, directions, visited, path);\n                if (path.size() == k) {\n                    return;\n                }\n            }\n        }\n    }\n}"}
{"task_id": "Java/129", "generation": "        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m][k + 1];\n        int[][][] prev = new int[n][m][k + 1];\n        int[] dx = {1, 0, -1, 0};\n        int[] dy = {0, 1, 0, -1};\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                Arrays.fill(dp[i][j], Integer.MAX_VALUE);\n            }\n        }\n\n        dp[0][0][1] = grid.get(0).get(0);\n        \n        for (int l = 2; l <= k; l++) {\n            for (int i = 0; i < n; i++) {\n                for (int j = 0; j < m; j++) {\n                    for (int dir = 0; dir < 4; dir++) {\n                        int ni = i + dx[dir];\n                        int nj = j + dy[dir];\n                        if (ni >= 0 && ni < n && nj >= 0 && nj < m) {\n                            if (dp[ni][nj][l - 1] + grid.get(i).get(j) < dp[i][j][l]) {\n                                dp[i][j][l] = dp[ni][nj][l - 1] + grid.get(i).get(j);\n                                prev[i][j][l] = dir;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        List<Integer> res = new ArrayList<>();\n        int x = 0, y = 0, len = k;\n        while (len > 0) {\n            res.add(grid.get(x).get(y));\n            int dir = prev[x][y][len];\n            x -= dx[dir];\n            y -= dy[dir];\n            len--;\n        }\n\n        return res;\n    }\n}"}
{"task_id": "Java/129", "generation": "        List<Integer> result = new ArrayList<>();\n        int n = grid.size();\n        int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n        PriorityQueue<Node> pq = new PriorityQueue<>((a, b) -> {\n            if (!a.path.equals(b.path)) {\n                return a.path.compareTo(b.path);\n            } else {\n                return a.val - b.val;\n            }\n        });\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                pq.offer(new Node(i, j, String.valueOf(grid.get(i).get(j))));\n            }\n        }\n\n        while (!pq.isEmpty()) {\n            Node curr = pq.poll();\n            if (curr.path.length() == k) {\n                for (char c : curr.path.toCharArray()) {\n                    result.add(c - '0');\n                }\n                break;\n            }\n\n            for (int[] dir : directions) {\n                int newRow = curr.row + dir[0];\n                int newCol = curr.col + dir[1];\n                if (newRow >= 0 && newRow < n && newCol >= 0 && newCol < n) {\n                    pq.offer(new Node(newRow, newCol, curr.path + grid.get(newRow).get(newCol)));\n                }\n            }\n        }\n\n        return result;\n    }\n\n    static class Node {\n        int row;\n        int col;\n        String path;\n        int val;\n\n        Node(int row, int col, String path) {\n            this.row = row;\n            this.col = col;\n            this.path = path;\n            this.val = Integer.parseInt(path);\n        }\n    }\n}"}
{"task_id": "Java/129", "generation": "        List<Integer> result = new ArrayList<>();\n\n        // Initialize a priority queue to store the cells in the grid\n        PriorityQueue<Cell> pq = new PriorityQueue<>((a, b) -> {\n            if (a.val.equals(b.val)) {\n                return a.compareTo(b);\n            }\n            return a.val - b.val;\n        });\n\n        int n = grid.size();\n        int m = grid.get(0).size();\n\n        // Add all cells to the priority queue\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                pq.add(new Cell(i, j, grid.get(i).get(j)));\n            }\n        }\n\n        // Initialize the directions to move in\n        int[] dx = {0, 1, 0, -1};\n        int[] dy = {1, 0, -1, 0};\n\n        // Create a visited set to keep track of visited cells\n        Set<Cell> visited = new HashSet<>();\n\n        while (!pq.isEmpty()) {\n            Cell curr = pq.poll();\n\n            List<Integer> path = new ArrayList<>();\n            path.add(curr.val);\n\n            visited.add(curr);\n\n            // Perform a BFS to find the minimum path of length k\n            Queue<Cell> queue = new LinkedList<>();\n            queue.offer(curr);\n\n            while (!queue.isEmpty()) {\n                Cell node = queue.poll();\n\n                if (path.size() == k) {\n                    result.addAll(path);\n                    return result;\n                }\n\n                for (int i = 0; i < 4; i++) {\n                    int nx = node.x + dx[i];\n                    int ny = node.y + dy[i];\n\n                    if (nx >= 0 && nx < n && ny >= 0 && ny < m) {\n                        Cell next = new Cell(nx, ny, grid.get(nx).get(ny));\n                        if (!visited.contains(next)) {\n                            queue.offer(next);\n                            visited.add(next);\n                            path.add(next.val);\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    static class Cell implements Comparable<Cell> {\n        Integer x;\n        Integer y;\n        Integer val;\n\n        public Cell(Integer x, Integer y, Integer val) {\n            this.x = x;\n            this.y = y;\n            this.val = val;\n        }\n\n        @Override\n        public int compareTo(Cell other) {\n            if (this.x.equals(other.x)) {\n                return this.y - other.y;\n            }\n            return this.x - other.x;\n        }\n\n        @Override\n        public boolean equals(Object obj) {\n            Cell other = (Cell) obj;\n            return this.x.equals(other.x) && this.y.equals(other.y);\n        }\n\n        @Override\n        public int hashCode() {\n            return Objects.hash(x, y);\n        }\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<List<Integer>> grid1 = Arrays.asList(\n            Arrays.asList(1, 2, 3),\n            Arrays.asList(4, 5, 6),\n            Arrays.asList(7, 8, 9)\n        );\n        int k1 = 3;\n        System.out.println(solution.minPath(grid1, k1)); // Output: [1, 2, 1]\n\n        List<List<Integer>> grid2 = Arrays.asList(\n            Arrays.asList(5, 9, 3),\n            Arrays.asList(4, 1, 6),\n            Arrays.asList(7, 8, 2)\n        );\n        int k2 = 1;\n        System.out.println(solution.minPath(grid2, k2)); // Output: [1]\n    }\n}"}
{"task_id": "Java/129", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        int n = grid.size();\n        int m = grid.get(0).size();\n        \n        int[][] visited = new int[n][m];\n        \n        int[] dx = {0, 0, 1, -1};\n        int[] dy = {1, -1, 0, 0};\n        \n        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> grid.get(a[0]).get(a[1]) - grid.get(b[0]).get(b[1]));\n        \n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                pq.offer(new int[]{i, j});\n            }\n        }\n        \n        while (!pq.isEmpty() && k > 0) {\n            int[] curr = pq.poll();\n            int x = curr[0];\n            int y = curr[1];\n            \n            if (visited[x][y] == 1) {\n                continue;\n            }\n            \n            visited[x][y] = 1;\n            result.add(grid.get(x).get(y));\n            \n            k--;\n            \n            for (int i = 0; i < 4; i++) {\n                int nx = x + dx[i];\n                int ny = y + dy[i];\n                \n                if (nx >= 0 && nx < n && ny >= 0 && ny < m && visited[nx][ny] == 0) {\n                    pq.offer(new int[]{nx, ny});\n                }\n            }\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/130", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        if (n == 0) {\n            return result;\n        }\n        \n        result.add(3);\n        \n        if (n == 1) {\n            return result;\n        }\n        \n        result.add(1);\n        result.add(3);\n        \n        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(1 + i / 2);\n            } else {\n                int val = result.get(i - 1) + result.get(i - 2) + result.get(i - 3);\n                result.add(val);\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.tri(3)); // [1, 3, 2, 8]\n        System.out.println(solution.tri(6)); // [1, 3, 2, 8, 4, 15, 9]\n    }\n}"}
{"task_id": "Java/130", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        if (n == 0) {\n            return result;\n        }\n        \n        result.add(3);\n        \n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(1 + i / 2);\n            } else {\n                result.add(result.get(i - 1) + result.get(i - 2) + result.get(i + 1));\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.tri(3)); // [3, 1, 2, 8]\n        System.out.println(solution.tri(5)); // [3, 1, 2, 8, 3, 19]\n    }\n}"}
{"task_id": "Java/130", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i <= n; i++) {\n            if (i == 1) {\n                result.add(3);\n            } else if (i % 2 == 0) {\n                result.add(1 + i / 2);\n            } else {\n                int sum = result.get(i - 1) + result.get(i - 2) + result.get(i + 1);\n                result.add(sum);\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the tri method\n        System.out.println(solution.tri(3)); // [3, 2, 1, 8]\n    }\n}"}
{"task_id": "Java/130", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        if (n == 0) {\n            return result;\n        }\n        \n        result.add(3);\n        if (n == 1) {\n            return result;\n        }\n        \n        result.add(1);\n        if (n == 2) {\n            return result;\n        }\n        \n        result.add(2);\n        \n        int a = 3;\n        int b = 1;\n        int c = 2;\n        \n        for (int i = 3; i <= n; i++) {\n            int sum = a + b + c;\n            result.add(sum);\n            \n            a = b;\n            b = c;\n            c = sum;\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test case 1\n        int n1 = 3;\n        List<Integer> result1 = solution.tri(n1);\n        System.out.println(\"tri(\" + n1 + \") = \" + result1);\n        \n        // Test case 2\n        int n2 = 5;\n        List<Integer> result2 = solution.tri(n2);\n        System.out.println(\"tri(\" + n2 + \") = \" + result2);\n    }\n}"}
{"task_id": "Java/130", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        if (n == 0) {\n            return result;\n        }\n        \n        result.add(3);\n        \n        if (n == 1) {\n            return result;\n        }\n        \n        result.add(1);\n        \n        if (n == 2) {\n            return result;\n        }\n        \n        result.add(2);\n        \n        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(1 + i / 2);\n            } else {\n                result.add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n            }\n        }\n        \n        return result;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.tri(3)); // [3, 1, 2, 8]\n        System.out.println(solution.tri(5)); // [3, 1, 2, 8, 4, 15]\n    }\n}"}
{"task_id": "Java/131", "generation": "        int product = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n            }\n            n = n / 10;\n        }\n        \n        if (product == 1) {\n            return 0;\n        } else {\n            return product;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.digits(1));   // 1\n        System.out.println(solution.digits(4));   // 0\n        System.out.println(solution.digits(235)); // 15\n    }\n}"}
{"task_id": "Java/131", "generation": "        int product = 1;\n        \n        while(n > 0) {\n            int digit = n % 10;\n            if(digit % 2 != 0) {\n                product *= digit;\n            }\n            n /= 10;\n        }\n        \n        if(product == 1) {\n            return 0;\n        }\n        \n        return product;\n    }\n\n    // Main function to test the solution\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.digits(1)); // 1\n        System.out.println(solution.digits(4)); // 0\n        System.out.println(solution.digits(235)); // 15\n    }\n}"}
{"task_id": "Java/131", "generation": "        int product = 1;\n        while(n > 0){\n            int digit = n % 10;\n            if(digit % 2 != 0){\n                product *= digit;\n            }\n            n /= 10;\n        }\n        \n        if(product == 1){\n            return 0;\n        }\n        \n        return product;\n    }\n}"}
{"task_id": "Java/131", "generation": "        int product = 1;\n        int digit;\n        \n        while(n > 0) {\n            digit = n % 10;\n            if(digit % 2 != 0) {\n                product *= digit;\n            }\n            n = n / 10;\n        }\n        \n        if(product == 1) {\n            return 0;\n        } else {\n            return product;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.digits(1)); // 1\n        System.out.println(solution.digits(4)); // 0\n        System.out.println(solution.digits(235)); // 15\n    }\n}"}
{"task_id": "Java/131", "generation": "        String numString = String.valueOf(n);\n        int product = 1;\n        \n        for (int i = 0; i < numString.length(); i++) {\n            int digit = Character.getNumericValue(numString.charAt(i));\n            if (digit % 2 != 0) {\n                product *= digit;\n            }\n        }\n        \n        if (product == 1) {\n            return 0;\n        }\n        \n        return product;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.digits(1)); // 1\n        System.out.println(solution.digits(4)); // 0\n        System.out.println(solution.digits(235)); // 15\n    }\n}"}
{"task_id": "Java/132", "generation": "        Stack<Character> stack = new Stack<>();\n        \n        for(char c : string.toCharArray()) {\n            if(c == '[') {\n                stack.push('[');\n            } else if(c == ']') {\n                if(stack.isEmpty() || stack.peek() != '[') {\n                    continue;\n                } else {\n                    return true;\n                }\n            }\n        }\n        \n        return false;\n    }\n}"}
{"task_id": "Java/132", "generation": "        Stack<Character> stack = new Stack<>();\n        \n        for(char c : string.toCharArray()) {\n            if(c == '[') {\n                stack.push(c);\n            } else if(c == ']') {\n                if(!stack.isEmpty() && stack.peek() == '[') {\n                    stack.pop();\n                } else {\n                    stack.push(c);\n                }\n            }\n        }\n        \n        return string.length() - stack.size() >= 2;\n    }\n}"}
{"task_id": "Java/132", "generation": "        Stack<Character> stack = new Stack<>();\n        \n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    stack.push(c);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        \n        return stack.size() < string.length();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.isNested(\"[[]]\")); // true\n        System.out.println(solution.isNested(\"[]]]]]]][[[[[]\")); // false\n        System.out.println(solution.isNested(\"[][]\")); // false\n        System.out.println(solution.isNested(\"[]\")); // false\n        System.out.println(solution.isNested(\"[[][]]\")); // true\n        System.out.println(solution.isNested(\"[[]][[\")); // true\n    }\n}"}
{"task_id": "Java/132", "generation": "        Stack<Character> stack = new Stack<>();\n        \n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (!stack.isEmpty() && stack.peek() == '[') {\n                    stack.pop();\n                }\n            }\n        }\n        \n        return stack.size() > 1;\n    }\n}"}
{"task_id": "Java/132", "generation": "        Stack<Character> stack = new Stack<>();\n        \n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (!stack.isEmpty() && stack.peek() == '[') {\n                    stack.pop();\n                } else {\n                    stack.push(c);\n                }\n            }\n        }\n        \n        return stack.size() < string.length();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.isNested(\"[[]]\")); // true\n        System.out.println(solution.isNested(\"[]]]]]]][[[[[]\")); // false\n        System.out.println(solution.isNested(\"[][]\")); // false\n        System.out.println(solution.isNested(\"[]\")); // false\n        System.out.println(solution.isNested(\"[[][]]\")); // true\n        System.out.println(solution.isNested(\"[[]][[\")); // true\n    }\n}"}
{"task_id": "Java/133", "generation": "        int sum = 0;\n        for (Double num : lst) {\n            sum += Math.ceil(num) * Math.ceil(num);\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/133", "generation": "        int sum = 0;\n        for (Double num : lst) {\n            sum += Math.ceil(num) * Math.ceil(num);\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Double> lst1 = new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0));\n        List<Double> lst2 = new ArrayList<>(Arrays.asList(1.0, 4.0, 9.0));\n        List<Double> lst3 = new ArrayList<>(Arrays.asList(1.0, 3.0, 5.0, 7.0));\n        List<Double> lst4 = new ArrayList<>(Arrays.asList(1.4, 4.2, 0.0));\n        List<Double> lst5 = new ArrayList<>(Arrays.asList(-2.4, 1.0, 1.0));\n\n        System.out.println(solution.sumSquares(lst1)); // Output should be 14\n        System.out.println(solution.sumSquares(lst2)); // Output should be 98\n        System.out.println(solution.sumSquares(lst3)); // Output should be 84\n        System.out.println(solution.sumSquares(lst4)); // Output should be 29\n        System.out.println(solution.sumSquares(lst5)); // Output should be 6\n    }\n}"}
{"task_id": "Java/133", "generation": "        int sum = 0;\n        for (double num : lst) {\n            int rounded = (int) Math.ceil(num);\n            sum += rounded * rounded;\n        }\n        return sum;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Double> lst1 = Arrays.asList(1.0, 2.0, 3.0);\n        System.out.println(solution.sumSquares(lst1)); // Output should be 14\n        \n        List<Double> lst2 = Arrays.asList(1.0, 4.0, 9.0);\n        System.out.println(solution.sumSquares(lst2)); // Output should be 98\n        \n        List<Double> lst3 = Arrays.asList(1.0, 3.0, 5.0, 7.0);\n        System.out.println(solution.sumSquares(lst3)); // Output should be 84\n        \n        List<Double> lst4 = Arrays.asList(1.4, 4.2, 0.0);\n        System.out.println(solution.sumSquares(lst4)); // Output should be 29\n        \n        List<Double> lst5 = Arrays.asList(-2.4, 1.0, 1.0);\n        System.out.println(solution.sumSquares(lst5)); // Output should be 6\n    }\n}"}
{"task_id": "Java/133", "generation": "        int sum = 0;\n        for (Double num : lst) {\n            sum += Math.ceil(num) * Math.ceil(num);\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Double> lst1 = Arrays.asList(1.0, 2.0, 3.0);\n        System.out.println(solution.sumSquares(lst1)); // Output: 14\n\n        List<Double> lst2 = Arrays.asList(1.0, 4.0, 9.0);\n        System.out.println(solution.sumSquares(lst2)); // Output: 98\n\n        List<Double> lst3 = Arrays.asList(1.0, 3.0, 5.0, 7.0);\n        System.out.println(solution.sumSquares(lst3)); // Output: 84\n\n        List<Double> lst4 = Arrays.asList(1.4, 4.2, 0.0);\n        System.out.println(solution.sumSquares(lst4)); // Output: 29\n\n        List<Double> lst5 = Arrays.asList(-2.4, 1.0, 1.0);\n        System.out.println(solution.sumSquares(lst5)); // Output: 6\n    }\n}"}
{"task_id": "Java/133", "generation": "        int sum = 0;\n        for (double num : lst) {\n            sum += Math.ceil(num) * Math.ceil(num);\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Double> lst1 = Arrays.asList(1.0, 2.0, 3.0);\n        System.out.println(solution.sumSquares(lst1)); // Output should be 14\n\n        List<Double> lst2 = Arrays.asList(1.0, 4.0, 9.0);\n        System.out.println(solution.sumSquares(lst2)); // Output should be 98\n\n        List<Double> lst3 = Arrays.asList(1.0, 3.0, 5.0, 7.0);\n        System.out.println(solution.sumSquares(lst3)); // Output should be 84\n\n        List<Double> lst4 = Arrays.asList(1.4, 4.2, 0.0);\n        System.out.println(solution.sumSquares(lst4)); // Output should be 29\n\n        List<Double> lst5 = Arrays.asList(-2.4, 1.0, 1.0);\n        System.out.println(solution.sumSquares(lst5)); // Output should be 6\n    }\n}"}
{"task_id": "Java/134", "generation": "        if (txt.isEmpty()) {\n            return false;\n        }\n\n        char lastChar = txt.charAt(txt.length() - 1);\n\n        if (!Character.isLetter(lastChar)) {\n            return false;\n        }\n\n        String[] words = txt.split(\" \");\n        String lastWord = words[words.length - 1];\n\n        if (lastWord.length() == 1 && Character.isLetter(lastWord.charAt(0))) {\n            return true;\n        }\n\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.checkIfLastCharIsALetter(\"apple pie\")); // false\n        System.out.println(solution.checkIfLastCharIsALetter(\"apple pi e\")); // true\n        System.out.println(solution.checkIfLastCharIsALetter(\"apple pi e \")); // false\n        System.out.println(solution.checkIfLastCharIsALetter(\"\")); // false\n    }\n}"}
{"task_id": "Java/134", "generation": "        if (txt.isEmpty()) {\n            return false;\n        }\n        \n        char lastChar = txt.charAt(txt.length() - 1);\n        if (!Character.isLetter(lastChar)) {\n            return false;\n        }\n        \n        String[] words = txt.split(\" \");\n        String lastWord = words[words.length - 1];\n        \n        return lastWord.length() == 1;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.checkIfLastCharIsALetter(\"apple pie\")); // false\n        System.out.println(solution.checkIfLastCharIsALetter(\"apple pi e\")); // true\n        System.out.println(solution.checkIfLastCharIsALetter(\"apple pi e \")); // false\n        System.out.println(solution.checkIfLastCharIsALetter(\"\")); // false\n    }\n}"}
{"task_id": "Java/134", "generation": "        if (txt.isEmpty()) {\n            return false;\n        }\n\n        char lastChar = txt.charAt(txt.length() - 1);\n\n        if (!Character.isLetter(lastChar)) {\n            return false;\n        }\n\n        String[] words = txt.split(\" \");\n        String lastWord = words[words.length - 1];\n\n        if (lastWord.length() == 1 && Character.isLetter(lastWord.charAt(0))) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.checkIfLastCharIsALetter(\"apple pie\")); // false\n        System.out.println(solution.checkIfLastCharIsALetter(\"apple pi e\")); // true\n        System.out.println(solution.checkIfLastCharIsALetter(\"apple pi e \")); // false\n        System.out.println(solution.checkIfLastCharIsALetter(\"\")); // false\n    }\n}"}
{"task_id": "Java/134", "generation": "        if (txt.isEmpty()) {\n            return false;\n        }\n        \n        char lastChar = txt.charAt(txt.length() - 1);\n        \n        if (!Character.isLetter(lastChar)) {\n            return false;\n        }\n        \n        String[] words = txt.split(\" \");\n        String lastWord = words[words.length - 1];\n        \n        return lastWord.length() == 1;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.checkIfLastCharIsALetter(\"apple pie\")); // false\n        System.out.println(solution.checkIfLastCharIsALetter(\"apple pi e\")); // true\n        System.out.println(solution.checkIfLastCharIsALetter(\"apple pi e \")); // false\n        System.out.println(solution.checkIfLastCharIsALetter(\"\")); // false\n    }\n}"}
{"task_id": "Java/134", "generation": "        if(txt.isEmpty()) {\n            return false;\n        }\n        \n        char lastChar = txt.charAt(txt.length()-1);\n\n        if(Character.isLetter(lastChar)) {\n            if(txt.length() > 1 && txt.charAt(txt.length()-2) == ' ') {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.checkIfLastCharIsALetter(\"apple pie\")); // false\n        System.out.println(solution.checkIfLastCharIsALetter(\"apple pi e\")); // true\n        System.out.println(solution.checkIfLastCharIsALetter(\"apple pi e \")); // false\n        System.out.println(solution.checkIfLastCharIsALetter(\"\")); // false\n    }\n}"}
{"task_id": "Java/135", "generation": "        int index = -1;\n\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                index = i - 1;\n            }\n        }\n\n        return index;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.canArrange(Arrays.asList(1, 2, 4, 3, 5))); // Output should be 3\n        System.out.println(solution.canArrange(Arrays.asList(1, 2, 3))); // Output should be -1\n    }\n}"}
{"task_id": "Java/135", "generation": "        int index = -1;\n        \n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                index = i - 1;\n            }\n        }\n        \n        return index;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> arr1 = Arrays.asList(1, 2, 4, 3, 5);\n        List<Integer> arr2 = Arrays.asList(1, 2, 3);\n\n        System.out.println(solution.canArrange(arr1)); // Output should be 3\n        System.out.println(solution.canArrange(arr2)); // Output should be -1\n    }\n}"}
{"task_id": "Java/135", "generation": "        int index = -1;\n        \n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                index = i - 1;\n            }\n        }\n        \n        return index;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.canArrange(Arrays.asList(1, 2, 4, 3, 5))); // Output should be 3\n        System.out.println(solution.canArrange(Arrays.asList(1, 2, 3))); // Output should be -1\n    }\n}"}
{"task_id": "Java/135", "generation": "        int largestIndex = -1;\n        \n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i-1)) {\n                largestIndex = i-1;\n            }\n        }\n        \n        return largestIndex;\n    }\n}"}
{"task_id": "Java/135", "generation": "        int index = -1;\n        \n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                index = i - 1;\n            }\n        }\n        \n        return index;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.canArrange(Arrays.asList(1, 2, 4, 3, 5))); // Output should be 3\n        System.out.println(solution.canArrange(Arrays.asList(1, 2, 3))); // Output should be -1\n    }\n}"}
{"task_id": "Java/136", "generation": "        List<Integer> negatives = new ArrayList<>();\n        List<Integer> positives = new ArrayList<>();\n        \n        for (int num : lst) {\n            if (num < 0) {\n                negatives.add(num);\n            } else if (num > 0) {\n                positives.add(num);\n            }\n        }\n        \n        Optional<Integer> largestNegative = negatives.isEmpty() ? Optional.empty() : Optional.of(Collections.max(negatives));\n        Optional<Integer> smallestPositive = positives.isEmpty() ? Optional.empty() : Optional.of(Collections.min(positives));\n        \n        return Arrays.asList(largestNegative, smallestPositive);\n    }\n}"}
{"task_id": "Java/136", "generation": "        List<Integer> negatives = new ArrayList<>();\n        List<Integer> positives = new ArrayList<>();\n        \n        for (Integer num : lst) {\n            if (num < 0) {\n                negatives.add(num);\n            } else if (num > 0) {\n                positives.add(num);\n            }\n        }\n        \n        Optional<Integer> largestNegative = negatives.isEmpty() ? Optional.empty() : Optional.of(Collections.max(negatives));\n        Optional<Integer> smallestPositive = positives.isEmpty() ? Optional.empty() : Optional.of(Collections.min(positives));\n        \n        List<Optional<Integer>> result = new ArrayList<>();\n        result.add(largestNegative);\n        result.add(smallestPositive);\n        \n        return result;\n    }\n}"}
{"task_id": "Java/136", "generation": "        List<Integer> negativeIntegers = new ArrayList<>();\n        List<Integer> positiveIntegers = new ArrayList<>();\n\n        for (Integer num : lst) {\n            if (num < 0) {\n                negativeIntegers.add(num);\n            } else if (num > 0) {\n                positiveIntegers.add(num);\n            }\n        }\n\n        Optional<Integer> largestNegative = negativeIntegers.stream().max(Integer::compare);\n        Optional<Integer> smallestPositive = positiveIntegers.stream().min(Integer::compare);\n\n        List<Optional<Integer>> result = new ArrayList<>();\n        result.add(largestNegative);\n        result.add(smallestPositive);\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)));  // (Optional.empty(), Optional.of(1))\n        System.out.println(solution.largestSmallestIntegers(Arrays.asList()));  // (Optional.empty(), Optional.empty())\n        System.out.println(solution.largestSmallestIntegers(Arrays.asList(0)));  // (Optional.empty(), Optional.empty())\n    }\n}"}
{"task_id": "Java/136", "generation": "        List<Integer> negativeIntegers = new ArrayList<>();\n        List<Integer> positiveIntegers = new ArrayList<>();\n        \n        for(Integer num : lst){\n            if(num < 0){\n                negativeIntegers.add(num);\n            } else if(num > 0){\n                positiveIntegers.add(num);\n            }\n        }\n        \n        Optional<Integer> largestNegative = negativeIntegers.stream().max(Comparator.naturalOrder());\n        Optional<Integer> smallestPositive = positiveIntegers.stream().min(Comparator.naturalOrder());\n        \n        return Arrays.asList(largestNegative, smallestPositive);\n    }\n}"}
{"task_id": "Java/136", "generation": "        List<Integer> negatives = new ArrayList<>();\n        List<Integer> positives = new ArrayList<>();\n        \n        for (Integer num : lst) {\n            if (num < 0) {\n                negatives.add(num);\n            } else if (num > 0) {\n                positives.add(num);\n            }\n        }\n        \n        Optional<Integer> largestNegative = negatives.stream()\n            .max(Comparator.naturalOrder());\n        \n        Optional<Integer> smallestPositive = positives.stream()\n            .min(Comparator.naturalOrder());\n        \n        List<Optional<Integer>> result = new ArrayList<>();\n        result.add(largestNegative);\n        result.add(smallestPositive);\n        \n        return result;\n    }\n}"}
{"task_id": "Java/137", "generation": "        // Check if both objects are integers\n        if (a instanceof Integer && b instanceof Integer) {\n            int intA = (int) a;\n            int intB = (int) b;\n            if (intA > intB) {\n                return Optional.of(intA);\n            } else if (intB > intA) {\n                return Optional.of(intB);\n            }\n        }\n\n        // Check if both objects are floats\n        if (a instanceof Float && b instanceof Float) {\n            float floatA = (float) a;\n            float floatB = (float) b;\n            if (floatA > floatB) {\n                return Optional.of(floatA);\n            } else if (floatB > floatA) {\n                return Optional.of(floatB);\n            }\n        }\n\n        // Check if both objects are strings representing real numbers\n        if (a instanceof String && b instanceof String) {\n            String strA = (String) a;\n            String strB = (String) b;\n            double doubleA = Double.parseDouble(strA.replace(\",\", \".\"));\n            double doubleB = Double.parseDouble(strB.replace(\",\", \".\"));\n\n            if (doubleA > doubleB) {\n                return Optional.of(a);\n            } else if (doubleB > doubleA) {\n                return Optional.of(b);\n            }\n        }\n\n        // Return empty Optional if values are equal\n        return Optional.empty();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.compareOne(1, 2.5)); // Optional[2.5]\n        System.out.println(solution.compareOne(1, \"2,3\")); // Optional[2.3]\n        System.out.println(solution.compareOne(\"5,1\", \"6\")); // Optional[6]\n        System.out.println(solution.compareOne(\"1\", 1)); // Optional.empty\n    }\n}"}
{"task_id": "Java/137", "generation": "        if (a instanceof Integer && b instanceof Integer) {\n            if ((int)a > (int)b) {\n                return Optional.of(a);\n            } else if ((int)a < (int)b) {\n                return Optional.of(b);\n            }\n        } else if (a instanceof Float && b instanceof Float) {\n            if ((float)a > (float)b) {\n                return Optional.of(a);\n            } else if ((float)a < (float)b) {\n                return Optional.of(b);\n            }\n        } else if (a instanceof String && b instanceof String) {\n            try {\n                float valA = Float.parseFloat(((String)a).replace(\",\", \".\"));\n                float valB = Float.parseFloat(((String)b).replace(\",\", \".\"));\n                if (valA > valB) {\n                    return Optional.of(a);\n                } else if (valA < valB) {\n                    return Optional.of(b);\n                }\n            } catch (NumberFormatException e) {\n                return Optional.empty();\n            }\n        }\n        \n        return Optional.empty();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.compareOne(1, 2.5)); // Optional[2.5]\n        System.out.println(solution.compareOne(1, \"2,3\")); // Optional[\"2,3\"]\n        System.out.println(solution.compareOne(\"5,1\", \"6\")); // Optional[\"6\"]\n        System.out.println(solution.compareOne(\"1\", 1)); // Optional.empty()\n    }\n}"}
{"task_id": "Java/137", "generation": "        if (a instanceof Integer && b instanceof Integer) {\n            if ((Integer) a > (Integer) b) {\n                return Optional.of(a);\n            } else if ((Integer) b > (Integer) a) {\n                return Optional.of(b);\n            }\n        } else if (a instanceof Float && b instanceof Float) {\n            if ((Float) a > (Float) b) {\n                return Optional.of(a);\n            } else if ((Float) b > (Float) a) {\n                return Optional.of(b);\n            }\n        } else if (a instanceof String && b instanceof String) {\n            String aStr = (String) a;\n            String bStr = (String) b;\n            if (isNumeric(aStr) && isNumeric(bStr)) {\n                double aNum = Double.parseDouble(aStr.replace(\",\", \".\"));\n                double bNum = Double.parseDouble(bStr.replace(\",\", \".\"));\n                if (aNum > bNum) {\n                    return Optional.of(a);\n                } else if (bNum > aNum) {\n                    return Optional.of(b);\n                }\n            }\n        }\n        return Optional.empty();\n    }\n\n    private boolean isNumeric(String str) {\n        if (str == null) {\n            return false;\n        }\n        try {\n            double d = Double.parseDouble(str.replace(\",\", \".\"));\n        } catch (NumberFormatException nfe) {\n            return false;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.compareOne(1, 2.5)); // Optional[2.5]\n        System.out.println(solution.compareOne(1, \"2,3\")); // Optional[2,3]\n        System.out.println(solution.compareOne(\"5,1\", \"6\")); // Optional[6]\n        System.out.println(solution.compareOne(\"1\", 1)); // Optional.empty()\n    }\n}"}
{"task_id": "Java/137", "generation": "        if (a instanceof Integer && b instanceof Integer) {\n            Integer intA = (Integer) a;\n            Integer intB = (Integer) b;\n            if (intA > intB) {\n                return Optional.of(intA);\n            } else if (intB > intA) {\n                return Optional.of(intB);\n            }\n        } else if (a instanceof Double && b instanceof Double) {\n            Double doubleA = (Double) a;\n            Double doubleB = (Double) b;\n            if (doubleA > doubleB) {\n                return Optional.of(doubleA);\n            } else if (doubleB > doubleA) {\n                return Optional.of(doubleB);\n            }\n        } else if (a instanceof String && b instanceof String) {\n            String strA = (String) a;\n            String strB = (String) b;\n            double numA = Double.parseDouble(strA.replace(\",\", \".\"));\n            double numB = Double.parseDouble(strB.replace(\",\", \".\"));\n            if (numA > numB) {\n                return Optional.of(strA);\n            } else if (numB > numA) {\n                return Optional.of(strB);\n            }\n        }\n        \n        return Optional.empty();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.compareOne(1, 2.5)); // Optional[2.5]\n        System.out.println(solution.compareOne(1, \"2,3\")); // Optional[2,3]\n        System.out.println(solution.compareOne(\"5,1\", \"6\")); // Optional[6]\n        System.out.println(solution.compareOne(\"1\", 1)); // Optional.empty()\n    }\n}"}
{"task_id": "Java/137", "generation": "        if (a instanceof Integer && b instanceof Integer) {\n            Integer intA = (Integer) a;\n            Integer intB = (Integer) b;\n            if (intA > intB) {\n                return Optional.of(intA);\n            } else if (intB > intA) {\n                return Optional.of(intB);\n            }\n        } else if ((a instanceof Integer && b instanceof Float) || (a instanceof Float && b instanceof Integer)\n                || (a instanceof Float && b instanceof Float)) {\n            Float floatA = Float.parseFloat(a.toString().replace(\",\", \".\"));\n            Float floatB = Float.parseFloat(b.toString().replace(\",\", \".\"));\n            if (floatA > floatB) {\n                return Optional.of(floatA);\n            } else if (floatB > floatA) {\n                return Optional.of(floatB);\n            }\n        } else if (a instanceof String && b instanceof String) {\n            String strA = a.toString().replace(\",\", \".\");\n            String strB = b.toString().replace(\",\", \".\");\n            if (strA.compareTo(strB) > 0) {\n                return Optional.of(strA);\n            } else if (strB.compareTo(strA) > 0) {\n                return Optional.of(strB);\n            }\n        }\n        return Optional.empty();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.compareOne(1, 2.5)); // Optional[2.5]\n        System.out.println(solution.compareOne(1, \"2,3\")); // Optional[2,3]\n        System.out.println(solution.compareOne(\"5,1\", \"6\")); // Optional[6]\n        System.out.println(solution.compareOne(\"1\", 1)); // Optional.empty()\n    }\n}"}
{"task_id": "Java/138", "generation": "        // Check if n is less than 8 or odd, it cannot be written as the sum of 4 positive even numbers\n        if (n < 8 || n % 2 != 0) {\n            return false;\n        }\n\n        // Check if n can be written as the sum of 4 positive even numbers\n        for (int i = 1; i <= n / 2; i++) {\n            for (int j = i; j <= n / 2; j++) {\n                for (int k = j; k <= n / 2; k++) {\n                    int l = n - i - j - k;\n                    if (l % 2 == 0 && l >= k) {\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.isEqualToSumEven(4)); // false\n        System.out.println(solution.isEqualToSumEven(6)); // false\n        System.out.println(solution.isEqualToSumEven(8)); // true\n    }\n}"}
{"task_id": "Java/138", "generation": "        // Check if the number is less than 8 or odd, it cannot be written as the sum of 4 positive even numbers\n        if (n < 8 || n % 2 != 0) {\n            return false;\n        }\n        \n        // Check if the number can be represented as the sum of 4 positive even numbers\n        for (int i = 2; i <= n / 2; i += 2) {\n            for (int j = 2; j <= n / 2; j += 2) {\n                for (int k = 2; k <= n / 2; k += 2) {\n                    int l = n - i - j - k;\n                    if (l % 2 == 0 && l >= 2) {\n                        return true;\n                    }\n                }\n            }\n        }\n        \n        return false;\n    }\n}"}
{"task_id": "Java/138", "generation": "        // Check if the number is less than 8 or odd\n        if (n < 8 || n % 2 != 0) {\n            return false;\n        }\n        \n        // Check if the number can be expressed as the sum of 4 positive even numbers\n        for (int i = 2; i <= n / 2; i += 2) {\n            for (int j = 2; j <= n / 2; j += 2) {\n                for (int k = 2; k <= n / 2; k += 2) {\n                    for (int l = 2; l <= n / 2; l += 2) {\n                        if (i + j + k + l == n) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n        \n        return false;\n    }\n}\n\nclass Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.isEqualToSumEven(4)); // false\n        System.out.println(solution.isEqualToSumEven(6)); // false\n        System.out.println(solution.isEqualToSumEven(8)); // true\n    }\n}"}
{"task_id": "Java/138", "generation": "        // Check if n is less than 8 or odd\n        if (n < 8 || n % 2 != 0) {\n            return false;\n        }\n        \n        // Check if n can be represented as the sum of 4 positive even numbers\n        for (int i = 1; i <= n/2; i++) {\n            for (int j = i; j <= n/2; j++) {\n                for (int k = j; k <= n/2; k++) {\n                    int l = n - i - j - k;\n                    if (l % 2 == 0 && l >= k) {\n                        return true;\n                    }\n                }\n            }\n        }\n        \n        return false;\n    }\n}"}
{"task_id": "Java/138", "generation": "        // Base case: n is less than 8, it is not possible to express it as sum of 4 positive even numbers\n        if (n < 8) {\n            return false;\n        }\n        \n        // Check if n can be expressed as the sum of 4 positive even numbers\n        for (int i = 2; i <= n / 4; i += 2) {\n            int remaining = n - (i * 4);\n            if (remaining % 2 == 0) {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n}"}
{"task_id": "Java/139", "generation": "        long result = 1;\n        \n        for(int i = n; i > 0; i--){\n            long factorial = 1;\n            for(int j = i; j > 0; j--){\n                factorial *= j;\n            }\n            result *= factorial;\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.specialFactorial(4)); // Output should be 288\n        System.out.println(solution.specialFactorial(5)); // Output should be 34560\n    }\n}"}
{"task_id": "Java/139", "generation": "        long result = 1;\n        \n        for (int i = 1; i <= n; i++) {\n            long factorial = 1;\n            for (int j = 1; j <= i; j++) {\n                factorial *= j;\n            }\n            result *= factorial;\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the specialFactorial method\n        System.out.println(solution.specialFactorial(4)); // Output should be 288\n    }\n}"}
{"task_id": "Java/139", "generation": "        long result = 1;\n        long factorial = 1;\n\n        for (int i = n; i > 0; i--) {\n            factorial *= i;\n            result *= factorial;\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.specialFactorial(4)); // 288\n    }\n}"}
{"task_id": "Java/139", "generation": "        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            long factorial = 1;\n            for (int j = 1; j <= i; j++) {\n                factorial *= j;\n            }\n            result *= factorial;\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the specialFactorial method\n        int n = 4;\n        System.out.println(solution.specialFactorial(n)); // Output should be 288\n    }\n}"}
{"task_id": "Java/139", "generation": "        long result = 1;\n        \n        for (int i = n; i > 0; i--) {\n            long factorial = 1;\n            for (int j = i; j > 0; j--) {\n                factorial *= j;\n            }\n            result *= factorial;\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the specialFactorial method\n        System.out.println(solution.specialFactorial(4)); // Output should be 288\n    }\n}"}
{"task_id": "Java/140", "generation": "        StringBuilder sb = new StringBuilder();\n        int consecutiveSpaces = 0;\n\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n\n            if (c == ' ') {\n                consecutiveSpaces++;\n                if (consecutiveSpaces > 2) {\n                    sb.append(\"-\");\n                } else {\n                    sb.append(\"_\");\n                }\n            } else {\n                sb.append(c);\n                consecutiveSpaces = 0;\n            }\n        }\n\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.fixSpaces(\"Example\")); // \"Example\"\n        System.out.println(solution.fixSpaces(\"Example 1\")); // \"Example_1\"\n        System.out.println(solution.fixSpaces(\" Example 2\")); // \"_Example_2\"\n        System.out.println(solution.fixSpaces(\" Example   3\")); // \"_Example-3\"\n    }\n}"}
{"task_id": "Java/140", "generation": "        StringBuilder sb = new StringBuilder();\n        int consecutiveSpaces = 0;\n        \n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            \n            if (c == ' ') {\n                consecutiveSpaces++;\n                if (consecutiveSpaces > 2) {\n                    sb.append(\"-\");\n                } else {\n                    sb.append(\"_\");\n                }\n            } else {\n                sb.append(c);\n                consecutiveSpaces = 0;\n            }\n        }\n        \n        return sb.toString();\n    }\n}"}
{"task_id": "Java/140", "generation": "        StringBuilder sb = new StringBuilder();\n        \n        int count = 0;\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c == ' ') {\n                count++;\n                if (count <= 2) {\n                    sb.append('_');\n                } else {\n                    sb.append('-');\n                }\n            } else {\n                count = 0;\n                sb.append(c);\n            }\n        }\n        \n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.fixSpaces(\"Example\")); // \"Example\"\n        System.out.println(solution.fixSpaces(\"Example 1\")); // \"Example_1\"\n        System.out.println(solution.fixSpaces(\" Example 2\")); // \"_Example_2\"\n        System.out.println(solution.fixSpaces(\" Example   3\")); // \"_Example-3\"\n    }\n}"}
{"task_id": "Java/140", "generation": "        StringBuilder result = new StringBuilder();\n\n        boolean isSpace = false;\n        int count = 0;\n\n        for (char c : text.toCharArray()) {\n            if (c == ' ') {\n                if (!isSpace) {\n                    result.append('_');\n                    isSpace = true;\n                }\n                count++;\n            } else {\n                if (isSpace) {\n                    if (count > 2) {\n                        result.append('-');\n                    } else {\n                        result.append('_');\n                    }\n                    isSpace = false;\n                    count = 0;\n                }\n                result.append(c);\n            }\n        }\n\n        if (isSpace) {\n            if (count > 2) {\n                result.append('-');\n            } else {\n                result.append('_');\n            }\n        }\n\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.fixSpaces(\"Example\")); // Output: Example\n        System.out.println(solution.fixSpaces(\"Example 1\")); // Output: Example_1\n        System.out.println(solution.fixSpaces(\" Example 2\")); // Output: _Example_2\n        System.out.println(solution.fixSpaces(\" Example   3\")); // Output: _Example-3\n    }\n}"}
{"task_id": "Java/140", "generation": "        StringBuilder sb = new StringBuilder();\n        \n        int consecutiveSpaces = 0;\n        \n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c == ' ') {\n                consecutiveSpaces++;\n                if (consecutiveSpaces > 2) {\n                    sb.append(\"-\");\n                    while (i < text.length() && text.charAt(i) == ' ') {\n                        i++;\n                    }\n                    i--;\n                } else {\n                    sb.append(\"_\");\n                }\n            } else {\n                sb.append(c);\n                consecutiveSpaces = 0;\n            }\n        }\n        \n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.fixSpaces(\"Example\")); // Output: Example\n        System.out.println(solution.fixSpaces(\"Example 1\")); // Output: Example_1\n        System.out.println(solution.fixSpaces(\" Example 2\")); // Output: _Example_2\n        System.out.println(solution.fixSpaces(\" Example   3\")); // Output: _Example-3\n    }\n}"}
{"task_id": "Java/141", "generation": "        // Check if the filename contains more than three digits\n        int digitCount = 0;\n        for (char c : file_name.toCharArray()) {\n            if (Character.isDigit(c)) {\n                digitCount++;\n            }\n        }\n        if (digitCount > 3) {\n            return \"No\";\n        }\n\n        // Check if the filename contains exactly one dot\n        int dotCount = 0;\n        for (char c : file_name.toCharArray()) {\n            if (c == '.') {\n                dotCount++;\n            }\n        }\n        if (dotCount != 1) {\n            return \"No\";\n        }\n\n        // Split the filename into two parts based on the dot\n        String[] parts = file_name.split(\"\\\\.\");\n        if (parts.length != 2) {\n            return \"No\";\n        }\n\n        // Check if the substring before the dot starts with a letter\n        String beforeDot = parts[0];\n        if (beforeDot.isEmpty() || !Character.isLetter(beforeDot.charAt(0))) {\n            return \"No\";\n        }\n\n        // Check if the substring after the dot is one of [\"txt\", \"exe\", \"dll\"]\n        String afterDot = parts[1];\n        List<String> validExtensions = Arrays.asList(\"txt\", \"exe\", \"dll\");\n        if (!validExtensions.contains(afterDot)) {\n            return \"No\";\n        }\n\n        return \"Yes\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.filenameCheck(\"example.txt\")); // Yes\n        System.out.println(solution.filenameCheck(\"1example.dll\")); // No\n    }\n}"}
{"task_id": "Java/141", "generation": "        // Check if the file name contains more than three digits\n        int digitCount = 0;\n        for (char c : file_name.toCharArray()) {\n            if (Character.isDigit(c)) {\n                digitCount++;\n            }\n        }\n        if (digitCount > 3) {\n            return \"No\";\n        }\n\n        // Check if the file name contains exactly one dot\n        int dotCount = 0;\n        for (char c : file_name.toCharArray()) {\n            if (c == '.') {\n                dotCount++;\n            }\n        }\n        if (dotCount != 1) {\n            return \"No\";\n        }\n\n        // Split the file name into two parts before and after the dot\n        String[] parts = file_name.split(\"\\\\.\");\n        if (parts.length != 2) {\n            return \"No\";\n        }\n\n        // Check if the substring before the dot starts with a letter\n        if (!Character.isLetter(parts[0].charAt(0))) {\n            return \"No\";\n        }\n\n        // Check if the substring after the dot is \"txt\", \"exe\", or \"dll\"\n        if (!parts[1].equals(\"txt\") && !parts[1].equals(\"exe\") && !parts[1].equals(\"dll\")) {\n            return \"No\";\n        }\n\n        return \"Yes\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.filenameCheck(\"example.txt\")); // => \"Yes\"\n        System.out.println(solution.filenameCheck(\"1example.dll\")); // => \"No\"\n    }\n}"}
{"task_id": "Java/141", "generation": "        // Check for more than three digits in the file's name\n        int digitCount = 0;\n        for (char c : file_name.toCharArray()) {\n            if (Character.isDigit(c)) {\n                digitCount++;\n            }\n        }\n        if (digitCount > 3) {\n            return \"No\";\n        }\n        \n        // Check for exactly one dot '.'\n        if (file_name.indexOf('.') == -1 || file_name.indexOf('.') != file_name.lastIndexOf('.')) {\n            return \"No\";\n        }\n        \n        // Check the substring before the dot\n        String[] splitFileName = file_name.split(\"\\\\.\");\n        if (splitFileName.length != 2 || splitFileName[0].isEmpty() || !Character.isLetter(splitFileName[0].charAt(0))) {\n            return \"No\";\n        }\n        \n        // Check the substring after the dot\n        String[] validExtensions = {\"txt\", \"exe\", \"dll\"};\n        if (!Arrays.asList(validExtensions).contains(splitFileName[1])) {\n            return \"No\";\n        }\n        \n        return \"Yes\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.filenameCheck(\"example.txt\")); // => \"Yes\"\n        System.out.println(solution.filenameCheck(\"1example.dll\")); // => \"No\"\n    }\n}"}
{"task_id": "Java/141", "generation": "        // Check if the file name has more than 3 digits\n        int digitCount = 0;\n        for (char c : file_name.toCharArray()) {\n            if (Character.isDigit(c)) {\n                digitCount++;\n            }\n        }\n        \n        if (digitCount > 3) {\n            return \"No\";\n        }\n        \n        // Check if the file name contains exactly one dot\n        int dotCount = 0;\n        for (char c : file_name.toCharArray()) {\n            if (c == '.') {\n                dotCount++;\n            }\n        }\n        \n        if (dotCount != 1) {\n            return \"No\";\n        }\n        \n        // Split the file name into two parts based on the dot\n        String[] parts = file_name.split(\"\\\\.\");\n        \n        if (parts.length != 2) {\n            return \"No\";\n        }\n        \n        // Check if the substring before the dot starts with a letter\n        char firstChar = parts[0].charAt(0);\n        if (!(firstChar >= 'a' && firstChar <= 'z') && !(firstChar >= 'A' && firstChar <= 'Z')) {\n            return \"No\";\n        }\n        \n        // Check if the substring after the dot is one of [\"txt\", \"exe\", \"dll\"]\n        String extension = parts[1];\n        if (!extension.equals(\"txt\") && !extension.equals(\"exe\") && !extension.equals(\"dll\")) {\n            return \"No\";\n        }\n        \n        return \"Yes\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.filenameCheck(\"example.txt\")); // Output: Yes\n        System.out.println(solution.filenameCheck(\"1example.dll\")); // Output: No\n    }\n}"}
{"task_id": "Java/141", "generation": "        // Check if the file name contains only one dot\n        if (file_name.indexOf('.') == file_name.lastIndexOf('.') && file_name.indexOf('.') != -1) {\n            // Split the file name into two parts based on the dot\n            String[] parts = file_name.split(\"\\\\.\");\n            // Check if the parts are valid\n            if (parts.length == 2 && isValidBeforeDot(parts[0]) && isValidAfterDot(parts[1])) {\n                return \"Yes\";\n            }\n        }\n        return \"No\";\n    }\n\n    // Helper method to check if the substring before the dot is valid\n    private boolean isValidBeforeDot(String part) {\n        // Check if the part is not empty and starts with a letter\n        return !part.isEmpty() && Character.isLetter(part.charAt(0));\n    }\n\n    // Helper method to check if the substring after the dot is valid\n    private boolean isValidAfterDot(String part) {\n        // Check if the part is one of [\"txt\", \"exe\", \"dll\"]\n        List<String> validExtensions = Arrays.asList(\"txt\", \"exe\", \"dll\");\n        return validExtensions.contains(part) && countDigits(part) <= 3;\n    }\n\n    // Helper method to count the number of digits in a string\n    private int countDigits(String str) {\n        int count = 0;\n        for (char c : str.toCharArray()) {\n            if (Character.isDigit(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.filenameCheck(\"example.txt\")); // \"Yes\"\n        System.out.println(solution.filenameCheck(\"1example.dll\")); // \"No\"\n    }\n}"}
{"task_id": "Java/142", "generation": "        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n            } else {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> lst1 = Arrays.asList(1, 2, 3);\n        List<Integer> lst2 = new ArrayList<>();\n        List<Integer> lst3 = Arrays.asList(-1, -5, 2, -1, -5);\n\n        System.out.println(solution.sumSquares(lst1)); // Output: 6\n        System.out.println(solution.sumSquares(lst2)); // Output: 0\n        System.out.println(solution.sumSquares(lst3)); // Output: -126\n    }\n}"}
{"task_id": "Java/142", "generation": "        int sum = 0;\n\n        for (int i = 0; i < lst.size(); i++) {\n            if ((i + 1) % 3 == 0) {\n                sum += lst.get(i) * lst.get(i); // Square the integer\n            } else if ((i + 1) % 4 == 0 && (i + 1) % 3 != 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i); // Cube the integer\n            } else {\n                sum += lst.get(i); // Add the integer as it is\n            }\n        }\n\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> lst1 = new ArrayList<>(Arrays.asList(1, 2, 3));\n        System.out.println(solution.sumSquares(lst1)); // Output: 6\n\n        List<Integer> lst2 = new ArrayList<>();\n        System.out.println(solution.sumSquares(lst2)); // Output: 0\n\n        List<Integer> lst3 = new ArrayList<>(Arrays.asList(-1, -5, 2, -1, -5));\n        System.out.println(solution.sumSquares(lst3)); // Output: -126\n    }\n}"}
{"task_id": "Java/142", "generation": "        int sum = 0;\n        \n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                lst.set(i, lst.get(i) * lst.get(i)); // square the integer entry\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                lst.set(i, lst.get(i) * lst.get(i) * lst.get(i)); // cube the integer entry\n            }\n            sum += lst.get(i);\n        }\n        \n        return sum;\n    }\n}"}
{"task_id": "Java/142", "generation": "        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i); // Square the integer entry if index is a multiple of 3\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i); // Cube the integer entry if index is a multiple of 4 and not a multiple of 3\n            } else {\n                sum += lst.get(i); // Add the integer entry as is\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> lst1 = new ArrayList<>(Arrays.asList(1, 2, 3));\n        System.out.println(solution.sumSquares(lst1)); // Output: 6\n\n        List<Integer> lst2 = new ArrayList<>();\n        System.out.println(solution.sumSquares(lst2)); // Output: 0\n\n        List<Integer> lst3 = new ArrayList<>(Arrays.asList(-1, -5, 2, -1, -5));\n        System.out.println(solution.sumSquares(lst3)); // Output: -126\n    }\n}"}
{"task_id": "Java/142", "generation": "        int sum = 0;\n        \n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n            }\n        }\n        \n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> lst1 = new ArrayList<>(Arrays.asList(1, 2, 3));\n        List<Integer> lst2 = new ArrayList<>();\n        List<Integer> lst3 = new ArrayList<>(Arrays.asList(-1, -5, 2, -1, -5));\n\n        System.out.println(solution.sumSquares(lst1)); // Output: 6\n        System.out.println(solution.sumSquares(lst2)); // Output: 0\n        System.out.println(solution.sumSquares(lst3)); // Output: -126\n    }\n}"}
{"task_id": "Java/143", "generation": "        // Create a list to store the words with prime lengths\n        List<String> primeLengthWords = new ArrayList<>();\n\n        // Split the sentence into words\n        String[] words = sentence.split(\" \");\n\n        // Iterate through each word and check if its length is a prime number\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                primeLengthWords.add(word);\n            }\n        }\n\n        // Join the prime length words to form the output string\n        return String.join(\" \", primeLengthWords);\n    }\n\n    /**\n     * Function to check if a number is prime\n     */\n    public boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.wordsInSentence(\"This is a test\")); // Output: \"is\"\n        System.out.println(solution.wordsInSentence(\"lets go for swimming\")); // Output: \"go for\"\n    }\n}"}
{"task_id": "Java/143", "generation": "        String[] words = sentence.split(\" \");\n        StringBuilder result = new StringBuilder();\n\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                result.append(word).append(\" \");\n            }\n        }\n\n        // Remove the extra space at the end\n        result.deleteCharAt(result.length() - 1);\n\n        return result.toString();\n    }\n\n    // Helper function to check if a number is prime\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        if (num <= 3) {\n            return true;\n        }\n        if (num % 2 == 0 || num % 3 == 0) {\n            return false;\n        }\n\n        for (int i = 5; i * i <= num; i += 6) {\n            if (num % i == 0 || num % (i + 2) == 0) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.wordsInSentence(\"This is a test\")); // Output: \"is\"\n        System.out.println(solution.wordsInSentence(\"lets go for swimming\")); // Output: \"go for\"\n    }\n}"}
{"task_id": "Java/143", "generation": "        String[] words = sentence.split(\" \");\n        List<String> primeWords = new ArrayList<>();\n\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                primeWords.add(word);\n            }\n        }\n\n        return String.join(\" \", primeWords);\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Example 1\n        String sentence1 = \"This is a test\";\n        System.out.println(solution.wordsInSentence(sentence1)); // Output: \"is\"\n\n        // Example 2\n        String sentence2 = \"lets go for swimming\";\n        System.out.println(solution.wordsInSentence(sentence2)); // Output: \"go for\"\n    }\n}"}
{"task_id": "Java/143", "generation": "        String[] words = sentence.split(\" \");\n        List<String> primeWords = new ArrayList<>();\n\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                primeWords.add(word);\n            }\n        }\n\n        return String.join(\" \", primeWords);\n    }\n\n    public boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.wordsInSentence(\"This is a test\")); // Output: \"is\"\n        System.out.println(solution.wordsInSentence(\"lets go for swimming\")); // Output: \"go for\"\n    }\n}"}
{"task_id": "Java/143", "generation": "        // Create a list to store words with prime lengths\n        List<String> primeLengthWords = new ArrayList<>();\n\n        // Split the sentence into words\n        String[] words = sentence.split(\" \");\n\n        // Check if the length of each word is prime, if it is, add it to the list\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                primeLengthWords.add(word);\n            }\n        }\n\n        // Join the prime length words into a single string\n        return String.join(\" \", primeLengthWords);\n    }\n\n    // Function to check if a number is prime\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.wordsInSentence(\"This is a test\")); // Output: \"is\"\n        System.out.println(solution.wordsInSentence(\"lets go for swimming\")); // Output: \"go for\"\n    }\n}"}
{"task_id": "Java/144", "generation": "        // Convert the fractions to integers\n        int numeratorX = Integer.parseInt(x.split(\"/\")[0]);\n        int denominatorX = Integer.parseInt(x.split(\"/\")[1]);\n        int numeratorN = Integer.parseInt(n.split(\"/\")[0]);\n        int denominatorN = Integer.parseInt(n.split(\"/\")[1);\n\n        // Calculate the product of x and n\n        int productNumerator = numeratorX * numeratorN;\n        int productDenominator = denominatorX * denominatorN;\n\n        // Check if the product is a whole number\n        return productDenominator % productNumerator == 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.simplify(\"1/5\", \"5/1\")); // true\n        System.out.println(solution.simplify(\"1/6\", \"2/1\")); // false\n        System.out.println(solution.simplify(\"7/10\", \"10/2\")); // false\n    }\n}"}
{"task_id": "Java/144", "generation": "        // Parse the fractions\n        String[] xParts = x.split(\"/\");\n        String[] nParts = n.split(\"/\");\n        \n        int xNumerator = Integer.parseInt(xParts[0]);\n        int xDenominator = Integer.parseInt(xParts[1]);\n        \n        int nNumerator = Integer.parseInt(nParts[0]);\n        int nDenominator = Integer.parseInt(nParts[1]);\n        \n        // Calculate the product of x and n\n        int productNumerator = xNumerator * nNumerator;\n        int productDenominator = xDenominator * nDenominator;\n        \n        // Check if the product is a whole number\n        if (productDenominator % productNumerator == 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.simplify(\"1/5\", \"5/1\")); // true\n        System.out.println(solution.simplify(\"1/6\", \"2/1\")); // false\n        System.out.println(solution.simplify(\"7/10\", \"10/2\")); // false\n    }\n}"}
{"task_id": "Java/144", "generation": "        // Parse the fractions x and n\n        String[] xParts = x.split(\"/\");\n        String[] nParts = n.split(\"/\");\n\n        int xNumerator = Integer.parseInt(xParts[0]);\n        int xDenominator = Integer.parseInt(xParts[1]);\n        int nNumerator = Integer.parseInt(nParts[0]);\n        int nDenominator = Integer.parseInt(nParts[1]);\n\n        // Calculate the product of x and n\n        int productNumerator = xNumerator * nNumerator;\n        int productDenominator = xDenominator * nDenominator;\n\n        // Check if the product is a whole number\n        return productNumerator % productDenominator == 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.simplify(\"1/5\", \"5/1\")); // true\n        System.out.println(solution.simplify(\"1/6\", \"2/1\")); // false\n        System.out.println(solution.simplify(\"7/10\", \"10/2\")); // false\n    }\n}"}
{"task_id": "Java/144", "generation": "        String[] xArr = x.split(\"/\");\n        String[] nArr = n.split(\"/\");\n        \n        int xNumerator = Integer.parseInt(xArr[0]);\n        int xDenominator = Integer.parseInt(xArr[1]);\n        int nNumerator = Integer.parseInt(nArr[0]);\n        int nDenominator = Integer.parseInt(nArr[1]);\n        \n        int resultNumerator = xNumerator * nNumerator;\n        int resultDenominator = xDenominator * nDenominator;\n        \n        return resultDenominator % resultNumerator == 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.simplify(\"1/5\", \"5/1\")); // true\n        System.out.println(solution.simplify(\"1/6\", \"2/1\")); // false\n        System.out.println(solution.simplify(\"7/10\", \"10/2\")); // false\n    }\n}"}
{"task_id": "Java/144", "generation": "        String[] fraction1 = x.split(\"/\");\n        String[] fraction2 = n.split(\"/\");\n\n        int num1 = Integer.parseInt(fraction1[0]);\n        int den1 = Integer.parseInt(fraction1[1]);\n\n        int num2 = Integer.parseInt(fraction2[0]);\n        int den2 = Integer.parseInt(fraction2[1]);\n\n        int resultNum = num1 * num2;\n        int resultDen = den1 * den2;\n\n        return resultDen % resultNum == 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.simplify(\"1/5\", \"5/1\")); // true\n        System.out.println(solution.simplify(\"1/6\", \"2/1\")); // false\n        System.out.println(solution.simplify(\"7/10\", \"10/2\")); // false\n    }\n}"}
{"task_id": "Java/145", "generation": "        if(nums == null || nums.isEmpty()) {\n            return new ArrayList<>();\n        }\n        \n        Collections.sort(nums, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer num1, Integer num2) {\n                int sumDigits1 = getSumOfDigits(num1);\n                int sumDigits2 = getSumOfDigits(num2);\n                \n                if(sumDigits1 == sumDigits2) {\n                    return nums.indexOf(num1) - nums.indexOf(num2);\n                }\n                \n                return sumDigits1 - sumDigits2;\n            }\n        });\n        \n        return nums;\n    }\n    \n    private int getSumOfDigits(int num) {\n        int sum = 0;\n        while(num != 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/145", "generation": "        // Create a custom comparator to compare integers based on the sum of their digits\n        Comparator<Integer> comparator = new Comparator<Integer>() {\n            @Override\n            public int compare(Integer num1, Integer num2) {\n                int sum1 = sumOfDigits(num1);\n                int sum2 = sumOfDigits(num2);\n\n                if (sum1 == sum2) {\n                    return nums.indexOf(num1) - nums.indexOf(num2);\n                } else {\n                    return sum1 - sum2;\n                }\n            }\n        };\n\n        // Sort the list of integers using the custom comparator\n        Collections.sort(nums, comparator);\n\n        return nums;\n    }\n\n    // Helper function to calculate the sum of the digits of an integer\n    private int sumOfDigits(int num) {\n        int sum = 0;\n        num = Math.abs(num);\n\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n\n        return sum;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> nums1 = Arrays.asList(1, 11, -1, -11, -12);\n        List<Integer> result1 = solution.orderByPoints(nums1);\n        System.out.println(result1); // [-1, -11, 1, -12, 11]\n\n        List<Integer> nums2 = Arrays.asList();\n        List<Integer> result2 = solution.orderByPoints(nums2);\n        System.out.println(result2); // []\n    }\n}"}
{"task_id": "Java/145", "generation": "        if(nums == null || nums.isEmpty()) {\n            return new ArrayList<>();\n        }\n        \n        Collections.sort(nums, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer num1, Integer num2) {\n                int sum1 = getSumOfDigits(num1);\n                int sum2 = getSumOfDigits(num2);\n                \n                if(sum1 != sum2) {\n                    return sum1 - sum2;\n                } else {\n                    return nums.indexOf(num1) - nums.indexOf(num2);\n                }\n            }\n        });\n        \n        return nums;\n    }\n    \n    private int getSumOfDigits(int num) {\n        int sum = 0;\n        num = Math.abs(num);\n        while(num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.orderByPoints(Arrays.asList(1, 11, -1, -11, -12))); // Output: [-1, -11, 1, -12, 11]\n        System.out.println(solution.orderByPoints(Arrays.asList())); // Output: []\n    }\n}"}
{"task_id": "Java/145", "generation": "        Collections.sort(nums, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer num1, Integer num2) {\n                int sumOfDigits1 = getSumOfDigits(Math.abs(num1));\n                int sumOfDigits2 = getSumOfDigits(Math.abs(num2);\n\n                if (sumOfDigits1 == sumOfDigits2) {\n                    return nums.indexOf(num1) - nums.indexOf(num2);\n                }\n\n                return sumOfDigits1 - sumOfDigits2;\n            }\n        });\n\n        return nums;\n    }\n\n    private int getSumOfDigits(int num) {\n        int sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> nums1 = Arrays.asList(1, 11, -1, -11, -12);\n        System.out.println(solution.orderByPoints(nums1)); // Output: [-1, -11, 1, -12, 11]\n\n        List<Integer> nums2 = Arrays.asList();\n        System.out.println(solution.orderByPoints(nums2)); // Output: []\n    }\n}"}
{"task_id": "Java/145", "generation": "        if (nums == null || nums.isEmpty()) {\n            return new ArrayList<>();\n        }\n        \n        Collections.sort(nums, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer num1, Integer num2) {\n                int sum1 = getSumOfDigits(num1);\n                int sum2 = getSumOfDigits(num2);\n                \n                if (sum1 != sum2) {\n                    return sum1 - sum2;\n                } else {\n                    return nums.indexOf(num1) - nums.indexOf(num2);\n                }\n            }\n        });\n        \n        return nums;\n    }\n    \n    public int getSumOfDigits(int num) {\n        int sum = 0;\n        num = Math.abs(num);\n        \n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        \n        return sum;\n    }\n}"}
{"task_id": "Java/146", "generation": "        int count = 0;\n        \n        for (int num : nums) {\n            if (num > 10) {\n                String numStr = String.valueOf(num);\n                int firstDigit = Character.getNumericValue(numStr.charAt(0));\n                int lastDigit = Character.getNumericValue(numStr.charAt(numStr.length() - 1));\n                \n                if (firstDigit % 2 != 0 && lastDigit % 2 != 0) {\n                    count++;\n                }\n            }\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> nums1 = Arrays.asList(15, -73, 14, -15);\n        List<Integer> nums2 = Arrays.asList(33, -2, -3, 45, 21, 109);\n\n        System.out.println(solution.specialFilter(nums1)); // Output: 1\n        System.out.println(solution.specialFilter(nums2)); // Output: 2\n    }\n}"}
{"task_id": "Java/146", "generation": "        int count = 0;\n        \n        for(int num : nums){\n            if(num > 10){\n                int firstDigit = Math.abs(num);\n                while(firstDigit >= 10){\n                    firstDigit /= 10;\n                }\n                \n                int lastDigit = Math.abs(num) % 10;\n                \n                if(isOdd(firstDigit) && isOdd(lastDigit)){\n                    count++;\n                }\n            }\n        }\n        \n        return count;\n    }\n    \n    public boolean isOdd(int num){\n        return num % 2 != 0;\n    }\n}"}
{"task_id": "Java/146", "generation": "        int count = 0;\n        \n        for (int num : nums) {\n            if (num > 10 && isFirstAndLastDigitsOdd(num)) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n    \n    private boolean isFirstAndLastDigitsOdd(int num) {\n        String numStr = String.valueOf(Math.abs(num));\n        int firstDigit = Character.getNumericValue(numStr.charAt(0));\n        int lastDigit = Character.getNumericValue(numStr.charAt(numStr.length()-1));\n        \n        return firstDigit % 2 != 0 && lastDigit % 2 != 0;\n    }\n}"}
{"task_id": "Java/146", "generation": "        int count = 0;\n        \n        for (int num : nums) {\n            if (num > 10) {\n                String numString = String.valueOf(num);\n                char firstDigit = numString.charAt(0);\n                char lastDigit = numString.charAt(numString.length() - 1);\n                \n                if (isOdd(Character.getNumericValue(firstDigit)) && isOdd(Character.getNumericValue(lastDigit))) {\n                    count++;\n                }\n            }\n        }\n        \n        return count;\n    }\n    \n    private boolean isOdd(int num) {\n        return num % 2 != 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.specialFilter(Arrays.asList(15, -73, 14, -15))); // 1\n        System.out.println(solution.specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109))); // 2\n    }\n}"}
{"task_id": "Java/146", "generation": "        int count = 0;\n        for (int num : nums) {\n            if (num > 10 && isOdd(num) && isFirstAndLastDigitsOdd(num)) {\n                count++;\n            }\n        }\n        return count;\n    }\n    \n    private boolean isOdd(int num) {\n        return num % 2 != 0;\n    }\n    \n    private boolean isFirstAndLastDigitsOdd(int num) {\n        String numStr = String.valueOf(num);\n        char firstDigit = numStr.charAt(0);\n        char lastDigit = numStr.charAt(numStr.length() - 1);\n        return isOdd(Character.getNumericValue(firstDigit)) && isOdd(Character.getNumericValue(lastDigit));\n    }\n}"}
{"task_id": "Java/147", "generation": "        int[] a = new int[n];\n        int count = 0;\n\n        for (int i = 1; i <= n; i++) {\n            a[i - 1] = i * i - i + 1;\n        }\n\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.getMaxTriples(5)); // Output: 1\n    }\n}"}
{"task_id": "Java/147", "generation": "        int count = 0;\n        int[] a = new int[n];\n        \n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        \n        for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        \n        return count;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int n = 5;\n        System.out.println(solution.getMaxTriples(n));\n    }\n}"}
{"task_id": "Java/147", "generation": "        int count = 0;\n        \n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        \n        for (int i = 0; i < n-2; i++) {\n            for (int j = i+1; j < n-1; j++) {\n                for (int k = j+1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int n = 5;\n        System.out.println(solution.getMaxTriples(n)); // Output: 1\n    }\n}"}
{"task_id": "Java/147", "generation": "        int count = 0;\n        int[] a = new int[n];\n        \n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        \n        for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        \n        return count;\n    }\n}"}
{"task_id": "Java/147", "generation": "        // Create an array to store the values\n        int[] a = new int[n];\n        \n        // Populate the array with the values according to the given formula\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        \n        // Count the number of triples that sum to a multiple of 3\n        int count = 0;\n        for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        \n        return count;\n    }\n}"}
{"task_id": "Java/148", "generation": "        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        \n        if (!planets.contains(planet1) || !planets.contains(planet2)) {\n            return new ArrayList<>();\n        }\n        \n        List<String> result = new ArrayList<>();\n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n        \n        int start = Math.min(index1, index2);\n        int end = Math.max(index1, index2);\n        \n        for (int i = start + 1; i < end; i++) {\n            result.add(planets.get(i));\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.bf(\"Jupiter\", \"Neptune\")); // Output: [\"Saturn\", \"Uranus\"]\n        System.out.println(solution.bf(\"Earth\", \"Mercury\")); // Output: [\"Venus\"]\n        System.out.println(solution.bf(\"Mercury\", \"Uranus\")); // Output: [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n    }\n}"}
{"task_id": "Java/148", "generation": "        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        \n        if (!planets.contains(planet1) || !planets.contains(planet2)) {\n            return new ArrayList<String>();\n        }\n        \n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n        \n        int lowerIndex = Math.min(index1, index2);\n        int upperIndex = Math.max(index1, index2);\n        \n        List<String> result = new ArrayList<String>();\n        for (int i = lowerIndex + 1; i < upperIndex; i++) {\n            result.add(planets.get(i));\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/148", "generation": "        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        List<String> result = new ArrayList<>();\n\n        if (!planets.contains(planet1) || !planets.contains(planet2)) {\n            return result;\n        }\n\n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n\n        int startIndex = Math.min(index1, index2);\n        int endIndex = Math.max(index1, index2);\n\n        for (int i = startIndex + 1; i < endIndex; i++) {\n            result.add(planets.get(i));\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.bf(\"Jupiter\", \"Neptune\")); // Output: [\"Saturn\", \"Uranus\"]\n        System.out.println(solution.bf(\"Earth\", \"Mercury\")); // Output: [\"Venus\"]\n        System.out.println(solution.bf(\"Mercury\", \"Uranus\")); // Output: [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n    }\n}"}
{"task_id": "Java/148", "generation": "        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        List<String> result = new ArrayList<>();\n\n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n\n        if (index1 == -1 || index2 == -1) {\n            return result;\n        }\n\n        int start = Math.min(index1, index2);\n        int end = Math.max(index1, index2);\n\n        for (int i = start + 1; i < end; i++) {\n            result.add(planets.get(i));\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.bf(\"Jupiter\", \"Neptune\")); // [\"Saturn\", \"Uranus\"]\n        System.out.println(solution.bf(\"Earth\", \"Mercury\")); // [\"Venus\"]\n        System.out.println(solution.bf(\"Mercury\", \"Uranus\")); // [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n    }\n}"}
{"task_id": "Java/148", "generation": "        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n\n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n\n        if (index1 == -1 || index2 == -1) {\n            return new ArrayList<>();\n        }\n\n        int start = Math.min(index1, index2);\n        int end = Math.max(index1, index2);\n\n        List<String> result = new ArrayList<>();\n        for (int i = start + 1; i < end; i++) {\n            result.add(planets.get(i));\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.bf(\"Jupiter\", \"Neptune\")); // [\"Saturn\", \"Uranus\"]\n        System.out.println(solution.bf(\"Earth\", \"Mercury\")); // [\"Venus\"]\n        System.out.println(solution.bf(\"Mercury\", \"Uranus\")); // [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n    }\n}"}
{"task_id": "Java/149", "generation": "        // Remove strings with odd lengths\n        List<String> filteredList = new ArrayList<>();\n        for(String s : lst){\n            if(s.length() % 2 == 0){\n                filteredList.add(s);\n            }\n        }\n        \n        // Sort the filtered list by length and then alphabetically\n        Collections.sort(filteredList, new Comparator<String>(){\n            @Override\n            public int compare(String s1, String s2){\n                if(s1.length() == s2.length()){\n                    return s1.compareTo(s2);\n                } else {\n                    return s1.length() - s2.length();\n                }\n            }\n        });\n        \n        return filteredList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        List<String> test1 = Arrays.asList(\"aa\", \"a\", \"aaa\");\n        List<String> result1 = solution.listSort(test1);\n        System.out.println(result1); // [\"aa\"]\n        \n        List<String> test2 = Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\");\n        List<String> result2 = solution.listSort(test2);\n        System.out.println(result2); // [\"ab\", \"cd\"]\n    }\n}"}
{"task_id": "Java/149", "generation": "        List<String> result = new ArrayList<>();\n\n        for (String str : lst) {\n            if (str.length() % 2 == 0) {\n                result.add(str);\n            }\n        }\n\n        Collections.sort(result, (a, b) -> {\n            if (a.length() == b.length()) {\n                return a.compareTo(b);\n            } else {\n                return a.length() - b.length();\n            }\n        });\n\n        return result;\n    }\n}"}
{"task_id": "Java/149", "generation": "        lst.removeIf(s -> s.length() % 2 != 0); // Remove strings with odd lengths\n\n        Collections.sort(lst, (s1, s2) -> {\n            if (s1.length() == s2.length()) {\n                return s1.compareTo(s2);\n            }\n            return s1.length() - s2.length();\n        });\n\n        return lst;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<String> test1 = Arrays.asList(\"aa\", \"a\", \"aaa\");\n        System.out.println(solution.listSort(test1)); // Expected output: [\"aa\"]\n\n        List<String> test2 = Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\");\n        System.out.println(solution.listSort(test2)); // Expected output: [\"ab\", \"cd\"]\n    }\n}"}
{"task_id": "Java/149", "generation": "        List<String> result = new ArrayList<>();\n        \n        for (String str : lst) {\n            if (str.length() % 2 == 0) {\n                result.add(str);\n            }\n        }\n        \n        Collections.sort(result, (a, b) -> {\n            if (a.length() == b.length()) {\n                return a.compareTo(b);\n            } else {\n                return a.length() - b.length();\n            }\n        });\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.listSort(Arrays.asList(\"aa\", \"a\", \"aaa\"))); // [\"aa\"]\n        System.out.println(solution.listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\"))); // [\"ab\", \"cd\"]\n    }\n}"}
{"task_id": "Java/149", "generation": "        List<String> result = new ArrayList<>();\n        for (String str : lst) {\n            if (str.length() % 2 == 0) {\n                result.add(str);\n            }\n        }\n        \n        Collections.sort(result, new Comparator<String>() {\n            @Override\n            public int compare(String s1, String s2) {\n                if (s1.length() != s2.length()) {\n                    return s1.length() - s2.length();\n                } else {\n                    return s1.compareTo(s2);\n                }\n            }\n        });\n        \n        return result;\n    }\n}"}
{"task_id": "Java/150", "generation": "        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n    \n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.xOrY(7, 34, 12)); // Output should be 34\n        System.out.println(solution.xOrY(15, 8, 5)); // Output should be 5\n    }\n}"}
{"task_id": "Java/150", "generation": "        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    // Function to check if a number is prime\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.xOrY(7, 34, 12)); // Output should be 34\n        System.out.println(solution.xOrY(15, 8, 5)); // Output should be 5\n    }\n}"}
{"task_id": "Java/150", "generation": "        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.xOrY(7, 34, 12)); // Output: 34\n        System.out.println(solution.xOrY(15, 8, 5)); // Output: 5\n    }\n}"}
{"task_id": "Java/150", "generation": "        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.xOrY(7, 34, 12)); // should return 34\n        System.out.println(solution.xOrY(15, 8, 5)); // should return 5\n    }\n}"}
{"task_id": "Java/150", "generation": "        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    // Helper method to check if a number is prime\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.xOrY(7, 34, 12)); // Output should be 34\n        System.out.println(solution.xOrY(15, 8, 5)); // Output should be 5\n    }\n}"}
{"task_id": "Java/151", "generation": "        int sum = 0;\n        for (Object num : lst) {\n            if (num instanceof Integer && (int) num > 0 && (int) num % 2 != 0) {\n                sum += (int) num * (int) num;\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.doubleTheDifference(Arrays.asList(1, 3, 2, 0))); // 10\n        System.out.println(solution.doubleTheDifference(Arrays.asList(-1, -2, 0))); // 0\n        System.out.println(solution.doubleTheDifference(Arrays.asList(9, -2))); // 81\n        System.out.println(solution.doubleTheDifference(Arrays.asList(0))); // 0\n    }\n}"}
{"task_id": "Java/151", "generation": "        int sum = 0;\n        \n        for (Object num : lst) {\n            if (num instanceof Integer) {\n                int n = (int) num;\n                if (n >= 0 && n % 2 != 0) {\n                    sum += n * n;\n                }\n            }\n        }\n        \n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.doubleTheDifference(Arrays.asList(1, 3, 2, 0))); // 10\n        System.out.println(solution.doubleTheDifference(Arrays.asList(-1, -2, 0))); // 0\n        System.out.println(solution.doubleTheDifference(Arrays.asList(9, -2))); // 81\n        System.out.println(solution.doubleTheDifference(Arrays.asList(0))); // 0\n    }\n}"}
{"task_id": "Java/151", "generation": "        int sum = 0;\n        \n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int num = (int) obj;\n                if (num > 0 && num % 2 != 0) {\n                    sum += num * num;\n                }\n            }\n        }\n        \n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.doubleTheDifference(Arrays.asList(1, 3, 2, 0))); // 10\n        System.out.println(solution.doubleTheDifference(Arrays.asList(-1, -2, 0))); // 0\n        System.out.println(solution.doubleTheDifference(Arrays.asList(9, -2))); // 81\n        System.out.println(solution.doubleTheDifference(Arrays.asList(0))); // 0\n    }\n}"}
{"task_id": "Java/151", "generation": "        int sum = 0;\n        \n        for (Object num : lst) {\n            if (num instanceof Integer && (int)num > 0 && (int)num % 2 != 0) {\n                sum += Math.pow((int)num, 2);\n            }\n        }\n        \n        return sum * 2;\n    }\n}"}
{"task_id": "Java/151", "generation": "        int sum = 0;\n        \n        for (Object num : lst) {\n            if (num instanceof Integer && (int)num > 0 && (int)num % 2 != 0) {\n                sum += Math.pow((int)num, 2);\n            }\n        }\n        \n        return sum * 2;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.doubleTheDifference(Arrays.asList(1, 3, 2, 0))); // Expected output: 10\n        System.out.println(solution.doubleTheDifference(Arrays.asList(-1, -2, 0))); // Expected output: 0\n        System.out.println(solution.doubleTheDifference(Arrays.asList(9, -2))); // Expected output: 81\n        System.out.println(solution.doubleTheDifference(Arrays.asList(0))); // Expected output: 0\n    }\n}"}
{"task_id": "Java/152", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 0; i < game.size(); i++) {\n            int difference = Math.abs(game.get(i) - guess.get(i));\n            result.add(difference);\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/152", "generation": "        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            int difference = Math.abs(game.get(i) - guess.get(i));\n            result.add(difference);\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/152", "generation": "        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            int diff = Math.abs(game.get(i) - guess.get(i));\n            result.add(diff);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.compare(Arrays.asList(1, 2, 3, 4, 5, 1), Arrays.asList(1, 2, 3, 4, 2, -2))); // [0, 0, 0, 0, 3, 3]\n        System.out.println(solution.compare(Arrays.asList(0, 5, 0, 0, 0, 4), Arrays.asList(4, 1, 1, 0, 0, -2))); // [4, 4, 1, 0, 0, 6]\n    }\n}"}
{"task_id": "Java/152", "generation": "        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            int diff = Math.abs(game.get(i) - guess.get(i));\n            result.add(diff);\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/152", "generation": "        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            int diff = Math.abs(game.get(i) - guess.get(i));\n            result.add(diff);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.compare(Arrays.asList(1,2,3,4,5,1), Arrays.asList(1,2,3,4,2,-2))); // [0,0,0,0,3,3]\n        System.out.println(solution.compare(Arrays.asList(0,5,0,0,0,4), Arrays.asList(4,1,1,0,0,-2))); // [4,4,1,0,0,6]\n    }\n}"}
{"task_id": "Java/153", "generation": "        String strongestExtension = \"\";\n        int maxStrength = Integer.MIN_VALUE;\n\n        for (String extension : extensions) {\n            int CAP = 0;\n            int SM = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    CAP++;\n                } else if (Character.isLowerCase(c)) {\n                    SM++;\n                }\n            }\n            int strength = CAP - SM;\n            if (strength > maxStrength || (strength == maxStrength && strongestExtension.equals(\"\"))) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n\n        return class_name + \".\" + strongestExtension;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Example\n        System.out.println(solution.StrongestExtension(\"my_class\", Arrays.asList(\"AA\", \"Be\", \"CC\"))); // my_class.AA\n    }\n}"}
{"task_id": "Java/153", "generation": "        Map<String, Double> strengthMap = new HashMap<>();\n        for (String extension : extensions) {\n            int CAP = 0;\n            int SM = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    CAP++;\n                } else if (Character.isLowerCase(c)) {\n                    SM++;\n                }\n            }\n            double strength = CAP - SM;\n            strengthMap.put(extension, strength);\n        }\n\n        double maxStrength = Double.MIN_VALUE;\n        String strongestExtension = \"\";\n        for (String extension : extensions) {\n            if (strengthMap.get(extension) > maxStrength) {\n                maxStrength = strengthMap.get(extension);\n                strongestExtension = extension;\n            }\n        }\n\n        return class_name + \".\" + strongestExtension;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.StrongestExtension(\"my_class\", Arrays.asList(\"AA\", \"Be\", \"CC\"))); // my_class.AA\n        System.out.println(solution.StrongestExtension(\"Slices\", Arrays.asList(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"))); // Slices.SErviNGSliCes\n    }\n}"}
{"task_id": "Java/153", "generation": "        Map<String, Double> strengthMap = new HashMap<>();\n        \n        for (String ext : extensions) {\n            int capCount = 0;\n            int smallCount = 0;\n            for (char c : ext.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    capCount++;\n                } else if (Character.isLowerCase(c)) {\n                    smallCount++;\n                }\n            }\n            double strength = capCount - smallCount;\n            strengthMap.put(ext, strength);\n        }\n        \n        String strongestExt = \"\";\n        double maxStrength = Integer.MIN_VALUE;\n        \n        for (String ext : extensions) {\n            if (strengthMap.get(ext) > maxStrength) {\n                maxStrength = strengthMap.get(ext);\n                strongestExt = ext;\n            }\n        }\n        \n        return class_name + \".\" + strongestExt;\n    }\n}"}
{"task_id": "Java/153", "generation": "        int maxStrength = Integer.MIN_VALUE;\n        String strongestExtension = \"\";\n\n        for (String extension : extensions) {\n            int capCount = 0;\n            int smCount = 0;\n\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    capCount++;\n                } else if (Character.isLowerCase(c)) {\n                    smCount++;\n                }\n            }\n\n            int strength = capCount - smCount;\n\n            if (strength > maxStrength || (strength == maxStrength && strongestExtension.equals(\"\"))) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n\n        return class_name + \".\" + strongestExtension;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<String> extensions = new ArrayList<>();\n        extensions.add(\"SErviNGSliCes\");\n        extensions.add(\"Cheese\");\n        extensions.add(\"StuFfed\");\n        System.out.println(solution.StrongestExtension(\"Slices\", extensions)); // Slices.SErviNGSliCes\n    }\n}"}
{"task_id": "Java/153", "generation": "        int maxStrength = Integer.MIN_VALUE;\n        String strongestExtension = \"\";\n        \n        for (String extension : extensions) {\n            int strength = countUpperCase(extension) - countLowerCase(extension);\n            if (strength > maxStrength || (strength == maxStrength && extensions.indexOf(extension) < extensions.indexOf(strongestExtension))) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n        \n        return class_name + \".\" + strongestExtension;\n    }\n    \n    private int countUpperCase(String str) {\n        int count = 0;\n        for (char c : str.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n    \n    private int countLowerCase(String str) {\n        int count = 0;\n        for (char c : str.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/154", "generation": "        if (a.length() != b.length()) {\n            return false;\n        }\n        \n        String combined = a + a;\n        \n        return combined.contains(b);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.cycpatternCheck(\"abcd\", \"abd\")); // false\n        System.out.println(solution.cycpatternCheck(\"hello\", \"ell\")); // true\n        System.out.println(solution.cycpatternCheck(\"whassup\", \"psus\")); // false\n        System.out.println(solution.cycpatternCheck(\"abab\", \"baa\")); // true\n        System.out.println(solution.cycpatternCheck(\"efef\", \"eeff\")); // false\n        System.out.println(solution.cycpatternCheck(\"himenss\", \"simen\")); // true\n    }\n}"}
{"task_id": "Java/154", "generation": "        if (a.length() != b.length()) {\n            return false;\n        }\n        \n        String combined = a + a;\n        \n        return combined.contains(b);\n    }\n}"}
{"task_id": "Java/154", "generation": "        if (a.length() != b.length()) {\n            return false;\n        }\n        \n        String doubleA = a + a;\n        \n        return doubleA.contains(b);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.cycpatternCheck(\"abcd\", \"abd\")); // false\n        System.out.println(solution.cycpatternCheck(\"hello\", \"ell\")); // true\n        System.out.println(solution.cycpatternCheck(\"whassup\", \"psus\")); // false\n        System.out.println(solution.cycpatternCheck(\"abab\", \"baa\")); // true\n        System.out.println(solution.cycpatternCheck(\"efef\", \"eeff\")); // false\n        System.out.println(solution.cycpatternCheck(\"himenss\", \"simen\")); // true\n    }\n}"}
{"task_id": "Java/154", "generation": "        if (a.length() != b.length()) {\n            return false;\n        }\n\n        String doubleA = a + a;\n        return doubleA.contains(b);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.cycpatternCheck(\"abcd\", \"abd\")); // false\n        System.out.println(solution.cycpatternCheck(\"hello\", \"ell\")); // true\n        System.out.println(solution.cycpatternCheck(\"whassup\", \"psus\")); // false\n        System.out.println(solution.cycpatternCheck(\"abab\", \"baa\")); // true\n        System.out.println(solution.cycpatternCheck(\"efef\", \"eeff\")); // false\n        System.out.println(solution.cycpatternCheck(\"himenss\", \"simen\")); // true\n    }\n}"}
{"task_id": "Java/154", "generation": "        if(a.length() != b.length()){\n            return false;\n        }\n        \n        String doubleA = a + a;\n        \n        if(doubleA.contains(b)){\n            return true;\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.cycpatternCheck(\"abcd\",\"abd\")); // false\n        System.out.println(solution.cycpatternCheck(\"hello\",\"ell\")); // true\n        System.out.println(solution.cycpatternCheck(\"whassup\",\"psus\")); // false\n        System.out.println(solution.cycpatternCheck(\"abab\",\"baa\")); // true\n        System.out.println(solution.cycpatternCheck(\"efef\",\"eeff\")); // false\n        System.out.println(solution.cycpatternCheck(\"himenss\",\"simen\")); // true\n    }\n}"}
{"task_id": "Java/155", "generation": "        List<Integer> result = new ArrayList<>();\n        if (num < 0) {\n            num = -num;\n        }\n        \n        int evenCount = 0;\n        int oddCount = 0;\n        \n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n            num = num / 10;\n        }\n        \n        result.add(evenCount);\n        result.add(oddCount);\n        \n        return result;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.evenOddCount(-12)); // (1, 1)\n        System.out.println(solution.evenOddCount(123)); // (1, 2)\n    }\n}"}
{"task_id": "Java/155", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        int evenCount = 0;\n        int oddCount = 0;\n        \n        // Convert integer to string\n        String numStr = String.valueOf(num);\n        \n        // Iterate through each character of the string\n        for (char c : numStr.toCharArray()) {\n            // Convert character to integer\n            int digit = Character.getNumericValue(c);\n            \n            // Check if digit is even or odd\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n        \n        result.add(evenCount);\n        result.add(oddCount);\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.evenOddCount(-12)); // (1, 1)\n        System.out.println(solution.evenOddCount(123)); // (1, 2)\n    }\n}"}
{"task_id": "Java/155", "generation": "        List<Integer> result = new ArrayList<>();\n        int evenCount = 0;\n        int oddCount = 0;\n        \n        String numString = Integer.toString(Math.abs(num));\n        \n        for (int i = 0; i < numString.length(); i++) {\n            int digit = Character.getNumericValue(numString.charAt(i));\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n        \n        result.add(evenCount);\n        result.add(oddCount);\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.evenOddCount(-12)); // (1, 1)\n        System.out.println(solution.evenOddCount(123)); // (1, 2)\n    }\n}"}
{"task_id": "Java/155", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        int evenCount = 0;\n        int oddCount = 0;\n        \n        String numStr = String.valueOf(num);\n        \n        for (int i = 0; i < numStr.length(); i++) {\n            int digit = Character.getNumericValue(numStr.charAt(i));\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n        \n        result.add(evenCount);\n        result.add(oddCount);\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.evenOddCount(-12)); // (1, 1)\n        System.out.println(solution.evenOddCount(123)); // (1, 2)\n    }\n}"}
{"task_id": "Java/155", "generation": "        List<Integer> result = new ArrayList<>();\n        if (num < 0) {\n            num = -num;\n        }\n        \n        int evenCount = 0;\n        int oddCount = 0;\n        \n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n            num = num / 10;\n        }\n        \n        result.add(evenCount);\n        result.add(oddCount);\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.evenOddCount(-12)); // Output: [1, 1]\n        System.out.println(solution.evenOddCount(123)); // Output: [1, 2]\n    }\n}"}
{"task_id": "Java/156", "generation": "        if (number < 1 || number > 1000) {\n            return \"Number out of range\";\n        }\n        \n        String[] romanNumerals = {\"i\", \"iv\", \"v\", \"ix\", \"x\", \"xl\", \"l\", \"xc\", \"c\", \"cd\", \"d\", \"cm\", \"m\"};\n        int[] romanValues = {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n        \n        StringBuilder result = new StringBuilder();\n        \n        int index = romanValues.length - 1;\n        \n        while (number > 0) {\n            if (number >= romanValues[index]) {\n                result.append(romanNumerals[index]);\n                number -= romanValues[index];\n            } else {\n                index--;\n            }\n        }\n        \n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.intToMiniRoman(19)); // Output: xix\n        System.out.println(solution.intToMiniRoman(152)); // Output: clii\n        System.out.println(solution.intToMiniRoman(426)); // Output: cdxxvi\n    }\n}"}
{"task_id": "Java/156", "generation": "        // Create a mapping of roman numeral values to their corresponding symbols\n        TreeMap<Integer, String> romanMap = new TreeMap<>();\n        romanMap.put(1, \"i\");\n        romanMap.put(4, \"iv\");\n        romanMap.put(5, \"v\");\n        romanMap.put(9, \"ix\");\n        romanMap.put(10, \"x\");\n        romanMap.put(40, \"xl\");\n        romanMap.put(50, \"l\");\n        romanMap.put(90, \"xc\");\n        romanMap.put(100, \"c\");\n        romanMap.put(400, \"cd\");\n        romanMap.put(500, \"d\");\n        romanMap.put(900, \"cm\");\n        romanMap.put(1000, \"m\");\n\n        // Initialize a StringBuilder to store the roman numeral equivalent\n        StringBuilder romanNumeral = new StringBuilder();\n\n        // Iterate through the roman numeral values in descending order\n        for (int value : romanMap.descendingKeySet()) {\n            // Calculate the number of times the value fits into the given number\n            int count = number / value;\n            // Append the corresponding symbol count times to the roman numeral string\n            for (int i = 0; i < count; i++) {\n                romanNumeral.append(romanMap.get(value));\n            }\n            // Update the remaining number after subtracting the value times the count\n            number %= value;\n        }\n\n        // Return the roman numeral string in lowercase\n        return romanNumeral.toString().toLowerCase();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.intToMiniRoman(19)); // Output: xix\n        System.out.println(solution.intToMiniRoman(152)); // Output: clii\n        System.out.println(solution.intToMiniRoman(426)); // Output: cdxxvi\n    }\n}"}
{"task_id": "Java/156", "generation": "        String[] romanNumerals = {\"i\", \"iv\", \"v\", \"ix\", \"x\", \"xl\", \"l\", \"xc\", \"c\", \"cd\", \"d\", \"cm\", \"m\"};\n        int[] values = {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n\n        StringBuilder result = new StringBuilder();\n\n        int i = values.length - 1;\n        while (number > 0) {\n            int div = number / values[i];\n            number %= values[i];\n            while (div > 0) {\n                result.append(romanNumerals[i]);\n                div--;\n            }\n            i--;\n        }\n\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.intToMiniRoman(19)); // Output: xix\n        System.out.println(solution.intToMiniRoman(152)); // Output: clii\n        System.out.println(solution.intToMiniRoman(426)); // Output: cdxxvi\n    }\n}"}
{"task_id": "Java/156", "generation": "        if (number < 1 || number > 1000) {\n            throw new IllegalArgumentException(\"Number must be between 1 and 1000\");\n        }\n\n        String[] romanNumerals = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n\n        StringBuilder romanNumeral = new StringBuilder();\n        int index = 0;\n\n        while (number > 0) {\n            if (number - values[index] >= 0) {\n                romanNumeral.append(romanNumerals[index]);\n                number -= values[index];\n            } else {\n                index++;\n            }\n        }\n\n        return romanNumeral.toString().toLowerCase();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.intToMiniRoman(19)); // Output: xix\n        System.out.println(solution.intToMiniRoman(152)); // Output: clii\n        System.out.println(solution.intToMiniRoman(426)); // Output: cdxxvi\n    }\n}"}
{"task_id": "Java/156", "generation": "        if (number < 1 || number > 1000) {\n            throw new IllegalArgumentException(\"Number must be between 1 and 1000\");\n        }\n\n        StringBuilder roman = new StringBuilder();\n\n        int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        String[] symbols = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n\n        for (int i = 0; i < values.length; i++) {\n            while (number >= values[i]) {\n                roman.append(symbols[i]);\n                number -= values[i];\n            }\n        }\n\n        return roman.toString().toLowerCase();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.intToMiniRoman(19)); // \"xix\"\n        System.out.println(solution.intToMiniRoman(152)); // \"clii\"\n        System.out.println(solution.intToMiniRoman(426)); // \"cdxxvi\"\n    }\n}"}
{"task_id": "Java/157", "generation": "        // Sort the sides in ascending order\n        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n        \n        // Check if the sides satisfy Pythagoras theorem\n        if (sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}"}
{"task_id": "Java/157", "generation": "        // Sort the sides in ascending order\n        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n\n        // Check if the sides form a right-angled triangle\n        return (sides[0]*sides[0] + sides[1]*sides[1] == sides[2]*sides[2]);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.rightAngleTriangle(3, 4, 5)); // true\n        System.out.println(solution.rightAngleTriangle(1, 2, 3)); // false\n    }\n}"}
{"task_id": "Java/157", "generation": "        // Sort the sides in ascending order\n        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n\n        // Check if the sides form a right-angled triangle\n        return (sides[0]*sides[0] + sides[1]*sides[1] == sides[2]*sides[2]);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.rightAngleTriangle(3, 4, 5)); // true\n        System.out.println(solution.rightAngleTriangle(1, 2, 3)); // false\n    }\n}"}
{"task_id": "Java/157", "generation": "        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n        \n        if (sides[2] * sides[2] == sides[0] * sides[0] + sides[1] * sides[1]) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}"}
{"task_id": "Java/157", "generation": "        // Sort the sides in ascending order\n        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n\n        // Check if the sides form a right-angled triangle\n        return (sides[0]*sides[0] + sides[1]*sides[1] == sides[2]*sides[2]);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.rightAngleTriangle(3, 4, 5)); // true\n        System.out.println(solution.rightAngleTriangle(1, 2, 3)); // false\n    }\n}"}
{"task_id": "Java/158", "generation": "        String maxWord = \"\";\n        int maxUniqueChars = 0;\n\n        for (String word : words) {\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                uniqueChars.add(c);\n            }\n\n            if (uniqueChars.size() > maxUniqueChars ||\n                    (uniqueChars.size() == maxUniqueChars && word.compareTo(maxWord) < 0)) {\n                maxUniqueChars = uniqueChars.size();\n                maxWord = word;\n            }\n        }\n\n        return maxWord;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<String> words1 = Arrays.asList(\"name\", \"of\", \"string\");\n        System.out.println(solution.findMax(words1)); // should return \"string\"\n\n        List<String> words2 = Arrays.asList(\"name\", \"enam\", \"game\");\n        System.out.println(solution.findMax(words2)); // should return \"enam\"\n\n        List<String> words3 = Arrays.asList(\"aaaaaaa\", \"bb\", \"cc\");\n        System.out.println(solution.findMax(words3)); // should return \"aaaaaaa\"\n    }\n}"}
{"task_id": "Java/158", "generation": "        String maxWord = \"\";\n        int maxUniqueChars = 0;\n\n        for (String word : words) {\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                uniqueChars.add(c);\n            }\n\n            if (uniqueChars.size() > maxUniqueChars ||\n                (uniqueChars.size() == maxUniqueChars && word.compareTo(maxWord) < 0)) {\n                maxWord = word;\n                maxUniqueChars = uniqueChars.size();\n            }\n        }\n\n        return maxWord;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<String> words1 = Arrays.asList(\"name\", \"of\", \"string\");\n        System.out.println(solution.findMax(words1)); // \"string\"\n\n        List<String> words2 = Arrays.asList(\"name\", \"enam\", \"game\");\n        System.out.println(solution.findMax(words2)); // \"enam\"\n\n        List<String> words3 = Arrays.asList(\"aaaaaaa\", \"bb\", \"cc\");\n        System.out.println(solution.findMax(words3)); // \"aaaaaaa\"\n    }\n}"}
{"task_id": "Java/158", "generation": "        String result = \"\";\n        int maxUnique = 0;\n\n        for (String word : words) {\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                uniqueChars.add(c);\n            }\n            if (uniqueChars.size() > maxUnique || \n                (uniqueChars.size() == maxUnique && word.compareTo(result) < 0)) {\n                maxUnique = uniqueChars.size();\n                result = word;\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<String> words1 = new ArrayList<>(Arrays.asList(\"name\", \"of\", \"string\"));\n        System.out.println(solution.findMax(words1)); // Output: \"string\"\n\n        List<String> words2 = new ArrayList<>(Arrays.asList(\"name\", \"enam\", \"game\"));\n        System.out.println(solution.findMax(words2)); // Output: \"enam\"\n\n        List<String> words3 = new ArrayList<>(Arrays.asList(\"aaaaaaa\", \"bb\", \"cc\"));\n        System.out.println(solution.findMax(words3)); // Output: \"aaaaaaa\"\n    }\n}"}
{"task_id": "Java/158", "generation": "        String maxWord = \"\";\n        int maxUniqueChars = 0;\n\n        for (String word : words) {\n            int uniqueChars = getUniqueCharacterCount(word);\n            if (uniqueChars > maxUniqueChars || (uniqueChars == maxUniqueChars && word.compareTo(maxWord) < 0)) {\n                maxWord = word;\n                maxUniqueChars = uniqueChars;\n            }\n        }\n\n        return maxWord;\n    }\n\n    private int getUniqueCharacterCount(String word) {\n        Set<Character> uniqueChars = new HashSet<>();\n        for (char c : word.toCharArray()) {\n            uniqueChars.add(c);\n        }\n        return uniqueChars.size();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<String> words1 = Arrays.asList(\"name\", \"of\", \"string\");\n        List<String> words2 = Arrays.asList(\"name\", \"enam\", \"game\");\n        List<String> words3 = Arrays.asList(\"aaaaaaa\", \"bb\", \"cc\");\n\n        System.out.println(solution.findMax(words1)); // should return \"string\"\n        System.out.println(solution.findMax(words2)); // should return \"enam\"\n        System.out.println(solution.findMax(words3)); // should return \"aaaaaaa\"\n    }\n}"}
{"task_id": "Java/158", "generation": "        int maxUniqueChars = 0;\n        String result = \"\";\n\n        for (String word : words) {\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                uniqueChars.add(c);\n            }\n            if (uniqueChars.size() > maxUniqueChars ||\n                    (uniqueChars.size() == maxUniqueChars && word.compareTo(result) < 0)) {\n                maxUniqueChars = uniqueChars.size();\n                result = word;\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<String> words1 = Arrays.asList(\"name\", \"of\", \"string\");\n        List<String> words2 = Arrays.asList(\"name\", \"enam\", \"game\");\n        List<String> words3 = Arrays.asList(\"aaaaaaa\", \"bb\", \"cc\");\n\n        System.out.println(solution.findMax(words1)); // Output: \"string\"\n        System.out.println(solution.findMax(words2)); // Output: \"enam\"\n        System.out.println(solution.findMax(words3)); // Output: \"aaaaaaa\"\n    }\n}"}
{"task_id": "Java/159", "generation": "        int totalCarrots = number + need;\n        int eatenCarrots = Math.min(totalCarrots, remaining);\n        int leftCarrots = Math.max(0, remaining - totalCarrots);\n        \n        List<Integer> result = new ArrayList<>();\n        result.add(eatenCarrots);\n        result.add(leftCarrots);\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.eat(5, 6, 10)); // [11, 4]\n        System.out.println(solution.eat(4, 8, 9)); // [12, 1]\n        System.out.println(solution.eat(1, 10, 10)); // [11, 0]\n        System.out.println(solution.eat(2, 11, 5)); // [7, 0]\n    }\n}"}
{"task_id": "Java/159", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        int total = number + need;\n        int eaten = 0;\n        \n        if (total <= remaining) {\n            eaten = total;\n            remaining -= total;\n        } else {\n            eaten = remaining;\n            remaining = 0;\n        }\n        \n        result.add(eaten);\n        result.add(remaining);\n        \n        return result;\n    }\n}"}
{"task_id": "Java/159", "generation": "        int totalEaten = number + need;\n        int carrotsLeft = Math.max(0, remaining - need);\n        \n        List<Integer> result = new ArrayList<>();\n        result.add(totalEaten);\n        result.add(carrotsLeft);\n        \n        return result;\n    }\n}"}
{"task_id": "Java/159", "generation": "        int totalCarrots = number + need;\n        int eatenCarrots = totalCarrots;\n        \n        if (totalCarrots > remaining) {\n            eatenCarrots = remaining;\n        }\n        \n        int carrotsLeft = remaining - eatenCarrots;\n        \n        List<Integer> result = new ArrayList<>();\n        result.add(eatenCarrots);\n        result.add(carrotsLeft);\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.eat(5, 6, 10)); // [11, 4]\n        System.out.println(solution.eat(4, 8, 9)); // [12, 1]\n        System.out.println(solution.eat(1, 10, 10)); // [11, 0]\n        System.out.println(solution.eat(2, 11, 5)); // [7, 0]\n    }\n}"}
{"task_id": "Java/159", "generation": "        int totalEaten = number + need;\n        int carrotsLeft = Math.max(0, remaining - need);\n        \n        List<Integer> result = new ArrayList<>();\n        result.add(totalEaten);\n        result.add(carrotsLeft);\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.eat(5, 6, 10)); // [11, 4]\n        System.out.println(solution.eat(4, 8, 9)); // [12, 1]\n        System.out.println(solution.eat(1, 10, 10)); // [11, 0]\n        System.out.println(solution.eat(2, 11, 5)); // [7, 0]\n    }\n}"}
{"task_id": "Java/160", "generation": "        // Initialize the result to be the first operand\n        int result = operand.get(0);\n\n        // Loop through the operators and operands to build the algebraic expression\n        for (int i = 0; i < operator.size(); i++) {\n            String op = operator.get(i);\n            int num = operand.get(i + 1);\n\n            // Perform the operation based on the operator\n            switch (op) {\n                case \"+\":\n                    result += num;\n                    break;\n                case \"-\":\n                    result -= num;\n                    break;\n                case \"*\":\n                    result *= num;\n                    break;\n                case \"/\":\n                    result /= num;\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, num);\n                    break;\n                default:\n                    System.out.println(\"Invalid operator\");\n                    break;\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test the example\n        List<String> operators = new ArrayList<>(Arrays.asList(\"+\", \"*\", \"-\"));\n        List<Integer> operands = new ArrayList<>(Arrays.asList(2, 3, 4, 5));\n        System.out.println(solution.doAlgebra(operators, operands)); // Output should be 9\n    }\n}"}
{"task_id": "Java/160", "generation": "        if (operator == null || operand == null || operator.size() != operand.size() - 1 || operand.size() < 2) {\n            return 0;\n        }\n        \n        int result = operand.get(0);\n        \n        for (int i = 0; i < operator.size(); i++) {\n            String op = operator.get(i);\n            int num = operand.get(i + 1);\n            \n            switch (op) {\n                case \"+\":\n                    result += num;\n                    break;\n                case \"-\":\n                    result -= num;\n                    break;\n                case \"*\":\n                    result *= num;\n                    break;\n                case \"/\":\n                    if (num != 0) {\n                        result /= num;\n                    }\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, num);\n                    break;\n                default:\n                    break;\n            }\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/160", "generation": "        if (operator.size() != operand.size() - 1) {\n            throw new IllegalArgumentException(\"Invalid input: operator list length should be one less than operand list length\");\n        }\n        \n        Stack<Integer> stack = new Stack<>();\n        stack.push(operand.get(0));\n        \n        for (int i = 0; i < operator.size(); i++) {\n            int currentOperand = operand.get(i + 1);\n            String currentOperator = operator.get(i);\n            \n            switch (currentOperator) {\n                case \"+\":\n                    stack.push(currentOperand);\n                    break;\n                case \"-\":\n                    stack.push(-currentOperand);\n                    break;\n                case \"*\":\n                    int prev1 = stack.pop();\n                    stack.push(prev1 * currentOperand);\n                    break;\n                case \"/\":\n                    int prev2 = stack.pop();\n                    stack.push(prev2 / currentOperand);\n                    break;\n                default:\n                    stack.push((int) Math.pow(stack.pop(), currentOperand));\n                    break;\n            }\n        }\n        \n        int result = 0;\n        while (!stack.isEmpty()) {\n            result += stack.pop();\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<String> operator1 = new ArrayList<>(Arrays.asList(\"+\", \"*\", \"-\"));\n        List<Integer> operand1 = new ArrayList<>(Arrays.asList(2, 3, 4, 5));\n        System.out.println(solution.doAlgebra(operator1, operand1));  // Output: 9\n\n        List<String> operator2 = new ArrayList<>(Arrays.asList(\"*\", \"/\", \"+\"));\n        List<Integer> operand2 = new ArrayList<>(Arrays.asList(1, 2, 3, 4));\n        System.out.println(solution.doAlgebra(operator2, operand2));  // Output: 3\n\n        List<String> operator3 = new ArrayList<>(Arrays.asList(\"**\"));\n        List<Integer> operand3 = new ArrayList<>(Arrays.asList(2, 3, 2));\n        System.out.println(solution.doAlgebra(operator3, operand3));  // Output: 64\n    }\n}"}
{"task_id": "Java/160", "generation": "        int result = operand.get(0);\n        int index = 1;\n        \n        for (String op : operator) {\n            int num = operand.get(index);\n            switch(op) {\n                case \"+\":\n                    result += num;\n                    break;\n                case \"-\":\n                    result -= num;\n                    break;\n                case \"*\":\n                    result *= num;\n                    break;\n                case \"/\":\n                    result /= num;\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, num);\n                    break;\n                default:\n                    System.out.println(\"Invalid operator: \" + op);\n                    break;\n            }\n            index++;\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<String> operator = new ArrayList<>(Arrays.asList(\"+\", \"*\", \"-\"));\n        List<Integer> operand = new ArrayList<>(Arrays.asList(2, 3, 4, 5));\n\n        System.out.println(solution.doAlgebra(operator, operand)); // Output: 9\n    }\n}"}
{"task_id": "Java/160", "generation": "        if (operator == null || operand == null || operator.size() != operand.size() - 1 || operand.size() < 2) {\n            return 0;\n        }\n\n        Stack<Integer> stack = new Stack<>();\n        stack.push(operand.get(0));\n\n        for (int i = 0; i < operator.size(); i++) {\n            String op = operator.get(i);\n            int num = operand.get(i + 1);\n\n            if (op.equals(\"+\")) {\n                stack.push(num);\n            } else if (op.equals(\"-\")) {\n                stack.push(-num);\n            } else if (op.equals(\"*\")) {\n                int prev = stack.pop();\n                stack.push(prev * num);\n            } else if (op.equals(\"/\")) {\n                int prev = stack.pop();\n                stack.push(prev / num);\n            } else if (op.equals(\"**\")) {\n                int prev = stack.pop();\n                stack.push((int) Math.pow(prev, num));\n            }\n        }\n\n        int result = 0;\n        while (!stack.isEmpty()) {\n            result += stack.pop();\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<String> operator = new ArrayList<>();\n        operator.add(\"+\");\n        operator.add(\"*\");\n        operator.add(\"-\");\n\n        List<Integer> operand = new ArrayList<>();\n        operand.add(2);\n        operand.add(3);\n        operand.add(4);\n        operand.add(5);\n\n        System.out.println(solution.doAlgebra(operator, operand)); // Output: 9\n    }\n}"}
{"task_id": "Java/161", "generation": "        char[] chars = s.toCharArray();\n        boolean hasLetter = false;\n        \n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLetter(chars[i])) {\n                hasLetter = true;\n                if (Character.isUpperCase(chars[i])) {\n                    chars[i] = Character.toLowerCase(chars[i]);\n                } else {\n                    chars[i] = Character.toUpperCase(chars[i]);\n                }\n            }\n        }\n        \n        if (!hasLetter) {\n            StringBuilder sb = new StringBuilder(s);\n            return sb.reverse().toString();\n        }\n        \n        return new String(chars);\n    }\n}"}
{"task_id": "Java/161", "generation": "        char[] charArray = s.toCharArray();\n        boolean containsLetter = false;\n        \n        for (int i = 0; i < charArray.length; i++) {\n            if (Character.isLetter(charArray[i])) {\n                containsLetter = true;\n                if (Character.isUpperCase(charArray[i])) {\n                    charArray[i] = Character.toLowerCase(charArray[i]);\n                } else {\n                    charArray[i] = Character.toUpperCase(charArray[i]);\n                }\n            }\n        }\n        \n        if (!containsLetter) {\n            // if string doesn't contain any letters, reverse the string\n            int left = 0;\n            int right = charArray.length - 1;\n            while (left < right) {\n                char temp = charArray[left];\n                charArray[left] = charArray[right];\n                charArray[right] = temp;\n                left++;\n                right--;\n            }\n        }\n        \n        return new String(charArray);\n    }\n}"}
{"task_id": "Java/161", "generation": "        char[] chars = s.toCharArray();\n        boolean hasLetter = false;\n        \n        // Check if the string contains any letters\n        for(char c : chars){\n            if(Character.isLetter(c)){\n                hasLetter = true;\n                break;\n            }\n        }\n        \n        // Reverse the case of letters or reverse the entire string\n        if(hasLetter){\n            for(int i=0; i<chars.length; i++){\n                if(Character.isLetter(chars[i])){\n                    if(Character.isUpperCase(chars[i])){\n                        chars[i] = Character.toLowerCase(chars[i]);\n                    } else {\n                        chars[i] = Character.toUpperCase(chars[i]);\n                    }\n                }\n            }\n        } else {\n            // Reverse the entire string\n            int i = 0;\n            int j = s.length() - 1;\n            while(i < j){\n                char temp = chars[i];\n                chars[i] = chars[j];\n                chars[j] = temp;\n                i++;\n                j--;\n            }\n        }\n        \n        return new String(chars);\n    }\n}"}
{"task_id": "Java/161", "generation": "        char[] chars = s.toCharArray();\n        \n        boolean hasLetter = false;\n        \n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLetter(chars[i])) {\n                hasLetter = true;\n                if (Character.isUpperCase(chars[i])) {\n                    chars[i] = Character.toLowerCase(chars[i]);\n                } else {\n                    chars[i] = Character.toUpperCase(chars[i]);\n                }\n            }\n        }\n        \n        if (!hasLetter) {\n            // reverse the string\n            int left = 0, right = chars.length - 1;\n            while (left < right) {\n                char temp = chars[left];\n                chars[left] = chars[right];\n                chars[right] = temp;\n                left++;\n                right--;\n            }\n        }\n        \n        return new String(chars);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.solve(\"1234\")); // Output: \"4321\"\n        System.out.println(solution.solve(\"ab\")); // Output: \"AB\"\n        System.out.println(solution.solve(\"#a@C\")); // Output: \"#A@c\"\n    }\n}"}
{"task_id": "Java/161", "generation": "        char[] chars = s.toCharArray();\n\n        boolean hasLetters = false;\n\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLetter(chars[i])) {\n                hasLetters = true;\n                if (Character.isUpperCase(chars[i])) {\n                    chars[i] = Character.toLowerCase(chars[i]);\n                } else {\n                    chars[i] = Character.toUpperCase(chars[i]);\n                }\n            }\n        }\n\n        if (!hasLetters) {\n            StringBuilder sb = new StringBuilder(s);\n            sb.reverse();\n            return sb.toString();\n        } else {\n            return new String(chars);\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.solve(\"1234\")); // Output: \"4321\"\n        System.out.println(solution.solve(\"ab\")); // Output: \"AB\"\n        System.out.println(solution.solve(\"#a@C\")); // Output: \"#A@c\"\n    }\n}"}
{"task_id": "Java/162", "generation": "        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String md5Hash = bigInt.toString(16);\n\n        // Pad with zeros if necessary to ensure length of 32\n        while (md5Hash.length() < 32) {\n            md5Hash = \"0\" + md5Hash;\n        }\n\n        return Optional.of(md5Hash);\n    }\n}"}
{"task_id": "Java/162", "generation": "        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n\n        // Convert byte array to hex string\n        StringBuilder sb = new StringBuilder();\n        for (byte b : digest) {\n            sb.append(String.format(\"%02x\", b & 0xff));\n        }\n\n        return Optional.of(sb.toString());\n    }\n}"}
{"task_id": "Java/162", "generation": "        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] hash = md.digest(text.getBytes());\n\n        BigInteger no = new BigInteger(1, hash);\n        String hashText = no.toString(16);\n\n        while (hashText.length() < 32) {\n            hashText = \"0\" + hashText;\n        }\n\n        return Optional.of(hashText);\n    }\n}"}
{"task_id": "Java/162", "generation": "        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] messageDigest = md.digest(text.getBytes());\n        \n        BigInteger no = new BigInteger(1, messageDigest);\n        \n        String hashText = no.toString(16);\n        \n        while (hashText.length() < 32) {\n            hashText = \"0\" + hashText;\n        }\n        \n        return Optional.of(hashText);\n    }\n}"}
{"task_id": "Java/162", "generation": "        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        \n        BigInteger bigInt = new BigInteger(1, digest);\n        String md5Hash = bigInt.toString(16);\n        \n        while (md5Hash.length() < 32) {\n            md5Hash = \"0\" + md5Hash;\n        }\n        \n        return Optional.of(md5Hash);\n    }\n}"}
{"task_id": "Java/163", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        // Swap a and b if a is greater than b\n        if (a > b) {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n        \n        // Iterate through the range from a to b and add even digits to result\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/163", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        if (a > b) {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n        \n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.generateIntegers(2, 8)); // [2, 4, 6, 8]\n        System.out.println(solution.generateIntegers(8, 2)); // [2, 4, 6, 8]\n        System.out.println(solution.generateIntegers(10, 14)); // []\n    }\n}"}
{"task_id": "Java/163", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = Math.min(a, b); i <= Math.max(a, b); i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/163", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = Math.min(a, b); i <= Math.max(a, b); i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/163", "generation": "        List<Integer> result = new ArrayList<>();\n\n        for (int i = Math.min(a, b); i <= Math.max(a, b); i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.generateIntegers(2, 8)); // [2, 4, 6, 8]\n        System.out.println(solution.generateIntegers(8, 2)); // [2, 4, 6, 8]\n        System.out.println(solution.generateIntegers(10, 14)); // []\n    }\n}"}
