{"task_id": "Java/0", "generation": "        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/1", "generation": "        List<String> result = new ArrayList<>();\n        int count = 0;\n        StringBuilder sb = new StringBuilder();\n        \n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                count++;\n            } else if (c == ')') {\n                count--;\n            }\n            \n            sb.append(c);\n            \n            if (count == 0) {\n                result.add(sb.toString().replaceAll(\"\\\\s\", \"\"));\n                sb.setLength(0);\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/2", "generation": "        return number % 1.0;\n    }\n}\n"}
{"task_id": "Java/3", "generation": "        int balance = 0;\n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/4", "generation": "        double mean = numbers.stream().mapToDouble(Double::doubleValue).average().orElse(0.0);\n        double sum = numbers.stream().mapToDouble(num -> Math.abs(num - mean)).sum();\n        return sum / numbers.size();\n    }\n}\n"}
{"task_id": "Java/5", "generation": "        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/6", "generation": "        List<Integer> result = new ArrayList<>();\n        int maxDepth = 0;\n        int currentDepth = 0;\n\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                currentDepth++;\n                maxDepth = Math.max(maxDepth, currentDepth);\n            } else if (c == ')') {\n                currentDepth--;\n            }\n        }\n\n        result.add(maxDepth);\n        return result;\n    }\n}\n"}
{"task_id": "Java/7", "generation": "        List<String> filteredStrings = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                filteredStrings.add(str);\n            }\n        }\n        return filteredStrings;\n    }\n}\n"}
{"task_id": "Java/8", "generation": "        int sum = 0;\n        int product = 1;\n        \n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n        \n        return Arrays.asList(sum, product);\n    }\n}\n"}
{"task_id": "Java/9", "generation": "        List<Integer> rollingMaxList = new ArrayList<>();\n        int max = Integer.MIN_VALUE;\n        for (int num : numbers) {\n            max = Math.max(max, num);\n            rollingMaxList.add(max);\n        }\n        return rollingMaxList;\n    }\n}\n"}
{"task_id": "Java/10", "generation": "        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j)) {\n                break;\n            }\n            i++;\n            j--;\n        }\n        StringBuilder sb = new StringBuilder(string.substring(j + 1));\n        sb.reverse();\n        sb.append(string);\n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/11", "generation": "        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) != b.charAt(i)) {\n                result.append(\"1\");\n            } else {\n                result.append(\"0\");\n            }\n        }\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/12", "generation": "        return strings.stream()\n                .max(Comparator.comparingInt(String::length));\n    }\n}\n"}
{"task_id": "Java/13", "generation": "        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n}\n"}
{"task_id": "Java/14", "generation": "        List<String> prefixes = new ArrayList<>();\n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        return prefixes;\n    }\n}\n"}
{"task_id": "Java/15", "generation": "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.append(i).append(\" \");\n        }\n        return sb.toString().trim();\n    }\n}\n"}
{"task_id": "Java/16", "generation": "        Set<Character> charSet = new HashSet<>();\n        for (char c : string.toLowerCase().toCharArray()) {\n            if (Character.isLetter(c)) {\n                charSet.add(c);\n            }\n        }\n        return charSet.size();\n    }\n}\n"}
{"task_id": "Java/17", "generation": "        List<Integer> beats = new ArrayList<>();\n        String[] notes = string.split(\" \");\n        for (String note : notes) {\n            switch (note) {\n                case \"o\":\n                    beats.add(4);\n                    break;\n                case \"o|\":\n                    beats.add(2);\n                    break;\n                case \".|\":\n                    beats.add(1);\n                    break;\n            }\n        }\n        return beats;\n    }\n}\n"}
{"task_id": "Java/18", "generation": "        int count = 0;\n        if (substring.length() == 0) {\n            return 0;\n        }\n        for (int i = 0; i <= string.length() - substring.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/19", "generation": "        String[] numberWords = numbers.split(\" \");\n        Map<String, Integer> numberMap = new HashMap<>();\n        numberMap.put(\"zero\", 0);\n        numberMap.put(\"one\", 1);\n        numberMap.put(\"two\", 2);\n        numberMap.put(\"three\", 3);\n        numberMap.put(\"four\", 4);\n        numberMap.put(\"five\", 5);\n        numberMap.put(\"six\", 6);\n        numberMap.put(\"seven\", 7);\n        numberMap.put(\"eight\", 8);\n        numberMap.put(\"nine\", 9);\n\n        List<String> sortedNumbers = Arrays.asList(numberWords);\n        sortedNumbers.sort(Comparator.comparingInt(numberMap::get));\n\n        return String.join(\" \", sortedNumbers);\n    }\n}\n"}
{"task_id": "Java/20", "generation": "        Collections.sort(numbers);\n        double minDiff = Double.MAX_VALUE;\n        List<Double> result = new ArrayList<>();\n        \n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = numbers.get(i + 1) - numbers.get(i);\n            if (diff < minDiff) {\n                minDiff = diff;\n                result.clear();\n                result.add(numbers.get(i));\n                result.add(numbers.get(i + 1));\n            } else if (diff == minDiff) {\n                result.add(numbers.get(i));\n                result.add(numbers.get(i + 1));\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/21", "generation": "        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        List<Double> rescaled = new ArrayList<>();\n        for (double num : numbers) {\n            double scaled = (num - min) / (max - min);\n            rescaled.add(scaled);\n        }\n        return rescaled;\n    }\n}\n"}
{"task_id": "Java/22", "generation": "        List<Integer> integers = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                integers.add((Integer) value);\n            }\n        }\n        return integers;\n    }\n}\n"}
{"task_id": "Java/23", "generation": "        return string.length();\n    }\n}\n"}
{"task_id": "Java/24", "generation": "        for (int i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return -1; // If no divisor found\n    }\n}\n"}
{"task_id": "Java/25", "generation": "        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        return factors;\n    }\n}\n"}
{"task_id": "Java/26", "generation": "        return numbers.stream()\n            .distinct()\n            .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/27", "generation": "        StringBuilder result = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                result.append(Character.toLowerCase(c));\n            } else if (Character.isLowerCase(c)) {\n                result.append(Character.toUpperCase(c));\n            } else {\n                result.append(c);\n            }\n        }\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/28", "generation": "        StringBuilder sb = new StringBuilder();\n        for (String str : strings) {\n            sb.append(str);\n        }\n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/29", "generation": "        return strings.stream()\n            .filter(s -> s.startsWith(prefix))\n            .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/30", "generation": "        return l.stream()\n                .filter(num -> num > 0)\n                .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/31", "generation": "        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/32", "generation": "        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"Number of coefficients must be even.\");\n        }\n        \n        double largestNonZeroCoefficient = 0;\n        for (double coefficient : xs) {\n            if (coefficient != 0) {\n                largestNonZeroCoefficient = coefficient;\n            }\n        }\n        \n        if (largestNonZeroCoefficient == 0) {\n            throw new IllegalArgumentException(\"No non-zero coefficients found.\");\n        }\n        \n        double result = -largestNonZeroCoefficient / xs.get(0);\n        return result;\n    }\n}\n"}
{"task_id": "Java/33", "generation": "        List<Integer> result = new ArrayList<>(l);\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                result.set(i, l.get(i));\n            }\n        }\n        List<Integer> sortedValues = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                sortedValues.add(l.get(i));\n            }\n        }\n        Collections.sort(sortedValues);\n        int sortedIndex = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                result.set(i, sortedValues.get(sortedIndex));\n                sortedIndex++;\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/34", "generation": "        Set<Integer> set = new HashSet<>(l);\n        List<Integer> uniqueList = new ArrayList<>(set);\n        Collections.sort(uniqueList);\n        return uniqueList;\n    }\n}\n"}
{"task_id": "Java/35", "generation": "        int max = Integer.MIN_VALUE;\n        for (int num : l) {\n            if (num > max) {\n                max = num;\n            }\n        }\n        return max;\n    }\n}\n"}
{"task_id": "Java/36", "generation": "        int count = 0;\n        for (int i = 1; i < n; i++) {\n            if ((i % 11 == 0 || i % 13 == 0) && String.valueOf(i).contains(\"7\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/37", "generation": "        List<Integer> sortedList = new ArrayList<>(l);\n        for (int i = 0; i < sortedList.size(); i += 2) {\n            if (i + 1 < sortedList.size()) {\n                sortedList.set(i + 1, l.get(i + 1));\n            }\n        }\n        for (int i = 0; i < sortedList.size(); i += 2) {\n            if (i + 1 < sortedList.size()) {\n                sortedList.set(i, Math.min(l.get(i), l.get(i + 1)));\n                sortedList.set(i + 1, Math.max(l.get(i), l.get(i + 1)));\n            }\n        }\n        return sortedList;\n    }\n}\n"}
{"task_id": "Java/38", "generation": "        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}\n"}
{"task_id": "Java/39", "generation": "        int a = 2, b = 3, c;\n        int count = 2;\n        while (count < n) {\n            c = a + b;\n            a = b;\n            b = c;\n            if (isPrime(c)) {\n                count++;\n            }\n        }\n        return b;\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/40", "generation": "        for (int i = 0; i < l.size() - 2; i++) {\n            for (int j = i + 1; j < l.size() - 1; j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/41", "generation": "        return n * (n - 1);\n    }\n}\n"}
{"task_id": "Java/42", "generation": "        return l.stream()\n                .map(num -> num + 1)\n                .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/43", "generation": "        Set<Integer> set = new HashSet<>();\n        for (int num : l) {\n            if (set.contains(-num)) {\n                return true;\n            }\n            set.add(num);\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/44", "generation": "        return Integer.toString(x, base);\n    }\n}\n"}
{"task_id": "Java/45", "generation": "        return 0.5 * a * h;\n    }\n}\n"}
{"task_id": "Java/46", "generation": "        if (n == 0 || n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 2;\n        }\n        \n        int[] fib4Array = new int[n + 1];\n        fib4Array[0] = 0;\n        fib4Array[1] = 0;\n        fib4Array[2] = 2;\n        fib4Array[3] = 0;\n        \n        for (int i = 4; i <= n; i++) {\n            fib4Array[i] = fib4Array[i - 1] + fib4Array[i - 2] + fib4Array[i - 3] + fib4Array[i - 4];\n        }\n        \n        return fib4Array[n];\n    }\n}\n"}
{"task_id": "Java/47", "generation": "        Collections.sort(l);\n        int size = l.size();\n        if (size % 2 == 0) {\n            return (l.get(size / 2 - 1) + l.get(size / 2)) / 2.0;\n        } else {\n            return l.get(size / 2);\n        }\n    }\n}\n"}
{"task_id": "Java/48", "generation": "        int left = 0;\n        int right = text.length() - 1;\n        while (left < right) {\n            if (text.charAt(left) != text.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/49", "generation": "        return (int) (Math.pow(2, n) % p);\n    }\n}\n"}
{"task_id": "Java/50", "generation": "        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 5 - 'a' + 26) % 26));\n        }\n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/51", "generation": "        return text.replaceAll(\"[aeiouAEIOU]\", \"\");\n    }\n}\n"}
{"task_id": "Java/52", "generation": "        for (int num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/53", "generation": "        return x + y;\n    }\n}\n"}
{"task_id": "Java/54", "generation": "        char[] arr0 = s0.toCharArray();\n        char[] arr1 = s1.toCharArray();\n        Arrays.sort(arr0);\n        Arrays.sort(arr1);\n        return Arrays.equals(arr0, arr1);\n    }\n}\n"}
{"task_id": "Java/55", "generation": "        if (n <= 1) {\n            return n;\n        }\n        int a = 0, b = 1;\n        for (int i = 2; i <= n; i++) {\n            int temp = a + b;\n            a = b;\n            b = temp;\n        }\n        return b;\n    }\n}\n"}
{"task_id": "Java/56", "generation": "        Stack<Character> stack = new Stack<>();\n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '<') {\n                stack.push(bracket);\n            } else if (bracket == '>') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n"}
{"task_id": "Java/57", "generation": "        boolean increasing = true;\n        boolean decreasing = true;\n        \n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n                increasing = false;\n            }\n            if (l.get(i) > l.get(i - 1)) {\n                decreasing = false;\n            }\n        }\n        \n        return increasing || decreasing;\n    }\n}\n"}
{"task_id": "Java/58", "generation": "        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        \n        set1.retainAll(set2);\n        \n        List<Integer> result = new ArrayList<>(set1);\n        Collections.sort(result);\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/59", "generation": "        int maxPrime = -1;\n        while (n % 2 == 0) {\n            maxPrime = 2;\n            n /= 2;\n        }\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                maxPrime = i;\n                n /= i;\n            }\n        }\n        if (n > 2) {\n            maxPrime = n;\n        }\n        return maxPrime;\n    }\n}\n"}
{"task_id": "Java/60", "generation": "        return n * (n + 1) / 2;\n    }\n}\n"}
{"task_id": "Java/61", "generation": "        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n"}
{"task_id": "Java/62", "generation": "        List<Integer> derivative = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            derivative.add(xs.get(i) * i);\n        }\n        return derivative;\n    }\n}\n"}
{"task_id": "Java/63", "generation": "        if (n == 0 || n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 1;\n        }\n        \n        int[] fibfib = new int[n + 1];\n        fibfib[0] = 0;\n        fibfib[1] = 0;\n        fibfib[2] = 1;\n        \n        for (int i = 3; i <= n; i++) {\n            fibfib[i] = fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3];\n        }\n        \n        return fibfib[n];\n    }\n}\n"}
{"task_id": "Java/64", "generation": "        int count = 0;\n        String vowels = \"aeiouyAEIOUY\";\n        for (int i = 0; i < s.length(); i++) {\n            if (vowels.contains(String.valueOf(s.charAt(i)))) {\n                if (i == s.length() - 1 && (s.charAt(i) == 'y' || s.charAt(i) == 'Y')) {\n                    count++;\n                } else if (vowels.contains(String.valueOf(s.charAt(i)))) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/65", "generation": "        String numStr = String.valueOf(x);\n        int len = numStr.length();\n        shift = shift % len;\n        \n        if (shift == 0) {\n            return numStr;\n        } else {\n            String shiftedStr = numStr.substring(len - shift) + numStr.substring(0, len - shift);\n            return shiftedStr;\n        }\n    }\n}\n"}
{"task_id": "Java/66", "generation": "        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += (int) c;\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/67", "generation": "        String[] parts = s.split(\" \");\n        int apples = Integer.parseInt(parts[0]);\n        int oranges = Integer.parseInt(parts[parts.length - 2]);\n        return n - apples - oranges;\n    }\n}\n"}
{"task_id": "Java/68", "generation": "        List<Integer> result = new ArrayList<>();\n        int smallestValue = Integer.MAX_VALUE;\n        int smallestIndex = -1;\n\n        for (int i = 0; i < arr.size(); i++) {\n            int current = arr.get(i);\n            if (current % 2 == 0 && current < smallestValue) {\n                smallestValue = current;\n                smallestIndex = i;\n            }\n        }\n\n        if (smallestIndex != -1) {\n            result.add(smallestValue);\n            result.add(smallestIndex);\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/69", "generation": "        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n\n        int maxNum = -1;\n        for (int num : frequencyMap.keySet()) {\n            if (num > 0 && frequencyMap.get(num) >= num && num > maxNum) {\n                maxNum = num;\n            }\n        }\n\n        return maxNum;\n    }\n}\n"}
{"task_id": "Java/70", "generation": "        Collections.sort(lst);\n        List<Integer> result = new ArrayList<>();\n        int left = 0, right = lst.size() - 1;\n        while (left <= right) {\n            result.add(lst.get(left++));\n            if (left <= right) {\n                result.add(lst.get(right--));\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/71", "generation": "        if (a + b > c && a + c > b && b + c > a) {\n            double s = (a + b + c) / 2;\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            return Math.round(area * 100.0) / 100.0;\n        } else {\n            return -1;\n        }\n    }\n}\n"}
{"task_id": "Java/72", "generation": "        int sum = q.stream().mapToInt(Integer::intValue).sum();\n        boolean isBalanced = new StringBuilder(q.toString()).reverse().toString().equals(q.toString());\n        return isBalanced && sum <= w;\n    }\n}\n"}
{"task_id": "Java/73", "generation": "        int count = 0;\n        for (int i = 0; i < arr.size() / 2; i++) {\n            if (!arr.get(i).equals(arr.get(arr.size() - 1 - i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/74", "generation": "        int totalChars1 = lst1.stream().mapToInt(String::length).sum();\n        int totalChars2 = lst2.stream().mapToInt(String::length).sum();\n\n        if (totalChars1 < totalChars2 || (totalChars1 == totalChars2 && lst1.size() <= lst2.size())) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}\n"}
{"task_id": "Java/75", "generation": "        if (a < 2) {\n            return false;\n        }\n        for (int i = 2; i < a; i++) {\n            if (a % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/76", "generation": "        if (x == 1) {\n            return true;\n        }\n        int power = 1;\n        while (power < x) {\n            power *= n;\n        }\n        return power == x;\n    }\n}\n"}
{"task_id": "Java/77", "generation": "        int cubeRoot = (int) Math.cbrt(a);\n        return cubeRoot * cubeRoot * cubeRoot == a;\n    }\n}\n"}
{"task_id": "Java/78", "generation": "        int count = 0;\n        String primes = \"2357BD\";\n        for (int i = 0; i < num.length(); i++) {\n            if (primes.contains(Character.toString(num.charAt(i)))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/79", "generation": "        String binary = Integer.toBinaryString(decimal);\n        return \"db\" + binary + \"db\";\n    }\n}\n"}
{"task_id": "Java/80", "generation": "        if (s.length() < 3) {\n            return false;\n        }\n        \n        for (int i = 0; i <= s.length() - 3; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/81", "generation": "        List<String> letterGrades = new ArrayList<>();\n        for (double gpa : grades) {\n            if (gpa == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (gpa > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (gpa > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (gpa > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (gpa > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (gpa > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (gpa > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (gpa > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (gpa > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (gpa > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (gpa > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (gpa > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}\n"}
{"task_id": "Java/82", "generation": "        int length = string.length();\n        if (length <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/83", "generation": "        int count = (int) Math.pow(10, n - 1) * 2;\n        return count;\n    }\n}\n"}
{"task_id": "Java/84", "generation": "        int sum = 0;\n        while (N > 0) {\n            sum += N % 2;\n            N /= 2;\n        }\n        return Integer.toBinaryString(sum);\n    }\n}\n"}
{"task_id": "Java/85", "generation": "        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/86", "generation": "        String[] words = s.split(\" \");\n        StringBuilder result = new StringBuilder();\n        \n        for (String word : words) {\n            char[] chars = word.toCharArray();\n            Arrays.sort(chars);\n            result.append(chars).append(\" \");\n        }\n        \n        return result.toString().trim();\n    }\n}\n"}
{"task_id": "Java/87", "generation": "        List<List<Integer>> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    List<Integer> coordinate = new ArrayList<>();\n                    coordinate.add(i);\n                    coordinate.add(j);\n                    result.add(coordinate);\n                }\n            }\n        }\n        result.sort((a, b) -> a.get(0) - b.get(0));\n        result.forEach(row -> row.sort(Comparator.reverseOrder()));\n        return result;\n    }\n}\n"}
{"task_id": "Java/88", "generation": "        List<Integer> sortedArray = new ArrayList<>(array);\n        int sum = sortedArray.get(0) + sortedArray.get(sortedArray.size() - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(sortedArray, Collections.reverseOrder());\n        } else {\n            Collections.sort(sortedArray);\n        }\n        return sortedArray;\n    }\n}\n"}
{"task_id": "Java/89", "generation": "        StringBuilder encrypted = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                char base = Character.isUpperCase(c) ? 'A' : 'a';\n                char encryptedChar = (char) (base + (c - base + 2 * 2) % 26);\n                encrypted.append(encryptedChar);\n            } else {\n                encrypted.append(c);\n            }\n        }\n        return encrypted.toString();\n    }\n}\n"}
{"task_id": "Java/90", "generation": "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n        List<Integer> sortedList = new ArrayList<>(lst);\n        Collections.sort(sortedList);\n        return Optional.of(sortedList.get(1));\n    }\n}\n"}
{"task_id": "Java/91", "generation": "        String[] sentences = S.split(\"[.!?]\");\n        int count = 0;\n        for (String sentence : sentences) {\n            if (sentence.trim().startsWith(\"I\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/92", "generation": "        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int a = (int) x;\n            int b = (int) y;\n            int c = (int) z;\n            return a == b + c || b == a + c || c == a + b;\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/93", "generation": "        StringBuilder encodedMessage = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            if (Character.isLetter(c)) {\n                char encodedChar = (char) (c ^ 32); // Toggle case\n                if (\"aeiouAEIOU\".indexOf(c) != -1) {\n                    encodedChar = (char) (c + 2);\n                }\n                encodedMessage.append(encodedChar);\n            } else {\n                encodedMessage.append(c);\n            }\n        }\n        return encodedMessage.toString();\n    }\n}\n"}
{"task_id": "Java/94", "generation": "        int maxPrime = 0;\n        for (int num : lst) {\n            if (isPrime(num) && num > maxPrime) {\n                maxPrime = num;\n            }\n        }\n        return sumOfDigits(maxPrime);\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private int sumOfDigits(int num) {\n        int sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/95", "generation": "        if (dict.isEmpty()) {\n            return false;\n        }\n\n        boolean allLowerCase = true;\n        boolean allUpperCase = true;\n\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n\n            String strKey = (String) key;\n            if (!strKey.equals(strKey.toLowerCase())) {\n                allLowerCase = false;\n            }\n            if (!strKey.equals(strKey.toUpperCase())) {\n                allUpperCase = false;\n            }\n        }\n\n        return allLowerCase || allUpperCase;\n    }\n}\n"}
{"task_id": "Java/96", "generation": "        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/97", "generation": "        return Math.abs(a % 10) * Math.abs(b % 10);\n    }\n}\n"}
{"task_id": "Java/98", "generation": "        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c) && (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/99", "generation": "        double number = Double.parseDouble(value);\n        int floor = (int) Math.floor(number);\n        int ceil = (int) Math.ceil(number);\n        if (number - floor < ceil - number) {\n            return floor;\n        } else {\n            return ceil;\n        }\n    }\n}\n"}
{"task_id": "Java/100", "generation": "        List<Integer> stones = new ArrayList<>();\n        stones.add(n);\n        for (int i = 1; i < n; i++) {\n            if (n % 2 == 0) {\n                n += 2;\n            } else {\n                n += 1;\n            }\n            stones.add(n);\n        }\n        return stones;\n    }\n}\n"}
{"task_id": "Java/101", "generation": "        return Arrays.asList(s.split(\"[,\\\\s]+\"));\n    }\n}\n"}
{"task_id": "Java/102", "generation": "        for (int i = y; i >= x; i--) {\n            if (i % 2 == 0) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}\n"}
{"task_id": "Java/103", "generation": "        if (n > m) {\n            return -1;\n        }\n        \n        int sum = 0;\n        int count = 0;\n        \n        for (int i = n; i <= m; i++) {\n            sum += i;\n            count++;\n        }\n        \n        int avg = Math.round((float) sum / count);\n        \n        return Integer.toBinaryString(avg);\n    }\n}\n"}
{"task_id": "Java/104", "generation": "        List<Integer> result = new ArrayList<>();\n        for (int num : x) {\n            if (hasNoEvenDigit(num)) {\n                result.add(num);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n\n    private boolean hasNoEvenDigit(int num) {\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                return false;\n            }\n            num /= 10;\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/105", "generation": "        List<String> result = new ArrayList<>();\n        List<Integer> filteredArr = arr.stream()\n                .filter(num -> num >= 1 && num <= 9)\n                .sorted()\n                .collect(Collectors.toList());\n\n        Collections.reverse(filteredArr);\n\n        for (int num : filteredArr) {\n            switch (num) {\n                case 1:\n                    result.add(\"One\");\n                    break;\n                case 2:\n                    result.add(\"Two\");\n                    break;\n                case 3:\n                    result.add(\"Three\");\n                    break;\n                case 4:\n                    result.add(\"Four\");\n                    break;\n                case 5:\n                    result.add(\"Five\");\n                    break;\n                case 6:\n                    result.add(\"Six\");\n                    break;\n                case 7:\n                    result.add(\"Seven\");\n                    break;\n                case 8:\n                    result.add(\"Eight\");\n                    break;\n                case 9:\n                    result.add(\"Nine\");\n                    break;\n            }\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/106", "generation": "        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sumFrom1ToN(i));\n            }\n        }\n        return result;\n    }\n\n    private int factorial(int n) {\n        if (n == 0) {\n            return 1;\n        }\n        int result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n\n    private int sumFrom1ToN(int n) {\n        return n * (n + 1) / 2;\n    }\n}\n"}
{"task_id": "Java/107", "generation": "        List<Integer> result = new ArrayList<>();\n        int evenCount = 0;\n        int oddCount = 0;\n        \n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n        \n        result.add(evenCount);\n        result.add(oddCount);\n        \n        return result;\n    }\n    \n    private boolean isPalindrome(int num) {\n        String str = String.valueOf(num);\n        int left = 0;\n        int right = str.length() - 1;\n        \n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/108", "generation": "        int count = 0;\n        for (int num : arr) {\n            int sum = 0;\n            int temp = Math.abs(num);\n            while (temp != 0) {\n                sum += temp % 10;\n                temp /= 10;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/109", "generation": "        if (arr == null || arr.isEmpty()) {\n            return true;\n        }\n\n        List<Integer> sortedArr = new ArrayList<>(arr);\n        Collections.sort(sortedArr);\n\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.equals(sortedArr)) {\n                return true;\n            }\n            Collections.rotate(arr, 1);\n        }\n\n        return false;\n    }\n}\n"}
{"task_id": "Java/110", "generation": "        int sum1 = lst1.stream().mapToInt(Integer::intValue).sum();\n        int sum2 = lst2.stream().mapToInt(Integer::intValue).sum();\n        return sum1 % 2 == 0 || (sum1 - sum2) % 2 == 0 ? \"YES\" : \"NO\";\n    }\n}\n"}
{"task_id": "Java/111", "generation": "        Map<String, Integer> map = new HashMap<>();\n        String[] letters = test.split(\" \");\n        \n        for (String letter : letters) {\n            map.put(letter, map.getOrDefault(letter, 0) + 1);\n        }\n        \n        int maxCount = 0;\n        for (int count : map.values()) {\n            maxCount = Math.max(maxCount, count);\n        }\n        \n        Map<String, Integer> result = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : map.entrySet()) {\n            if (entry.getValue() == maxCount) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/112", "generation": "        // Delete characters in s that are equal to any character in c\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            if (c.indexOf(s.charAt(i)) == -1) {\n                result.append(s.charAt(i));\n            }\n        }\n\n        // Check if the result string is palindrome\n        boolean isPalindrome = true;\n        for (int i = 0; i < result.length() / 2; i++) {\n            if (result.charAt(i) != result.charAt(result.length() - 1 - i)) {\n                isPalindrome = false;\n                break;\n            }\n        }\n\n        // Return the result string and true/false for the check\n        List<Object> output = new ArrayList<>();\n        output.add(result.toString());\n        output.add(isPalindrome);\n        return output;\n    }\n}\n"}
{"task_id": "Java/113", "generation": "        List<String> result = new ArrayList<>();\n        for (String str : lst) {\n            int oddCount = 0;\n            for (char c : str.toCharArray()) {\n                if (Character.isDigit(c) && (c - '0') % 2 != 0) {\n                    oddCount++;\n                }\n            }\n            result.add(\"the number of odd elements \" + oddCount + \"n the str\" + oddCount + \"ng \" + str + \" of the \" + oddCount + \"nput.\");\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/114", "generation": "        int minSum = Integer.MAX_VALUE;\n        int currentSum = 0;\n        \n        for (int num : nums) {\n            currentSum = Math.min(num, currentSum + num);\n            minSum = Math.min(minSum, currentSum);\n        }\n        \n        return minSum;\n    }\n}\n"}
{"task_id": "Java/115", "generation": "        int totalWater = 0;\n        int totalOperations = 0;\n        \n        for (List<Integer> row : grid) {\n            int currentWater = 0;\n            for (int well : row) {\n                currentWater += well;\n            }\n            totalWater += currentWater;\n            totalOperations += (int) Math.ceil((double) currentWater / capacity);\n        }\n        \n        return totalOperations;\n    }\n}\n"}
{"task_id": "Java/116", "generation": "        Collections.sort(arr, (a, b) -> {\n            int countA = Integer.bitCount(a);\n            int countB = Integer.bitCount(b);\n            if (countA == countB) {\n                return a - b;\n            }\n            return countA - countB;\n        });\n        return arr;\n    }\n}\n"}
{"task_id": "Java/117", "generation": "        List<String> result = new ArrayList<>();\n        if (s.isEmpty()) {\n            return result;\n        }\n        \n        String[] words = s.split(\" \");\n        for (String word : words) {\n            int consonantCount = 0;\n            for (char c : word.toCharArray()) {\n                if (\"aeiouAEIOU\".indexOf(c) == -1) {\n                    consonantCount++;\n                }\n            }\n            if (consonantCount == n) {\n                result.add(word);\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/118", "generation": "        char[] vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n        char[] chars = word.toCharArray();\n        for (int i = chars.length - 2; i > 0; i--) {\n            if (isConsonant(chars[i]) && isVowel(chars[i + 1]) && isConsonant(chars[i - 1])) {\n                return String.valueOf(chars[i + 1]);\n            }\n        }\n        return \"\";\n    }\n\n    private boolean isVowel(char c) {\n        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U';\n    }\n\n    private boolean isConsonant(char c) {\n        return Character.isLetter(c) && !isVowel(c);\n    }\n}\n"}
{"task_id": "Java/119", "generation": "        int count = 0;\n        for (String str : lst) {\n            for (char c : str.toCharArray()) {\n                if (c == '(') {\n                    count++;\n                } else {\n                    count--;\n                }\n                if (count < 0) {\n                    return \"No\";\n                }\n            }\n        }\n        return count == 0 ? \"Yes\" : \"No\";\n    }\n}\n"}
{"task_id": "Java/120", "generation": "        Collections.sort(arr, Collections.reverseOrder());\n        return arr.subList(0, k);\n    }\n}\n"}
{"task_id": "Java/121", "generation": "        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/122", "generation": "        int sum = 0;\n        for (int i = 0; i < k && i < arr.size(); i++) {\n            if (Math.abs(arr.get(i)) < 100) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/123", "generation": "        List<Integer> result = new ArrayList<>();\n        while (n != 1) {\n            if (n % 2 != 0) {\n                result.add(n);\n            }\n            n = n % 2 == 0 ? n / 2 : 3 * n + 1;\n        }\n        result.add(1);\n        Collections.sort(result);\n        return result;\n    }\n}\n"}
{"task_id": "Java/124", "generation": "        if (date == null || date.isEmpty()) {\n            return false;\n        }\n\n        String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n            return false;\n        }\n\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        if ((month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) && (day < 1 || day > 31)) {\n            return false;\n        }\n\n        if ((month == 4 || month == 6 || month == 9 || month == 11) && (day < 1 || day > 30)) {\n            return false;\n        }\n\n        if (month == 2) {\n            if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) {\n                if (day < 1 || day > 29) {\n                    return false;\n                }\n            } else {\n                if (day < 1 || day > 28) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n}\n"}
{"task_id": "Java/125", "generation": "        String[] words = txt.split(\"\\\\s+\");\n        if (words.length == 1) {\n            words = txt.split(\",\");\n        }\n        if (words.length == 1) {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && (c - 'a') % 2 == 1) {\n                    count++;\n                }\n            }\n            return count;\n        }\n        return words;\n    }\n}\n"}
{"task_id": "Java/126", "generation": "        Set<Integer> set = new HashSet<>();\n        int prev = Integer.MIN_VALUE;\n\n        for (int num : lst) {\n            if (num == prev) {\n                return false;\n            }\n            if (num < prev) {\n                return false;\n            }\n            prev = num;\n            set.add(num);\n        }\n\n        return set.size() == lst.size();\n    }\n}\n"}
{"task_id": "Java/127", "generation": "        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n\n        int intersectionStart = Math.max(start1, start2);\n        int intersectionEnd = Math.min(end1, end2);\n\n        int intersectionLength = Math.max(0, intersectionEnd - intersectionStart + 1);\n\n        if (isPrime(intersectionLength)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/128", "generation": "        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int sum = 0;\n        int product = 1;\n\n        for (int num : arr) {\n            sum += Math.abs(num);\n            if (num > 0) {\n                product *= 1;\n            } else if (num < 0) {\n                product *= -1;\n            }\n        }\n\n        return Optional.of(sum * product);\n    }\n}\n"}
{"task_id": "Java/129", "generation": "        int n = grid.size();\n        int[][] dirs = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n        boolean[][] visited = new boolean[n][n];\n        List<Integer> path = new ArrayList<>();\n        int[] minPath = new int[k];\n        \n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                visited[i][j] = true;\n                dfs(grid, i, j, visited, path, minPath, 0, k, dirs);\n                visited[i][j] = false;\n            }\n        }\n        \n        List<Integer> result = new ArrayList<>();\n        for (int val : minPath) {\n            result.add(val);\n        }\n        \n        return result;\n    }\n    \n    private void dfs(List<List<Integer>> grid, int row, int col, boolean[][] visited, List<Integer> path, int[] minPath, int step, int k, int[][] dirs) {\n        path.add(grid.get(row).get(col));\n        \n        if (step == k - 1) {\n            if (isLexicographicallySmaller(path, minPath)) {\n                for (int i = 0; i < k; i++) {\n                    minPath[i] = path.get(i);\n                }\n            }\n        } else {\n            for (int[] dir : dirs) {\n                int newRow = row + dir[0];\n                int newCol = col + dir[1];\n                if (isValid(newRow, newCol, grid.size()) && !visited[newRow][newCol]) {\n                    visited[newRow][newCol] = true;\n                    dfs(grid, newRow, newCol, visited, path, minPath, step + 1, k, dirs);\n                    visited[newRow][newCol] = false;\n                }\n            }\n        }\n        \n        path.remove(path.size() - 1);\n    }\n    \n    private boolean isValid(int row, int col, int n) {\n        return row >= 0 && row < n && col >= 0 && col < n;\n    }\n    \n    private boolean isLexicographicallySmaller(List<Integer> path, int[] minPath) {\n        for (int i = 0; i < path.size(); i++) {\n            if (path.get(i) < minPath[i]) {\n                return true;\n            } else if (path.get(i) > minPath[i]) {\n                return false;\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/130", "generation": "        List<Integer> result = new ArrayList<>();\n        if (n == 0) {\n            return result;\n        }\n        result.add(0);\n        if (n == 1) {\n            return result;\n        }\n        result.add(1);\n        if (n == 2) {\n            return result;\n        }\n        result.add(1);\n        int a = 0, b = 1, c = 1;\n        for (int i = 3; i <= n; i++) {\n            int next = a + b + c;\n            result.add(next);\n            a = b;\n            b = c;\n            c = next;\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/131", "generation": "        int product = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n            }\n            n /= 10;\n        }\n        return product == 1 ? 0 : product;\n    }\n}\n"}
{"task_id": "Java/132", "generation": "        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']' && !stack.isEmpty()) {\n                stack.pop();\n            }\n        }\n        return !stack.isEmpty();\n    }\n}\n"}
{"task_id": "Java/133", "generation": "        int sum = 0;\n        for (double num : lst) {\n            sum += Math.ceil(num) * Math.ceil(num);\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/134", "generation": "        if (txt.isEmpty()) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        return Character.isLetter(lastChar) && !Character.isLetterOrDigit(txt.charAt(txt.length() - 2));\n    }\n}\n"}
{"task_id": "Java/135", "generation": "        int largestIndex = -1;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                largestIndex = i - 1;\n            }\n        }\n        return largestIndex;\n    }\n}\n"}
{"task_id": "Java/136", "generation": "        List<Optional<Integer>> result = new ArrayList<>();\n        List<Integer> negatives = lst.stream().filter(i -> i < 0).collect(Collectors.toList());\n        List<Integer> positives = lst.stream().filter(i -> i > 0).collect(Collectors.toList());\n\n        if (negatives.isEmpty()) {\n            result.add(Optional.empty());\n        } else {\n            result.add(Optional.of(Collections.max(negatives)));\n        }\n\n        if (positives.isEmpty()) {\n            result.add(Optional.empty());\n        } else {\n            result.add(Optional.of(Collections.min(positives)));\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/137", "generation": "        if (a instanceof Integer && b instanceof Integer) {\n            int intA = (int) a;\n            int intB = (int) b;\n            if (intA > intB) {\n                return Optional.of(intA);\n            } else if (intB > intA) {\n                return Optional.of(intB);\n            }\n        } else if (a instanceof Double && b instanceof Double) {\n            double doubleA = (double) a;\n            double doubleB = (double) b;\n            if (doubleA > doubleB) {\n                return Optional.of(doubleA);\n            } else if (doubleB > doubleA) {\n                return Optional.of(doubleB);\n            }\n        } else if (a instanceof String && b instanceof String) {\n            String strA = (String) a;\n            String strB = (String) b;\n            if (strA.contains(\".\") || strA.contains(\",\")) {\n                strA = strA.replace(\",\", \".\");\n            }\n            if (strB.contains(\".\") || strB.contains(\",\")) {\n                strB = strB.replace(\",\", \".\");\n            }\n            double doubleA = Double.parseDouble(strA);\n            double doubleB = Double.parseDouble(strB);\n            if (doubleA > doubleB) {\n                return Optional.of(strA);\n            } else if (doubleB > doubleA) {\n                return Optional.of(strB);\n            }\n        }\n        return Optional.empty();\n    }\n"}
{"task_id": "Java/138", "generation": "        return n % 2 == 0 && n >= 8;\n    }\n}\n"}
{"task_id": "Java/139", "generation": "        long result = 1;\n        for (int i = n; i > 0; i--) {\n            long factorial = 1;\n            for (int j = i; j > 0; j--) {\n                factorial *= j;\n            }\n            result *= factorial;\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/140", "generation": "        return text.replaceAll(\"\\\\s{2,}\", \"-\").replaceAll(\"\\\\s\", \"_\");\n    }\n}\n"}
{"task_id": "Java/141", "generation": "        int dotIndex = file_name.indexOf('.');\n        if (dotIndex == -1 || dotIndex == 0 || dotIndex == file_name.length() - 1) {\n            return \"No\";\n        }\n\n        String beforeDot = file_name.substring(0, dotIndex);\n        String afterDot = file_name.substring(dotIndex + 1);\n\n        if (beforeDot.isEmpty() || !Character.isLetter(beforeDot.charAt(0))) {\n            return \"No\";\n        }\n\n        if (afterDot.equals(\"txt\") || afterDot.equals(\"exe\") || afterDot.equals(\"dll\")) {\n            int digitCount = 0;\n            for (char c : file_name.toCharArray()) {\n                if (Character.isDigit(c)) {\n                    digitCount++;\n                }\n            }\n            if (digitCount > 3) {\n                return \"No\";\n            }\n            return \"Yes\";\n        }\n\n        return \"No\";\n    }\n}\n"}
{"task_id": "Java/142", "generation": "        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                lst.set(i, lst.get(i) * lst.get(i));\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                lst.set(i, lst.get(i) * lst.get(i) * lst.get(i));\n            }\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/143", "generation": "        String[] words = sentence.split(\" \");\n        StringBuilder result = new StringBuilder();\n        \n        for (String word : words) {\n            if (isPrime(word.length())) {\n                result.append(word).append(\" \");\n            }\n        }\n        \n        return result.toString().trim();\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/144", "generation": "        String[] fraction1 = x.split(\"/\");\n        String[] fraction2 = n.split(\"/\");\n\n        int numerator1 = Integer.parseInt(fraction1[0]);\n        int denominator1 = Integer.parseInt(fraction1[1]);\n        int numerator2 = Integer.parseInt(fraction2[0]);\n        int denominator2 = Integer.parseInt(fraction2[1);\n\n        return (numerator1 * denominator2) % (denominator1 * numerator2) == 0;\n    }\n}\n"}
{"task_id": "Java/145", "generation": "        Collections.sort(nums, (a, b) -> {\n            int sumA = getDigitSum(a);\n            int sumB = getDigitSum(b);\n            if (sumA == sumB) {\n                return nums.indexOf(a) - nums.indexOf(b);\n            }\n            return sumA - sumB;\n        });\n        return nums;\n    }\n\n    private int getDigitSum(int num) {\n        int sum = 0;\n        num = Math.abs(num);\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/146", "generation": "        int count = 0;\n        for (int num : nums) {\n            if (num > 10) {\n                String numStr = String.valueOf(Math.abs(num));\n                char firstDigit = numStr.charAt(0);\n                char lastDigit = numStr.charAt(numStr.length() - 1);\n                if (isOddDigit(firstDigit) && isOddDigit(lastDigit)) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n\n    private boolean isOddDigit(char digit) {\n        return digit == '1' || digit == '3' || digit == '5' || digit == '7' || digit == '9';\n    }\n}\n"}
{"task_id": "Java/147", "generation": "        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            int val = i * i - i + 1;\n            if (val % 3 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/148", "generation": "        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n        \n        if (index1 == -1 || index2 == -1) {\n            return new ArrayList<>();\n        }\n        \n        int start = Math.min(index1, index2);\n        int end = Math.max(index1, index2);\n        \n        List<String> result = new ArrayList<>();\n        for (int i = start + 1; i < end; i++) {\n            result.add(planets.get(i));\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/149", "generation": "        lst.removeIf(s -> s.length() % 2 != 0);\n        lst.sort(Comparator.comparing(String::length).thenComparing(Comparator.naturalOrder()));\n        return lst;\n    }\n}\n"}
{"task_id": "Java/150", "generation": "        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/151", "generation": "        int sum = 0;\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int num = (int) obj;\n                if (num > 0 && num % 2 != 0) {\n                    sum += num * num;\n                }\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/152", "generation": "        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            result.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/153", "generation": "        String strongestExtension = \"\";\n        int maxStrength = Integer.MIN_VALUE;\n\n        for (String extension : extensions) {\n            int capCount = 0;\n            int smCount = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    capCount++;\n                } else if (Character.isLowerCase(c)) {\n                    smCount++;\n                }\n            }\n            int strength = capCount - smCount;\n            if (strength > maxStrength || (strength == maxStrength && strongestExtension.isEmpty())) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n\n        return class_name + \".\" + strongestExtension;\n    }\n"}
{"task_id": "Java/154", "generation": "        if (a.length() != b.length()) {\n            return false;\n        }\n        \n        String combined = a + a;\n        return combined.contains(b);\n    }\n}\n"}
{"task_id": "Java/155", "generation": "        List<Integer> result = new ArrayList<>();\n        int evenCount = 0;\n        int oddCount = 0;\n        \n        String numStr = String.valueOf(Math.abs(num));\n        \n        for (int i = 0; i < numStr.length(); i++) {\n            int digit = Character.getNumericValue(numStr.charAt(i));\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n        \n        result.add(evenCount);\n        result.add(oddCount);\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/156", "generation": "        String[] romanNumerals = {\"i\", \"iv\", \"v\", \"ix\", \"x\", \"xl\", \"l\", \"xc\", \"c\", \"cd\", \"d\", \"cm\", \"m\"};\n        int[] values = {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n        StringBuilder result = new StringBuilder();\n\n        for (int i = values.length - 1; i >= 0; i--) {\n            while (number >= values[i]) {\n                result.append(romanNumerals[i]);\n                number -= values[i];\n            }\n        }\n\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/157", "generation": "        int max = Math.max(Math.max(a, b), c);\n        if (max == a) {\n            return a * a == b * b + c * c;\n        } else if (max == b) {\n            return b * b == a * a + c * c;\n        } else {\n            return c * c == a * a + b * b;\n        }\n    }\n}\n"}
{"task_id": "Java/158", "generation": "        String maxWord = \"\";\n        int maxUniqueChars = 0;\n\n        for (String word : words) {\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                uniqueChars.add(c);\n            }\n            if (uniqueChars.size() > maxUniqueChars || (uniqueChars.size() == maxUniqueChars && word.compareTo(maxWord) < 0)) {\n                maxWord = word;\n                maxUniqueChars = uniqueChars.size();\n            }\n        }\n\n        return maxWord;\n    }\n}\n"}
{"task_id": "Java/159", "generation": "        int totalEaten = number + need;\n        int carrotsLeft = Math.max(0, remaining - need);\n        return Arrays.asList(totalEaten, carrotsLeft);\n    }\n}\n"}
{"task_id": "Java/160", "generation": "        int result = operand.get(0);\n        for (int i = 0; i < operator.size(); i++) {\n            String op = operator.get(i);\n            int num = operand.get(i + 1);\n            switch (op) {\n                case \"+\":\n                    result += num;\n                    break;\n                case \"-\":\n                    result -= num;\n                    break;\n                case \"*\":\n                    result *= num;\n                    break;\n                case \"/\":\n                    result /= num;\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, num);\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Invalid operator: \" + op);\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/161", "generation": "        char[] chars = s.toCharArray();\n        boolean hasLetter = false;\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLetter(chars[i])) {\n                hasLetter = true;\n                chars[i] = Character.isUpperCase(chars[i]) ? Character.toLowerCase(chars[i]) : Character.toUpperCase(chars[i]);\n            }\n        }\n        if (!hasLetter) {\n            StringBuilder sb = new StringBuilder(s);\n            return sb.reverse().toString();\n        }\n        return new String(chars);\n    }\n}\n"}
{"task_id": "Java/162", "generation": "        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        StringBuilder sb = new StringBuilder();\n        for (byte b : digest) {\n            sb.append(String.format(\"%02x\", b & 0xff));\n        }\n        return Optional.of(sb.toString());\n    }\n}\n"}
{"task_id": "Java/163", "generation": "        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}\n"}
