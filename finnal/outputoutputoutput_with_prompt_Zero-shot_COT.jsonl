{"task_id": "Java/0", "generation": "        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)); // false\n        System.out.println(solution.hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)); // true\n    }\n}\n"}
{"task_id": "Java/1", "generation": "        List<String> result = new ArrayList<>();\n        int count = 0;\n        StringBuilder sb = new StringBuilder();\n        \n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                count++;\n            } else if (c == ')') {\n                count--;\n            }\n            \n            sb.append(c);\n            \n            if (count == 0) {\n                result.add(sb.toString().replaceAll(\"\\\\s\", \"\"));\n                sb.setLength(0);\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/2", "generation": "        // Extract the integer part\n        int integerPart = (int) number;\n\n        // Calculate the decimal part\n        double decimalPart = number - integerPart;\n\n        return decimalPart;\n    }\n}\n"}
{"task_id": "Java/3", "generation": "        int balance = 0;\n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/4", "generation": "        // Calculate the mean of the numbers\n        double sum = 0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n\n        // Calculate the Mean Absolute Deviation\n        double deviationSum = 0;\n        for (double num : numbers) {\n            deviationSum += Math.abs(num - mean);\n        }\n        double mad = deviationSum / numbers.size();\n\n        return mad;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Double> inputNumbers = Arrays.asList(1.0, 2.0, 3.0, 4.0);\n        double result = solution.meanAbsoluteDeviation(inputNumbers);\n        System.out.println(result);\n    }\n}\n"}
{"task_id": "Java/5", "generation": "        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.intersperse(List.of(), 4)); // []\n        System.out.println(solution.intersperse(Arrays.asList(1, 2, 3), 4)); // [1, 4, 2, 4, 3]\n    }\n}\n"}
{"task_id": "Java/6", "generation": "        List<Integer> result = new ArrayList<>();\n        int maxDepth = 0;\n        int currentDepth = 0;\n\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                currentDepth++;\n                maxDepth = Math.max(maxDepth, currentDepth);\n            } else if (c == ')') {\n                currentDepth--;\n            }\n        }\n\n        result.add(maxDepth);\n        return result;\n    }\n}\n"}
{"task_id": "Java/7", "generation": "        List<String> filteredList = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                filteredList.add(str);\n            }\n        }\n        return filteredList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.filterBySubstring(List.of(), \"a\")); // []\n        System.out.println(solution.filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")); // [\"abc\", \"bacd\", \"array\"]\n    }\n}\n"}
{"task_id": "Java/8", "generation": "        int sum = 0;\n        int product = 1;\n        \n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n        \n        return Arrays.asList(sum, product);\n    }\n}\n"}
{"task_id": "Java/9", "generation": "        List<Integer> rollingMaxList = new ArrayList<>();\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < numbers.size(); i++) {\n            max = Math.max(max, numbers.get(i));\n            rollingMaxList.add(max);\n        }\n        return rollingMaxList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 2, 3, 4, 2);\n        List<Integer> rollingMaxResult = solution.rollingMax(numbers);\n        System.out.println(rollingMaxResult);\n    }\n}\n"}
{"task_id": "Java/10", "generation": "        String reversedPrefix = \"\";\n        for (int i = string.length() - 1; i >= 0; i--) {\n            if (isPalindrome(string.substring(i))) {\n                reversedPrefix = new StringBuilder(string.substring(0, i)).reverse().toString();\n                break;\n            }\n        }\n        return string + reversedPrefix;\n    }\n}\n"}
{"task_id": "Java/11", "generation": "        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) != b.charAt(i)) {\n                result.append(\"1\");\n            } else {\n                result.append(\"0\");\n            }\n        }\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.stringXor(\"010\", \"110\")); // Output: \"100\"\n    }\n}\n"}
{"task_id": "Java/12", "generation": "        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String longestString = strings.get(0);\n        for (String str : strings) {\n            if (str.length() > longestString.length() || (str.length() == longestString.length() && str.compareTo(longestString) < 0)) {\n                longestString = str;\n            }\n        }\n\n        return Optional.of(longestString);\n    }\n}\n"}
{"task_id": "Java/13", "generation": "        if (b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(b, a % b);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.greatestCommonDivisor(3, 5)); // Output: 1\n        System.out.println(solution.greatestCommonDivisor(25, 15)); // Output: 5\n    }\n}\n"}
{"task_id": "Java/14", "generation": "        List<String> prefixes = new ArrayList<>();\n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        return prefixes;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<String> prefixes = solution.allPrefixes(\"abc\");\n        System.out.println(prefixes);\n    }\n}\n"}
{"task_id": "Java/15", "generation": "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.append(i).append(\" \");\n        }\n        return sb.toString().trim();\n    }\n}\n"}
{"task_id": "Java/16", "generation": "        // Convert the input string to lowercase\n        string = string.toLowerCase();\n\n        // Use a Set to store distinct characters\n        Set<Character> distinctChars = new HashSet<>();\n\n        // Iterate over each character in the string\n        for (char c : string.toCharArray()) {\n            if (Character.isLetter(c)) {\n                distinctChars.add(c);\n            }\n        }\n\n        // Return the size of the set which represents the count of distinct characters\n        return distinctChars.size();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.countDistinctCharacters(\"xyzXYZ\")); // Output: 3\n        System.out.println(solution.countDistinctCharacters(\"Jerry\")); // Output: 4\n    }\n}\n"}
{"task_id": "Java/17", "generation": "        List<Integer> beats = new ArrayList<>();\n        String[] notes = string.split(\" \");\n        \n        for (String note : notes) {\n            switch (note) {\n                case \"o\":\n                    beats.add(4);\n                    break;\n                case \"o|\":\n                    beats.add(2);\n                    break;\n                case \".|\":\n                    beats.add(1);\n                    break;\n            }\n        }\n        \n        return beats;\n    }\n}\n"}
{"task_id": "Java/18", "generation": "        if (string == null || substring == null || string.isEmpty() || substring.isEmpty()) {\n            return 0;\n        }\n        \n        int count = 0;\n        int index = 0;\n        \n        while (index < string.length()) {\n            index = string.indexOf(substring, index);\n            if (index == -1) {\n                break;\n            }\n            count++;\n            index++;\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.howManyTimes(\"\", \"a\")); // 0\n        System.out.println(solution.howManyTimes(\"aaa\", \"a\")); // 3\n        System.out.println(solution.howManyTimes(\"aaaa\", \"aa\")); // 3\n    }\n}\n"}
{"task_id": "Java/19", "generation": "        String[] numberals = numbers.split(\" \");\n        Map<String, Integer> numberMap = new HashMap<>();\n        \n        numberMap.put(\"zero\", 0);\n        numberMap.put(\"one\", 1);\n        numberMap.put(\"two\", 2);\n        numberMap.put(\"three\", 3);\n        numberMap.put(\"four\", 4);\n        numberMap.put(\"five\", 5);\n        numberMap.put(\"six\", 6);\n        numberMap.put(\"seven\", 7);\n        numberMap.put(\"eight\", 8);\n        numberMap.put(\"nine\", 9);\n        \n        Arrays.sort(numberals, (a, b) -> Integer.compare(numberMap.get(a), numberMap.get(b)));\n        \n        return String.join(\" \", numberals);\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.sortNumbers(\"three one five\"));\n    }\n}\n"}
{"task_id": "Java/20", "generation": "        Collections.sort(numbers);\n        double minDiff = Double.MAX_VALUE;\n        List<Double> result = new ArrayList<>();\n\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = numbers.get(i + 1) - numbers.get(i);\n            if (diff < minDiff) {\n                minDiff = diff;\n                result.clear();\n                result.add(numbers.get(i));\n                result.add(numbers.get(i + 1));\n            } else if (diff == minDiff) {\n                result.add(numbers.get(i));\n                result.add(numbers.get(i + 1));\n            }\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/21", "generation": "        // Find the minimum and maximum values in the list\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n\n        // Calculate the range of values\n        double range = max - min;\n\n        // Apply linear transformation to rescale the list\n        List<Double> rescaledList = new ArrayList<>();\n        for (double num : numbers) {\n            double rescaledNum = (num - min) / range;\n            rescaledList.add(rescaledNum);\n        }\n\n        return rescaledList;\n    }\n}\n"}
{"task_id": "Java/22", "generation": "        List<Integer> integers = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                integers.add((Integer) value);\n            }\n        }\n        return integers;\n    }\n}\n"}
{"task_id": "Java/23", "generation": "        return string.length();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.strlen(\"\")); // Output: 0\n        System.out.println(solution.strlen(\"abc\")); // Output: 3\n    }\n}\n"}
{"task_id": "Java/24", "generation": "        int largest = 1;\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                largest = i;\n            }\n        }\n        return largest;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        int num = scanner.nextInt();\n        System.out.println(\"Largest divisor smaller than \" + num + \" is: \" + solution.largestDivisor(num));\n        scanner.close();\n    }\n}\n"}
{"task_id": "Java/25", "generation": "        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        return factors;\n    }\n}\n"}
{"task_id": "Java/26", "generation": "        Set<Integer> uniqueNumbers = new LinkedHashSet<>();\n        List<Integer> result = new ArrayList<>();\n        \n        for (Integer number : numbers) {\n            if (uniqueNumbers.add(number)) {\n                result.add(number);\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/27", "generation": "        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = Character.toUpperCase(chars[i]);\n            } else if (Character.isUpperCase(chars[i])) {\n                chars[i] = Character.toLowerCase(chars[i]);\n            }\n        }\n        return new String(chars);\n    }\n}\n"}
{"task_id": "Java/28", "generation": "        StringBuilder sb = new StringBuilder();\n        for (String str : strings) {\n            sb.append(str);\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.concatenate(List.of())); // Output: \"\"\n        System.out.println(solution.concatenate(Arrays.asList(\"a\", \"b\", \"c\"))); // Output: \"abc\"\n    }\n}\n"}
{"task_id": "Java/29", "generation": "        List<String> filteredList = strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n        return filteredList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.filterByPrefix(List.of(), \"a\")); // []\n        System.out.println(solution.filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")); // [\"abc\", \"array\"]\n    }\n}\n"}
{"task_id": "Java/30", "generation": "        List<Integer> positiveNumbers = l.stream()\n                                        .filter(num -> num > 0)\n                                        .collect(Collectors.toList());\n        return positiveNumbers;\n    }\n}\n"}
{"task_id": "Java/31", "generation": "        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.isPrime(6)); // false\n        System.out.println(solution.isPrime(101)); // true\n        System.out.println(solution.isPrime(11)); // true\n        System.out.println(solution.isPrime(13441)); // true\n        System.out.println(solution.isPrime(61)); // true\n        System.out.println(solution.isPrime(4)); // false\n        System.out.println(solution.isPrime(1)); // false\n    }\n}\n"}
{"task_id": "Java/32", "generation": "        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"Number of coefficients must be even.\");\n        }\n        \n        double largestNonZeroCoefficient = xs.get(xs.size() - 1);\n        if (largestNonZeroCoefficient == 0) {\n            throw new IllegalArgumentException(\"Largest non-zero coefficient must be non-zero.\");\n        }\n        \n        double result = 0;\n        for (int i = 0; i < xs.size(); i += 2) {\n            result -= xs.get(i) / xs.get(i + 1);\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/33", "generation": "        List<Integer> result = new ArrayList<>();\n        List<Integer> divisibleByThree = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                divisibleByThree.add(l.get(i));\n            } else {\n                result.add(l.get(i));\n            }\n        }\n        Collections.sort(divisibleByThree);\n        int j = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                result.add(divisibleByThree.get(j));\n                j++;\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/34", "generation": "        Set<Integer> set = new HashSet<>(l);\n        List<Integer> uniqueList = new ArrayList<>(set);\n        Collections.sort(uniqueList);\n        return uniqueList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> inputList = Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123);\n        List<Integer> uniqueList = solution.unique(inputList);\n        System.out.println(uniqueList);\n    }\n}\n"}
{"task_id": "Java/35", "generation": "        int max = Integer.MIN_VALUE;\n        for (int num : l) {\n            if (num > max) {\n                max = num;\n            }\n        }\n        return max;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.maxElement(Arrays.asList(1, 2, 3))); // Output: 3\n        System.out.println(solution.maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))); // Output: 123\n    }\n}\n"}
{"task_id": "Java/36", "generation": "        int count = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String str = String.valueOf(i);\n                for (int j = 0; j < str.length(); j++) {\n                    if (str.charAt(j) == '7') {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/37", "generation": "        List<Integer> evenIndices = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                evenIndices.add(l.get(i));\n            }\n        }\n        Collections.sort(evenIndices);\n\n        List<Integer> result = new ArrayList<>();\n        int evenIndex = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                result.add(evenIndices.get(evenIndex));\n                evenIndex++;\n            } else {\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> list1 = Arrays.asList(1, 2, 3);\n        List<Integer> list2 = Arrays.asList(5, 6, 3, 4);\n\n        System.out.println(solution.sortEven(list1));\n        System.out.println(solution.sortEven(list2));\n    }\n}\n"}
{"task_id": "Java/38", "generation": "        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}\n"}
{"task_id": "Java/39", "generation": "        int count = 0;\n        int num1 = 1;\n        int num2 = 1;\n        int result = 0;\n\n        while (count < n) {\n            result = num1 + num2;\n            num1 = num2;\n            num2 = result;\n\n            if (isPrime(result)) {\n                count++;\n            }\n        }\n\n        return result;\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.primeFib(1));\n        System.out.println(solution.primeFib(2));\n        System.out.println(solution.primeFib(3));\n        System.out.println(solution.primeFib(4));\n        System.out.println(solution.primeFib(5));\n    }\n}\n"}
{"task_id": "Java/40", "generation": "        for (int i = 0; i < l.size() - 2; i++) {\n            for (int j = i + 1; j < l.size() - 1; j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.triplesSumToZero(Arrays.asList(1, 3, 5, 0))); // false\n        System.out.println(solution.triplesSumToZero(Arrays.asList(1, 3, -2, 1))); // true\n        System.out.println(solution.triplesSumToZero(Arrays.asList(1, 2, 3, 7))); // false\n        System.out.println(solution.triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))); // true\n        System.out.println(solution.triplesSumToZero(Arrays.asList(1))); // false\n    }\n}\n"}
{"task_id": "Java/41", "generation": "        // Calculate the number of collisions\n        int collisions = n * (n - 1) / 2;\n\n        // Return the total number of collisions\n        return collisions;\n    }\n}\n"}
{"task_id": "Java/42", "generation": "        return l.stream()\n                .map(num -> num + 1)\n                .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/43", "generation": "        Set<Integer> set = new HashSet<>();\n        for (int num : l) {\n            if (set.contains(-num)) {\n                return true;\n            }\n            set.add(num);\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/44", "generation": "        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n            sb.insert(0, x % base);\n            x /= base;\n        }\n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/45", "generation": "        double area = 0.5 * a * h;\n        return area;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        double sideLength = 5;\n        double height = 3;\n        double area = solution.triangleArea(sideLength, height);\n        System.out.println(\"Area of the triangle: \" + area);\n    }\n}\n"}
{"task_id": "Java/46", "generation": "        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 2;\n        } else if (n == 3) {\n            return 0;\n        }\n        int[] fib4Array = new int[n + 1];\n        fib4Array[0] = 0;\n        fib4Array[1] = 0;\n        fib4Array[2] = 2;\n        fib4Array[3] = 0;\n        for (int i = 4; i <= n; i++) {\n            fib4Array[i] = fib4Array[i - 1] + fib4Array[i - 2] + fib4Array[i - 3] + fib4Array[i - 4];\n        }\n        return fib4Array[n];\n    }\n}\n"}
{"task_id": "Java/47", "generation": "        Collections.sort(l);\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n / 2 - 1) + l.get(n / 2)) / 2.0;\n        } else {\n            return l.get(n / 2);\n        }\n    }\n}\n"}
{"task_id": "Java/48", "generation": "        if (text == null || text.length() <= 1) {\n            return true;\n        }\n        int left = 0;\n        int right = text.length() - 1;\n        while (left < right) {\n            if (text.charAt(left) != text.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.isPalindrome(\"\")); // true\n        System.out.println(solution.isPalindrome(\"aba\")); // true\n        System.out.println(solution.isPalindrome(\"aaaaa\")); // true\n        System.out.println(solution.isPalindrome(\"zbcd\")); // false\n    }\n}\n"}
{"task_id": "Java/49", "generation": "        int result = 1;\n        n = n % p;\n        if (n == 0) {\n            return 0;\n        }\n        while (p > 0) {\n            if (p % 2 == 1) {\n                result = (result * n) % p;\n            }\n            n = (n * n) % p;\n            p /= 2;\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/50", "generation": "        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 5 - 'a' + 26) % 26)));\n        }\n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/51", "generation": "        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' &&\n                c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n                result.append(c);\n            }\n        }\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.removeVowels(\"\"));\n        System.out.println(solution.removeVowels(\"abcdef\\nghijklm\"));\n        System.out.println(solution.removeVowels(\"abcdef\"));\n        System.out.println(solution.removeVowels(\"aaaaa\"));\n        System.out.println(solution.removeVowels(\"aaBAA\"));\n        System.out.println(solution.removeVowels(\"zbcd\"));\n    }\n}\n"}
{"task_id": "Java/52", "generation": "        for (int num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.belowThreshold(Arrays.asList(1, 2, 4, 10), 100)); // true\n        System.out.println(solution.belowThreshold(Arrays.asList(1, 20, 4, 10), 5)); // false\n    }\n}\n"}
{"task_id": "Java/53", "generation": "        return x + y;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(\"Adding 2 and 3: \" + solution.add(2, 3));\n        System.out.println(\"Adding 5 and 7: \" + solution.add(5, 7));\n    }\n}\n"}
{"task_id": "Java/54", "generation": "        if (s0.length() != s1.length()) {\n            return false;\n        }\n\n        char[] s0Array = s0.toCharArray();\n        char[] s1Array = s1.toCharArray();\n\n        Arrays.sort(s0Array);\n        Arrays.sort(s1Array);\n\n        for (int i = 0; i < s0Array.length; i++) {\n            if (s0Array[i] != s1Array[i]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")); // true\n        System.out.println(solution.sameChars(\"abcd\", \"dddddddabc\")); // true\n        System.out.println(solution.sameChars(\"dddddddabc\", \"abcd\")); // true\n        System.out.println(solution.sameChars(\"eabcd\", \"dddddddabc\")); // false\n        System.out.println(solution.sameChars(\"abcd\", \"dddddddabce\")); // false\n        System.out.println(solution.sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")); // false\n    }\n}\n"}
{"task_id": "Java/55", "generation": "        if (n <= 1) {\n            return n;\n        }\n        return fib(n - 1) + fib(n - 2);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fib(10)); // Output: 55\n        System.out.println(solution.fib(1)); // Output: 1\n        System.out.println(solution.fib(8)); // Output: 21\n    }\n}\n"}
{"task_id": "Java/56", "generation": "        Stack<Character> stack = new Stack<>();\n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '<') {\n                stack.push(bracket);\n            } else if (bracket == '>') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.correctBracketing(\"<\")); // false\n        System.out.println(solution.correctBracketing(\"<>\")); // true\n        System.out.println(solution.correctBracketing(\"<<><>>\")); // true\n        System.out.println(solution.correctBracketing(\"><<>\")); // false\n    }\n}\n"}
{"task_id": "Java/57", "generation": "        boolean increasing = true;\n        boolean decreasing = true;\n        \n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n                increasing = false;\n            }\n            if (l.get(i) > l.get(i - 1)) {\n                decreasing = false;\n            }\n        }\n        \n        return increasing || decreasing;\n    }\n}\n"}
{"task_id": "Java/58", "generation": "        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        \n        set1.retainAll(set2);\n        \n        List<Integer> result = new ArrayList<>(set1);\n        Collections.sort(result);\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> list1 = Arrays.asList(1, 4, 3, 34, 653, 2, 5);\n        List<Integer> list2 = Arrays.asList(5, 7, 1, 5, 9, 653, 121);\n        System.out.println(\"Common elements: \" + solution.common(list1, list2));\n        \n        List<Integer> list3 = Arrays.asList(5, 3, 2, 8);\n        List<Integer> list4 = Arrays.asList(3, 2);\n        System.out.println(\"Common elements: \" + solution.common(list3, list4));\n    }\n}\n"}
{"task_id": "Java/59", "generation": "        int largestPrime = 2;\n        while (n % 2 == 0) {\n            n /= 2;\n        }\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                largestPrime = i;\n                n /= i;\n            }\n        }\n        if (n > 2) {\n            largestPrime = n;\n        }\n        return largestPrime;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.largestPrimeFactor(13195)); // Output: 29\n        System.out.println(solution.largestPrimeFactor(2048)); // Output: 2\n    }\n}\n"}
{"task_id": "Java/60", "generation": "        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.sumToN(30)); // Output: 465\n        System.out.println(solution.sumToN(100)); // Output: 5050\n        System.out.println(solution.sumToN(5)); // Output: 15\n        System.out.println(solution.sumToN(10)); // Output: 55\n        System.out.println(solution.sumToN(1)); // Output: 1\n    }\n}\n"}
{"task_id": "Java/61", "generation": "        Stack<Character> stack = new Stack<>();\n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '(') {\n                stack.push(bracket);\n            } else if (bracket == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.correctBracketing(\"(\")); // false\n        System.out.println(solution.correctBracketing(\"()\")); // true\n        System.out.println(solution.correctBracketing(\"(()())\")); // true\n        System.out.println(solution.correctBracketing(\")(()\")); // false\n    }\n}\n"}
{"task_id": "Java/62", "generation": "        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/63", "generation": "        if (n == 0 || n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 1;\n        }\n        int[] fibfibArray = new int[n + 1];\n        fibfibArray[0] = 0;\n        fibfibArray[1] = 0;\n        fibfibArray[2] = 1;\n        for (int i = 3; i <= n; i++) {\n            fibfibArray[i] = fibfibArray[i - 1] + fibfibArray[i - 2] + fibfibArray[i - 3];\n        }\n        return fibfibArray[n];\n    }\n}\n"}
{"task_id": "Java/64", "generation": "        int count = 0;\n        String vowels = \"aeiouyAEIOUY\";\n        for (int i = 0; i < s.length(); i++) {\n            if (vowels.contains(String.valueOf(s.charAt(i)))) {\n                if (i == s.length() - 1 || s.charAt(i) == 'y' || s.charAt(i) == 'Y') {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.vowelsCount(\"abcde\")); // Output: 2\n        System.out.println(solution.vowelsCount(\"ACEDY\")); // Output: 3\n    }\n}\n"}
{"task_id": "Java/65", "generation": "        String numStr = String.valueOf(x);\n        int len = numStr.length();\n        shift = shift % len;\n        if (shift == 0) {\n            return numStr;\n        }\n        if (shift > len) {\n            return new StringBuilder(numStr).reverse().toString();\n        }\n        String shiftedStr = numStr.substring(len - shift) + numStr.substring(0, len - shift);\n        return shiftedStr;\n    }\n}\n"}
{"task_id": "Java/66", "generation": "        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += (int) c;\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.digitSum(\"\")); // Output: 0\n        System.out.println(solution.digitSum(\"abAB\")); // Output: 131\n        System.out.println(solution.digitSum(\"abcCd\")); // Output: 67\n        System.out.println(solution.digitSum(\"helloE\")); // Output: 69\n        System.out.println(solution.digitSum(\"woArBld\")); // Output: 131\n        System.out.println(solution.digitSum(\"aAaaaXa\")); // Output: 153\n    }\n}\n"}
{"task_id": "Java/67", "generation": "        String[] parts = s.split(\" \");\n        int apples = Integer.parseInt(parts[0]);\n        int oranges = Integer.parseInt(parts[3]);\n        \n        int mango = n - apples - oranges;\n        return mango;\n    }\n}\n"}
{"task_id": "Java/68", "generation": "        int smallestEvenValue = Integer.MAX_VALUE;\n        int smallestEvenIndex = -1;\n\n        for (int i = 0; i < arr.size(); i++) {\n            int current = arr.get(i);\n            if (current % 2 == 0 && current < smallestEvenValue) {\n                smallestEvenValue = current;\n                smallestEvenIndex = i;\n            }\n        }\n\n        List<Integer> result = new ArrayList<>();\n        if (smallestEvenIndex != -1) {\n            result.add(smallestEvenValue);\n            result.add(smallestEvenIndex);\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/69", "generation": "        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n\n        int result = -1;\n        for (int num : frequencyMap.keySet()) {\n            if (num > 0 && frequencyMap.get(num) >= num) {\n                result = Math.max(result, num);\n            }\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/70", "generation": "        List<Integer> result = new ArrayList<>();\n        Collections.sort(lst);\n        int left = 0, right = lst.size() - 1;\n        while (left <= right) {\n            if (left == right) {\n                result.add(lst.get(left));\n                break;\n            }\n            result.add(lst.get(left));\n            result.add(lst.get(right));\n            left++;\n            right--;\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/71", "generation": "        if (a + b > c && a + c > b && b + c > a) {\n            double s = (a + b + c) / 2;\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            return Math.round(area * 100.0) / 100.0;\n        } else {\n            return -1;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.triangleArea(3, 4, 5)); // Output: 6.0\n        System.out.println(solution.triangleArea(1, 2, 10)); // Output: -1\n    }\n}\n"}
{"task_id": "Java/72", "generation": "        // Check if the list is balanced (palindromic)\n        List<Integer> reversed = new ArrayList<>(q);\n        Collections.reverse(reversed);\n        boolean isBalanced = q.equals(reversed);\n\n        // Calculate the sum of elements in the list\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n\n        // Check if it will fly based on the conditions\n        return isBalanced && sum <= w;\n    }\n}\n"}
{"task_id": "Java/73", "generation": "        int n = arr.size();\n        int[][] dp = new int[n][n];\n        \n        for (int len = 2; len <= n; len++) {\n            for (int i = 0; i < n - len + 1; i++) {\n                int j = i + len - 1;\n                if (arr.get(i).equals(arr.get(j))) {\n                    dp[i][j] = dp[i + 1][j - 1];\n                } else {\n                    dp[i][j] = 1 + Math.min(dp[i + 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n        \n        return dp[0][n - 1];\n    }\n}\n"}
{"task_id": "Java/74", "generation": "        int totalChars1 = lst1.stream().mapToInt(String::length).sum();\n        int totalChars2 = lst2.stream().mapToInt(String::length).sum();\n\n        if (totalChars1 < totalChars2 || (totalChars1 == totalChars2 && lst1.size() <= lst2.size())) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}\n"}
{"task_id": "Java/75", "generation": "        if (a < 30) {\n            return false;\n        }\n        Set<Integer> primes = new HashSet<>();\n        for (int i = 2; i <= a; i++) {\n            boolean isPrime = true;\n            for (int j = 2; j < i; j++) {\n                if (i % j == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                primes.add(i);\n            }\n        }\n        for (int i : primes) {\n            for (int j : primes) {\n                for (int k : primes) {\n                    if (i * j * k == a) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/76", "generation": "        if (x == 1) {\n            return true;\n        }\n        int power = 1;\n        while (power < x) {\n            power *= n;\n        }\n        return power == x;\n    }\n}\n"}
{"task_id": "Java/77", "generation": "        if (a == 0) {\n            return true;\n        }\n        int cubeRoot = (int) Math.cbrt(a);\n        return cubeRoot * cubeRoot * cubeRoot == a;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.iscube(1)); // true\n        System.out.println(solution.iscube(2)); // false\n        System.out.println(solution.iscube(-1)); // true\n        System.out.println(solution.iscube(64)); // true\n        System.out.println(solution.iscube(0)); // true\n        System.out.println(solution.iscube(180)); // false\n    }\n}\n"}
{"task_id": "Java/78", "generation": "        int count = 0;\n        Set<Character> primes = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n        \n        for (char c : num.toCharArray()) {\n            if (primes.contains(c)) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/79", "generation": "        String binary = Integer.toBinaryString(decimal);\n        return \"db\" + binary + \"db\";\n    }\n}\n"}
{"task_id": "Java/80", "generation": "        if (s.length() < 3) {\n            return false;\n        }\n        \n        for (int i = 0; i <= s.length() - 3; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.isHappy(\"a\")); // false\n        System.out.println(solution.isHappy(\"aa\")); // false\n        System.out.println(solution.isHappy(\"abcd\")); // true\n        System.out.println(solution.isHappy(\"aabb\")); // false\n        System.out.println(solution.isHappy(\"adb\")); // true\n        System.out.println(solution.isHappy(\"xyy\")); // false\n    }\n}\n"}
{"task_id": "Java/81", "generation": "        List<String> letterGrades = new ArrayList<>();\n        for (Double gpa : grades) {\n            if (gpa == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (gpa > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (gpa > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (gpa > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (gpa > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (gpa > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (gpa > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (gpa > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (gpa > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (gpa > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (gpa > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (gpa > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}\n"}
{"task_id": "Java/82", "generation": "        int length = string.length();\n        if (length <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.primeLength(\"Hello\")); // true\n        System.out.println(solution.primeLength(\"abcdcba\")); // true\n        System.out.println(solution.primeLength(\"kittens\")); // true\n        System.out.println(solution.primeLength(\"orange\")); // false\n    }\n}\n"}
{"task_id": "Java/83", "generation": "        int count = 0;\n        if (n == 1) {\n            count = 1;\n        } else {\n            count = 2 * (int) Math.pow(9, n - 1);\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/84", "generation": "        int sum = 0;\n        while (N > 0) {\n            sum += N % 2;\n            N /= 2;\n        }\n        return Integer.toBinaryString(sum);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.solve(1000)); // Output: 1\n        System.out.println(solution.solve(150)); // Output: 110\n        System.out.println(solution.solve(147)); // Output: 1100\n    }\n}\n"}
{"task_id": "Java/85", "generation": "        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.add(Arrays.asList(4, 2, 6, 7))); // Output: 2\n    }\n}\n"}
{"task_id": "Java/86", "generation": "        String[] words = s.split(\" \");\n        StringBuilder result = new StringBuilder();\n\n        for (int i = 0; i < words.length; i++) {\n            char[] chars = words[i].toCharArray();\n            Arrays.sort(chars);\n            result.append(new String(chars));\n            if (i < words.length - 1) {\n                result.append(\" \");\n            }\n        }\n\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.antiShuffle(\"Hi\")); // Output: Hi\n        System.out.println(solution.antiShuffle(\"hello\")); // Output: ehllo\n        System.out.println(solution.antiShuffle(\"Hello World!!!\")); // Output: ehllo\n    }\n}\n"}
{"task_id": "Java/87", "generation": "        List<List<Integer>> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    List<Integer> coordinate = new ArrayList<>();\n                    coordinate.add(i);\n                    coordinate.add(j);\n                    result.add(coordinate);\n                }\n            }\n        }\n        result.sort((a, b) -> a.get(0) - b.get(0));\n        for (List<Integer> row : result) {\n            row.sort((a, b) -> b - a);\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/88", "generation": "        List<Integer> sortedArray = new ArrayList<>(array);\n        int sum = array.get(0) + array.get(array.size() - 1);\n        if (sum % 2 == 0) {\n            Collections.sort(sortedArray, Collections.reverseOrder());\n        } else {\n            Collections.sort(sortedArray);\n        }\n        return sortedArray;\n    }\n}\n"}
{"task_id": "Java/89", "generation": "        StringBuilder encrypted = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n                char base = Character.isUpperCase(c) ? 'A' : 'a';\n                char encryptedChar = (char) (base + (c - base + 2 * 2) % 26);\n                encrypted.append(encryptedChar);\n            } else {\n                encrypted.append(c);\n            }\n        }\n        return encrypted.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.encrypt(\"hi\")); // Output: \"lm\"\n        System.out.println(solution.encrypt(\"asdfghjkl\")); // Output: \"ewhjklnop\"\n        System.out.println(solution.encrypt(\"gf\")); // Output: \"kj\"\n        System.out.println(solution.encrypt(\"et\")); // Output: \"ix\"\n    }\n}\n"}
{"task_id": "Java/90", "generation": "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n        TreeSet<Integer> set = new TreeSet<>(lst);\n        if (set.size() < 2) {\n            return Optional.empty();\n        }\n        return Optional.of(set.higher(set.first()));\n    }\n}\n"}
{"task_id": "Java/91", "generation": "        String[] sentences = S.split(\"[.!?]\");\n        int count = 0;\n        for (String sentence : sentences) {\n            if (sentence.trim().startsWith(\"I\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.isBored(\"Hello world\")); // 0\n        System.out.println(solution.isBored(\"The sky is blue. The sun is shining. I love this weather\")); // 1\n    }\n}\n"}
{"task_id": "Java/92", "generation": "        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int num1 = (int) x;\n            int num2 = (int) y;\n            int num3 = (int) z;\n            return num1 == num2 + num3 || num2 == num1 + num3 || num3 == num1 + num2;\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.anyInt(5, 2, 7)); // true\n        System.out.println(solution.anyInt(3, 2, 2)); // false\n        System.out.println(solution.anyInt(3, -2, 1)); // true\n        // System.out.println(solution.anyInt(3.6, -2.2, 2)); // Compilation error\n    }\n}\n"}
{"task_id": "Java/93", "generation": "        char[] vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n        StringBuilder encodedMessage = new StringBuilder();\n        \n        for (char c : message.toCharArray()) {\n            if (Character.isLetter(c)) {\n                if (Arrays.binarySearch(vowels, c) >= 0) {\n                    encodedMessage.append((char) (c + 2));\n                } else {\n                    if (Character.isUpperCase(c)) {\n                        encodedMessage.append(Character.toLowerCase(c));\n                    } else {\n                        encodedMessage.append(Character.toUpperCase(c));\n                    }\n                }\n            } else {\n                encodedMessage.append(c);\n            }\n        }\n        \n        return encodedMessage.toString();\n    }\n}\n"}
{"task_id": "Java/94", "generation": "        int maxPrime = 0;\n        for (int num : lst) {\n            if (isPrime(num) && num > maxPrime) {\n                maxPrime = num;\n            }\n        }\n        return sumOfDigits(maxPrime);\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private int sumOfDigits(int num) {\n        int sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> lst = Arrays.asList(0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3);\n        System.out.println(solution.skjkasdkd(lst)); // Output: 10\n    }\n}\n"}
{"task_id": "Java/95", "generation": "        if (dict.isEmpty()) {\n            return false;\n        }\n\n        boolean isLowerCase = true;\n        boolean isUpperCase = true;\n\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            String strKey = (String) key;\n            if (!strKey.equals(strKey.toLowerCase())) {\n                isLowerCase = false;\n            }\n            if (!strKey.equals(strKey.toUpperCase())) {\n                isUpperCase = false;\n            }\n        }\n\n        return isLowerCase || isUpperCase;\n    }\n}\n"}
{"task_id": "Java/96", "generation": "        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.countUpTo(5)); // [2, 3]\n        System.out.println(solution.countUpTo(11)); // [2, 3, 5, 7]\n        System.out.println(solution.countUpTo(0)); // []\n        System.out.println(solution.countUpTo(20)); // [2, 3, 5, 7, 11, 13, 17, 19]\n        System.out.println(solution.countUpTo(1)); // []\n        System.out.println(solution.countUpTo(18)); // [2, 3, 5, 7, 11, 13, 17]\n    }\n}\n"}
{"task_id": "Java/97", "generation": "        int unitA = Math.abs(a % 10);\n        int unitB = Math.abs(b % 10);\n        return unitA * unitB;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.multiply(148, 412)); // should return 16\n        System.out.println(solution.multiply(19, 28)); // should return 72\n        System.out.println(solution.multiply(2020, 1851)); // should return 0\n        System.out.println(solution.multiply(14, -15)); // should return 20\n    }\n}\n"}
{"task_id": "Java/98", "generation": "        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            char c = s.charAt(i);\n            if (\"AEIOU\".indexOf(c) != -1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/99", "generation": "        double num = Double.parseDouble(value);\n        int lower = (int) Math.floor(num);\n        int upper = (int) Math.ceil(num);\n        if (num - lower < upper - num) {\n            return lower;\n        } else {\n            return upper;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.countUpper(\"10\")); // Output: 10\n        System.out.println(solution.countUpper(\"15.3\")); // Output: 15\n        System.out.println(solution.countUpper(\"14.5\")); // Output: 15\n        System.out.println(solution.countUpper(\"-14.5\")); // Output: -15\n    }\n}\n"}
{"task_id": "Java/100", "generation": "        List<Integer> result = new ArrayList<>();\n        result.add(n);\n        for (int i = 1; i < n; i++) {\n            if (n % 2 == 0) {\n                n += 2;\n            } else {\n                n += 1;\n            }\n            result.add(n);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.makeAPile(3)); // Output: [3, 5, 7]\n    }\n}\n"}
{"task_id": "Java/101", "generation": "        List<String> words = new ArrayList<>();\n        String[] splitWords = s.split(\"[,\\\\s]+\");\n        for (String word : splitWords) {\n            words.add(word);\n        }\n        return words;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        List<String> result1 = solution.wordStrings(\"Hi, my name is John\");\n        System.out.println(result1.equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\")));\n\n        List<String> result2 = solution.wordStrings(\"One, two, three, four, five, six\");\n        System.out.println(result2.equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\")));\n    }\n}\n"}
{"task_id": "Java/102", "generation": "        int maxEven = -1;\n        for (int i = y; i >= x; i--) {\n            if (i % 2 == 0) {\n                maxEven = i;\n                break;\n            }\n        }\n        return maxEven;\n    }\n}\n"}
{"task_id": "Java/103", "generation": "        if (n > m) {\n            return -1;\n        }\n        \n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        \n        int avg = Math.round((float) sum / (m - n + 1));\n        String binaryAvg = Integer.toBinaryString(avg);\n        \n        return binaryAvg;\n    }\n}\n"}
{"task_id": "Java/104", "generation": "        List<Integer> result = new ArrayList<>();\n        for (int num : x) {\n            if (hasNoEvenDigit(num)) {\n                result.add(num);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n\n    private boolean hasNoEvenDigit(int num) {\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                return false;\n            }\n            num /= 10;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> list1 = Arrays.asList(15, 33, 1422, 1);\n        List<Integer> list2 = Arrays.asList(152, 323, 1422, 10);\n        System.out.println(solution.uniqueDigits(list1));\n        System.out.println(solution.uniqueDigits(list2));\n    }\n}\n"}
{"task_id": "Java/105", "generation": "        List<Integer> filteredList = arr.stream()\n                .filter(num -> num >= 1 && num <= 9)\n                .collect(Collectors.toList());\n\n        Collections.sort(filteredList);\n        Collections.reverse(filteredList);\n\n        List<String> result = new ArrayList<>();\n        for (int num : filteredList) {\n            switch (num) {\n                case 1:\n                    result.add(\"One\");\n                    break;\n                case 2:\n                    result.add(\"Two\");\n                    break;\n                case 3:\n                    result.add(\"Three\");\n                    break;\n                case 4:\n                    result.add(\"Four\");\n                    break;\n                case 5:\n                    result.add(\"Five\");\n                    break;\n                case 6:\n                    result.add(\"Six\");\n                    break;\n                case 7:\n                    result.add(\"Seven\");\n                    break;\n                case 8:\n                    result.add(\"Eight\");\n                    break;\n                case 9:\n                    result.add(\"Nine\");\n                    break;\n            }\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/106", "generation": "        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                int factorial = 1;\n                for (int j = 1; j <= i; j++) {\n                    factorial *= j;\n                }\n                result.add(factorial);\n            } else {\n                int sum = 0;\n                for (int j = 1; j <= i; j++) {\n                    sum += j;\n                }\n                result.add(sum);\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/107", "generation": "        List<Integer> result = new ArrayList<>();\n        int evenCount = 0;\n        int oddCount = 0;\n        \n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n        \n        result.add(evenCount);\n        result.add(oddCount);\n        \n        return result;\n    }\n\n    private boolean isPalindrome(int num) {\n        String str = String.valueOf(num);\n        int left = 0;\n        int right = str.length() - 1;\n        \n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.evenOddPalindrome(3)); // Output: [1, 2]\n        System.out.println(solution.evenOddPalindrome(12)); // Output: [4, 6]\n    }\n}\n"}
{"task_id": "Java/108", "generation": "        int count = 0;\n        for (int num : arr) {\n            int sum = 0;\n            int n = Math.abs(num);\n            while (n != 0) {\n                sum += n % 10;\n                n /= 10;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.countNums(Arrays.asList())); // 0\n        System.out.println(solution.countNums(Arrays.asList(-1, 11, -11))); // 1\n        System.out.println(solution.countNums(Arrays.asList(1, 1, 2))); // 3\n    }\n}\n"}
{"task_id": "Java/109", "generation": "        int n = arr.size();\n        if (n == 0) {\n            return true;\n        }\n\n        int minIndex = 0;\n        for (int i = 1; i < n; i++) {\n            if (arr.get(i) < arr.get(minIndex)) {\n                minIndex = i;\n            }\n        }\n\n        return (minIndex == n - 1 || arr.get(n - 1) < arr.get(0));\n    }\n}\n"}
{"task_id": "Java/110", "generation": "        // Count the number of odd elements in lst1\n        int oddCount = 0;\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCount++;\n            }\n        }\n\n        // If the number of odd elements in lst1 is greater than the size of lst2, return \"NO\"\n        if (oddCount > lst2.size()) {\n            return \"NO\";\n        }\n\n        // Otherwise, return \"YES\" as it is always possible to exchange elements to make lst1 all even\n        return \"YES\";\n    }\n}\n"}
{"task_id": "Java/111", "generation": "        Map<String, Integer> map = new HashMap<>();\n        String[] letters = test.split(\" \");\n        \n        for (String letter : letters) {\n            map.put(letter, map.getOrDefault(letter, 0) + 1);\n        }\n        \n        int maxCount = 0;\n        for (int count : map.values()) {\n            maxCount = Math.max(maxCount, count);\n        }\n        \n        Map<String, Integer> result = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : map.entrySet()) {\n            if (entry.getValue() == maxCount) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/112", "generation": "        StringBuilder result = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (c.indexOf(ch) == -1) {\n                result.append(ch);\n            }\n        }\n        String resultString = result.toString();\n        boolean isPalindrome = isPalindrome(resultString);\n        return Arrays.asList(resultString, isPalindrome);\n    }\n\n    private boolean isPalindrome(String s) {\n        int left = 0;\n        int right = s.length() - 1;\n        while (left < right) {\n            if (s.charAt(left) != s.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/113", "generation": "        List<String> result = new ArrayList<>();\n        for (String str : lst) {\n            int oddCount = 0;\n            for (char c : str.toCharArray()) {\n                if (Character.isDigit(c) && (c - '0') % 2 != 0) {\n                    oddCount++;\n                }\n            }\n            String output = \"the number of odd elements \" + oddCount + \"n the str\" + oddCount + \"ng \" + oddCount + \" of the \" + oddCount + \"nput.\";\n            result.add(output);\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/114", "generation": "        int minSum = Integer.MAX_VALUE;\n        int currentSum = 0;\n        \n        for (int num : nums) {\n            currentSum = Math.min(num, currentSum + num);\n            minSum = Math.min(minSum, currentSum);\n        }\n        \n        return minSum;\n    }\n}\n"}
{"task_id": "Java/115", "generation": "        int[] maxWaterLevels = new int[grid.get(0).size()];\n        for (List<Integer> row : grid) {\n            for (int j = 0; j < row.size(); j++) {\n                maxWaterLevels[j] = Math.max(maxWaterLevels[j], row.get(j));\n            }\n        }\n        \n        int totalLowerings = 0;\n        for (int waterLevel : maxWaterLevels) {\n            totalLowerings += (int) Math.ceil((double) waterLevel / capacity);\n        }\n        \n        return totalLowerings;\n    }\n}\n"}
{"task_id": "Java/116", "generation": "        Collections.sort(arr, (a, b) -> {\n            int countA = Integer.bitCount(Math.abs(a));\n            int countB = Integer.bitCount(Math.abs(b));\n            if (countA == countB) {\n                return a - b;\n            }\n            return countA - countB;\n        });\n        return arr;\n    }\n}\n"}
{"task_id": "Java/117", "generation": "        List<String> result = new ArrayList<>();\n        if (s.isEmpty()) {\n            return result;\n        }\n\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            int consonantCount = 0;\n            for (char c : word.toCharArray()) {\n                if (Character.isLetter(c) && !isVowel(Character.toLowerCase(c))) {\n                    consonantCount++;\n                }\n            }\n            if (consonantCount == n) {\n                result.add(word);\n            }\n        }\n\n        return result;\n    }\n\n    private boolean isVowel(char c) {\n        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n    }\n}\n"}
{"task_id": "Java/118", "generation": "        for (int i = word.length() - 2; i > 0; i--) {\n            char currentChar = word.charAt(i);\n            if (!isVowel(currentChar)) {\n                char nextChar = word.charAt(i - 1);\n                char prevChar = word.charAt(i + 1);\n                if (!isVowel(nextChar) && isVowel(prevChar)) {\n                    return String.valueOf(currentChar);\n                }\n            }\n        }\n        return \"\";\n    }\n\n    private boolean isVowel(char c) {\n        return \"aeiouAEIOU\".indexOf(c) != -1;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.getClosestVowel(\"yogurt\")); // Output: u\n        System.out.println(solution.getClosestVowel(\"FULL\")); // Output: U\n        System.out.println(solution.getClosestVowel(\"quick\")); // Output: \n        System.out.println(solution.getClosestVowel(\"ab\")); // Output: \n    }\n}\n"}
{"task_id": "Java/119", "generation": "        int openCount = 0;\n        for (String str : lst) {\n            for (char c : str.toCharArray()) {\n                if (c == '(') {\n                    openCount++;\n                } else {\n                    if (openCount == 0) {\n                        return \"No\";\n                    }\n                    openCount--;\n                }\n            }\n        }\n        return openCount == 0 ? \"Yes\" : \"No\";\n    }\n}\n"}
{"task_id": "Java/120", "generation": "        // Sort the array in descending order\n        Collections.sort(arr, Collections.reverseOrder());\n\n        // Return the sublist of the first k elements\n        return arr.subList(0, k);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> test1 = Arrays.asList(-3, -4, 5);\n        System.out.println(\"Test 1: \" + solution.maximum(test1, 3)); // Expected output: [-4, -3, 5]\n\n        List<Integer> test2 = Arrays.asList(4, -4, 4);\n        System.out.println(\"Test 2: \" + solution.maximum(test2, 2)); // Expected output: [4, 4]\n\n        List<Integer> test3 = Arrays.asList(-3, 2, 1, 2, -1, -2, 1);\n        System.out.println(\"Test 3: \" + solution.maximum(test3, 1)); // Expected output: [2]\n    }\n}\n"}
{"task_id": "Java/121", "generation": "        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/122", "generation": "        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i) >= 10 && arr.get(i) <= 99) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/123", "generation": "        List<Integer> result = new ArrayList<>();\n        while (n != 1) {\n            if (n % 2 == 1) {\n                result.add(n);\n            }\n            n = (n % 2 == 0) ? n / 2 : 3 * n + 1;\n        }\n        result.add(1);\n        Collections.sort(result);\n        return result;\n    }\n}\n"}
{"task_id": "Java/124", "generation": "        if (date == null || date.isEmpty()) {\n            return false;\n        }\n\n        String[] dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n            return false;\n        }\n\n        int month = Integer.parseInt(dateParts[0]);\n        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        if (day < 1 || day > 31) {\n            return false;\n        }\n\n        if ((month == 4 || month == 6 || month == 9 || month == 11) && day > 30) {\n            return false;\n        }\n\n        if (month == 2) {\n            if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0) {\n                if (day > 29) {\n                    return false;\n                }\n            } else {\n                if (day > 28) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n}\n"}
{"task_id": "Java/125", "generation": "        String[] words = txt.split(\"[\\\\s,]+\");\n        if (words.length == 1) {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && (c - 'a') % 2 != 0) {\n                    count++;\n                }\n            }\n            return count;\n        }\n        \n        List<String> wordList = new ArrayList<>();\n        for (String word : words) {\n            wordList.add(word);\n        }\n        return wordList;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.splitWords(\"Hello world!\"));\n        System.out.println(solution.splitWords(\"Hello,world!\"));\n        System.out.println(solution.splitWords(\"abcdef\"));\n    }\n}\n"}
{"task_id": "Java/126", "generation": "        Set<Integer> set = new HashSet<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (set.contains(lst.get(i))) {\n                return false;\n            }\n            set.add(lst.get(i));\n        }\n\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < lst.get(i - 1)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n"}
{"task_id": "Java/127", "generation": "        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n\n        int intersectionStart = Math.max(start1, start2);\n        int intersectionEnd = Math.min(end1, end2);\n\n        if (intersectionStart > intersectionEnd) {\n            return \"NO\";\n        }\n\n        int intersectionLength = intersectionEnd - intersectionStart;\n\n        if (isPrime(intersectionLength)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.intersection(Arrays.asList(1, 2), Arrays.asList(2, 3))); // NO\n        System.out.println(solution.intersection(Arrays.asList(-1, 1), Arrays.asList(0, 4))); // NO\n        System.out.println(solution.intersection(Arrays.asList(-3, -1), Arrays.asList(-5, 5))); // YES\n    }\n}\n"}
{"task_id": "Java/128", "generation": "        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int product = 1;\n        int sum = 0;\n\n        for (int num : arr) {\n            if (num > 0) {\n                product *= 1;\n            } else if (num < 0) {\n                product *= -1;\n            } else {\n                product *= 0;\n            }\n            sum += Math.abs(num);\n        }\n\n        return Optional.of(product * sum);\n    }\n}\n"}
{"task_id": "Java/129", "generation": "        int n = grid.size();\n        int[][] dirs = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> grid.get(a[0]).get(a[1]) - grid.get(b[0]).get(b[1]));\n        Set<String> visited = new HashSet<>();\n        pq.offer(new int[]{0, 0});\n        visited.add(\"0,0\");\n        List<Integer> path = new ArrayList<>();\n        while (!pq.isEmpty() && path.size() < k) {\n            int[] curr = pq.poll();\n            int x = curr[0];\n            int y = curr[1];\n            path.add(grid.get(x).get(y));\n            for (int[] dir : dirs) {\n                int nx = x + dir[0];\n                int ny = y + dir[1];\n                if (nx >= 0 && nx < n && ny >= 0 && ny < n && !visited.contains(nx + \",\" + ny)) {\n                    pq.offer(new int[]{nx, ny});\n                    visited.add(nx + \",\" + ny);\n                }\n            }\n        }\n        return path;\n    }\n}\n"}
{"task_id": "Java/130", "generation": "        List<Integer> result = new ArrayList<>();\n        if (n == 0) {\n            return result;\n        }\n        result.add(1);\n        if (n == 1) {\n            return result;\n        }\n        result.add(3);\n        if (n == 2) {\n            return result;\n        }\n        result.add(2);\n        result.add(8);\n        if (n == 3) {\n            return result;\n        }\n        for (int i = 4; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(1 + i / 2);\n            } else {\n                result.add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/131", "generation": "        int product = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n            }\n            n /= 10;\n        }\n        return product;\n    }\n}\n"}
{"task_id": "Java/132", "generation": "        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']' && !stack.isEmpty()) {\n                stack.pop();\n            }\n        }\n        return stack.size() < string.length() && !stack.isEmpty();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.isNested(\"[[]]\")); // true\n        System.out.println(solution.isNested(\"[]]]]]]][[[[[]\")); // false\n        System.out.println(solution.isNested(\"[][]\")); // false\n        System.out.println(solution.isNested(\"[]\")); // false\n        System.out.println(solution.isNested(\"[[][]]\")); // true\n        System.out.println(solution.isNested(\"[[]][[\")); // true\n    }\n}\n"}
{"task_id": "Java/133", "generation": "        int sum = 0;\n        for (Double num : lst) {\n            sum += Math.ceil(num) * Math.ceil(num);\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Double> lst1 = Arrays.asList(1.0, 2.0, 3.0);\n        System.out.println(\"Sum of squared numbers in [1, 2, 3]: \" + solution.sumSquares(lst1)); // Output: 14\n        \n        List<Double> lst2 = Arrays.asList(1.0, 4.0, 9.0);\n        System.out.println(\"Sum of squared numbers in [1, 4, 9]: \" + solution.sumSquares(lst2)); // Output: 98\n        \n        List<Double> lst3 = Arrays.asList(1.0, 3.0, 5.0, 7.0);\n        System.out.println(\"Sum of squared numbers in [1, 3, 5, 7]: \" + solution.sumSquares(lst3)); // Output: 84\n        \n        List<Double> lst4 = Arrays.asList(1.4, 4.2, 0.0);\n        System.out.println(\"Sum of squared numbers in [1.4, 4.2, 0]: \" + solution.sumSquares(lst4)); // Output: 29\n        \n        List<Double> lst5 = Arrays.asList(-2.4, 1.0, 1.0);\n        System.out.println(\"Sum of squared numbers in [-2.4, 1, 1]: \" + solution.sumSquares(lst5)); // Output: 6\n    }\n}\n"}
{"task_id": "Java/134", "generation": "        if (txt == null || txt.isEmpty()) {\n            return false;\n        }\n\n        char lastChar = txt.charAt(txt.length() - 1);\n        if (!Character.isLetter(lastChar)) {\n            return false;\n        }\n\n        String[] words = txt.split(\" \");\n        String lastWord = words[words.length - 1];\n        return lastWord.length() == 1;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.checkIfLastCharIsALetter(\"apple pie\")); // false\n        System.out.println(solution.checkIfLastCharIsALetter(\"apple pi e\")); // true\n        System.out.println(solution.checkIfLastCharIsALetter(\"apple pi e \")); // false\n        System.out.println(solution.checkIfLastCharIsALetter(\"\")); // false\n    }\n}\n"}
{"task_id": "Java/135", "generation": "        int largestIndex = -1;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                largestIndex = i - 1;\n            }\n        }\n        return largestIndex;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> arr1 = Arrays.asList(1, 2, 4, 3, 5);\n        List<Integer> arr2 = Arrays.asList(1, 2, 3);\n\n        System.out.println(\"canArrange(Arrays.asList(1,2,4,3,5)) = \" + solution.canArrange(arr1));\n        System.out.println(\"canArrange(Arrays.asList(1,2,3)) = \" + solution.canArrange(arr2));\n    }\n}\n"}
{"task_id": "Java/136", "generation": "        List<Integer> negativeIntegers = lst.stream()\n                .filter(i -> i < 0)\n                .collect(Collectors.toList());\n\n        List<Integer> positiveIntegers = lst.stream()\n                .filter(i -> i > 0)\n                .collect(Collectors.toList());\n\n        Optional<Integer> largestNegative = negativeIntegers.stream()\n                .max(Comparator.naturalOrder());\n\n        Optional<Integer> smallestPositive = positiveIntegers.stream()\n                .min(Comparator.naturalOrder());\n\n        List<Optional<Integer>> result = new ArrayList<>();\n        result.add(largestNegative.isPresent() ? largestNegative : Optional.empty());\n        result.add(smallestPositive.isPresent() ? smallestPositive : Optional.empty());\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/137", "generation": "        if (a instanceof Integer && b instanceof Integer) {\n            Integer intA = (Integer) a;\n            Integer intB = (Integer) b;\n            if (intA > intB) {\n                return Optional.of(intA);\n            } else if (intA < intB) {\n                return Optional.of(intB);\n            }\n        } else if (a instanceof Float && b instanceof Float) {\n            Float floatA = (Float) a;\n            Float floatB = (Float) b;\n            if (floatA > floatB) {\n                return Optional.of(floatA);\n            } else if (floatA < floatB) {\n                return Optional.of(floatB);\n            }\n        } else if (a instanceof String && b instanceof String) {\n            String strA = (String) a;\n            String strB = (String) b;\n            double doubleA = Double.parseDouble(strA.replace(\",\", \".\"));\n            double doubleB = Double.parseDouble(strB.replace(\",\", \".\"));\n            if (doubleA > doubleB) {\n                return Optional.of(strA);\n            } else if (doubleA < doubleB) {\n                return Optional.of(strB);\n            }\n        }\n        return Optional.empty();\n    }\n}\n"}
{"task_id": "Java/138", "generation": "        // Check if n is less than 8 or n is odd\n        if (n < 8 || n % 2 != 0) {\n            return false;\n        }\n        \n        // n can be written as the sum of exactly 4 positive even numbers\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.isEqualToSumEven(4)); // false\n        System.out.println(solution.isEqualToSumEven(6)); // false\n        System.out.println(solution.isEqualToSumEven(8)); // true\n    }\n}\n"}
{"task_id": "Java/139", "generation": "        if (n <= 0) {\n            return 0;\n        }\n        long result = 1;\n        for (int i = n; i > 0; i--) {\n            long factorial = 1;\n            for (int j = i; j > 0; j--) {\n                factorial *= j;\n            }\n            result *= factorial;\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.specialFactorial(4)); // Output: 288\n    }\n}\n"}
{"task_id": "Java/140", "generation": "        // Replace all spaces with underscores\n        text = text.replaceAll(\" \", \"_\");\n\n        // Replace more than 2 consecutive spaces with -\n        text = text.replaceAll(\" {3,}\", \"-\");\n\n        return text;\n    }\n}\n"}
{"task_id": "Java/141", "generation": "        // Check if the file name contains more than three digits\n        int digitCount = 0;\n        for (char c : file_name.toCharArray()) {\n            if (Character.isDigit(c)) {\n                digitCount++;\n            }\n        }\n        if (digitCount > 3) {\n            return \"No\";\n        }\n\n        // Check if the file name contains exactly one dot\n        if (file_name.indexOf('.') == -1 || file_name.indexOf('.') != file_name.lastIndexOf('.')) {\n            return \"No\";\n        }\n\n        // Split the file name into two parts based on the dot\n        String[] parts = file_name.split(\"\\\\.\");\n        if (parts.length != 2) {\n            return \"No\";\n        }\n\n        // Check the first part\n        String firstPart = parts[0];\n        if (firstPart.isEmpty() || !Character.isLetter(firstPart.charAt(0))) {\n            return \"No\";\n        }\n\n        // Check the second part\n        String secondPart = parts[1];\n        if (!secondPart.equals(\"txt\") && !secondPart.equals(\"exe\") && !secondPart.equals(\"dll\")) {\n            return \"No\";\n        }\n\n        return \"Yes\";\n    }\n}\n"}
{"task_id": "Java/142", "generation": "        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                lst.set(i, lst.get(i) * lst.get(i));\n            } else if (i % 4 == 0) {\n                lst.set(i, lst.get(i) * lst.get(i) * lst.get(i));\n            }\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/143", "generation": "        String[] words = sentence.split(\" \");\n        List<String> primeWords = new ArrayList<>();\n\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                primeWords.add(word);\n            }\n        }\n\n        return String.join(\" \", primeWords);\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/144", "generation": "        String[] fraction1 = x.split(\"/\");\n        String[] fraction2 = n.split(\"/\");\n\n        int numerator1 = Integer.parseInt(fraction1[0]);\n        int denominator1 = Integer.parseInt(fraction1[1]);\n        int numerator2 = Integer.parseInt(fraction2[0]);\n        int denominator2 = Integer.parseInt(fraction2[1]);\n\n        int resultNumerator = numerator1 * numerator2;\n        int resultDenominator = denominator1 * denominator2;\n\n        return resultNumerator % resultDenominator == 0;\n    }\n}\n"}
{"task_id": "Java/145", "generation": "        Collections.sort(nums, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer num1, Integer num2) {\n                int sum1 = getDigitSum(num1);\n                int sum2 = getDigitSum(num2);\n                if (sum1 != sum2) {\n                    return Integer.compare(sum1, sum2);\n                } else {\n                    return Integer.compare(nums.indexOf(num1), nums.indexOf(num2));\n                }\n            }\n        });\n        return nums;\n    }\n\n    private int getDigitSum(int num) {\n        int sum = 0;\n        num = Math.abs(num);\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.orderByPoints(Arrays.asList(1, 11, -1, -11, -12))); // [-1, -11, 1, -12, 11]\n        System.out.println(solution.orderByPoints(Arrays.asList())); // []\n    }\n}\n"}
{"task_id": "Java/146", "generation": "        int count = 0;\n        for (int num : nums) {\n            if (num > 10) {\n                String numStr = String.valueOf(Math.abs(num));\n                if (numStr.charAt(0) % 2 != 0 && numStr.charAt(numStr.length() - 1) % 2 != 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> test1 = Arrays.asList(15, -73, 14, -15);\n        System.out.println(\"specialFilter(Arrays.asList(15, -73, 14, -15)) => \" + solution.specialFilter(test1));\n        \n        List<Integer> test2 = Arrays.asList(33, -2, -3, 45, 21, 109);\n        System.out.println(\"specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => \" + solution.specialFilter(test2));\n    }\n}\n"}
{"task_id": "Java/147", "generation": "        int count = 0;\n        int[] a = new int[n + 1];\n        for (int i = 1; i <= n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        for (int i = 1; i <= n; i++) {\n            for (int j = i + 1; j <= n; j++) {\n                for (int k = j + 1; k <= n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/148", "generation": "        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        List<String> result = new ArrayList<>();\n\n        if (!planets.contains(planet1) || !planets.contains(planet2)) {\n            return result;\n        }\n\n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n\n        int start = Math.min(index1, index2);\n        int end = Math.max(index1, index2);\n\n        for (int i = start + 1; i < end; i++) {\n            result.add(planets.get(i));\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/149", "generation": "        lst.removeIf(s -> s.length() % 2 != 0);\n        lst.sort((s1, s2) -> {\n            if (s1.length() != s2.length()) {\n                return s1.length() - s2.length();\n            } else {\n                return s1.compareTo(s2);\n            }\n        });\n        return lst;\n    }\n}\n"}
{"task_id": "Java/150", "generation": "        if (n <= 1) {\n            return y;\n        }\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.xOrY(7, 34, 12)); // Output should be 34\n        System.out.println(solution.xOrY(15, 8, 5)); // Output should be 5\n    }\n}\n"}
{"task_id": "Java/151", "generation": "        int sum = 0;\n        for (Object num : lst) {\n            if (num instanceof Integer) {\n                int n = (int) num;\n                if (n > 0 && n % 2 != 0) {\n                    sum += n * n;\n                }\n            }\n        }\n        return sum * 2;\n    }\n}\n"}
{"task_id": "Java/152", "generation": "        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            int diff = Math.abs(game.get(i) - guess.get(i));\n            result.add(diff);\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/153", "generation": "        String strongestExtension = \"\";\n        int maxStrength = Integer.MIN_VALUE;\n\n        for (String extension : extensions) {\n            int CAP = 0;\n            int SM = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    CAP++;\n                } else if (Character.isLowerCase(c)) {\n                    SM++;\n                }\n            }\n            int strength = CAP - SM;\n            if (strength > maxStrength || (strength == maxStrength && extensions.indexOf(extension) < extensions.indexOf(strongestExtension))) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n\n        return class_name + \".\" + strongestExtension;\n    }\n}\n"}
{"task_id": "Java/154", "generation": "        if (a.length() != b.length()) {\n            return false;\n        }\n        String doubleA = a + a;\n        return doubleA.contains(b);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.cycpatternCheck(\"abcd\", \"abd\")); // false\n        System.out.println(solution.cycpatternCheck(\"hello\", \"ell\")); // true\n        System.out.println(solution.cycpatternCheck(\"whassup\", \"psus\")); // false\n        System.out.println(solution.cycpatternCheck(\"abab\", \"baa\")); // true\n        System.out.println(solution.cycpatternCheck(\"efef\", \"eeff\")); // false\n        System.out.println(solution.cycpatternCheck(\"himenss\", \"simen\")); // true\n    }\n}\n"}
{"task_id": "Java/155", "generation": "        List<Integer> result = new ArrayList<>();\n        int evenCount = 0;\n        int oddCount = 0;\n        \n        while (num != 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n            num /= 10;\n        }\n        \n        result.add(evenCount);\n        result.add(oddCount);\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/156", "generation": "        if (number < 1 || number > 1000) {\n            throw new IllegalArgumentException(\"Number must be between 1 and 1000\");\n        }\n\n        String[] romanNumerals = {\"i\", \"iv\", \"v\", \"ix\", \"x\", \"xl\", \"l\", \"xc\", \"c\", \"cd\", \"d\", \"cm\", \"m\"};\n        int[] values = {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n\n        StringBuilder result = new StringBuilder();\n\n        for (int i = values.length - 1; i >= 0; i--) {\n            while (number >= values[i]) {\n                result.append(romanNumerals[i]);\n                number -= values[i];\n            }\n        }\n\n        return result.toString().toLowerCase();\n    }\n}\n"}
{"task_id": "Java/157", "generation": "        // Sort the sides in ascending order\n        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n\n        // Check if the sides form a right-angled triangle\n        return sides[0]*sides[0] + sides[1]*sides[1] == sides[2]*sides[2];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.rightAngleTriangle(3, 4, 5)); // true\n        System.out.println(solution.rightAngleTriangle(1, 2, 3)); // false\n    }\n}\n"}
{"task_id": "Java/158", "generation": "        String result = \"\";\n        int maxUniqueChars = 0;\n        for (String word : words) {\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                uniqueChars.add(c);\n            }\n            if (uniqueChars.size() > maxUniqueChars || (uniqueChars.size() == maxUniqueChars && word.compareTo(result) < 0)) {\n                maxUniqueChars = uniqueChars.size();\n                result = word;\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/159", "generation": "        int totalEatenCarrots = number + need;\n        int carrotsLeft = Math.max(0, remaining - need);\n        List<Integer> result = new ArrayList<>();\n        result.add(totalEatenCarrots);\n        result.add(carrotsLeft);\n        return result;\n    }\n}\n"}
{"task_id": "Java/160", "generation": "        int result = operand.get(0);\n        for (int i = 0; i < operator.size(); i++) {\n            String op = operator.get(i);\n            int num = operand.get(i + 1);\n            switch (op) {\n                case \"+\":\n                    result += num;\n                    break;\n                case \"-\":\n                    result -= num;\n                    break;\n                case \"*\":\n                    result *= num;\n                    break;\n                case \"/\":\n                    result /= num;\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, num);\n                    break;\n                default:\n                    System.out.println(\"Invalid operator: \" + op);\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<String> operators = Arrays.asList(\"+\", \"*\", \"-\");\n        List<Integer> operands = Arrays.asList(2, 3, 4, 5);\n        int result = solution.doAlgebra(operators, operands);\n        System.out.println(\"Result: \" + result);\n    }\n}\n"}
{"task_id": "Java/161", "generation": "        char[] chars = s.toCharArray();\n        boolean hasLetter = false;\n        \n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLetter(chars[i])) {\n                chars[i] = Character.isUpperCase(chars[i]) ? Character.toLowerCase(chars[i]) : Character.toUpperCase(chars[i]);\n                hasLetter = true;\n            }\n        }\n        \n        if (!hasLetter) {\n            int left = 0, right = chars.length - 1;\n            while (left < right) {\n                char temp = chars[left];\n                chars[left] = chars[right];\n                chars[right] = temp;\n                left++;\n                right--;\n            }\n        }\n        \n        return new String(chars);\n    }\n}\n"}
{"task_id": "Java/162", "generation": "        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String md5Hash = bigInt.toString(16);\n        while (md5Hash.length() < 32) {\n            md5Hash = \"0\" + md5Hash;\n        }\n        return Optional.of(md5Hash);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        try {\n            System.out.println(solution.stringToMd5(\"Hello world\").orElse(\"Empty string\"));\n        } catch (NoSuchAlgorithmException e) {\n            System.out.println(\"Error: \" + e.getMessage());\n        }\n    }\n}\n"}
{"task_id": "Java/163", "generation": "        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}\n"}
