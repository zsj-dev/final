{"task_id": "Java/0", "generation": "        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) <= threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/1", "generation": "        List<String> groups = new ArrayList<>();\n        int count = 0;\n        StringBuilder sb = new StringBuilder();\n        \n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                count++;\n            } else if (c == ')') {\n                count--;\n            }\n            \n            sb.append(c);\n            \n            if (count == 0) {\n                groups.add(sb.toString());\n                sb.setLength(0);\n            }\n        }\n        \n        return groups;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String input = \"((group1)(group2)(group3))\";\n        List<String> groups = solution.separateParenGroups(input);\n        \n        for (String group : groups) {\n            System.out.println(group);\n        }\n    }\n}\n"}
{"task_id": "Java/2", "generation": "        return Math.floor(number * 100) / 100;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        double num = 3.14159;\n        System.out.println(\"Original number: \" + num);\n        System.out.println(\"Truncated number: \" + solution.truncateNumber(num));\n    }\n}\n"}
{"task_id": "Java/3", "generation": "        int sum = 0;\n        for (int num : operations) {\n            sum += num;\n        }\n        return sum < 0;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> operations = new ArrayList<>();\n        operations.add(5);\n        operations.add(-3);\n        operations.add(2);\n        \n        Solution solution = new Solution();\n        boolean result = solution.belowZero(operations);\n        \n        System.out.println(\"Is the sum below zero? \" + result);\n    }\n}\n"}
{"task_id": "Java/4", "generation": "        double mean = numbers.stream().mapToDouble(Double::doubleValue).average().orElse(0.0);\n        double sum = numbers.stream().mapToDouble(num -> Math.abs(num - mean)).sum();\n        return sum / numbers.size();\n    }\n\n    public static void main(String[] args) {\n        List<Double> numbers = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0);\n        Solution solution = new Solution();\n        double result = solution.meanAbsoluteDeviation(numbers);\n        System.out.println(\"Mean Absolute Deviation: \" + result);\n    }\n}\n"}
{"task_id": "Java/5", "generation": "        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i != numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> numbers = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5));\n        int delimiter = 0;\n        List<Integer> interspersedNumbers = solution.intersperse(numbers, delimiter);\n        System.out.println(interspersedNumbers);\n    }\n}\n"}
{"task_id": "Java/6", "generation": "        List<Integer> result = new ArrayList<>();\n        int count = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n            } else if (paren_string.charAt(i) == ')') {\n                count--;\n            }\n            result.add(count);\n        }\n        return result;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String input = \"((()))\";\n        List<Integer> output = solution.parseNestedParens(input);\n        System.out.println(output);\n    }\n}\n"}
{"task_id": "Java/7", "generation": "        List<String> filteredStrings = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                filteredStrings.add(str);\n            }\n        }\n        return filteredStrings;\n    }\n}\n"}
{"task_id": "Java/8", "generation": "        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        int product = 1;\n        \n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n        \n        result.add(sum);\n        result.add(product);\n        \n        return result;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> numbers = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5));\n        List<Integer> result = solution.sumProduct(numbers);\n        \n        System.out.println(\"Sum: \" + result.get(0));\n        System.out.println(\"Product: \" + result.get(1));\n    }\n}\n"}
{"task_id": "Java/9", "generation": "        List<Integer> maxList = new ArrayList<>();\n        Deque<Integer> deque = new LinkedList<>();\n        \n        for (int i = 0; i < numbers.size(); i++) {\n            while (!deque.isEmpty() && deque.peekLast() < numbers.get(i)) {\n                deque.pollLast();\n            }\n            deque.offerLast(numbers.get(i));\n            \n            if (i >= 3) {\n                maxList.add(deque.peekFirst());\n                if (numbers.get(i - 3).equals(deque.peekFirst())) {\n                    deque.pollFirst();\n                }\n            }\n        }\n        \n        return maxList;\n    }\n}\n"}
{"task_id": "Java/10", "generation": "        String reversed = new StringBuilder(string).reverse().toString();\n        return string + reversed;\n    }\n}\n"}
{"task_id": "Java/11", "generation": "        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            result.append((char) (a.charAt(i) ^ b.charAt(i)));\n        }\n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/12", "generation": "        if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        Optional<String> longestString = strings.stream()\n                                                .max(Comparator.comparingInt(String::length));\n        \n        return longestString;\n    }\n}\n"}
{"task_id": "Java/13", "generation": "        if (b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(b, a % b);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter the first number: \");\n        int num1 = scanner.nextInt();\n        System.out.print(\"Enter the second number: \");\n        int num2 = scanner.nextInt();\n        int gcd = solution.greatestCommonDivisor(num1, num2);\n        System.out.println(\"The greatest common divisor of \" + num1 + \" and \" + num2 + \" is: \" + gcd);\n        scanner.close();\n    }\n}\n"}
{"task_id": "Java/14", "generation": "        List<String> prefixes = new ArrayList<>();\n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        return prefixes;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<String> prefixes = solution.allPrefixes(\"hello\");\n        System.out.println(\"All prefixes of 'hello': \" + prefixes);\n    }\n}\n"}
{"task_id": "Java/15", "generation": "        StringBuilder sb = new StringBuilder();\n        for (int i = 1; i <= n; i++) {\n            sb.append(String.valueOf(i));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        int n = scanner.nextInt();\n        System.out.println(\"String sequence: \" + solution.stringSequence(n));\n        scanner.close();\n    }\n}\n"}
{"task_id": "Java/16", "generation": "        Set<Character> charSet = new HashSet<>();\n        for (char c : string.toCharArray()) {\n            charSet.add(c);\n        }\n        return charSet.size();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String input = \"hello\";\n        int result = solution.countDistinctCharacters(input);\n        System.out.println(\"Number of distinct characters: \" + result);\n    }\n}\n"}
{"task_id": "Java/17", "generation": "        List<Integer> result = new ArrayList<>();\n        String[] tokens = string.split(\",\");\n        \n        for (String token : tokens) {\n            try {\n                int num = Integer.parseInt(token);\n                result.add(num);\n            } catch (NumberFormatException e) {\n                System.out.println(\"Error parsing token: \" + token);\n            }\n        }\n        \n        return result;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String musicString = \"1,2,3,4,5\";\n        List<Integer> musicList = solution.parseMusic(musicString);\n        System.out.println(\"Parsed music list: \" + musicList);\n    }\n}\n"}
{"task_id": "Java/18", "generation": "        int count = 0;\n        int index = 0;\n        while ((index = string.indexOf(substring, index)) != -1) {\n            index++;\n            count++;\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String string = \"hellohellohello\";\n        String substring = \"hello\";\n        int result = solution.howManyTimes(string, substring);\n        System.out.println(\"The substring '\" + substring + \"' appears \" + result + \" times in the string.\");\n    }\n}\n"}
{"task_id": "Java/19", "generation": "        List<Integer> list = new ArrayList<>();\n        for (int i = 0; i < numbers.length(); i++) {\n            list.add(Character.getNumericValue(numbers.charAt(i)));\n        }\n        Collections.sort(list);\n        StringBuilder sb = new StringBuilder();\n        for (int num : list) {\n            sb.append(num);\n        }\n        return sb.toString();\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String numbers = \"958723\";\n        String sortedNumbers = solution.sortNumbers(numbers);\n        System.out.println(\"Original numbers: \" + numbers);\n        System.out.println(\"Sorted numbers: \" + sortedNumbers);\n    }\n}\n"}
{"task_id": "Java/20", "generation": "        Collections.sort(numbers);\n        List<Double> result = new ArrayList<>();\n        double minDiff = Double.MAX_VALUE;\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = Math.abs(numbers.get(i) - numbers.get(i + 1));\n            if (diff < minDiff) {\n                minDiff = diff;\n                result.clear();\n                result.add(numbers.get(i));\n                result.add(numbers.get(i + 1));\n            } else if (diff == minDiff) {\n                result.add(numbers.get(i));\n                result.add(numbers.get(i + 1));\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/21", "generation": "        List<Double> rescaledNumbers = new ArrayList<>();\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        \n        for (double num : numbers) {\n            double rescaledNum = (num - min) / (max - min);\n            rescaledNumbers.add(rescaledNum);\n        }\n        \n        return rescaledNumbers;\n    }\n}\n"}
{"task_id": "Java/22", "generation": "        List<Integer> integers = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                integers.add((Integer) value);\n            }\n        }\n        return integers;\n    }\n}\n"}
{"task_id": "Java/23", "generation": "        return string.length();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String testString = \"Hello, World!\";\n        System.out.println(\"Length of the string: \" + solution.strlen(testString));\n    }\n}\n"}
{"task_id": "Java/24", "generation": "        for (int i = n / 2; i >= 1; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return 1;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        int n = scanner.nextInt();\n        int result = solution.largestDivisor(n);\n        System.out.println(\"Largest divisor of \" + n + \" is: \" + result);\n    }\n}\n"}
{"task_id": "Java/25", "generation": "        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        return factors;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int number = 24;\n        List<Integer> factors = solution.factorize(number);\n        System.out.println(\"Factors of \" + number + \" are: \" + factors);\n    }\n}\n"}
{"task_id": "Java/26", "generation": "        return numbers.stream()\n                      .distinct()\n                      .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/27", "generation": "        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            char c = chars[i];\n            if (Character.isUpperCase(c)) {\n                chars[i] = Character.toLowerCase(c);\n            } else if (Character.isLowerCase(c)) {\n                chars[i] = Character.toUpperCase(c);\n            }\n        }\n        return new String(chars);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String input = \"Hello, World!\";\n        String output = solution.flipCase(input);\n        System.out.println(\"Input: \" + input);\n        System.out.println(\"Output: \" + output);\n    }\n}\n"}
{"task_id": "Java/28", "generation": "        StringBuilder sb = new StringBuilder();\n        for (String str : strings) {\n            sb.append(str);\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        List<String> strings = new ArrayList<>();\n        strings.add(\"Hello, \");\n        strings.add(\"world!\");\n        \n        Solution solution = new Solution();\n        String concatenatedString = solution.concatenate(strings);\n        System.out.println(concatenatedString);\n    }\n}\n"}
{"task_id": "Java/29", "generation": "        return strings.stream()\n            .filter(s -> s.startsWith(prefix))\n            .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<String> strings = Arrays.asList(\"apple\", \"banana\", \"orange\", \"grape\", \"pear\");\n        String prefix = \"b\";\n        List<String> filteredStrings = solution.filterByPrefix(strings, prefix);\n        System.out.println(\"Strings starting with prefix '\" + prefix + \"': \" + filteredStrings);\n    }\n}\n"}
{"task_id": "Java/30", "generation": "        return l.stream()\n                .filter(num -> num > 0)\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(-1, 2, -3, 4, -5, 6);\n        Solution solution = new Solution();\n        List<Integer> positiveNumbers = solution.getPositive(numbers);\n        System.out.println(\"Positive numbers: \" + positiveNumbers);\n    }\n}\n"}
{"task_id": "Java/31", "generation": "        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        int num = scanner.nextInt();\n        if (solution.isPrime(num)) {\n            System.out.println(num + \" is a prime number.\");\n        } else {\n            System.out.println(num + \" is not a prime number.\");\n        }\n        scanner.close();\n    }\n}\n"}
{"task_id": "Java/32", "generation": "        double x = 0;\n        double step = 0.1;\n        double precision = 0.0001;\n        \n        while (Math.abs(poly(xs, x)) > precision) {\n            x += step;\n        }\n        \n        return x;\n    }\n}\n"}
{"task_id": "Java/33", "generation": "        Collections.sort(l);\n        return l;\n    }\n}\n"}
{"task_id": "Java/34", "generation": "        Set<Integer> set = new HashSet<>(l);\n        return new ArrayList<>(set);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> list = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 2, 3, 5));\n        List<Integer> uniqueList = solution.unique(list);\n        System.out.println(\"Original List: \" + list);\n        System.out.println(\"Unique List: \" + uniqueList);\n    }\n}\n"}
{"task_id": "Java/35", "generation": "        int max = Integer.MIN_VALUE;\n        for (int num : l) {\n            if (num > max) {\n                max = num;\n            }\n        }\n        return max;\n    }\n}\n"}
{"task_id": "Java/36", "generation": "        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 3 == 0 && i % 5 == 0) {\n                System.out.println(\"FizzBuzz\");\n            } else if (i % 3 == 0) {\n                System.out.println(\"Fizz\");\n            } else if (i % 5 == 0) {\n                System.out.println(\"Buzz\");\n            } else {\n                System.out.println(i);\n            }\n            count++;\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/37", "generation": "        List<Integer> evenNumbers = new ArrayList<>();\n        for (int num : l) {\n            if (num % 2 == 0) {\n                evenNumbers.add(num);\n            }\n        }\n        Collections.sort(evenNumbers);\n        return evenNumbers;\n    }\n}\n"}
{"task_id": "Java/38", "generation": "        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}\n"}
{"task_id": "Java/39", "generation": "        if (n <= 1) {\n            return 0;\n        }\n        int a = 0, b = 1, c = 1;\n        Set<Integer> primes = new HashSet<>();\n        primes.add(2);\n        while (c < n) {\n            c = a + b;\n            a = b;\n            b = c;\n            if (isPrime(c)) {\n                primes.add(c);\n            }\n        }\n        return primes.size();\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int n = 20;\n        System.out.println(\"Number of prime Fibonacci numbers less than \" + n + \" is: \" + solution.primeFib(n));\n    }\n}\n"}
{"task_id": "Java/40", "generation": "        Set<Integer> set = new HashSet<>();\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                int sum = l.get(i) + l.get(j);\n                if (set.contains(-sum)) {\n                    return true;\n                }\n                set.add(l.get(j));\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/41", "generation": "        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int n = 10;\n        int result = solution.carRaceCollision(n);\n        System.out.println(\"Number of collisions: \" + result);\n    }\n}\n"}
{"task_id": "Java/42", "generation": "        return l.stream()\n                .map(num -> num + 1)\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);\n        Solution solution = new Solution();\n        List<Integer> incrementedNumbers = solution.incrList(numbers);\n        System.out.println(\"Original List: \" + numbers);\n        System.out.println(\"Incremented List: \" + incrementedNumbers);\n    }\n}\n"}
{"task_id": "Java/43", "generation": "        Set<Integer> set = new HashSet<>();\n        for (int num : l) {\n            if (set.contains(-num)) {\n                return true;\n            }\n            set.add(num);\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/44", "generation": "        if (x == 0) {\n            return \"0\";\n        }\n        \n        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n            int remainder = x % base;\n            sb.insert(0, remainder);\n            x = x / base;\n        }\n        \n        return sb.toString();\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int x = 10;\n        int base = 2;\n        System.out.println(\"Number \" + x + \" in base \" + base + \" is: \" + solution.changeBase(x, base));\n    }\n}\n"}
{"task_id": "Java/45", "generation": "        return 0.5 * a * h;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        double base = 5.0;\n        double height = 8.0;\n        double area = solution.triangleArea(base, height);\n        System.out.println(\"The area of the triangle is: \" + area);\n    }\n}\n"}
{"task_id": "Java/46", "generation": "        if (n <= 1) {\n            return n;\n        }\n        \n        int[] dp = new int[n + 1];\n        dp[0] = 0;\n        dp[1] = 1;\n        \n        for (int i = 2; i <= n; i++) {\n            dp[i] = dp[i - 1] + dp[i - 2];\n        }\n        \n        return dp[n];\n    }\n}\n"}
{"task_id": "Java/47", "generation": "        Collections.sort(l);\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (double)(l.get(n/2 - 1) + l.get(n/2)) / 2;\n        } else {\n            return (double)l.get(n/2);\n        }\n    }\n\n    public static void main(String[] args) {\n        List<Integer> list = new ArrayList<>();\n        list.add(3);\n        list.add(1);\n        list.add(5);\n        list.add(2);\n        list.add(4);\n\n        Solution solution = new Solution();\n        double result = solution.median(list);\n        System.out.println(\"Median: \" + result);\n    }\n}\n"}
{"task_id": "Java/48", "generation": "        String cleanText = text.replaceAll(\"[^a-zA-Z0-9]\", \"\").toLowerCase();\n        int left = 0;\n        int right = cleanText.length() - 1;\n        \n        while (left < right) {\n            if (cleanText.charAt(left) != cleanText.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/49", "generation": "        int result = 1;\n        for (int i = 0; i < p; i++) {\n            result = (result * n) % 1000000007;\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter the value of n: \");\n        int n = scanner.nextInt();\n        System.out.print(\"Enter the value of p: \");\n        int p = scanner.nextInt();\n        int result = solution.modp(n, p);\n        System.out.println(\"Result: \" + result);\n    }\n}\n"}
{"task_id": "Java/50", "generation": "        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 5 - 'a' + 26) % 26)));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String original = \"hello\";\n        String encoded = solution.encodeShift(original);\n        String decoded = solution.decodeShift(encoded);\n\n        System.out.println(\"Original: \" + original);\n        System.out.println(\"Encoded: \" + encoded);\n        System.out.println(\"Decoded: \" + decoded);\n    }\n}\n"}
{"task_id": "Java/51", "generation": "        StringBuilder result = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' &&\n                c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n                result.append(c);\n            }\n        }\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String text = \"Hello World!\";\n        System.out.println(\"Original Text: \" + text);\n        String result = solution.removeVowels(text);\n        System.out.println(\"Text after removing vowels: \" + result);\n    }\n}\n"}
{"task_id": "Java/52", "generation": "        int sum = 0;\n        for (int num : l) {\n            sum += num;\n        }\n        return sum < t;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5));\n        int threshold = 20;\n        Solution solution = new Solution();\n        boolean result = solution.belowThreshold(numbers, threshold);\n        System.out.println(\"Is the sum of numbers below the threshold? \" + result);\n    }\n}\n"}
{"task_id": "Java/53", "generation": "        return x + y;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.print(\"Enter the first number: \");\n        int num1 = scanner.nextInt();\n\n        System.out.print(\"Enter the second number: \");\n        int num2 = scanner.nextInt();\n\n        int sum = solution.add(num1, num2);\n        System.out.println(\"The sum is: \" + sum);\n\n        scanner.close();\n    }\n}\n"}
{"task_id": "Java/54", "generation": "        if (s0.length() != s1.length()) {\n            return false;\n        }\n        \n        char[] chars0 = s0.toCharArray();\n        char[] chars1 = s1.toCharArray();\n        \n        Arrays.sort(chars0);\n        Arrays.sort(chars1);\n        \n        return Arrays.equals(chars0, chars1);\n    }\n}\n"}
{"task_id": "Java/55", "generation": "        if (n <= 1) {\n            return n;\n        }\n        return fib(n-1) + fib(n-2);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter the value of n: \");\n        int n = scanner.nextInt();\n        System.out.println(\"Fibonacci number at position \" + n + \" is: \" + solution.fib(n));\n        scanner.close();\n    }\n}\n"}
{"task_id": "Java/56", "generation": "        Stack<Character> stack = new Stack<>();\n        \n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '(' || bracket == '[' || bracket == '{') {\n                stack.push(bracket);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if ((bracket == ')' && top != '(') || (bracket == ']' && top != '[') || (bracket == '}' && top != '{')) {\n                    return false;\n                }\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n}\n"}
{"task_id": "Java/57", "generation": "        boolean increasing = true;\n        boolean decreasing = true;\n        \n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n                increasing = false;\n            }\n            if (l.get(i) > l.get(i - 1)) {\n                decreasing = false;\n            }\n        }\n        \n        return increasing || decreasing;\n    }\n}\n"}
{"task_id": "Java/58", "generation": "        List<Integer> commonElements = new ArrayList<>();\n        \n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        \n        for (int num : set1) {\n            if (set2.contains(num)) {\n                commonElements.add(num);\n            }\n        }\n        \n        return commonElements;\n    }\n}\n"}
{"task_id": "Java/59", "generation": "        int largestPrime = 1;\n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                largestPrime = i;\n                n = n / i;\n            }\n        }\n        return largestPrime;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        int number = scanner.nextInt();\n        int result = solution.largestPrimeFactor(number);\n        System.out.println(\"Largest prime factor of \" + number + \" is: \" + result);\n    }\n}\n"}
{"task_id": "Java/60", "generation": "        if (n <= 0) {\n            return 0;\n        } else {\n            return n + sumToN(n - 1);\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        int n = scanner.nextInt();\n        System.out.println(\"Sum of numbers from 1 to \" + n + \" is: \" + solution.sumToN(n));\n        scanner.close();\n    }\n}\n"}
{"task_id": "Java/61", "generation": "        Stack<Character> stack = new Stack<>();\n        \n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '(' || bracket == '[' || bracket == '{') {\n                stack.push(bracket);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if ((bracket == ')' && top != '(') || (bracket == ']' && top != '[') || (bracket == '}' && top != '{')) {\n                    return false;\n                }\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n}\n"}
{"task_id": "Java/62", "generation": "        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/63", "generation": "        if (n <= 1) {\n            return n;\n        } else {\n            return fibfib(n - 1) + fibfib(n - 2);\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter the value of n: \");\n        int n = scanner.nextInt();\n        System.out.println(\"Fibonacci number at position \" + n + \" is: \" + solution.fibfib(n));\n        scanner.close();\n    }\n}\n"}
{"task_id": "Java/64", "generation": "        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = Character.toLowerCase(s.charAt(i));\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String input = \"Hello, World!\";\n        int result = solution.vowelsCount(input);\n        System.out.println(\"Number of vowels in the input string: \" + result);\n    }\n}\n"}
{"task_id": "Java/65", "generation": "        String binary = Integer.toBinaryString(x);\n        int len = binary.length();\n        shift = shift % len;\n        String shiftedBinary = binary.substring(len - shift) + binary.substring(0, len - shift);\n        return shiftedBinary;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int x = 23;\n        int shift = 2;\n        String result = solution.circularShift(x, shift);\n        System.out.println(\"Circularly shifted binary of \" + x + \" by \" + shift + \" is: \" + result);\n    }\n}\n"}
{"task_id": "Java/66", "generation": "        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isDigit(c)) {\n                sum += Character.getNumericValue(c);\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String input = \"a1b2c3d4e5\";\n        int result = solution.digitSum(input);\n        System.out.println(\"The sum of digits in the string is: \" + result);\n    }\n}\n"}
{"task_id": "Java/67", "generation": "        if (s == null || s.length() == 0) {\n            return 0;\n        }\n        \n        Map<Character, Integer> fruitCount = new HashMap<>();\n        int left = 0, maxFruits = 0;\n        \n        for (int right = 0; right < s.length(); right++) {\n            char currentFruit = s.charAt(right);\n            fruitCount.put(currentFruit, fruitCount.getOrDefault(currentFruit, 0) + 1);\n            \n            while (fruitCount.size() > n) {\n                char leftFruit = s.charAt(left);\n                fruitCount.put(leftFruit, fruitCount.get(leftFruit) - 1);\n                if (fruitCount.get(leftFruit) == 0) {\n                    fruitCount.remove(leftFruit);\n                }\n                left++;\n            }\n            \n            maxFruits = Math.max(maxFruits, right - left + 1);\n        }\n        \n        return maxFruits;\n    }\n}\n"}
{"task_id": "Java/68", "generation": "        List<Integer> result = new ArrayList<>();\n        for (int num : arr) {\n            if (num % 2 == 0) {\n                result.add(num);\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/69", "generation": "        int target = 5;\n        int left = 0;\n        int right = lst.size() - 1;\n        \n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            if (lst.get(mid) == target) {\n                return mid;\n            } else if (lst.get(mid) < target) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        \n        return -1;\n    }\n    \n    public static void main(String[] args) {\n        List<Integer> lst = new ArrayList<>(Arrays.asList(1, 3, 5, 7, 9, 11, 13));\n        Solution solution = new Solution();\n        int index = solution.search(lst);\n        System.out.println(\"Index of target: \" + index);\n    }\n}\n"}
{"task_id": "Java/70", "generation": "        Collections.sort(lst, (a, b) -> {\n            if (a % 2 == 0 && b % 2 != 0) {\n                return -1;\n            } else if (a % 2 != 0 && b % 2 == 0) {\n                return 1;\n            } else {\n                return a - b;\n            }\n        });\n        return lst;\n    }\n}\n"}
{"task_id": "Java/71", "generation": "        double s = (a + b + c) / 2;\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return area;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        double a = 3.0, b = 4.0, c = 5.0;\n        double area = solution.triangleArea(a, b, c);\n        System.out.println(\"Area of the triangle with sides \" + a + \", \" + b + \", \" + c + \" is: \" + area);\n    }\n}\n"}
{"task_id": "Java/72", "generation": "        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        return sum <= w;\n    }\n}\n"}
{"task_id": "Java/73", "generation": "        int n = arr.size();\n        int sum = 0;\n        for (int num : arr) {\n            sum += num;\n        }\n        boolean[] dp = new boolean[sum + 1];\n        dp[0] = true;\n        for (int num : arr) {\n            for (int i = sum; i >= num; i--) {\n                dp[i] |= dp[i - num];\n            }\n        }\n        for (int i = 1; i <= sum; i++) {\n            if (!dp[i]) {\n                return i;\n            }\n        }\n        return sum + 1;\n    }\n}\n"}
{"task_id": "Java/74", "generation": "        List<String> result = new ArrayList<>();\n        \n        for (String str1 : lst1) {\n            for (String str2 : lst2) {\n                if (str1.equals(str2)) {\n                    result.add(str1);\n                    break;\n                }\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/75", "generation": "        if (a <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(a); i++) {\n            if (a % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        int num = scanner.nextInt();\n        if (solution.isMultiplyPrime(num)) {\n            System.out.println(num + \" is a prime number.\");\n        } else {\n            System.out.println(num + \" is not a prime number.\");\n        }\n    }\n}\n"}
{"task_id": "Java/76", "generation": "        if (x <= 0 || n <= 0) {\n            return false;\n        }\n        \n        double result = Math.log(x) / Math.log(n);\n        \n        return Math.floor(result) == result;\n    }\n}\n"}
{"task_id": "Java/77", "generation": "        double cubeRoot = Math.cbrt(a);\n        return cubeRoot == (int)cubeRoot;\n    }\n}\n"}
{"task_id": "Java/78", "generation": "        int result = 0;\n        try {\n            result = Integer.parseInt(num, 16);\n        } catch (NumberFormatException e) {\n            System.out.println(\"Invalid hexadecimal number format.\");\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.hexKey(\"1A\")); // Output: 26\n        System.out.println(solution.hexKey(\"FF\")); // Output: 255\n        System.out.println(solution.hexKey(\"G7\")); // Output: 0 (Invalid hexadecimal number format.)\n    }\n}\n"}
{"task_id": "Java/79", "generation": "        return Integer.toBinaryString(decimal);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a decimal number: \");\n        int decimal = scanner.nextInt();\n        String binary = solution.decimalToBinary(decimal);\n        System.out.println(\"Binary representation: \" + binary);\n    }\n}\n"}
{"task_id": "Java/80", "generation": "        Set<String> seen = new HashSet<>();\n        while (!s.equals(\"1\") && !seen.contains(s)) {\n            seen.add(s);\n            int sum = 0;\n            for (char c : s.toCharArray()) {\n                int digit = c - '0';\n                sum += digit * digit;\n            }\n            s = String.valueOf(sum);\n        }\n        return s.equals(\"1\");\n    }\n}\n"}
{"task_id": "Java/81", "generation": "        List<String> letterGrades = new ArrayList<>();\n        \n        for (Double grade : grades) {\n            if (grade >= 90) {\n                letterGrades.add(\"A\");\n            } else if (grade >= 80) {\n                letterGrades.add(\"B\");\n            } else if (grade >= 70) {\n                letterGrades.add(\"C\");\n            } else if (grade >= 60) {\n                letterGrades.add(\"D\");\n            } else {\n                letterGrades.add(\"F\");\n            }\n        }\n        \n        return letterGrades;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Double> grades = new ArrayList<>(Arrays.asList(85.5, 92.0, 78.3, 60.7, 45.2));\n        List<String> letterGrades = solution.numericalLetterGrade(grades);\n        \n        System.out.println(\"Numerical Grades: \" + grades);\n        System.out.println(\"Letter Grades: \" + letterGrades);\n    }\n}\n"}
{"task_id": "Java/82", "generation": "        int length = string.length();\n        if (length <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a string: \");\n        String input = scanner.nextLine();\n        if (solution.primeLength(input)) {\n            System.out.println(\"The length of the string is a prime number.\");\n        } else {\n            System.out.println(\"The length of the string is not a prime number.\");\n        }\n        scanner.close();\n    }\n}\n"}
{"task_id": "Java/83", "generation": "        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (String.valueOf(i).startsWith(\"1\") && String.valueOf(i).endsWith(\"1\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int n = 1000;\n        int result = solution.startsOneEnds(n);\n        System.out.println(\"Number of integers between 1 and \" + n + \" that start and end with 1: \" + result);\n    }\n}\n"}
{"task_id": "Java/84", "generation": "        if (N % 2 == 0) {\n            return \"Even\";\n        } else {\n            return \"Odd\";\n        }\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        int num = scanner.nextInt();\n        System.out.println(\"The number is: \" + solution.solve(num));\n        scanner.close();\n    }\n}\n"}
{"task_id": "Java/85", "generation": "        int sum = 0;\n        for (int num : lst) {\n            sum += num;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = new ArrayList<>();\n        numbers.add(5);\n        numbers.add(10);\n        numbers.add(15);\n\n        Solution solution = new Solution();\n        int result = solution.add(numbers);\n        System.out.println(\"The sum of the numbers is: \" + result);\n    }\n}\n"}
{"task_id": "Java/86", "generation": "        char[] chars = s.toCharArray();\n        Arrays.sort(chars);\n        StringBuilder sb = new StringBuilder();\n        int mid = (s.length() + 1) / 2;\n        for (int i = 0; i < mid; i++) {\n            sb.append(chars[i]);\n            if (mid + i < s.length()) {\n                sb.append(chars[mid + i]);\n            }\n        }\n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/87", "generation": "        List<List<Integer>> result = new ArrayList<>();\n        if (x < 0) {\n            return result;\n        }\n        for (int i = 0; i <= x; i++) {\n            List<Integer> row = new ArrayList<>();\n            for (int j = 0; j <= i; j++) {\n                if (j == 0 || j == i) {\n                    row.add(1);\n                } else {\n                    row.add(lst.get(i - 1).get(j - 1) + lst.get(i - 1).get(j));\n                }\n            }\n            result.add(row);\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/88", "generation": "        Collections.sort(array);\n        return array;\n    }\n}\n"}
{"task_id": "Java/89", "generation": "        char[] chars = s.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            chars[i] = (char) (chars[i] + 1);\n        }\n        return new String(chars);\n    }\n\n    public String decrypt(String s) {\n        char[] chars = s.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            chars[i] = (char) (chars[i] - 1);\n        }\n        return new String(chars);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String original = \"Hello, World!\";\n        String encrypted = solution.encrypt(original);\n        String decrypted = solution.decrypt(encrypted);\n\n        System.out.println(\"Original: \" + original);\n        System.out.println(\"Encrypted: \" + encrypted);\n        System.out.println(\"Decrypted: \" + decrypted);\n    }\n}\n"}
{"task_id": "Java/90", "generation": "        Optional<Integer> result = lst.stream()\n                                      .filter(num -> num < 0)\n                                      .min(Comparator.naturalOrder());\n        return result;\n    }\n}\n"}
{"task_id": "Java/91", "generation": "        int count = 0;\n        for (int i = 0; i < S.length(); i++) {\n            if (S.charAt(i) == 'a' || S.charAt(i) == 'e' || S.charAt(i) == 'i' || S.charAt(i) == 'o' || S.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String input = \"Hello, I am bored!\";\n        int result = solution.isBored(input);\n        System.out.println(\"Number of vowels in the input: \" + result);\n    }\n}\n"}
{"task_id": "Java/92", "generation": "        return x instanceof Integer || y instanceof Integer || z instanceof Integer;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.anyInt(5, \"hello\", 10.5)); // true\n        System.out.println(solution.anyInt(\"world\", \"foo\", \"bar\")); // false\n    }\n}\n"}
{"task_id": "Java/93", "generation": "        StringBuilder encodedMessage = new StringBuilder();\n        char prevChar = message.charAt(0);\n        int count = 1;\n        \n        for (int i = 1; i < message.length(); i++) {\n            char currentChar = message.charAt(i);\n            if (currentChar == prevChar) {\n                count++;\n            } else {\n                encodedMessage.append(prevChar);\n                encodedMessage.append(count);\n                prevChar = currentChar;\n                count = 1;\n            }\n        }\n        \n        encodedMessage.append(prevChar);\n        encodedMessage.append(count);\n        \n        return encodedMessage.toString();\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String message = \"aaabbc\";\n        System.out.println(solution.encode(message)); // Output: a3b2c1\n    }\n}\n"}
{"task_id": "Java/94", "generation": "        int sum = 0;\n        for (int num : lst) {\n            sum += num;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/95", "generation": "        for (Map.Entry<Object, Object> entry : dict.entrySet()) {\n            if (entry.getKey() instanceof String && entry.getValue() instanceof String) {\n                String key = (String) entry.getKey();\n                String value = (String) entry.getValue();\n                if (key.equals(key.toLowerCase()) || key.equals(key.toUpperCase()) || value.equals(value.toLowerCase()) || value.equals(value.toUpperCase())) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/96", "generation": "        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            result.add(i);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> numbers = solution.countUpTo(5);\n        System.out.println(\"Numbers up to 5: \" + numbers);\n    }\n}\n"}
{"task_id": "Java/97", "generation": "        return a * b;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.print(\"Enter the first number: \");\n        int num1 = scanner.nextInt();\n\n        System.out.print(\"Enter the second number: \");\n        int num2 = scanner.nextInt();\n\n        int result = solution.multiply(num1, num2);\n        System.out.println(\"The result of multiplication is: \" + result);\n\n        scanner.close();\n    }\n}\n"}
{"task_id": "Java/98", "generation": "        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String input = \"Hello World\";\n        int result = solution.countUpper(input);\n        System.out.println(\"Number of uppercase letters: \" + result);\n    }\n}\n"}
{"task_id": "Java/99", "generation": "        int count = 0;\n        for (int i = 0; i < value.length(); i++) {\n            if (Character.isUpperCase(value.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String input = \"Hello World\";\n        int result = solution.countUpper(input);\n        System.out.println(\"Number of uppercase letters: \" + result);\n    }\n}\n"}
{"task_id": "Java/100", "generation": "        List<Integer> pile = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            pile.add(i);\n        }\n        return pile;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> pile = solution.makeAPile(5);\n        System.out.println(\"Pile of integers: \" + pile);\n    }\n}\n"}
{"task_id": "Java/101", "generation": "        List<String> wordList = new ArrayList<>();\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            wordList.add(word);\n        }\n        return wordList;\n    }\n}\n"}
{"task_id": "Java/102", "generation": "        if (y == 0) {\n            return 1;\n        } else if (y == 1) {\n            return x;\n        } else {\n            return chooseNum(x - 1, y - 1) + chooseNum(x - 1, y);\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter the value of x: \");\n        int x = scanner.nextInt();\n        System.out.print(\"Enter the value of y: \");\n        int y = scanner.nextInt();\n        System.out.println(\"Result: \" + solution.chooseNum(x, y));\n    }\n}\n"}
{"task_id": "Java/103", "generation": "        double avg = (double)(n + m) / 2;\n        return Math.round(avg);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int n = 5;\n        int m = 7;\n        System.out.println(\"Rounded average of \" + n + \" and \" + m + \" is: \" + solution.roundedAvg(n, m));\n    }\n}\n"}
{"task_id": "Java/104", "generation": "        Set<Integer> uniqueDigitsSet = new HashSet<>();\n        for (Integer num : x) {\n            String numStr = String.valueOf(num);\n            for (int i = 0; i < numStr.length(); i++) {\n                uniqueDigitsSet.add(Character.getNumericValue(numStr.charAt(i)));\n            }\n        }\n        List<Integer> uniqueDigitsList = new ArrayList<>(uniqueDigitsSet);\n        return uniqueDigitsList;\n    }\n}\n"}
{"task_id": "Java/105", "generation": "        List<String> result = new ArrayList<>();\n        Collections.sort(arr, (a, b) -> Integer.compare(Integer.bitCount(a), Integer.bitCount(b)));\n        for (int num : arr) {\n            result.add(Integer.toBinaryString(num));\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/106", "generation": "        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            result.add(i);\n        }\n        return result;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> output = solution.f(5);\n        System.out.println(output);\n    }\n}\n"}
{"task_id": "Java/107", "generation": "        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i) && i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n\n    private boolean isPalindrome(int num) {\n        String str = String.valueOf(num);\n        int left = 0;\n        int right = str.length() - 1;\n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> result = solution.evenOddPalindrome(100);\n        System.out.println(\"Even palindromes up to 100: \" + result);\n    }\n}\n"}
{"task_id": "Java/108", "generation": "        int count = 0;\n        for (int num : arr) {\n            if (num % 2 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10));\n        Solution solution = new Solution();\n        int evenCount = solution.countNums(numbers);\n        System.out.println(\"Number of even numbers in the list: \" + evenCount);\n    }\n}\n"}
{"task_id": "Java/109", "generation": "        int n = arr.size();\n        for (int i = 0; i < n; i++) {\n            if (arr.get(i) == 1) {\n                int j = i + 1;\n                while (j < n && arr.get(j) == 0) {\n                    j++;\n                }\n                if (j < n && arr.get(j) == 1) {\n                    return false;\n                }\n                if (j == n) {\n                    return true;\n                }\n                arr.set(i, 0);\n                arr.set(j, 1);\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> arr = new ArrayList<>(Arrays.asList(1, 0, 1, 0, 1));\n        System.out.println(solution.moveOneBall(arr)); // Output: true\n    }\n}\n"}
{"task_id": "Java/110", "generation": "        int sum1 = lst1.stream().mapToInt(Integer::intValue).sum();\n        int sum2 = lst2.stream().mapToInt(Integer::intValue).sum();\n        \n        Collections.sort(lst1, Collections.reverseOrder());\n        Collections.sort(lst2);\n        \n        lst1.addAll(lst2);\n        \n        StringBuilder result = new StringBuilder();\n        result.append(\"Sum of lst1: \").append(sum1).append(\"\\n\");\n        result.append(\"Sum of lst2: \").append(sum2).append(\"\\n\");\n        result.append(\"Combined list: \").append(lst1);\n        \n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/111", "generation": "        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < test.length(); i++) {\n            String key = String.valueOf(test.charAt(i));\n            map.put(key, map.getOrDefault(key, 0) + 1);\n        }\n        return map;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String testString = \"hello\";\n        Map<String, Integer> result = solution.histogram(testString);\n        System.out.println(result);\n    }\n}\n"}
{"task_id": "Java/112", "generation": "        List<Object> result = new ArrayList<>();\n        if (s == null || c == null || s.length() == 0 || c.length() == 0) {\n            result.add(\"Invalid input\");\n            return result;\n        }\n        \n        StringBuilder sb = new StringBuilder(s);\n        int index = sb.lastIndexOf(c);\n        if (index != -1) {\n            sb.delete(index, index + c.length());\n            result.add(sb.reverse().toString());\n            result.add(\"Success\");\n        } else {\n            result.add(\"Character not found\");\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/113", "generation": "        List<String> oddLengthStrings = new ArrayList<>();\n        for (String str : lst) {\n            if (str.length() % 2 != 0) {\n                oddLengthStrings.add(str);\n            }\n        }\n        return oddLengthStrings;\n    }\n}\n"}
{"task_id": "Java/114", "generation": "        int minSum = Integer.MAX_VALUE;\n        int currentSum = 0;\n        \n        for (int num : nums) {\n            currentSum += num;\n            minSum = Math.min(minSum, currentSum);\n            if (currentSum > 0) {\n                currentSum = 0;\n            }\n        }\n        \n        return minSum;\n    }\n}\n"}
{"task_id": "Java/115", "generation": "        int rows = grid.size();\n        int cols = grid.get(0).size();\n        \n        int[][] dp = new int[rows][cols];\n        \n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = Math.min(grid.get(i).get(j), capacity);\n                } else if (i == 0) {\n                    dp[i][j] = Math.min(dp[i][j - 1], grid.get(i).get(j));\n                } else if (j == 0) {\n                    dp[i][j] = Math.min(dp[i - 1][j], grid.get(i).get(j));\n                } else {\n                    dp[i][j] = Math.min(Math.max(dp[i - 1][j], dp[i][j - 1]), grid.get(i).get(j));\n                }\n            }\n        }\n        \n        return dp[rows - 1][cols - 1];\n    }\n}\n"}
{"task_id": "Java/116", "generation": "        Collections.sort(arr);\n        return arr;\n    }\n}\n"}
{"task_id": "Java/117", "generation": "        List<String> words = new ArrayList<>();\n        String[] splitWords = s.split(\" \");\n        \n        for (String word : splitWords) {\n            if (word.length() == n) {\n                words.add(word);\n            }\n        }\n        \n        return words;\n    }\n}\n"}
{"task_id": "Java/118", "generation": "        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u'));\n        int minDistance = Integer.MAX_VALUE;\n        char closestVowel = ' ';\n        \n        for (char c : word.toCharArray()) {\n            if (vowels.contains(c)) {\n                return String.valueOf(c);\n            } else {\n                for (char vowel : vowels) {\n                    int distance = Math.abs(c - vowel);\n                    if (distance < minDistance) {\n                        minDistance = distance;\n                        closestVowel = vowel;\n                    }\n                }\n            }\n        }\n        \n        return String.valueOf(closestVowel);\n    }\n}\n"}
{"task_id": "Java/119", "generation": "        Stack<Character> stack = new Stack<>();\n        for (String str : lst) {\n            for (char c : str.toCharArray()) {\n                if (c == '(') {\n                    stack.push(c);\n                } else if (c == ')') {\n                    if (stack.isEmpty() || stack.pop() != '(') {\n                        return \"Unbalanced\";\n                    }\n                }\n            }\n        }\n        return stack.isEmpty() ? \"Balanced\" : \"Unbalanced\";\n    }\n}\n"}
{"task_id": "Java/120", "generation": "        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\n        List<Integer> result = new ArrayList<>();\n        \n        for (int num : arr) {\n            maxHeap.offer(num);\n        }\n        \n        for (int i = 0; i < k; i++) {\n            result.add(maxHeap.poll());\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/121", "generation": "        int sum = 0;\n        for (int num : lst) {\n            sum += num;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/122", "generation": "        int sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            sum += arr.get(i);\n        }\n        return sum + k;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = new ArrayList<>();\n        numbers.add(5);\n        numbers.add(10);\n        numbers.add(15);\n\n        Solution solution = new Solution();\n        int result = solution.addElements(numbers, 20);\n        System.out.println(\"Result: \" + result);\n    }\n}\n"}
{"task_id": "Java/123", "generation": "        List<Integer> result = new ArrayList<>();\n        result.add(n);\n        while (n != 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n            if (n % 2 != 0) {\n                result.add(n);\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/124", "generation": "        try {\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n            sdf.setLenient(false);\n            sdf.parse(date);\n            return true;\n        } catch (ParseException e) {\n            return false;\n        }\n    }\n}\n"}
{"task_id": "Java/125", "generation": "        List<String> words = new ArrayList<>();\n        String[] splitTxt = txt.split(\"\\\\s+\");\n        for (String word : splitTxt) {\n            words.add(word);\n        }\n        return words;\n    }\n}\n"}
{"task_id": "Java/126", "generation": "        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < lst.get(i - 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5));\n        Solution solution = new Solution();\n        System.out.println(solution.isSorted(numbers));\n    }\n}\n"}
{"task_id": "Java/127", "generation": "        int start = Math.max(interval1.get(0), interval2.get(0));\n        int end = Math.min(interval1.get(1), interval2.get(1));\n        \n        if (start > end) {\n            return \"No intersection\";\n        } else {\n            return \"[\" + start + \", \" + end + \"]\";\n        }\n    }\n}\n"}
{"task_id": "Java/128", "generation": "        int negativeCount = 0;\n        int zeroCount = 0;\n        \n        for (int num : arr) {\n            if (num < 0) {\n                negativeCount++;\n            } else if (num == 0) {\n                zeroCount++;\n            }\n        }\n        \n        if (zeroCount > 0) {\n            return Optional.of(0);\n        } else {\n            return Optional.of(negativeCount % 2 == 0 ? 1 : -1);\n        }\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> numbers = Arrays.asList(2, -3, 4, -1, 0);\n        Optional<Integer> result = solution.prodSigns(numbers);\n        \n        if (result.isPresent()) {\n            System.out.println(\"Product of signs: \" + result.get());\n        } else {\n            System.out.println(\"No elements in the list.\");\n        }\n    }\n}\n"}
{"task_id": "Java/129", "generation": "        int m = grid.size();\n        int n = grid.get(0).size();\n        \n        int[][] dp = new int[m][n];\n        for (int[] row : dp) {\n            Arrays.fill(row, Integer.MAX_VALUE);\n        }\n        \n        dp[0][0] = grid.get(0).get(0);\n        \n        Queue<int[]> queue = new LinkedList<>();\n        queue.offer(new int[]{0, 0, 0});\n        \n        int[][] dirs = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n        \n        while (!queue.isEmpty()) {\n            int[] curr = queue.poll();\n            int r = curr[0];\n            int c = curr[1];\n            int cost = curr[2];\n            \n            if (r == m - 1 && c == n - 1) {\n                return dp[m - 1][n - 1] <= k ? dp[m - 1][n - 1] : new ArrayList<>();\n            }\n            \n            for (int[] dir : dirs) {\n                int nr = r + dir[0];\n                int nc = c + dir[1];\n                \n                if (nr >= 0 && nr < m && nc >= 0 && nc < n) {\n                    int newCost = cost + grid.get(nr).get(nc);\n                    \n                    if (newCost < dp[nr][nc]) {\n                        dp[nr][nc] = newCost;\n                        queue.offer(new int[]{nr, nc, newCost});\n                    }\n                }\n            }\n        }\n        \n        return new ArrayList<>();\n    }\n}\n"}
{"task_id": "Java/130", "generation": "        List<Integer> triangle = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            triangle.add(i * (i + 1) / 2);\n        }\n        return triangle;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> result = solution.tri(5);\n        System.out.println(\"Triangle numbers up to 5: \" + result);\n    }\n}\n"}
{"task_id": "Java/131", "generation": "        int count = 0;\n        while (n != 0) {\n            n = n / 10;\n            count++;\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        int num = scanner.nextInt();\n        System.out.println(\"Number of digits: \" + solution.digits(num));\n    }\n}\n"}
{"task_id": "Java/132", "generation": "        Stack<Character> stack = new Stack<>();\n        \n        for (char c : string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.pop() != '(') {\n                    return false;\n                }\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String testString = \"((()))\";\n        System.out.println(solution.isNested(testString)); // Output should be true\n    }\n}\n"}
{"task_id": "Java/133", "generation": "        int sum = 0;\n        for (Double num : lst) {\n            sum += Math.pow(num, 2);\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/134", "generation": "        char lastChar = txt.charAt(txt.length() - 1);\n        return Character.isLetter(lastChar);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.checkIfLastCharIsALetter(\"Hello!\")); // true\n        System.out.println(solution.checkIfLastCharIsALetter(\"12345\")); // false\n    }\n}\n```\n```java\n}\n"}
{"task_id": "Java/135", "generation": "        Map<Integer, Integer> map = new HashMap<>();\n        int count = 0;\n        \n        for (int num : arr) {\n            int remainder = num % 5;\n            int complement = (5 - remainder) % 5;\n            \n            if (map.containsKey(complement) && map.get(complement) > 0) {\n                count++;\n                map.put(complement, map.get(complement) - 1);\n            } else {\n                map.put(remainder, map.getOrDefault(remainder, 0) + 1);\n            }\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/136", "generation": "        List<Optional<Integer>> result = new ArrayList<>();\n        if(lst.isEmpty()){\n            result.add(Optional.empty());\n            result.add(Optional.empty());\n            return result;\n        }\n        \n        Optional<Integer> largest = lst.stream().max(Integer::compare);\n        Optional<Integer> smallest = lst.stream().min(Integer::compare);\n        \n        result.add(largest);\n        result.add(smallest);\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/137", "generation": "        if (a.equals(b)) {\n            return Optional.empty();\n        } else {\n            return Optional.of(a);\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Object obj1 = \"Hello\";\n        Object obj2 = \"World\";\n        \n        Optional<Object> result = solution.compareOne(obj1, obj2);\n        \n        if (result.isPresent()) {\n            System.out.println(\"Objects are different: \" + result.get());\n        } else {\n            System.out.println(\"Objects are the same.\");\n        }\n    }\n}\n"}
{"task_id": "Java/138", "generation": "        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum % 2 == 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        int n = scanner.nextInt();\n        boolean result = solution.isEqualToSumEven(n);\n        System.out.println(\"Is the sum of numbers from 1 to \" + n + \" even? \" + result);\n    }\n}\n"}
{"task_id": "Java/139", "generation": "        if (n == 0 || n == 1) {\n            return 1;\n        } else {\n            return n * specialFactorial(n - 2);\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        int n = scanner.nextInt();\n        long result = solution.specialFactorial(n);\n        System.out.println(\"Special factorial of \" + n + \" is: \" + result);\n        scanner.close();\n    }\n}\n"}
{"task_id": "Java/140", "generation": "        return text.trim().replaceAll(\"\\\\s+\", \" \");\n    }\n}\n"}
{"task_id": "Java/141", "generation": "        if (file_name.endsWith(\".txt\")) {\n            return \"Text file\";\n        } else if (file_name.endsWith(\".java\")) {\n            return \"Java file\";\n        } else {\n            return \"Unknown file type\";\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.filenameCheck(\"document.txt\"));\n        System.out.println(solution.filenameCheck(\"code.java\"));\n        System.out.println(solution.filenameCheck(\"image.png\"));\n    }\n}\n"}
{"task_id": "Java/142", "generation": "        int sum = 0;\n        for (int num : lst) {\n            sum += num * num;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/143", "generation": "        String[] words = sentence.split(\" \");\n        StringBuilder result = new StringBuilder();\n        \n        for (String word : words) {\n            result.append(word).append(\" \");\n        }\n        \n        return result.toString().trim();\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String sentence = \"Hello world, how are you?\";\n        System.out.println(solution.wordsInSentence(sentence));\n    }\n}\n"}
{"task_id": "Java/144", "generation": "        if (x.length() != n.length()) {\n            return false;\n        }\n        \n        char[] xArr = x.toCharArray();\n        char[] nArr = n.toCharArray();\n        \n        Arrays.sort(xArr);\n        Arrays.sort(nArr);\n        \n        for (int i = 0; i < xArr.length; i++) {\n            if (xArr[i] != nArr[i]) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/145", "generation": "        Collections.sort(nums);\n        return nums;\n    }\n}\n"}
{"task_id": "Java/146", "generation": "        int sum = 0;\n        for (int num : nums) {\n            if (num % 2 == 0) {\n                sum += num;\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10));\n        Solution solution = new Solution();\n        int result = solution.specialFilter(numbers);\n        System.out.println(\"Sum of even numbers: \" + result);\n    }\n}\n"}
{"task_id": "Java/147", "generation": "        int max = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 3 == 0 && i > max) {\n                max = i;\n            }\n        }\n        return max;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        int n = scanner.nextInt();\n        int result = solution.getMaxTriples(n);\n        System.out.println(\"The largest multiple of 3 less than or equal to \" + n + \" is: \" + result);\n    }\n}\n"}
{"task_id": "Java/148", "generation": "        List<String> result = new ArrayList<>();\n        if (planet1.equals(\"Earth\") && planet2.equals(\"Mars\")) {\n            result.add(\"They are in different solar systems.\");\n        } else {\n            result.add(\"They are in the same solar system.\");\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<String> result = solution.bf(\"Earth\", \"Mars\");\n        for (String str : result) {\n            System.out.println(str);\n        }\n    }\n}\n"}
{"task_id": "Java/149", "generation": "        Collections.sort(lst);\n        return lst;\n    }\n}\n"}
{"task_id": "Java/150", "generation": "        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if ((i % x == 0) ^ (i % y == 0)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter the value of n: \");\n        int n = scanner.nextInt();\n        System.out.print(\"Enter the value of x: \");\n        int x = scanner.nextInt();\n        System.out.print(\"Enter the value of y: \");\n        int y = scanner.nextInt();\n        System.out.println(\"Count: \" + solution.xOrY(n, x, y));\n        scanner.close();\n    }\n}\n"}
{"task_id": "Java/151", "generation": "        int sum = 0;\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                sum += (int) obj;\n            } else if (obj instanceof String) {\n                try {\n                    sum += Integer.parseInt((String) obj);\n                } catch (NumberFormatException e) {\n                    // Handle the exception\n                }\n            }\n        }\n        return sum * 2;\n    }\n}\n"}
{"task_id": "Java/152", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        int[] gameCount = new int[10];\n        int[] guessCount = new int[10];\n        \n        for (int i = 0; i < game.size(); i++) {\n            if (game.get(i) == guess.get(i)) {\n                result.add(2);\n            } else {\n                gameCount[game.get(i)]++;\n                guessCount[guess.get(i)]++;\n            }\n        }\n        \n        for (int i = 0; i < game.size(); i++) {\n            if (game.get(i) != guess.get(i) && gameCount[game.get(i)] > 0 && guessCount[guess.get(i)] > 0) {\n                result.add(1);\n                gameCount[game.get(i)]--;\n                guessCount[guess.get(i)]--;\n            }\n        }\n        \n        while (result.size() < game.size()) {\n            result.add(0);\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/153", "generation": "        String strongestExtension = \"\";\n        int maxStrength = Integer.MIN_VALUE;\n\n        for (String extension : extensions) {\n            int strength = calculateStrength(extension);\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n\n        return strongestExtension;\n    }\n\n    private int calculateStrength(String extension) {\n        // Implement the logic to calculate the strength of the extension\n        return extension.length();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<String> extensions = new ArrayList<>();\n        extensions.add(\"txt\");\n        extensions.add(\"java\");\n        extensions.add(\"pdf\");\n\n        String strongestExtension = solution.StrongestExtension(\"Solution\", extensions);\n        System.out.println(\"The strongest extension is: \" + strongestExtension);\n    }\n}\n"}
{"task_id": "Java/154", "generation": "        if (a.length() != b.length()) {\n            return false;\n        }\n        \n        String doubleA = a + a;\n        return doubleA.contains(b);\n    }\n}\n"}
{"task_id": "Java/155", "generation": "        List<Integer> counts = new ArrayList<>();\n        int evenCount = 0;\n        int oddCount = 0;\n        \n        while(num > 0) {\n            int digit = num % 10;\n            if(digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n            num = num / 10;\n        }\n        \n        counts.add(evenCount);\n        counts.add(oddCount);\n        \n        return counts;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int number = 123456789;\n        List<Integer> counts = solution.evenOddCount(number);\n        System.out.println(\"Even Count: \" + counts.get(0));\n        System.out.println(\"Odd Count: \" + counts.get(1));\n    }\n}\n"}
{"task_id": "Java/156", "generation": "        if (number < 1 || number > 3999) {\n            return \"Invalid number\";\n        }\n        \n        String[] romanSymbols = {\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"};\n        int[] values = {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n        \n        StringBuilder sb = new StringBuilder();\n        \n        int i = values.length - 1;\n        \n        while (number > 0) {\n            if (number - values[i] >= 0) {\n                sb.append(romanSymbols[i]);\n                number -= values[i];\n            } else {\n                i--;\n            }\n        }\n        \n        return sb.toString();\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.intToMiniRoman(354)); // Output: CCCLIV\n    }\n}\n"}
{"task_id": "Java/157", "generation": "        if(a <= 0 || b <= 0 || c <= 0) {\n            return false;\n        }\n        \n        int max = Math.max(a, Math.max(b, c));\n        \n        if(max == a) {\n            return a * a == b * b + c * c;\n        } else if(max == b) {\n            return b * b == a * a + c * c;\n        } else {\n            return c * c == a * a + b * b;\n        }\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.rightAngleTriangle(3, 4, 5)); // true\n        System.out.println(solution.rightAngleTriangle(5, 12, 13)); // true\n        System.out.println(solution.rightAngleTriangle(1, 2, 3)); // false\n    }\n}\n"}
{"task_id": "Java/158", "generation": "        String maxWord = \"\";\n        for (String word : words) {\n            if (word.compareTo(maxWord) > 0) {\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n}\n"}
{"task_id": "Java/159", "generation": "        List<Integer> eaten = new ArrayList<>();\n        while (remaining > 0 && need > 0) {\n            int eat = Math.min(remaining, need);\n            eaten.add(eat);\n            remaining -= eat;\n            need--;\n        }\n        return eaten;\n    }\n}\n"}
{"task_id": "Java/160", "generation": "        if(operator.size() != operand.size() - 1) {\n            throw new IllegalArgumentException(\"Invalid input\");\n        }\n        \n        int result = operand.get(0);\n        for(int i = 0; i < operator.size(); i++) {\n            String op = operator.get(i);\n            int num = operand.get(i + 1);\n            if(op.equals(\"+\")) {\n                result += num;\n            } else if(op.equals(\"-\")) {\n                result -= num;\n            } else if(op.equals(\"*\")) {\n                result *= num;\n            } else if(op.equals(\"/\")) {\n                result /= num;\n            } else {\n                throw new IllegalArgumentException(\"Invalid operator: \" + op);\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/161", "generation": "        String reversed = new StringBuilder(s).reverse().toString();\n        return reversed;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String input = \"hello\";\n        String output = solution.solve(input);\n        System.out.println(output);\n    }\n}\n"}
{"task_id": "Java/162", "generation": "        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String md5 = bigInt.toString(16);\n        while (md5.length() < 32) {\n            md5 = \"0\" + md5;\n        }\n        return Optional.of(md5);\n    }\n}\n"}
{"task_id": "Java/163", "generation": "        List<Integer> integers = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            integers.add(i);\n        }\n        return integers;\n    }\n}\n"}
