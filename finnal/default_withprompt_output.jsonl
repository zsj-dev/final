{"task_id": "Java/0", "generation": "        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Double> nums1 = Arrays.asList(1.0, 2.0, 3.0);\n        List<Double> nums2 = Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0);\n\n        System.out.println(\"Result for nums1: \" + solution.hasCloseElements(nums1, 0.5));\n        System.out.println(\"Result for nums2: \" + solution.hasCloseElements(nums2, 0.3));\n    }\n}\n\n\nThe code can now be concatenated into the original code and run directly."}
{"task_id": "Java/1", "generation": "        List<String> result = new ArrayList<>();\n        StringBuilder sb = new StringBuilder();\n        int count = 0;\n\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                count++;\n            } else if (c == ')') {\n                count--;\n            }\n\n            sb.append(c);\n\n            if (count == 0) {\n                result.add(sb.toString().replaceAll(\" \", \"\"));\n                sb.setLength(0);\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<String> separatedGroups = solution.separateParenGroups(\"( ) (( )) (( )( ))\");\n        System.out.println(separatedGroups);\n    }\n}\n\n\nWith this code, the `separateParenGroups` method will parse the input string and separate the groups of balanced parentheses into separate strings. Then, the `main` method will test this function with the provided test case and print out the result."}
{"task_id": "Java/2", "generation": "        double integerPart = Math.floor(number);\n        double decimalPart = number - integerPart;\n        return decimalPart;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        double num = 3.5;\n        System.out.println(\"Decimal part of \" + num + \": \" + solution.truncateNumber(num));\n    }\n}\n"}
{"task_id": "Java/3", "generation": "        int balance = 0;\n\n        for (int operation : operations) {\n            balance += operation;\n\n            if (balance < 0) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n"}
{"task_id": "Java/4", "generation": "        double mean = numbers.stream().mapToDouble(Double::doubleValue).average().orElse(0);\n        double sum = 0;\n        for (double num : numbers) {\n            sum += Math.abs(num - mean);\n        }\n        return sum / numbers.size();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0)));\n    }\n}\n"}
{"task_id": "Java/5", "generation": "        List<Integer> result = new ArrayList<>();\n        for(int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if(i != numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/6", "generation": "        List<Integer> depths = new ArrayList<>();\n        int count = 0;\n        int maxDepth = 0;\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                count++;\n                maxDepth = Math.max(maxDepth, count);\n            } else if (c == ')') {\n                count--;\n            }\n            if (c == ' ') {\n                depths.add(maxDepth);\n                maxDepth = 0;\n            }\n        }\n        depths.add(maxDepth);\n        return depths;\n    }\n}\n"}
{"task_id": "Java/7", "generation": "        List<String> filteredStrings = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                filteredStrings.add(str);\n            }\n        }\n        return filteredStrings;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        // Test the filterBySubstring method\n        System.out.println(solution.filterBySubstring(Collections.emptyList(), \"a\")); // []\n        System.out.println(solution.filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")); // [\"abc\", \"bacd\", \"array\"]\n    }\n}\n  "}
{"task_id": "Java/8", "generation": "        int sum = numbers.stream().mapToInt(Integer::intValue).sum();\n        int product = numbers.stream().mapToInt(Integer::intValue).reduce(1, (a, b) -> a * b);\n        return Arrays.asList(sum, product);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(\"Testing sumProduct method:\");\n        System.out.println(\"sumProduct(List.of()) = \" + solution.sumProduct(List.of()));\n        System.out.println(\"sumProduct(Arrays.asList(1, 2, 3, 4)) = \" + solution.sumProduct(Arrays.asList(1, 2, 3, 4)));\n    }\n}\n \n\nThis code provides a complete implementation of the `sumProduct` method and a `main` method that demonstrates how to use it."}
{"task_id": "Java/9", "generation": "        List<Integer> result = new ArrayList<>();\n        Deque<Integer> deque = new LinkedList<>();\n\n        for (int i = 0; i < numbers.size(); i++) {\n            if (!deque.isEmpty() && deque.peekFirst() == i - 2) {\n                deque.pollFirst();\n            }\n\n            while (!deque.isEmpty() && numbers.get(deque.peekLast()) < numbers.get(i)) {\n                deque.pollLast();\n            }\n\n            deque.offerLast(i);\n            result.add(numbers.get(deque.peekFirst()));\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/10", "generation": "        if (string == null || string.length() < 1) {\n            return \"\";\n        }\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i) == string.charAt(j)) {\n                i++;\n                j--;\n            } else {\n                // Not a palindrome, find the longest palindromic suffix\n                int k = string.length() - 1;\n                while (i < k) {\n                    if (isPalindrome(string.substring(i, k + 1))) {\n                        break;\n                    }\n                    k--;\n                }\n                StringBuilder sb = new StringBuilder(string.substring(0, i));\n                sb.append(new StringBuilder(string.substring(i, k + 1)).reverse().toString());\n                sb.append(string.substring(k + 1));\n                return sb.toString();\n            }\n        }\n        return string;\n    }\n}\n\n\nThis code adds a method `makePalindrome` to the `Solution` class that finds the shortest palindrome that begins with a supplied string. The algorithm looks for the longest postfix of the supplied string that is a palindrome and then appends the reverse of the prefix before the palindromic suffix."}
{"task_id": "Java/11", "generation": "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) != b.charAt(i)) {\n                sb.append(\"1\");\n            } else {\n                sb.append(\"0\");\n            }\n        }\n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/12", "generation": "        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String str : strings) {\n            if (str.length() > longest.length() || (str.length() == longest.length() && str.compareTo(longest) < 0)) {\n                longest = str;\n            }\n        }\n        return Optional.of(longest);\n    }\n}\n"}
{"task_id": "Java/13", "generation": "        if (b == 0) {\n            return a;\n        } else {\n            return greatestCommonDivisor(b, a % b);\n        }\n    }\n}\n"}
{"task_id": "Java/14", "generation": "        List<String> prefixes = new ArrayList<>();\n        for (int i = 0; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        return prefixes;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the allPrefixes method\n        System.out.println(solution.allPrefixes(\"abc\"));\n    }\n}\n"}
{"task_id": "Java/15", "generation": "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.append(i).append(\" \");\n        }\n        return sb.toString().trim();\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        int num = scanner.nextInt();\n        System.out.println(sol.stringSequence(num));\n        scanner.close();\n    }\n}"}
{"task_id": "Java/16", "generation": "        Set<Character> set = new HashSet<>();\n        for (char c : string.toCharArray()) {\n            set.add(Character.toLowerCase(c));\n        }\n        return set.size();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.countDistinctCharacters(\"xyzXYZ\")); // Should return 3\n        System.out.println(solution.countDistinctCharacters(\"Jerry\")); // Should return 4\n    }\n}\n"}
{"task_id": "Java/17", "generation": "        List<Integer> durations = new ArrayList<>();\n        String[] notes = string.split(\" \");\n        \n        for (String note : notes) {\n            int duration;\n            switch (note) {\n                case \"o\":\n                    duration = 4;\n                    break;\n                case \"o|\":\n                    duration = 2;\n                    break;\n                case \".|\":\n                    duration = 1;\n                    break;\n                default:\n                    duration = 0; // Default case if input is incorrect\n                    break;\n            }\n            durations.add(duration);\n        }\n        \n        return durations;\n    }\n}\n"}
{"task_id": "Java/18", "generation": "        if (string == null || substring == null || string.length() == 0 || substring.length() == 0) {\n            return 0;\n        }\n        \n        int count = 0;\n        int index = 0;\n        while (index < string.length() && (index = string.indexOf(substring, index)) != -1) {\n            count++;\n            index++;\n        }\n        \n        return count;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.howManyTimes(\"\", \"a\")); // Expected output: 0\n        System.out.println(solution.howManyTimes(\"aaa\", \"a\")); // Expected output: 3\n        System.out.println(solution.howManyTimes(\"aaaa\", \"aa\")); // Expected output: 3\n    }\n}\n\nThe provided method `howManyTimes` in the `Solution` class will count how many times a given substring can be found in the original string, including overlapping cases. The main method demonstrates this with example test cases."}
{"task_id": "Java/19", "generation": "        String[] numberals = numbers.split(\" \");\n        Map<String, Integer> numberMap = new HashMap<>();\n        numberMap.put(\"zero\", 0);\n        numberMap.put(\"one\", 1);\n        numberMap.put(\"two\", 2);\n        numberMap.put(\"three\", 3);\n        numberMap.put(\"four\", 4);\n        numberMap.put(\"five\", 5);\n        numberMap.put(\"six\", 6);\n        numberMap.put(\"seven\", 7);\n        numberMap.put(\"eight\", 8);\n        numberMap.put(\"nine\", 9);\n        \n        List<String> sortedNumbers = new ArrayList<>();\n        for (String number : numberals) {\n            sortedNumbers.add(number);\n        }\n        \n        sortedNumbers.sort(Comparator.comparingInt(number -> numberMap.get(number)));\n        \n        return String.join(\" \", sortedNumbers);\n    }\n}\n"}
{"task_id": "Java/20", "generation": "        Collections.sort(numbers);\n        double minDiff = Double.MAX_VALUE;\n        int firstIndex = 0;\n        int secondIndex = 0;\n        \n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = Math.abs(numbers.get(i) - numbers.get(i + 1));\n            if (diff < minDiff) {\n                minDiff = diff;\n                firstIndex = i;\n                secondIndex = i + 1;\n            }\n        }\n        \n        List<Double> result = new ArrayList<>();\n        result.add(numbers.get(firstIndex));\n        result.add(numbers.get(secondIndex));\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/21", "generation": "        // Find the smallest and largest numbers\n        Double min = Collections.min(numbers);\n        Double max = Collections.max(numbers);\n\n        // Calculate the transform parameters\n        Double range = max - min;\n\n        // Apply the linear transform to scale the numbers\n        List<Double> rescaledNumbers = new ArrayList<Double>();\n        for (Double num : numbers) {\n            double rescaled = (num - min) / range;\n            rescaledNumbers.add(rescaled);\n        }\n\n        return rescaledNumbers;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Double> numbers = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0);\n        List<Double> rescaledNumbers = solution.rescaleToUnit(numbers);\n        System.out.println(rescaledNumbers);\n    }\n}\n\nWith the completion of the above code snippet, the `rescaleToUnit` method will now correctly rescale the input list of numbers to range from 0 to 1. The `main` method demonstrates the usage of this method with sample input values and prints out the rescaled numbers."}
{"task_id": "Java/22", "generation": "        List<Integer> integers = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                integers.add((Integer) value);\n            }\n        }\n        return integers;\n    }\n}\n"}
{"task_id": "Java/23", "generation": "        return string.length();\n    }\n}"}
{"task_id": "Java/24", "generation": "        int largest = 1;\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                largest = i;\n            }\n        }\n        return largest;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        int n = scanner.nextInt();\n        int result = solution.largestDivisor(n);\n        System.out.println(\"The largest divisor of \" + n + \" is \" + result);\n        scanner.close();\n    }\n}\n\n\nPlease note that when you concatenate this code with the previous part, make sure to remove the closing curly brace `}` at the end of the previous code snippet."}
{"task_id": "Java/25", "generation": "        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i*i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}\n"}
{"task_id": "Java/26", "generation": "        return numbers.stream()\n                      .filter(i -> Collections.frequency(numbers, i) == 1)\n                      .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> inputList = Arrays.asList(1, 2, 3, 2, 4);\n        List<Integer> uniqueList = solution.removeDuplicates(inputList);\n        System.out.println(uniqueList);\n    }\n}\n"}
{"task_id": "Java/27", "generation": "        StringBuilder result = new StringBuilder();\n        \n        for (char c : string.toCharArray()) {\n            if(Character.isUpperCase(c)){\n                result.append(Character.toLowerCase(c));\n            } else if(Character.isLowerCase(c)) {\n                result.append(Character.toUpperCase(c));\n            } else {\n                result.append(c);\n            }\n        }\n        \n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test the flipCase method\n        System.out.println(solution.flipCase(\"Hello\")); // hELLO\n        System.out.println(solution.flipCase(\"JavaProgramming\")); // jAVA pROGRAMMING\n    }\n}\n\n"}
{"task_id": "Java/28", "generation": "        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/29", "generation": "        return strings.stream()\n                      .filter(s -> s.startsWith(prefix))\n                      .collect(Collectors.toList());\n    }\n}"}
{"task_id": "Java/30", "generation": "        return l.stream()\n                .filter(num -> num > 0)\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> list1 = Arrays.asList(-1, 2, -4, 5, 6);\n        List<Integer> list2 = Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\n\n        System.out.println(\"Positive numbers in list1: \" + solution.getPositive(list1));\n        System.out.println(\"Positive numbers in list2: \" + solution.getPositive(list2));\n    }\n}\n\n"}
{"task_id": "Java/31", "generation": "        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/32", "generation": "        int n = xs.size();\n        double largestNonZero = 0;\n        for (int i = 0; i < n; i += 2) {\n            largestNonZero = Math.max(largestNonZero, xs.get(i));\n        }\n        return -largestNonZero / xs.get(n - 1);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(\"Testing poly function:\");\n        List<Double> coefficients = Arrays.asList(1.0, 2.0, 3.0);\n        System.out.println(\"f(2.5) = \" + solution.poly(coefficients, 2.5));\n\n        System.out.println(\"\\nTesting findZero function:\");\n        List<Double> coefficients1 = Arrays.asList(1.0, 2.0);\n        System.out.println(\"Zero point for f(x) = 1 + 2x: \" + solution.findZero(coefficients1));\n\n        List<Double> coefficients2 = Arrays.asList(-6.0, 11.0, -6.0, 1.0);\n        System.out.println(\"Zero point for f(x) = -6 + 11x - 6x^2 + x^3: \" + solution.findZero(coefficients2));\n    }\n}\n\nThis completes the implementation of the Solution class and provides a main method to test the `poly` and `findZero` methods."}
{"task_id": "Java/33", "generation": "        List<Integer> result = new ArrayList<>();\n        List<Integer> divisibleByThree = new ArrayList<>();\n\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                divisibleByThree.add(l.get(i));\n            } else {\n                result.add(l.get(i));\n            }\n        }\n\n        Collections.sort(divisibleByThree);\n        int k = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                result.add(divisibleByThree.get(k));\n                k++;\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> example = Arrays.asList(5, 6, 3, 4, 8, 9, 2);\n        List<Integer> sortedThird = solution.sortThird(example);\n        System.out.println(sortedThird);\n    }\n}\n\n"}
{"task_id": "Java/34", "generation": "        Set<Integer> uniqueSet = new HashSet<>(l);\n        List<Integer> uniqueList = new ArrayList<>(uniqueSet);\n        Collections.sort(uniqueList);\n        return uniqueList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> list = Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123);\n        List<Integer> uniqueList = solution.unique(list);\n        System.out.println(uniqueList);\n    }\n}\n"}
{"task_id": "Java/35", "generation": "        if (l == null || l.size() == 0) {\n            throw new IllegalArgumentException(\"List cannot be empty\");\n        }\n\n        int max = Integer.MIN_VALUE;\n\n        for (int num : l) {\n            if (num > max) {\n                max = num;\n            }\n        }\n\n        return max;\n    }\n}"}
{"task_id": "Java/36", "generation": "        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String numStr = String.valueOf(i);\n                if (numStr.contains(\"7\")) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fizzBuzz(50));\n        System.out.println(solution.fizzBuzz(78));\n        System.out.println(solution.fizzBuzz(79));\n    }\n}"}
{"task_id": "Java/37", "generation": "        List<Integer> oddIndices = new ArrayList<>();\n        List<Integer> evenIndices = new ArrayList<>();\n\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                evenIndices.add(l.get(i));\n            } else {\n                oddIndices.add(l.get(i));\n            }\n        }\n\n        Collections.sort(evenIndices);\n\n        List<Integer> result = new ArrayList<>();\n        int evenIndex = 0;\n        int oddIndex = 0;\n\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                result.add(evenIndices.get(evenIndex++));\n            } else {\n                result.add(oddIndices.get(oddIndex++));\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/38", "generation": "        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group in reverse. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        String originalString = \"HelloWorld\";\n        String encodedString = solution.encodeCyclic(originalString);\n        System.out.println(\"Encoded string: \" + encodedString);\n\n        String decodedString = solution.decodeCyclic(encodedString);\n        System.out.println(\"Decoded string: \" + decodedString);\n    }\n}\n\n"}
{"task_id": "Java/39", "generation": "        int a = 1, b = 1;\n        for (int i = 3; i <= n; i++) {\n            int c = a + b;\n            a = b;\n            b = c;\n        }\n        while (true) {\n            boolean isPrime = true;\n            for (int j = 2; j <= Math.sqrt(b); j++) {\n                if (b % j == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                return b;\n            }\n            b = a + b;\n            a = b - a;\n        }\n    }\n}\n \n\nWith this completed code, you can now run the `primeFib` method to find the n-th number that is both a Fibonacci number and a prime number."}
{"task_id": "Java/40", "generation": "        for (int i = 0; i < l.size() - 2; i++) {\n            for (int j = i + 1; j < l.size() - 1; j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.triplesSumToZero(Arrays.asList(1, 3, 5, 0))); // false\n        System.out.println(solution.triplesSumToZero(Arrays.asList(1, 3, -2, 1))); // true\n        System.out.println(solution.triplesSumToZero(Arrays.asList(1, 2, 3, 7))); // false\n        System.out.println(solution.triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))); // true\n        System.out.println(solution.triplesSumToZero(Arrays.asList(1))); // false\n    }\n}\n\n"}
{"task_id": "Java/41", "generation": "        return n * (n - 1) / 2;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner sc = new Scanner(System.in);\n        System.out.print(\"Enter the number of cars (n): \");\n        int n = sc.nextInt();\n        System.out.println(\"Number of collisions: \" + solution.carRaceCollision(n));\n        sc.close();\n    }\n}\n\n"}
{"task_id": "Java/42", "generation": "        return l.stream()\n                .map(i -> i + 1)\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> testList = Arrays.asList(1, 2, 3);\n        System.out.println(solution.incrList(testList));  // Output: [2, 3, 4]\n        \n        testList = Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123);\n        System.out.println(solution.incrList(testList));  // Output: [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    }\n}\n\n\nThe code defines a method `incrList` to increment each element in a list by 1. Then, in the main method, two test cases are provided to demonstrate the functionality of the `incrList` method."}
{"task_id": "Java/43", "generation": "        Set<Integer> set = new HashSet<>();\n        for (int num : l) {\n            if (set.contains(-num)) {\n                return true;\n            }\n            set.add(num);\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/44", "generation": "        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n            sb.insert(0, x % base);\n            x /= base;\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.changeBase(8, 3)); // \"22\"\n        System.out.println(solution.changeBase(8, 2)); // \"1000\"\n        System.out.println(solution.changeBase(7, 2)); // \"111\"\n    }\n}\n"}
{"task_id": "Java/45", "generation": "        double area = 0.5 * a * h;\n        return area;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.print(\"Enter the length of the side: \");\n        double side = scanner.nextDouble();\n        System.out.print(\"Enter the height: \");\n        double height = scanner.nextDouble();\n\n        double area = solution.triangleArea(side, height);\n        System.out.println(\"The area of the triangle is: \" + area);\n\n        scanner.close();\n    }\n}\n"}
{"task_id": "Java/46", "generation": "        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n == 3) return 0;\n\n        int a = 0;\n        int b = 0;\n        int c = 2;\n        int d = 0;\n        for (int i = 4; i <= n; i++) {\n            int sum = a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n            d = sum;\n        }\n        return d;\n    }\n}\n"}
{"task_id": "Java/47", "generation": "        // Sort the list\n        Collections.sort(l);\n\n        int n = l.size();\n        // If the size of the list is odd, return the middle element\n        if (n % 2 != 0) {\n            return l.get(n / 2);\n        } else {\n            // If the size of the list is even, return the average of the two middle elements\n            return (l.get(n / 2 - 1) + l.get(n / 2)) / 2.0;\n        }\n    }\n}"}
{"task_id": "Java/48", "generation": "        String cleanText = text.replaceAll(\"[^a-zA-Z0-9]\", \"\").toLowerCase();\n        int left = 0;\n        int right = cleanText.length() - 1;\n\n        while (left < right) {\n            if (cleanText.charAt(left) != cleanText.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.isPalindrome(\"\"));  // Output: true\n        System.out.println(solution.isPalindrome(\"aba\"));  // Output: true\n        System.out.println(solution.isPalindrome(\"aaaaa\"));  // Output: true\n        System.out.println(solution.isPalindrome(\"zbcd\"));  // Output: false\n    }\n}\n\n\nThe code above includes the completion of the `isPalindrome` method to check if a given string is a palindrome and a `main` method to test the `isPalindrome` method with some sample inputs."}
{"task_id": "Java/49", "generation": "        if (p == 1) {\n            return 0;\n        }\n        int result = 1;\n        for (int i = 0; i < p; i++) {\n            result = (result * n) % p;\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.modp(3, 5)); // Output: 3\n        System.out.println(sol.modp(1101, 101)); // Output: 2\n        System.out.println(sol.modp(0, 101)); // Output: 1\n        System.out.println(sol.modp(3, 11)); // Output: 8\n        System.out.println(sol.modp(100, 101)); // Output: 1\n    }\n}\n\nThis code defines a `modp` method in the `Solution` class that calculates 2^n modulo p for given input values n and p. The `main` method demonstrates the usage of this method with example test cases."}
{"task_id": "Java/50", "generation": "        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 5 - 'a' + 26) % 26));\n        }\n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/51", "generation": "        if (text == null || text.isEmpty()) {\n            return \"\";\n        }\n        \n        StringBuilder result = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && \n                c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n                result.append(c);\n            }\n        }\n        \n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/52", "generation": "        for (int num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/53", "generation": "        return x + y;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(\"Adding 2 + 3: \" + solution.add(2, 3));\n        System.out.println(\"Adding 5 + 7: \" + solution.add(5, 7));\n    }\n}\n"}
{"task_id": "Java/54", "generation": "        if (s0.length() != s1.length()) {\n            return false;\n        }\n        \n        char[] s0Array = s0.toCharArray();\n        char[] s1Array = s1.toCharArray();\n        \n        Arrays.sort(s0Array);\n        Arrays.sort(s1Array);\n        \n        return Arrays.equals(s0Array, s1Array);\n    }\n\n"}
{"task_id": "Java/55", "generation": "        if (n <= 1) {\n            return n;\n        }\n\n        int[] fibNums = new int[n + 1];\n        fibNums[0] = 0;\n        fibNums[1] = 1;\n\n        for (int i = 2; i <= n; i++) {\n            fibNums[i] = fibNums[i - 1] + fibNums[i - 2];\n        }\n\n        return fibNums[n];\n    }\n}\n"}
{"task_id": "Java/56", "generation": "        Stack<Character> stack = new Stack<>();\n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '<') {\n                stack.push(bracket);\n            } else if (bracket == '>') {\n                if (stack.isEmpty() || stack.pop() != '<') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.correctBracketing(\"<\")); // false\n        System.out.println(solution.correctBracketing(\"<>\")); // true\n        System.out.println(solution.correctBracketing(\"<<><>>\")); // true\n        System.out.println(solution.correctBracketing(\"><<>\")); // false\n    }\n}"}
{"task_id": "Java/57", "generation": "        boolean increasing = true;\n        boolean decreasing = true;\n\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n                increasing = false;\n            }\n            if (l.get(i) > l.get(i - 1)) {\n                decreasing = false;\n            }\n        }\n\n        return increasing || decreasing;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> list1 = Arrays.asList(1, 2, 4, 20);\n        List<Integer> list2 = Arrays.asList(1, 20, 4, 10);\n        List<Integer> list3 = Arrays.asList(4, 1, 0, -10);\n\n        System.out.println(solution.monotonic(list1)); // Output: true\n        System.out.println(solution.monotonic(list2)); // Output: false\n        System.out.println(solution.monotonic(list3)); // Output: true\n    }\n}\n\n"}
{"task_id": "Java/58", "generation": "        List<Integer> result = new ArrayList<>();\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        \n        for (Integer num : set1) {\n            if (set2.contains(num)) {\n                result.add(num);\n            }\n        }\n        \n        Collections.sort(result);\n        return result;\n    }\n}\n"}
{"task_id": "Java/59", "generation": "        int largestPrime = 0;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                boolean isPrime = true;\n                for (int j = 2; j < i; j++) {\n                    if (i % j == 0) {\n                        isPrime = false;\n                        break;\n                    }\n                }\n                if (isPrime) {\n                    largestPrime = i;\n                    n /= i;\n                }\n            }\n        }\n        return largestPrime;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.largestPrimeFactor(13195)); // Output: 29\n        System.out.println(solution.largestPrimeFactor(2048)); // Output: 2\n    }\n}\n"}
{"task_id": "Java/60", "generation": "        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.sumToN(30)); // Output: 465\n        System.out.println(solution.sumToN(100)); // Output: 5050\n        System.out.println(solution.sumToN(5)); // Output: 15\n        System.out.println(solution.sumToN(10)); // Output: 55\n        System.out.println(solution.sumToN(1)); // Output: 1\n    }\n}\n\nThis code defines a `Solution` class with a `sumToN` method that calculates the sum of numbers from 1 to n and a `main` method to test the `sumToN` method with various inputs."}
{"task_id": "Java/61", "generation": "        Stack<Character> stack = new Stack<>();\n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '(')\n                stack.push(bracket);\n            else if (bracket == ')') {\n                if (!stack.isEmpty() && stack.peek() == '(')\n                    stack.pop();\n                else\n                    return false;\n            }\n        }\n        return stack.isEmpty();\n    }\n}"}
{"task_id": "Java/62", "generation": "        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/63", "generation": "        if (n == 0 || n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n\n        int[] fibfibMemo = new int[n + 1];\n        fibfibMemo[0] = 0;\n        fibfibMemo[1] = 0;\n        fibfibMemo[2] = 1;\n\n        for (int i = 3; i <= n; i++) {\n            fibfibMemo[i] = fibfibMemo[i - 1] + fibfibMemo[i - 2] + fibfibMemo[i - 3];\n        }\n\n        return fibfibMemo[n];\n    }\n}\n"}
{"task_id": "Java/64", "generation": "        int count = 0;\n        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n\n        for (char c : s.toLowerCase().toCharArray()) {\n            if (Arrays.asList(vowels).contains(c) || (c == 'y' && s.toLowerCase().lastIndexOf('y') == s.length() - 1)) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n}\n"}
{"task_id": "Java/65", "generation": "        String numStr = String.valueOf(x);\n        int n = numStr.length();\n        \n        if (shift >= n) {\n            return new StringBuilder(numStr).reverse().toString();\n        }\n        \n        return numStr.substring(n - shift) + numStr.substring(0, n - shift);\n    }\n}\n"}
{"task_id": "Java/66", "generation": "        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += (int) c;\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/67", "generation": "        String[] parts = s.split(\" \");\n        int apples = 0;\n        int oranges = 0;\n        for (int i = 0; i < parts.length; i++) {\n            if (parts[i].equals(\"apples\")) {\n                apples = Integer.parseInt(parts[i - 1]);\n            } else if (parts[i].equals(\"oranges\")) {\n                oranges = Integer.parseInt(parts[i - 1]);\n            }\n        }\n        return n - apples - oranges;\n    }\n}\n"}
{"task_id": "Java/68", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        if (arr.isEmpty()) {\n            return result;\n        }\n        \n        int smallestEvenValue = Integer.MAX_VALUE;\n        int smallestIndex = Integer.MAX_VALUE;\n\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0 && arr.get(i) < smallestEvenValue) {\n                smallestEvenValue = arr.get(i);\n                smallestIndex = i;\n            }\n        }\n        \n        if (smallestEvenValue == Integer.MAX_VALUE) {\n            return result;\n        }\n\n        result.add(smallestEvenValue);\n        result.add(smallestIndex);\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/69", "generation": "        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n\n        int maxResult = -1;\n        for (int i = 1; i <= Collections.max(lst); i++) {\n            if (frequencyMap.containsKey(i) && frequencyMap.get(i) >= i) {\n                maxResult = Math.max(maxResult, i);\n            }\n        }\n\n        return maxResult;\n    }\n}\n"}
{"task_id": "Java/70", "generation": "        Collections.sort(lst);\n        List<Integer> result = new ArrayList<>();\n        int left = 0, right = lst.size() - 1;\n        while (left <= right) {\n            result.add(lst.get(left++));\n            if (left <= right) {\n                result.add(lst.get(right--));\n            }\n        }\n        return result;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        // Test cases\n        System.out.println(\"Test Case 1: \" + solution.strangeSortList(Arrays.asList(1, 2, 3, 4)));\n        System.out.println(\"Test Case 2: \" + solution.strangeSortList(Arrays.asList(5, 5, 5, 5)));\n        System.out.println(\"Test Case 3: \" + solution.strangeSortList(Arrays.asList()));\n    }\n}\n\n"}
{"task_id": "Java/71", "generation": "        if (a + b > c && a + c > b && b + c > a) {\n            double s = (a + b + c) / 2;\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            return Math.round(area * 100.0) / 100.0; // rounding to 2 decimal points\n        } else {\n            return -1;\n        }\n    }\n}\n"}
{"task_id": "Java/72", "generation": "        if (!isPalindrome(q)) {\n            return false;\n        }\n        \n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n        \n        return sum <= w;\n    }\n    \n    private boolean isPalindrome(List<Integer> list) {\n        int left = 0;\n        int right = list.size() - 1;\n        \n        while (left < right) {\n            if (!list.get(left).equals(list.get(right))) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/73", "generation": "        int n = arr.size();\n        int[][] dp = new int[n][n];\n\n        for (int len = 2; len <= n; len++) {\n            for (int i = 0; i <= n - len; i++) {\n                int j = i + len - 1;\n                dp[i][j] = (arr.get(i).equals(arr.get(j))) ? dp[i + 1][j - 1] :\n                        1 + Math.min(dp[i][j - 1], dp[i + 1][j]);\n            }\n        }\n\n        return dp[0][n - 1];\n    }\n}\n\nNow, you can further test the `smallestChange` method on different input arrays."}
{"task_id": "Java/74", "generation": "        int totalChars1 = lst1.stream().mapToInt(String::length).sum();\n        int totalChars2 = lst2.stream().mapToInt(String::length).sum();\n\n        if (totalChars1 < totalChars2 || (totalChars1 == totalChars2 && !lst1.isEmpty())) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}\n"}
{"task_id": "Java/75", "generation": "        if (a <= 1) {\n            return false;\n        }\n        \n        int cnt = 0;\n        for (int i = 2; i * i < a && cnt < 3; i++) {\n            if (a % i == 0 && isPrime(i)) {\n                cnt++;\n            }\n        }\n        return cnt == 3;\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/76", "generation": "        if (x < 1 || n < 2) {\n            return false;\n        }\n        if (x == 1) {\n            return true;\n        }\n        int power = 1;\n        while (power < x) {\n            power *= n;\n        }\n        return power == x;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.isSimplePower(1, 4)); // true\n        System.out.println(solution.isSimplePower(2, 2)); // true\n        System.out.println(solution.isSimplePower(8, 2)); // true\n        System.out.println(solution.isSimplePower(3, 2)); // false\n        System.out.println(solution.isSimplePower(3, 1)); // false\n        System.out.println(solution.isSimplePower(5, 3)); // false\n    }\n}\n\n"}
{"task_id": "Java/77", "generation": "        int absA = Math.abs(a);\n        int root = (int) Math.round(Math.cbrt(absA));\n        return root * root * root == absA;\n    }\n}\n"}
{"task_id": "Java/78", "generation": "        int count = 0;\n        Set<Character> primes = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n        \n        for (char c : num.toCharArray()) {\n            if (primes.contains(Character.toUpperCase(c))) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/79", "generation": "        String binary = Integer.toBinaryString(decimal);\n        return \"db\" + binary + \"db\";\n    }\n}\n"}
{"task_id": "Java/80", "generation": "        if (s.length() < 3) {\n            return false;\n        }\n        for (int i = 0; i <= s.length() - 3; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/81", "generation": "        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Double> grades = Arrays.asList(4.0, 3.0, 1.7, 2.0, 3.5);\n        List<String> letterGrades = solution.numericalLetterGrade(grades);\n        System.out.println(letterGrades); // Expected output: [A+, B, C-, C, A-]\n    }\n}\n\n"}
{"task_id": "Java/82", "generation": "        int length = string.length();\n        if (length <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(\"primeLength(\\\"Hello\\\") == \" + solution.primeLength(\"Hello\"));\n        System.out.println(\"primeLength(\\\"abcdcba\\\") == \" + solution.primeLength(\"abcdcba\"));\n        System.out.println(\"primeLength(\\\"kittens\\\") == \" + solution.primeLength(\"kittens\"));\n        System.out.println(\"primeLength(\\\"orange\\\") == \" + solution.primeLength(\"orange\"));\n    }\n}\n\n\nThe code above should be concatenated to the existing code to run successfully."}
{"task_id": "Java/83", "generation": "        if (n <= 0) {\n            return 0;\n        }\n        \n        // Count the number of n-digit positive integers that start with 1\n        int startWithOne = (int) Math.pow(10, n - 1);\n        \n        // Count the number of n-digit positive integers that end with 1\n        int endWithOne = 10;\n        \n        return startWithOne + endWithOne - 1; // Subtract the overlap of counting numbers twice\n    }\n}\n"}
{"task_id": "Java/84", "generation": "        List<Integer> binaryDigits = new ArrayList<>();\n        int sum = 0;\n\n        while (N > 0) {\n            binaryDigits.add(N % 2);\n            sum += N % 2;\n            N = N / 2;\n        }\n\n        Collections.reverse(binaryDigits);\n\n        StringBuilder binaryString = new StringBuilder();\n        for (Integer digit : binaryDigits) {\n            binaryString.append(digit);\n        }\n\n        return binaryString.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        int[] testCases = {1000, 150, 147};\n        for (int N : testCases) {\n            System.out.println(\"For N = \" + N + \", the sum of digits will be \" + solution.solve(N));\n        }\n    }\n}\n\nThis Java program defines a class `Solution` with a `solve` method that converts a positive integer `N` into a binary string representation by summing the digits. The `main` method tests the `solve` method with sample test cases."}
{"task_id": "Java/85", "generation": "        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> input = Arrays.asList(4, 2, 6, 7);\n        int result = solution.add(input);\n        System.out.println(\"Result: \" + result);\n    }\n}\n"}
{"task_id": "Java/86", "generation": "        String[] words = s.split(\" \");\n        StringBuilder result = new StringBuilder();\n\n        for (String word : words) {\n            char[] chars = word.toCharArray();\n            Arrays.sort(chars);\n            result.append(String.valueOf(chars)).append(\" \");\n        }\n\n        return result.toString().trim();\n    }\n}\n"}
{"task_id": "Java/87", "generation": "        List<List<Integer>> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    List<Integer> coordinate = new ArrayList<>();\n                    coordinate.add(i);\n                    coordinate.add(j);\n                    result.add(coordinate);\n                }\n            }\n        }\n\n        result.sort(Comparator.comparingInt(o -> o.get(0)));\n\n        for (List<Integer> coordinate : result) {\n            lst.get(coordinate.get(0)).sort(Collections.reverseOrder());\n        }\n\n        return result;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<List<Integer>> input = new ArrayList<>();\n        input.add(Arrays.asList(1, 2, 3, 4, 5, 6));\n        input.add(Arrays.asList(1, 2, 3, 4, 1, 6));\n        input.add(Arrays.asList(1, 2, 3, 4, 5, 1));\n\n        int target = 1;\n\n        List<List<Integer>> result = solution.getRow(input, target);\n\n        System.out.println(result);\n    }\n}\n\n    public static List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        Solution solution = new Solution();\n        return solution.getRow(lst, x);\n    }\n}\n"}
{"task_id": "Java/88", "generation": "        List<Integer> sortedArray = new ArrayList<>(array);\n        int sum = array.get(0) + array.get(array.size() - 1);\n\n        if (sum % 2 == 0) {\n            sortedArray.sort(Collections.reverseOrder());\n        } else {\n            sortedArray.sort(Comparator.naturalOrder());\n        }\n\n        return sortedArray;\n    }\n}\n"}
{"task_id": "Java/89", "generation": "        StringBuilder encryptedStr = new StringBuilder();\n        int shift = 2 * 2; // shift down by two multiplied to two places\n        \n        for (int i = 0; i < s.length(); i++) {\n            char currentChar = s.charAt(i);\n            if (Character.isLetter(currentChar)) {\n                char encryptedChar = (char) (currentChar + shift);\n                if ((Character.isLowerCase(currentChar) && encryptedChar > 'z') ||\n                    (Character.isUpperCase(currentChar) && encryptedChar > 'Z')) {\n                    encryptedChar = (char) (currentChar + shift - 26);\n                }\n                encryptedStr.append(encryptedChar);\n            } else {\n                encryptedStr.append(currentChar);\n            }\n        }\n        return encryptedStr.toString();\n    }\n}\n"}
{"task_id": "Java/90", "generation": "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n        \n        TreeSet<Integer> set = new TreeSet<>(lst);\n        return Optional.of(set.higher(set.first()));\n    }\n}\n"}
{"task_id": "Java/91", "generation": "        String[] sentences = S.split(\"[.!?]\");\n        int count = 0;\n        for (String sentence : sentences) {\n            if (sentence.trim().startsWith(\"I\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/92", "generation": "        try {\n            int num1 = (int) x;\n            int num2 = (int) y;\n            int num3 = (int) z;\n            \n            if (num1 == num2 + num3 || num2 == num1 + num3 || num3 == num1 + num2) {\n                return true;\n            }\n        } catch (ClassCastException | NumberFormatException e) {\n            return false;\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.anyInt(5, 2, 7)); // true\n        System.out.println(solution.anyInt(3, 2, 2)); // false\n        System.out.println(solution.anyInt(3, -2, 1)); // true\n        System.out.println(solution.anyInt(3.6, -2.2, 2)); // false\n    }\n}\n\n"}
{"task_id": "Java/93", "generation": "        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        char[] alphabet = \"abcdefghijklmnopqrstuvwxyz\".toCharArray();\n        StringBuilder encodedMessage = new StringBuilder();\n\n        for (char c : message.toCharArray()) {\n            if (Character.isLetter(c)) {\n                if (Character.isLowerCase(c)) {\n                    boolean isVowel = false;\n                    for (char vowel : vowels) {\n                        if (c == vowel) {\n                            int index = Arrays.binarySearch(alphabet, Character.toLowerCase(c));\n                            encodedMessage.append(alphabet[(index + 2) % 26]);\n                            isVowel = true;\n                            break;\n                        }\n                    }\n                    if (!isVowel) {\n                        encodedMessage.append(Character.toUpperCase(c));\n                    }\n                } else {\n                    boolean isVowel = false;\n                    for (char vowel : vowels) {\n                        if (c == Character.toUpperCase(vowel)) {\n                            int index = Arrays.binarySearch(alphabet, Character.toLowerCase(c));\n                            encodedMessage.append(Character.toUpperCase(alphabet[(index + 2) % 26]));\n                            isVowel = true;\n                            break;\n                        }\n                    }\n                    if (!isVowel) {\n                        encodedMessage.append(Character.toLowerCase(c));\n                    }\n                }\n            } else {\n                encodedMessage.append(c);\n            }\n        }\n\n        return encodedMessage.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.encode(\"test\"));\n        System.out.println(solution.encode(\"This is a message\"));\n    }\n}\n\n\nNow you can run the `main` method to test the `encode` function."}
{"task_id": "Java/94", "generation": "        int largestPrime = 0;\n        for (int num : lst) {\n            if (isPrime(num) && num > largestPrime) {\n                largestPrime = num;\n            }\n        }\n        return sumOfDigits(largestPrime);\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private int sumOfDigits(int num) {\n        int sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> lst = Arrays.asList(0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3);\n        System.out.println(solution.skjkasdkd(lst)); // Should output 10\n    }\n}\n"}
{"task_id": "Java/95", "generation": "        if (dict.isEmpty()) {\n            return false;\n        }\n        \n        boolean isLowerCase = true;\n        boolean isUpperCase = true;\n        \n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            String keyStr = (String) key;\n            if (!keyStr.equals(keyStr.toLowerCase())) {\n                isLowerCase = false;\n            }\n            if (!keyStr.equals(keyStr.toUpperCase())) {\n                isUpperCase = false;\n            }\n        }\n        \n        return isLowerCase || isUpperCase;\n    }\n}\n"}
{"task_id": "Java/96", "generation": "        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.countUpTo(5)); // [2,3]\n        System.out.println(solution.countUpTo(11)); // [2,3,5,7]\n        System.out.println(solution.countUpTo(0)); // []\n        System.out.println(solution.countUpTo(20)); // [2,3,5,7,11,13,17,19]\n        System.out.println(solution.countUpTo(1)); // []\n        System.out.println(solution.countUpTo(18)); // [2,3,5,7,11,13,17]\n    }\n}\n\n"}
{"task_id": "Java/97", "generation": "        int unitDigitA = Math.abs(a % 10);\n        int unitDigitB = Math.abs(b % 10);\n        return unitDigitA * unitDigitB;\n    }\n}\n"}
{"task_id": "Java/98", "generation": "        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            char c = s.charAt(i);\n            if (\"AEIOU\".indexOf(c) != -1) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.countUpper(\"aBCdEf\")); // 1\n        System.out.println(solution.countUpper(\"abcdefg\")); // 0\n        System.out.println(solution.countUpper(\"dBBE\")); // 0\n    }\n}\n"}
{"task_id": "Java/99", "generation": "        double num = Double.parseDouble(value);\n\n        int lower = (int) Math.floor(num);\n        int higher = (int) Math.ceil(num);\n\n        if (num - lower < higher - num) {\n            return lower;\n        } else {\n            return higher;\n        }\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        String value = scanner.nextLine();\n\n        Solution solution = new Solution();\n        int closestInt = solution.countUpper(value);\n        System.out.println(\"Closest integer to \" + value + \" is: \" + closestInt);\n\n        scanner.close();\n    }\n}\n\n\nAfter concatenating this code with the original code, you can run the program, and it will ask the user to enter a number and then return the closest integer to that number according to the specified rule."}
{"task_id": "Java/100", "generation": "        List<Integer> result = new ArrayList<>();\n        result.add(n);\n        for (int i = 1; i < n; i++) {\n            if (n % 2 == 0) {\n                n += 1;\n            } else {\n                n += 2;\n            }\n            result.add(n);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int n = 3;\n        List<Integer> result = solution.makeAPile(n);\n        System.out.println(result);\n    }\n}\n"}
{"task_id": "Java/101", "generation": "        List<String> words = Arrays.asList(s.split(\"[,\\\\s]+\"));\n        return words;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        String sentence1 = \"Hi, my name is John\";\n        List<String> words1 = solution.wordStrings(sentence1);\n        System.out.println(words1);\n\n        String sentence2 = \"One, two, three, four, five, six\";\n        List<String> words2 = solution.wordStrings(sentence2);\n        System.out.println(words2);\n    }\n}\n"}
{"task_id": "Java/102", "generation": "        int maxEven = -1;\n        for (int i = y; i >= x; i--) {\n            if (i % 2 == 0) {\n                maxEven = i;\n                break;\n            }\n        }\n        return maxEven;\n    }\n}\n"}
{"task_id": "Java/103", "generation": "        if (n > m) {\n            return -1;\n        }\n\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n\n        int avg = Math.round((float) sum / (m - n + 1));\n        String binary = Integer.toBinaryString(avg);\n\n        return binary;\n    }\n}\n"}
{"task_id": "Java/104", "generation": "        List<Integer> result = new ArrayList<>();\n        for (int num : x) {\n            boolean hasEvenDigit = false;\n            int temp = num;\n            while (temp > 0) {\n                int digit = temp % 10;\n                if (digit % 2 == 0) {\n                    hasEvenDigit = true;\n                    break;\n                }\n                temp /= 10;\n            }\n            if (!hasEvenDigit) {\n                result.add(num);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}\n"}
{"task_id": "Java/105", "generation": "        List<Integer> sortedFilteredArr = new ArrayList<>();\n        for (int num : arr) {\n            if (num >= 1 && num <= 9) {\n                sortedFilteredArr.add(num);\n            }\n        }\n        Collections.sort(sortedFilteredArr);\n\n        List<String> result = new ArrayList<>();\n        for (int i = sortedFilteredArr.size() - 1; i >= 0; i--) {\n            int digit = sortedFilteredArr.get(i);\n            String digitName = \"\";\n            switch (digit) {\n                case 1:\n                    digitName = \"One\";\n                    break;\n                case 2:\n                    digitName = \"Two\";\n                    break;\n                case 3:\n                    digitName = \"Three\";\n                    break;\n                case 4:\n                    digitName = \"Four\";\n                    break;\n                case 5:\n                    digitName = \"Five\";\n                    break;\n                case 6:\n                    digitName = \"Six\";\n                    break;\n                case 7:\n                    digitName = \"Seven\";\n                    break;\n                case 8:\n                    digitName = \"Eight\";\n                    break;\n                case 9:\n                    digitName = \"Nine\";\n                    break;\n            }\n            result.add(digitName);\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/106", "generation": "        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sumFromOneToN(i));\n            }\n        }\n        return result;\n    }\n\n    private int factorial(int n) {\n        if (n == 0 || n == 1) {\n            return 1;\n        }\n        return n * factorial(n - 1);\n    }\n\n    private int sumFromOneToN(int n) {\n        return (n * (n + 1)) / 2;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> result = solution.f(5);\n        System.out.println(\"Result for f(5): \" + result); // Output: Result for f(5): [1, 2, 6, 24, 15]\n    }\n}\n\n\nIn the final code above, we completed the implementation of the `f` method as well as the helper methods `factorial` and `sumFromOneToN`. Additionally, a `main` method was added to test the functionality of the `f` method with an example case."}
{"task_id": "Java/107", "generation": "        List<Integer> result = new ArrayList<>();\n        int countEven = 0, countOdd = 0;\n        \n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i) && i % 2 == 0) {\n                countEven++;\n            }\n            if (isPalindrome(i) && i % 2 != 0) {\n                countOdd++;\n            }\n        }\n        \n        result.add(countEven);\n        result.add(countOdd);\n        return result;\n    }\n\n    private boolean isPalindrome(int num) {\n        String str = String.valueOf(num);\n        int left = 0, right = str.length() - 1;\n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> result1 = solution.evenOddPalindrome(3);\n        System.out.println(result1); // Expected output: [1, 2]\n\n        List<Integer> result2 = solution.evenOddPalindrome(12);\n        System.out.println(result2); // Expected output: [4, 6]\n    }\n}\n\n"}
{"task_id": "Java/108", "generation": "        int count = 0;\n        for (int num : arr) {\n            int sumDigits = 0;\n            String numStr = String.valueOf(num);\n            for (int i = num < 0 ? 1 : 0; i < numStr.length(); i++) {\n                sumDigits += Character.getNumericValue(numStr.charAt(i));\n            }\n            if (sumDigits > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n}"}
{"task_id": "Java/109", "generation": "        boolean isSorted = true;\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i) > arr.get(i + 1)) {\n                isSorted = false;\n                break;\n            }\n        }\n        return isSorted;\n    }\n}\n"}
{"task_id": "Java/110", "generation": "        Set<Integer> set1 = new HashSet<>();\n        for (Integer num : lst1) {\n            set1.add(num % 2);\n        }\n        for (Integer num : lst2) {\n            set1.add(num % 2);\n        }\n        return set1.size() == 1 ? \"YES\" : \"NO\";\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> lst1 = Arrays.asList(1, 2, 3, 4);\n        List<Integer> lst2 = Arrays.asList(1, 2, 3, 4);\n        System.out.println(\"Exchange Result 1: \" + solution.exchange(lst1, lst2)); // Expected output: YES\n        \n        List<Integer> lst3 = Arrays.asList(1, 2, 3, 4);\n        List<Integer> lst4 = Arrays.asList(1, 5, 3, 4);\n        System.out.println(\"Exchange Result 2: \" + solution.exchange(lst3, lst4)); // Expected output: NO\n    }\n}\n\nThis Java program defines the `exchange` method that determines whether it is possible to exchange elements between two lists to make the first list contain only even numbers. The `main` method demonstrates the usage of the `exchange` method with sample input lists and expected output."}
{"task_id": "Java/111", "generation": "        Map<String, Integer> countMap = new HashMap<>();\n        String[] letters = test.split(\" \");\n        \n        for (String letter : letters) {\n            countMap.put(letter, countMap.getOrDefault(letter, 0) + 1);\n        }\n        \n        int maxCount = 0;\n        for (int count : countMap.values()) {\n            if (count > maxCount) {\n                maxCount = count;\n            }\n        }\n        \n        Map<String, Integer> result = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : countMap.entrySet()) {\n            if (entry.getValue() == maxCount) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/112", "generation": "        Set<Character> set = new HashSet<>();\n        for (char ch : c.toCharArray()) {\n            set.add(ch);\n        }\n\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (!set.contains(ch)) {\n                sb.append(ch);\n            }\n        }\n\n        String result = sb.toString();\n        boolean isPalindrome = checkPalindrome(result);\n\n        return Arrays.asList(result, isPalindrome);\n    }\n\n    private boolean checkPalindrome(String s) {\n        int left = 0;\n        int right = s.length() - 1;\n        while (left < right) {\n            if (s.charAt(left) != s.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.reverseDelete(\"abcde\", \"ae\")); // (\"bcd\",false)\n        System.out.println(solution.reverseDelete(\"abcdef\", \"b\")); // (\"acdef\",false)\n        System.out.println(solution.reverseDelete(\"abcdedcba\", \"ab\")); // (\"cdedc\",true)\n    }\n}\n\n"}
{"task_id": "Java/113", "generation": "        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            int count = 0;\n            for (char c : s.toCharArray()) {\n                if (Character.isDigit(c) && (c - '0') % 2 != 0) {\n                    count++;\n                }\n            }\n            String formatted = String.format(\"the number of odd elements %dn the str%ng %s of the %nput.\",\n                    count, count, count);\n            result.add(formatted);\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/114", "generation": "        int minSum = Integer.MAX_VALUE; // Initialize minSum to maximum possible value\n        int sum = 0; // Initialize sum \n        for (int num : nums) {\n            sum = Math.min(num, sum + num); // Calculate the current sum considering adding the current number or starting a new sub-array\n            minSum = Math.min(minSum, sum); // Update the minimum sum encountered so far\n        }\n        return minSum;\n    }\n}\n"}
{"task_id": "Java/115", "generation": "        int count = 0;\n        for (List<Integer> row : grid) {\n            int pumpHeight = 0;\n            for (int well : row) {\n                pumpHeight = Math.max(pumpHeight, well);\n            }\n            count += Math.ceil((double)pumpHeight / capacity);\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/116", "generation": "        Collections.sort(arr, (a, b) -> {\n            int bitCountA = Integer.bitCount(Math.abs(a));\n            int bitCountB = Integer.bitCount(Math.abs(b));\n            if (bitCountA != bitCountB) {\n                return bitCountA - bitCountB;\n            } else {\n                return a - b;\n            }\n        });\n        return arr;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5)));\n        System.out.println(solution.sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2)));\n        System.out.println(solution.sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4)));\n    }\n}\n\n"}
{"task_id": "Java/117", "generation": "        List<String> result = new ArrayList<>();\n        if (s.isEmpty()) {\n            return result;\n        }\n\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            int countConsonants = 0;\n            for (char c : word.toLowerCase().toCharArray()) {\n                if (c >= 'a' && c <= 'z' && c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                    countConsonants++;\n                }\n            }\n            if (countConsonants == n) {\n                result.add(word);\n            }\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/118", "generation": "        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n\n        for (int i = word.length() - 2; i > 0; i--) {\n            char currentChar = word.charAt(i);\n            if (!vowels.contains(currentChar)) {\n                char nextChar = word.charAt(i + 1);\n                if (vowels.contains(nextChar)) {\n                    return Character.toString(nextChar);\n                }\n            }\n        }\n        return \"\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.getClosestVowel(\"yogurt\")); // Should return \"u\"\n        System.out.println(solution.getClosestVowel(\"FULL\"));   // Should return \"U\"\n        System.out.println(solution.getClosestVowel(\"quick\"));  // Should return \"\"\n        System.out.println(solution.getClosestVowel(\"ab\"));     // Should return \"\"\n    }\n}\n\nStep Explanation:\n1. We initialized a set containing all vowels (both lowercase and uppercase).\n2. Loop through the word from the second last character up to the second character.\n3. Check if the current character is a consonant and the next character is a vowel, return the next character.\n4. If no satisfying vowel is found, return an empty string.\n5. Added a main method to test the `getClosestVowel` method."}
{"task_id": "Java/119", "generation": "        Stack<Character> stack = new Stack<>();\n        for (String s : lst) {\n            for (char c : s.toCharArray()) {\n                if (c == '(') {\n                    stack.push(c);\n                } else if (!stack.isEmpty() && stack.peek() == '(') {\n                    stack.pop();\n                } else {\n                    stack.push(c);\n                }\n            }\n        }\n        return stack.isEmpty() ? \"Yes\" : \"No\";\n    }\n}\n"}
{"task_id": "Java/120", "generation": "        Collections.sort(arr);\n        List<Integer> result = new ArrayList<>();\n\n        for (int i = arr.size() - 1; i >= arr.size() - k; i--) {\n            result.add(arr.get(i));\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> arr1 = Arrays.asList(-3, -4, 5);\n        int k1 = 3;\n        System.out.println(\"Example 1:\");\n        System.out.println(\"Input: arr = \" + arr1 + \", k = \" + k1);\n        System.out.println(\"Output: \" + solution.maximum(arr1, k1));\n\n        List<Integer> arr2 = Arrays.asList(4, -4, 4);\n        int k2 = 2;\n        System.out.println(\"Example 2:\");\n        System.out.println(\"Input: arr = \" + arr2 + \", k = \" + k2);\n        System.out.println(\"Output: \" + solution.maximum(arr2, k2));\n\n        List<Integer> arr3 = Arrays.asList(-3, 2, 1, 2, -1, -2, 1);\n        int k3 = 1;\n        System.out.println(\"Example 3:\");\n        System.out.println(\"Input: arr = \" + arr3 + \", k = \" + k3);\n        System.out.println(\"Output: \" + solution.maximum(arr3, k3));\n    }\n}\n"}
{"task_id": "Java/121", "generation": "        int sum = 0;\n        for (int i = 0; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/122", "generation": "        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i) >= 10 && arr.get(i) <= 99) {\n                sum += arr.get(i);  \n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> arr = Arrays.asList(111, 21, 3, 4000, 5, 6, 7, 8, 9);\n        int k = 4;\n\n        Solution solution = new Solution();\n        int result = solution.addElements(arr, k);\n        System.out.println(\"Input: arr = \" + arr + \", k = \" + k);\n        System.out.println(\"Output: \" + result);\n    }\n}\n\n"}
{"task_id": "Java/123", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        while (n != 1) {\n            result.add(n);\n            if(n%2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n        }\n        result.add(1);\n        \n        List<Integer> oddNumbers = new ArrayList<>();\n        for (int num : result) {\n            if (num % 2 != 0) {\n                oddNumbers.add(num);\n            }\n        }\n        \n        Collections.sort(oddNumbers);\n        \n        return oddNumbers;\n    }\n"}
{"task_id": "Java/124", "generation": "        if (date == null || date.isEmpty()) {\n            return false;\n        }\n\n        String[] dateArray = date.split(\"-\");\n        if (dateArray.length != 3) {\n            return false;\n        }\n\n        int month, day, year;\n        try {\n            month = Integer.parseInt(dateArray[0]);\n            day = Integer.parseInt(dateArray[1]);\n            year = Integer.parseInt(dateArray[2]);\n        } catch (NumberFormatException e) {\n            return false;\n        }\n\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        if ((month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) && (day < 1 || day > 31)) {\n            return false;\n        }\n\n        if ((month == 4 || month == 6 || month == 9 || month == 11) && (day < 1 || day > 30)) {\n            return false;\n        }\n\n        if (month == 2) {\n            if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) {\n                if (day < 1 || day > 29) {\n                    return false;\n                }\n            } else {\n                if (day < 1 || day > 28) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n}\n\n"}
{"task_id": "Java/125", "generation": "        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\"\\\\s+\"));\n        } else if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && (c - 'a') % 2 != 0) {\n                    count++;\n                }\n            }\n            return count;\n        }\n    }\n}\n"}
{"task_id": "Java/126", "generation": "        Set<Integer> set = new HashSet<>();\n        int prev = Integer.MIN_VALUE;\n        int count = 0;\n        \n        for (int num : lst) {\n            if (num == prev) {\n                count++;\n                if (count > 1) {\n                    return false;\n                }\n            } else {\n                if (num < prev) {\n                    return false;\n                }\n                count = 1;\n            }\n            prev = num;\n            set.add(num);\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/127", "generation": "        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n        \n        int intersectionStart = Math.max(start1, start2);\n        int intersectionEnd = Math.min(end1, end2);\n        \n        if (intersectionStart > intersectionEnd) {\n            return \"NO\";\n        }\n        \n        int intersectionLength = intersectionEnd - intersectionStart;\n        if (isPrime(intersectionLength)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n    \n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.intersection(Arrays.asList(1, 2), Arrays.asList(2, 3))); // \"NO\"\n        System.out.println(solution.intersection(Arrays.asList(-1, 1), Arrays.asList(0, 4))); // \"NO\"\n        System.out.println(solution.intersection(Arrays.asList(-3, -1), Arrays.asList(-5, 5))); // \"YES\"\n    }\n}"}
{"task_id": "Java/128", "generation": "        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int prod = 1;\n        int sum = 0;\n\n        for (int num : arr) {\n            if (num > 0) {\n                prod *= 1;\n            } else if (num < 0) {\n                prod *= -1;\n            } else {\n                prod *= 0;\n            }\n            sum += Math.abs(num);\n        }\n\n        return Optional.of(prod * sum);\n    }\n}\n"}
{"task_id": "Java/129", "generation": "        int n = grid.size();\n        int[][] directions = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n        PriorityQueue<Node> pq = new PriorityQueue<>();\n        Set<List<Integer>> visited = new HashSet<>();\n\n        pq.offer(new Node(0, 0, grid.get(0).get(0)));\n        while (!pq.isEmpty()) {\n            Node node = pq.poll();\n            if (node.path.size() == k) {\n                return node.path;\n            }\n            visited.add(node.path);\n            for (int[] dir : directions) {\n                int newX = node.x + dir[0];\n                int newY = node.y + dir[1];\n                if (newX >= 0 && newX < n && newY >= 0 && newY < n) {\n                    List<Integer> newPath = new ArrayList<>(node.path);\n                    newPath.add(grid.get(newX).get(newY));\n                    if (!visited.contains(newPath)) {\n                        pq.offer(new Node(newX, newY, newPath));\n                    }\n                }\n            }\n        }\n        return new ArrayList<>();\n    }\n\n    static class Node implements Comparable<Node> {\n        int x, y;\n        List<Integer> path;\n\n        Node(int x, int y, int val) {\n            this.x = x;\n            this.y = y;\n            this.path = new ArrayList<>();\n            this.path.add(val);\n        }\n\n        Node(int x, int y, List<Integer> path) {\n            this.x = x;\n            this.y = y;\n            this.path = path;\n        }\n\n        @Override\n        public int compareTo(Node other) {\n            List<Integer> p1 = this.path;\n            List<Integer> p2 = other.path;\n            for (int i = 0; i < Math.min(p1.size(), p2.size()); i++) {\n                if (p1.get(i) != p2.get(i)) {\n                    return p1.get(i) - p2.get(i);\n                }\n            }\n            return p1.size() - p2.size();\n        }\n    }\n}\n"}
{"task_id": "Java/130", "generation": "        List<Integer> tribonacci = new ArrayList<>();\n        tribonacci.add(0); // The first number in the sequence is 0\n        if (n == 0) {\n            return tribonacci;\n        } else {\n            tribonacci.add(1); // The second number in the sequence is 1\n            if (n == 1) {\n                return tribonacci;\n            } else {\n                tribonacci.add(1); // The third number in the sequence is 1\n                if (n == 2) {\n                    return tribonacci;\n                } else {\n                    for (int i = 3; i <= n; i++) {\n                        if (i % 2 == 0) {\n                            tribonacci.add(1 + i / 2);\n                        } else {\n                            tribonacci.add(tribonacci.get(i - 1) + tribonacci.get(i - 2) + tribonacci.get(i - 3));\n                        }\n                    }\n                    return tribonacci;\n                }\n            }\n        }\n    }\n}\n"}
{"task_id": "Java/131", "generation": "        int product = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n            }\n            n /= 10;\n        }\n        return product == 1 ? 0 : product;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(\"digits(1)  == \" + solution.digits(1));\n        System.out.println(\"digits(4)  == \" + solution.digits(4));\n        System.out.println(\"digits(235) == \" + solution.digits(235));\n    }\n}\n\n\nYou can now run this complete Java code to test the `digits` method implementation."}
{"task_id": "Java/132", "generation": "        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < string.length(); i++) {\n            char ch = string.charAt(i);\n            if (ch == '[') {\n                stack.push(ch);\n            } else if (ch == ']' && !stack.isEmpty() && stack.peek() == '[') {\n                stack.pop();\n            }\n        }\n        return stack.size() >= 2;\n    }\n}\n"}
{"task_id": "Java/133", "generation": "        int sum = 0;\n        for (Double num : lst) {\n            sum += Math.ceil(num) * Math.ceil(num);\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Double> lst1 = new ArrayList<>(Arrays.asList(1.4, 4.2, 0.0));\n        List<Double> lst2 = new ArrayList<>(Arrays.asList(-2.4, 1.0, 1.0));\n\n        System.out.println(\"Sum of squared numbers in lst1: \" + solution.sumSquares(lst1)); //Output: 29\n        System.out.println(\"Sum of squared numbers in lst2: \" + solution.sumSquares(lst2)); //Output: 6\n    }\n}\n\n"}
{"task_id": "Java/134", "generation": "        if (txt.isEmpty()) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        if (Character.isLetter(lastChar)) {\n            String[] words = txt.split(\"\\\\s+\");\n            String lastWord = words[words.length - 1];\n            if (lastWord.equals(String.valueOf(lastChar))) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/135", "generation": "        int n = arr.size();\n        for (int i = n - 2; i >= 0; i--) {\n            if (arr.get(i) < arr.get(i + 1)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}\n"}
{"task_id": "Java/136", "generation": "        List<Integer> positiveNumbers = new ArrayList<>();\n        List<Integer> negativeNumbers = new ArrayList<>();\n        \n        for (Integer num : lst) {\n            if (num > 0) {\n                positiveNumbers.add(num);\n            } else if (num < 0) {\n                negativeNumbers.add(num);\n            }\n        }\n        \n        Optional<Integer> maxNegative = negativeNumbers.stream().max(Comparator.naturalOrder());\n        Optional<Integer> minPositive = positiveNumbers.stream().min(Comparator.naturalOrder());\n        \n        List<Optional<Integer>> result = new ArrayList<>();\n        result.add(maxNegative.isEmpty() ? Optional.empty() : maxNegative);\n        result.add(minPositive.isEmpty() ? Optional.empty() : minPositive);\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/137", "generation": "        if (a instanceof String && b instanceof String) {\n            return Optional.empty();\n        } else if (a instanceof Integer && b instanceof Integer) {\n            if ((Integer)a > (Integer)b) {\n                return Optional.of(a);\n            } else if ((Integer)a < (Integer)b) {\n                return Optional.of(b);\n            } else {\n                return Optional.empty();\n            }\n        } else if (a instanceof Float || b instanceof Float || a instanceof String || b instanceof String) {\n            float x = a instanceof Integer ? (float)(Integer)a : a instanceof String ? Float.parseFloat(((String)a).replace(\",\", \".\")) : (float)a;\n            float y = b instanceof Integer ? (float)(Integer)b : b instanceof String ? Float.parseFloat(((String)b).replace(\",\", \".\")) : (float)b;\n            if (x > y) {\n                return Optional.of(a);\n            } else if (y > x) {\n                return Optional.of(b);\n            } else {\n                return Optional.empty();\n            }\n        } else {\n            return Optional.empty();\n        }\n    }\n}\n"}
{"task_id": "Java/138", "generation": "        if (n < 8) {\n            return false;\n        }\n        return (n % 2 == 0);\n    }\n}\n"}
{"task_id": "Java/139", "generation": "        long result = 1;\n        for (int i = n; i > 0; i--) {\n            long factorial = 1;\n            for (int j = i; j > 0; j--) {\n                factorial *= j;\n            }\n            result *= factorial;\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(\"specialFactorial(4) = \" + solution.specialFactorial(4));\n    }\n}\n"}
{"task_id": "Java/140", "generation": "        StringBuilder sb = new StringBuilder();\n        boolean prevSpace = false;\n        int spaceCount = 0;\n        \n        for (char c : text.toCharArray()) {\n            if (c == ' ') {\n                spaceCount++;\n                if (spaceCount > 2) {\n                    if (!prevSpace) {\n                        sb.append('-');\n                    }\n                    prevSpace = true;\n                } else {\n                    sb.append('_');\n                    prevSpace = false;\n                }\n            } else {\n                sb.append(c);\n                prevSpace = false;\n                spaceCount = 0;\n            }\n        }\n        \n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/141", "generation": "        if (!file_name.matches(\"[a-zA-Z]+[a-zA-Z0-9]*\\\\.[txt|exe|dll]\")) {\n            return \"No\";\n        }\n        int digitCount = 0;\n        for (char c : file_name.toCharArray()) {\n            if (Character.isDigit(c)) {\n                digitCount++;\n                if (digitCount > 3) {\n                    return \"No\";\n                }\n            }\n        }\n        return \"Yes\";\n    }\n}\n"}
{"task_id": "Java/142", "generation": "        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                lst.set(i, lst.get(i) * lst.get(i));\n            } else if (i % 4 == 0) {\n                lst.set(i, lst.get(i) * lst.get(i) * lst.get(i));\n            }\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/143", "generation": "        // Split the sentence into words\n        String[] words = sentence.split(\" \");\n\n        // Create a list to store the words with prime lengths\n        List<String> primeWords = new ArrayList<>();\n\n        // Check if the length of each word is prime\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                primeWords.add(word);\n            }\n        }\n\n        // Join the prime words into a single string\n        String result = String.join(\" \", primeWords);\n\n        return result;\n    }\n\n    // Helper method to check if a number is prime\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String sentence1 = \"This is a test\";\n        String sentence2 = \"lets go for swimming\";\n\n        System.out.println(solution.wordsInSentence(sentence1)); // Output: \"is\"\n        System.out.println(solution.wordsInSentence(sentence2)); // Output: \"go for\"\n    }\n}\n\n"}
{"task_id": "Java/144", "generation": "        String[] partsX = x.split(\"/\");\n        String[] partsN = n.split(\"/\");\n\n        int numeratorX = Integer.parseInt(partsX[0]);\n        int denominatorX = Integer.parseInt(partsX[1]);\n\n        int numeratorN = Integer.parseInt(partsN[0]);\n        int denominatorN = Integer.parseInt(partsN[1]);\n\n        int resultNumerator = numeratorX * numeratorN;\n        int resultDenominator = denominatorX * denominatorN;\n\n        return resultNumerator % resultDenominator == 0;\n    }\n}\n"}
{"task_id": "Java/145", "generation": "        Collections.sort(nums, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer num1, Integer num2) {\n                int sum1 = getSumOfDigits(Math.abs(num1));\n                int sum2 = getSumOfDigits(Math.abs(num2));\n                \n                if (sum1 == sum2) {\n                    return nums.indexOf(num1) - nums.indexOf(num2);\n                }\n                \n                return sum1 - sum2;\n            }\n        });\n\n        return nums;\n    }\n\n    private int getSumOfDigits(int num) {\n        int sum = 0;\n        while (num != 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.orderByPoints(Arrays.asList(1, 11, -1, -11, -12)));\n        System.out.println(sol.orderByPoints(Arrays.asList()));\n    }\n}\n\n"}
{"task_id": "Java/146", "generation": "        int count = 0;\n        for (int num : nums) {\n            if (num > 10) {\n                String numStr = String.valueOf(Math.abs(num));\n                char firstDigit = numStr.charAt(0);\n                char lastDigit = numStr.charAt(numStr.length() - 1);\n                if (firstDigit % 2 != 0 && lastDigit % 2 != 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.specialFilter(Arrays.asList(15, -73, 14, -15))); // should print 1\n        System.out.println(solution.specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109))); // should print 2\n    }\n}\n\n"}
{"task_id": "Java/147", "generation": "        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        \n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/148", "generation": "        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n\n        if (!planets.contains(planet1) || !planets.contains(planet2)) {\n            return new ArrayList<>();\n        }\n\n        int start = Math.min(planets.indexOf(planet1), planets.indexOf(planet2));\n        int end = Math.max(planets.indexOf(planet1), planets.indexOf(planet2));\n\n        List<String> result = new ArrayList<>();\n        for (int i = start + 1; i < end; i++) {\n            result.add(planets.get(i));\n        }\n\n        return result;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<String> result1 = solution.bf(\"Jupiter\", \"Neptune\");\n        List<String> result2 = solution.bf(\"Earth\", \"Mercury\");\n        List<String> result3 = solution.bf(\"Mercury\", \"Uranus\");\n\n        System.out.println(\"bf(\\\"Jupiter\\\", \\\"Neptune\\\") ==> \" + result1);\n        System.out.println(\"bf(\\\"Earth\\\", \\\"Mercury\\\") ==> \" + result2);\n        System.out.println(\"bf(\\\"Mercury\\\", \\\"Uranus\\\") ==> \" + result3);\n    }\n}\n\nThe code snippet completes the Java class `Solution` by implementing the `bf` method as specified in the problem description. The `main` method is added to demonstrate and test the functionality of the `bf` method with example cases."}
{"task_id": "Java/149", "generation": "        lst.removeIf(s -> s.length() % 2 != 0);\n        lst.sort((a, b) -> {\n            if (a.length() == b.length()) {\n                return a.compareTo(b);\n            }\n            return a.length() - b.length();\n        });\n        return lst;\n    }\n}\n"}
{"task_id": "Java/150", "generation": "        if (n <= 1) {\n            return y;\n        }\n      \n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        \n        return x;\n    }\n}\n"}
{"task_id": "Java/151", "generation": "        int sum = 0;\n        for (Object numObj : lst) {\n            if (numObj instanceof Integer) {\n                int num = (int) numObj;\n                if (num > 0 && num % 2 != 0) {\n                    sum += num * num;\n                }\n            }\n        }\n        return sum * 2;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        // Test cases\n        System.out.println(solution.doubleTheDifference(Arrays.asList(1, 3, 2, 0))); // Expected output: 10\n        System.out.println(solution.doubleTheDifference(Arrays.asList(-1, -2, 0))); // Expected output: 0\n        System.out.println(solution.doubleTheDifference(Arrays.asList(9, -2))); // Expected output: 81\n        System.out.println(solution.doubleTheDifference(Arrays.asList(0))); // Expected output: 0\n        System.out.println(solution.doubleTheDifference(Arrays.asList())); // Expected output: 0\n    }\n}\n\n\nint test1 = solution.doubleTheDifference(Arrays.asList(1, 3, 2, 0));\nint test2 = solution.doubleTheDifference(Arrays.asList(-1, -2, 0));\nint test3 = solution.doubleTheDifference(Arrays.asList(9, -2));\nint test4 = solution.doubleTheDifference(Arrays.asList(0));\n\nassert test1 == 10;\nassert test2 == 0;\nassert test3 == 81;\nassert test4 == 0;\nSystem.out.println(\"All test cases pass.\");\n\n\nMake sure to add this code to the end of the original code and run it to test the implementation."}
{"task_id": "Java/152", "generation": "        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            int difference = Math.abs(game.get(i) - guess.get(i));\n            result.add(difference);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.compare(Arrays.asList(1, 2, 3, 4, 5, 1), Arrays.asList(1, 2, 3, 4, 2, -2))); // [0, 0, 0, 0, 3, 3]\n        System.out.println(solution.compare(Arrays.asList(0, 5, 0, 0, 0, 4), Arrays.asList(4, 1, 1, 0, 0, -2))); // [4, 4, 1, 0, 0, 6]\n    }\n}\n"}
{"task_id": "Java/153", "generation": "        String strongest = \"\";\n        int maxStrength = Integer.MIN_VALUE;\n\n        for (String ext : extensions) {\n            int capCount = 0;\n            int smallCount = 0;\n\n            for (char c : ext.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    capCount++;\n                } else if (Character.isLowerCase(c)) {\n                    smallCount++;\n                }\n            }\n\n            int strength = capCount - smallCount;\n\n            if (strength > maxStrength || (strength == maxStrength && extensions.indexOf(ext) < extensions.indexOf(strongest))) {\n                maxStrength = strength;\n                strongest = ext;\n            }\n        }\n\n        return class_name + \".\" + strongest;\n    }\n}\n"}
{"task_id": "Java/154", "generation": "        if(a.length() != b.length()) {\n            return false;\n        }\n        \n        String doubleA = a + a;\n        return doubleA.contains(b);\n    }\n}\n"}
{"task_id": "Java/155", "generation": "        List<Integer> counts = new ArrayList<>();\n        int evenCount = 0;\n        int oddCount = 0;\n        String numStr = Integer.toString(Math.abs(num));\n        \n        for (int i = 0; i < numStr.length(); i++) {\n            int digit = Character.getNumericValue(numStr.charAt(i));\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n        \n        counts.add(evenCount);\n        counts.add(oddCount);\n        \n        return counts;\n    }\n}"}
{"task_id": "Java/156", "generation": "        TreeMap<Integer, String> map = new TreeMap<>();\n        map.put(1, \"i\");\n        map.put(4, \"iv\");\n        map.put(5, \"v\");\n        map.put(9, \"ix\");\n        map.put(10, \"x\");\n        map.put(40, \"xl\");\n        map.put(50, \"l\");\n        map.put(90, \"xc\");\n        map.put(100, \"c\");\n        map.put(400, \"cd\");\n        map.put(500, \"d\");\n        map.put(900, \"cm\");\n        map.put(1000, \"m\");\n\n        StringBuilder result = new StringBuilder();\n\n        Integer[] values = map.descendingKeySet().toArray(new Integer[0]);\n        int i = 0;\n\n        while (number > 0) {\n            while (number >= values[i]) {\n                result.append(map.get(values[i]));\n                number -= values[i];\n            }\n            i++;\n        }\n      \n        return result.toString().toLowerCase();\n    }\n}\n"}
{"task_id": "Java/157", "generation": "        List<Integer> sides = new ArrayList<>(Arrays.asList(a, b, c));\n        Collections.sort(sides);\n        return Math.pow(sides.get(0), 2) + Math.pow(sides.get(1), 2) == Math.pow(sides.get(2), 2);\n    }\n}\n"}
{"task_id": "Java/158", "generation": "        int maxUniqueChars = 0;\n        String result = \"\";\n        for (String word : words) {\n            int uniqueChars = (int) word.chars().distinct().count();\n            if (uniqueChars > maxUniqueChars || (uniqueChars == maxUniqueChars && word.compareTo(result) < 0)) {\n                maxUniqueChars = uniqueChars;\n                result = word;\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<String> words1 = Arrays.asList(\"name\", \"of\", \"string\");\n        System.out.println(solution.findMax(words1)); // should print \"string\"\n\n        List<String> words2 = Arrays.asList(\"name\", \"enam\", \"game\");\n        System.out.println(solution.findMax(words2)); // should print \"enam\"\n\n        List<String> words3 = Arrays.asList(\"aaaaaaa\", \"bb\", \"cc\");\n        System.out.println(solution.findMax(words3)); // should print \"aaaaaaa\"\n    }\n}\n"}
{"task_id": "Java/159", "generation": "        int totalEatenCarrots = number + need;\n        int carrotsLeft = Math.max(0, remaining - need);\n        List<Integer> result = new ArrayList<>();\n        result.add(totalEatenCarrots);\n        result.add(carrotsLeft);\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.eat(5, 6, 10));  // [11, 4]\n        System.out.println(solution.eat(4, 8, 9));   // [12, 1]\n        System.out.println(solution.eat(1, 10, 10)); // [11, 0]\n        System.out.println(solution.eat(2, 11, 5));  // [7, 0]\n    }\n}\n\n"}
{"task_id": "Java/160", "generation": "        Stack<Integer> nums = new Stack<>();\n        Stack<String> ops = new Stack<>();\n\n        int result = 0;\n        for (int i = 0, j = 0; i < operand.size(); i++) {\n            nums.push(operand.get(i));\n            if (j < operator.size()) {\n                while (!ops.isEmpty() && precedence(operator.get(j)) <= precedence(ops.peek())) {\n                    int num2 = nums.pop();\n                    int num1 = nums.pop();\n                    String op = ops.pop();\n                    int val = performOperation(num1, num2, op);\n                    nums.push(val);\n                }\n                if (j < operator.size()) {\n                    ops.push(operator.get(j));\n                    j++;\n                }\n            }\n        }\n\n        while (!ops.isEmpty()) {\n            int num2 = nums.pop();\n            int num1 = nums.pop();\n            String op = ops.pop();\n            int val = performOperation(num1, num2, op);\n            nums.push(val);\n        }\n\n        return nums.peek();\n    }\n\n    private int precedence(String op) {\n        if (op.equals(\"+\") || op.equals(\"-\")) {\n            return 1;\n        } else if (op.equals(\"*\") || op.equals(\"/\")) {\n            return 2;\n        } else if (op.equals(\"**\")) {\n            return 3;\n        } else {\n            return 0;\n        }\n    }\n\n    private int performOperation(int num1, int num2, String op) {\n        if (op.equals(\"+\")) return num1 + num2;\n        if (op.equals(\"-\")) return num1 - num2;\n        if (op.equals(\"*\")) return num1 * num2;\n        if (op.equals(\"/\")) return num1 / num2;\n        if (op.equals(\"**\")) return (int) Math.pow(num1, num2);\n        return 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<String> operators = Arrays.asList(\"+\", \"*\", \"-\");\n        List<Integer> array = Arrays.asList(2, 3, 4, 5);\n        int result = solution.doAlgebra(operators, array);\n        System.out.println(\"Result: \" + result);\n    }\n}\n\n"}
{"task_id": "Java/161", "generation": "        char[] chars = s.toCharArray();\n        \n        boolean hasLetter = false;\n        for (char c : chars) {\n            if (Character.isLetter(c)) {\n                hasLetter = true;\n                break;\n            }\n        }\n        \n        if (!hasLetter) {\n            return new StringBuilder(s).reverse().toString();\n        }\n        \n        StringBuilder result = new StringBuilder();\n        for (char c : chars) {\n            if (Character.isLetter(c)) {\n                result.append(Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c));\n            } else {\n                result.append(c);\n            }\n        }\n        \n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/162", "generation": "        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        \n        BigInteger bigInt = new BigInteger(1, digest);\n        String md5Hash = bigInt.toString(16);\n        \n        // Pad with leading zeros if necessary\n        while(md5Hash.length() < 32) {\n            md5Hash = \"0\" + md5Hash;\n        }\n        \n        return Optional.of(md5Hash);\n    }\n}\n"}
{"task_id": "Java/163", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = Math.min(a, b); i <= Math.max(a, b); i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        \n        return result;\n    }\n}\n"}
