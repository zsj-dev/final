{"task_id": "Java/0", "generation": "        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) <= threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Double> numbers = new ArrayList<>(Arrays.asList(1.0, 2.5, 3.8, 5.2, 7.1));\n        double threshold = 1.0;\n        System.out.println(solution.hasCloseElements(numbers, threshold)); // Output: true\n    }\n}\n"}
{"task_id": "Java/1", "generation": "        List<String> separatedGroups = new ArrayList<>();\n        int openCount = 0;\n        int closeCount = 0;\n        int startIndex = 0;\n\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                openCount++;\n            } else if (c == ')') {\n                closeCount++;\n            }\n\n            if (openCount == closeCount) {\n                String group = paren_string.substring(startIndex, i + 1);\n                separatedGroups.add(group);\n                startIndex = i + 1;\n                openCount = 0;\n                closeCount = 0;\n            }\n        }\n\n        return separatedGroups;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String input = \"((group1)(group2)(group3))\";\n        List<String> separatedGroups = solution.separateParenGroups(input);\n        for (String group : separatedGroups) {\n            System.out.println(group);\n        }\n    }\n}\n"}
{"task_id": "Java/2", "generation": "        String numberStr = Double.toString(number);\n        int decimalIndex = numberStr.indexOf('.');\n        \n        if (decimalIndex != -1) {\n            String truncatedStr = numberStr.substring(0, decimalIndex + 3); // Truncate to 2 decimal places\n            return Double.parseDouble(truncatedStr);\n        } else {\n            return number;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        double truncatedNumber = solution.truncateNumber(3.14159);\n        System.out.println(truncatedNumber); // Output: 3.14\n    }\n}\n"}
{"task_id": "Java/3", "generation": "        int sum = 0;\n        for (int operation : operations) {\n            sum += operation;\n            if (sum < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> operations = new ArrayList<>(Arrays.asList(1, -2, 3, -4, 5));\n        System.out.println(solution.belowZero(operations)); // Output: true\n    }\n}\n"}
{"task_id": "Java/4", "generation": "        double sum = 0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n        \n        double sumAbsoluteDeviations = 0;\n        for (double num : numbers) {\n            sumAbsoluteDeviations += Math.abs(num - mean);\n        }\n        double meanAbsoluteDeviation = sumAbsoluteDeviations / numbers.size();\n        \n        return meanAbsoluteDeviation;\n    }\n}\n"}
{"task_id": "Java/5", "generation": "        List<Integer> interspersedList = new ArrayList<>();\n        \n        for (int i = 0; i < numbers.size(); i++) {\n            interspersedList.add(numbers.get(i));\n            \n            if (i != numbers.size() - 1) {\n                interspersedList.add(delimiter);\n            }\n        }\n        \n        return interspersedList;\n    }\n}\n"}
{"task_id": "Java/6", "generation": "        List<Integer> result = new ArrayList<>();\n        Stack<Integer> stack = new Stack<>();\n        \n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(i);\n            } else if (c == ')') {\n                if (!stack.isEmpty()) {\n                    int start = stack.pop();\n                    result.add(start);\n                    result.add(i);\n                } else {\n                    // Invalid parentheses\n                    return new ArrayList<>();\n                }\n            }\n        }\n        \n        if (!stack.isEmpty()) {\n            // Invalid parentheses\n            return new ArrayList<>();\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/7", "generation": "        List<String> filteredStrings = new ArrayList<>();\n        \n        for (String str : strings) {\n            if (str.contains(substring)) {\n                filteredStrings.add(str);\n            }\n        }\n        \n        return filteredStrings;\n    }\n}\n"}
{"task_id": "Java/8", "generation": "        int sum = 0;\n        int product = 1;\n\n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n\n        List<Integer> result = new ArrayList<>();\n        result.add(sum);\n        result.add(product);\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/9", "generation": "        List<Integer> rollingMaxValues = new ArrayList<>();\n        \n        if (numbers == null || numbers.isEmpty()) {\n            return rollingMaxValues;\n        }\n        \n        int maxSoFar = Integer.MIN_VALUE;\n        for (int num : numbers) {\n            maxSoFar = Math.max(maxSoFar, num);\n            rollingMaxValues.add(maxSoFar);\n        }\n        \n        return rollingMaxValues;\n    }\n}\n"}
{"task_id": "Java/10", "generation": "    if (isPalindrome(string)) {\n        return string;\n    }\n    \n    int n = string.length();\n    int start = 0;\n    int end = n - 1;\n    \n    while (start < end) {\n        if (string.charAt(start) == string.charAt(end)) {\n            start++;\n            end--;\n        } else {\n            String prefix = string.substring(0, start);\n            String suffix = string.substring(end + 1);\n            \n            if (isPalindrome(prefix + string.substring(start, end + 1) + suffix)) {\n                return prefix + string.substring(start, end + 1) + suffix;\n            } else if (isPalindrome(prefix + string.substring(start + 1, end + 2) + suffix)) {\n                return prefix + string.substring(start + 1, end + 2) + suffix;\n            } else {\n                return \"Not possible to make palindrome\";\n            }\n        }\n    }\n    \n    return \"Not possible to make palindrome\";\n}\n\npublic boolean isPalindrome(String string) {\n    int i = 0;\n    int j = string.length() - 1;\n    while (i < j) {\n        if (string.charAt(i) != string.charAt(j)) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\n"}
{"task_id": "Java/11", "generation": "        char[] arrA = a.toCharArray();\n        char[] arrB = b.toCharArray();\n        \n        StringBuilder result = new StringBuilder();\n        \n        for (int i = 0; i < Math.min(arrA.length, arrB.length); i++) {\n            result.append((char) (arrA[i] ^ arrB[i]));\n        }\n        \n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String a = \"101010\";\n        String b = \"110011\";\n        String xorResult = solution.stringXor(a, b);\n        System.out.println(\"XOR result: \" + xorResult);\n    }\n}\n"}
{"task_id": "Java/12", "generation": "        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        String longestString = strings.get(0);\n        for (String str : strings) {\n            if (str.length() > longestString.length()) {\n                longestString = str;\n            }\n        }\n        \n        return Optional.of(longestString);\n    }\n}\n"}
{"task_id": "Java/13", "generation": "        if (b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(b, a % b);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int a = 24;\n        int b = 36;\n        System.out.println(\"The greatest common divisor of \" + a + \" and \" + b + \" is: \" + solution.greatestCommonDivisor(a, b));\n    }\n}\n"}
{"task_id": "Java/14", "generation": "        List<String> prefixes = new ArrayList<>();\n        \n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        \n        return prefixes;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String input = \"hello\";\n        List<String> prefixes = solution.allPrefixes(input);\n        \n        System.out.println(\"Prefixes of '\" + input + \"':\");\n        for (String prefix : prefixes) {\n            System.out.println(prefix);\n        }\n    }\n}\n"}
{"task_id": "Java/15", "generation": "        StringBuilder sb = new StringBuilder();\n        for (int i = 1; i <= n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int n = 5;\n        String sequence = solution.stringSequence(n);\n        System.out.println(sequence);\n    }\n}\n"}
{"task_id": "Java/16", "generation": "        Set<Character> charSet = new HashSet<>();\n        \n        for (int i = 0; i < string.length(); i++) {\n            charSet.add(string.charAt(i));\n        }\n        \n        return charSet.size();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String input = \"hello\";\n        int count = solution.countDistinctCharacters(input);\n        System.out.println(\"Count of distinct characters: \" + count);\n    }\n}\n"}
{"task_id": "Java/17", "generation": "        List<Integer> notes = new ArrayList<>();\n        \n        String[] noteArray = string.split(\",\");\n        \n        for (String note : noteArray) {\n            try {\n                int parsedNote = Integer.parseInt(note.trim());\n                notes.add(parsedNote);\n            } catch (NumberFormatException e) {\n                System.out.println(\"Invalid note: \" + note);\n            }\n        }\n        \n        return notes;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String musicString = \"1,2,3,4,5\";\n        List<Integer> parsedNotes = solution.parseMusic(musicString);\n        \n        System.out.println(\"Parsed notes: \" + parsedNotes);\n    }\n}\n"}
{"task_id": "Java/18", "generation": "        if (substring == null || substring.isEmpty()) {\n            return 0;\n        }\n        \n        int count = 0;\n        int index = string.indexOf(substring);\n        \n        while (index != -1) {\n            count++;\n            index = string.indexOf(substring, index + 1);\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String string = \"hellohellohello\";\n        String substring = \"hello\";\n        System.out.println(solution.howManyTimes(string, substring)); // Output: 3\n    }\n}\n"}
{"task_id": "Java/19", "generation": "        // Step 1: Convert the input string of numbers into an array of integers\n        String[] numArr = numbers.split(\" \");\n        int[] intArr = new int[numArr.length];\n        for (int i = 0; i < numArr.length; i++) {\n            intArr[i] = Integer.parseInt(numArr[i]);\n        }\n        \n        // Step 2: Sort the array of integers in ascending order\n        Arrays.sort(intArr);\n        \n        // Step 3: Convert the sorted array back into a string\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < intArr.length; i++) {\n            sb.append(intArr[i]);\n            if (i < intArr.length - 1) {\n                sb.append(\" \");\n            }\n        }\n        \n        // Step 4: Return the sorted string\n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/20", "generation": "        // Step 1: Sort the list of numbers\n        Collections.sort(numbers);\n\n        // Step 2: Find the median\n        int n = numbers.size();\n        double median = n % 2 == 0 ? (numbers.get(n/2) + numbers.get(n/2 - 1)) / 2 : numbers.get(n/2);\n\n        // Step 3: Find the two closest elements to the median\n        double closest1 = Double.MAX_VALUE;\n        double closest2 = Double.MAX_VALUE;\n        for (double num : numbers) {\n            if (num < median && median - num < Math.abs(closest1 - median)) {\n                closest1 = num;\n            } else if (num > median && num - median < Math.abs(closest2 - median)) {\n                closest2 = num;\n            }\n        }\n\n        // Step 4: Return the two closest elements as a list\n        List<Double> result = new ArrayList<>();\n        result.add(closest1);\n        result.add(closest2);\n        return result;\n    }\n}\n"}
{"task_id": "Java/21", "generation": "        if (numbers == null || numbers.isEmpty()) {\n            return new ArrayList<>();\n        }\n        \n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        double range = max - min;\n        \n        List<Double> rescaledNumbers = new ArrayList<>();\n        for (double number : numbers) {\n            double rescaledNumber = (number - min) / range;\n            rescaledNumbers.add(rescaledNumber);\n        }\n        \n        return rescaledNumbers;\n    }\n}\n"}
{"task_id": "Java/22", "generation": "        List<Integer> filteredIntegers = new ArrayList<>();\n        \n        for (Object value : values) {\n            if (value instanceof Integer) {\n                filteredIntegers.add((Integer) value);\n            }\n        }\n        \n        return filteredIntegers;\n    }\n}\n"}
{"task_id": "Java/23", "generation": "        if (string == null || string.isEmpty()) {\n            return 0;\n        }\n        \n        return string.length();\n    }\n}\n"}
{"task_id": "Java/24", "generation": "    List<Integer> divisors = new ArrayList<>();\n    \n    for (int i = 1; i <= n; i++) {\n        if (n % i == 0) {\n            divisors.add(i);\n        }\n    }\n    \n    Collections.sort(divisors, Collections.reverseOrder());\n    \n    return divisors.get(0);\n}\n\npublic static void main(String[] args) {\n    Solution solution = new Solution();\n    int n = 24;\n    System.out.println(\"Largest divisor of \" + n + \" is: \" + solution.largestDivisor(n));\n}\n"}
{"task_id": "Java/25", "generation": "        List<Integer> factors = new ArrayList<>();\n        \n        for (int i = 1; i <= n; i++) {\n            if (n % i == 0) {\n                factors.add(i);\n            }\n        }\n        \n        return factors;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int n = 12;\n        List<Integer> factors = solution.factorize(n);\n        System.out.println(\"Factors of \" + n + \": \" + factors);\n    }\n}\n"}
{"task_id": "Java/26", "generation": "        List<Integer> uniqueNumbers = new ArrayList<>();\n        \n        for (Integer number : numbers) {\n            if (!uniqueNumbers.contains(number)) {\n                uniqueNumbers.add(number);\n            }\n        }\n        \n        return uniqueNumbers;\n    }\n}\n"}
{"task_id": "Java/27", "generation": "        StringBuilder result = new StringBuilder();\n        \n        for (char c : string.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                result.append(Character.toLowerCase(c));\n            } else if (Character.isLowerCase(c)) {\n                result.append(Character.toUpperCase(c));\n            } else {\n                result.append(c);\n            }\n        }\n        \n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String input = \"Hello World\";\n        String output = solution.flipCase(input);\n        System.out.println(output); // Output: hELLO wORLD\n    }\n}\n"}
{"task_id": "Java/28", "generation": "        StringBuilder result = new StringBuilder();\n        \n        for (String str : strings) {\n            result.append(str);\n        }\n        \n        return result.toString();\n    }\n}\n"}
{"task_id": "Java/29", "generation": "        return strings.stream()\n                      .filter(str -> str.startsWith(prefix))\n                      .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/30", "generation": "        List<Integer> positiveNumbers = l.stream()\n                                         .filter(num -> num > 0)\n                                         .collect(Collectors.toList());\n        return positiveNumbers;\n    }\n}\n"}
{"task_id": "Java/31", "generation": "        if (n < 2) {\n            return false;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/32", "generation": "        double lowerBound = -100;\n        double upperBound = 100;\n        double step = 0.1;\n        \n        double currentX = lowerBound;\n        double currentY = poly(xs, currentX);\n        \n        while (currentX < upperBound) {\n            double nextX = currentX + step;\n            double nextY = poly(xs, nextX);\n            \n            if (currentY * nextY < 0) {\n                // Found a sign change, zero is in between\n                return refineZero(xs, currentX, nextX);\n            }\n            \n            currentX = nextX;\n            currentY = nextY;\n        }\n        \n        return Double.NaN; // No zero found in the range\n    }\n    \n    private double refineZero(List<Double> xs, double lowerBound, double upperBound) {\n        double tolerance = 0.0001;\n        \n        while (Math.abs(upperBound - lowerBound) > tolerance) {\n            double mid = (lowerBound + upperBound) / 2;\n            double midValue = poly(xs, mid);\n            \n            if (midValue == 0) {\n                return mid;\n            } else if (midValue * poly(xs, lowerBound) < 0) {\n                upperBound = mid;\n            } else {\n                lowerBound = mid;\n            }\n        }\n        \n        return (lowerBound + upperBound) / 2;\n    }\n}\n"}
{"task_id": "Java/33", "generation": "        class ThirdDigitComparator implements Comparator<Integer> {\n            @Override\n            public int compare(Integer num1, Integer num2) {\n                String str1 = num1.toString();\n                String str2 = num2.toString();\n                \n                if (str1.length() < 3 || str2.length() < 3) {\n                    return 0; // If a number has less than 3 digits, consider them equal\n                }\n                \n                char digit1 = str1.charAt(2);\n                char digit2 = str2.charAt(2);\n                \n                return Character.compare(digit1, digit2);\n            }\n        }\n\n        Collections.sort(l, new ThirdDigitComparator());\n        return l;\n    }\n}\n"}
{"task_id": "Java/34", "generation": "        Set<Integer> set = new HashSet<>();\n        for (Integer num : l) {\n            set.add(num);\n        }\n        return new ArrayList<>(set);\n    }\n}\n"}
{"task_id": "Java/35", "generation": "        int max = Integer.MIN_VALUE;\n        \n        for (int num : l) {\n            if (num > max) {\n                max = num;\n            }\n        }\n        \n        return max;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> list = new ArrayList<>();\n        list.add(10);\n        list.add(5);\n        list.add(20);\n        list.add(15);\n        \n        Solution solution = new Solution();\n        int max = solution.maxElement(list);\n        \n        System.out.println(\"The maximum element in the list is: \" + max);\n    }\n}\n"}
{"task_id": "Java/36", "generation": "        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 3 == 0 || i % 5 == 0) {\n                sum += i;\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int n = 15;\n        System.out.println(\"Sum of all numbers divisible by 3 or 5 up to \" + n + \" is: \" + solution.fizzBuzz(n));\n    }\n}\n"}
{"task_id": "Java/37", "generation": "        List<Integer> evenNumbers = new ArrayList<>();\n        \n        // Add even numbers to the new list\n        for (int num : l) {\n            if (num % 2 == 0) {\n                evenNumbers.add(num);\n            }\n        }\n        \n        // Sort the new list\n        Collections.sort(evenNumbers);\n        \n        return evenNumbers;\n    }\n}\n"}
{"task_id": "Java/38", "generation": "        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // reverse cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}\n"}
{"task_id": "Java/39", "generation": "        int a = 0;\n        int b = 1;\n        int c;\n        int count = 0;\n        \n        while (n > 0) {\n            c = a + b;\n            a = b;\n            b = c;\n            \n            if (isPrime(c)) {\n                count++;\n                n--;\n            }\n        }\n        \n        return c;\n    }\n\n    public boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/40", "generation": "        Collections.sort(l);\n        \n        for (int i = 0; i < l.size() - 2; i++) {\n            int left = i + 1;\n            int right = l.size() - 1;\n            \n            while (left < right) {\n                int sum = l.get(i) + l.get(left) + l.get(right);\n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n        \n        return false;\n    }\n}\n"}
{"task_id": "Java/41", "generation": "        List<Integer> positions = new ArrayList<>();\n        int collisions = 0;\n\n        // Initialize the positions of the cars randomly\n        Random rand = new Random();\n        for (int i = 0; i < n; i++) {\n            positions.add(rand.nextInt(100)); // Assuming the track has 100 positions\n        }\n\n        // Simulate the race\n        for (int i = 0; i < 100; i++) {\n            Set<Integer> occupiedPositions = new HashSet<>();\n            for (int j = 0; j < n; j++) {\n                if (occupiedPositions.contains(positions.get(j))) {\n                    collisions++;\n                } else {\n                    occupiedPositions.add(positions.get(j));\n                }\n                positions.set(j, positions.get(j) + 1);\n            }\n        }\n\n        return collisions;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int n = 5; // Number of cars in the race\n        int totalCollisions = solution.carRaceCollision(n);\n        System.out.println(\"Total number of collisions: \" + totalCollisions);\n    }\n}\n"}
{"task_id": "Java/42", "generation": "        return l.stream()\n                .map(num -> num + 1)\n                .collect(Collectors.toList());\n    }\n}\n"}
{"task_id": "Java/43", "generation": "        if (l == null || l.isEmpty()) {\n            return false;\n        }\n        \n        Set<Integer> seen = new HashSet<>();\n        \n        for (int num : l) {\n            if (seen.contains(-num)) {\n                return true;\n            }\n            seen.add(num);\n        }\n        \n        return false;\n    }\n}\n"}
{"task_id": "Java/44", "generation": "        if (x == 0) {\n            return \"0\";\n        }\n        \n        StringBuilder result = new StringBuilder();\n        \n        while (x > 0) {\n            int remainder = x % base;\n            result.insert(0, remainder);\n            x = x / base;\n        }\n        \n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int x = 42;\n        int base = 2;\n        System.out.println(solution.changeBase(x, base)); // Output: 101010\n    }\n}\n"}
{"task_id": "Java/45", "generation": "double area = 0.5 * a * h;\nreturn area;\n}\n}\n"}
{"task_id": "Java/46", "generation": "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        \n        int[] fibArray = new int[n+1];\n        fibArray[0] = 0;\n        fibArray[1] = 1;\n        \n        for (int i = 2; i <= n; i++) {\n            fibArray[i] = fibArray[i-1] + fibArray[i-2];\n        }\n        \n        return fibArray[n];\n    }\n}\n"}
{"task_id": "Java/47", "generation": "        Collections.sort(l);\n        int size = l.size();\n        \n        if (size % 2 == 0) {\n            int mid1 = l.get(size / 2 - 1);\n            int mid2 = l.get(size / 2);\n            return (double) (mid1 + mid2) / 2;\n        } else {\n            return l.get(size / 2);\n        }\n    }\n}\n"}
{"task_id": "Java/48", "generation": "        // Remove all non-alphanumeric characters and convert to lowercase\n        String cleanText = text.replaceAll(\"[^a-zA-Z0-9]\", \"\").toLowerCase();\n        \n        // Check if the clean text is a palindrome\n        int left = 0;\n        int right = cleanText.length() - 1;\n        \n        while (left < right) {\n            if (cleanText.charAt(left) != cleanText.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        String text1 = \"A man, a plan, a canal, Panama\";\n        System.out.println(solution.isPalindrome(text1)); // Output: true\n        \n        String text2 = \"race a car\";\n        System.out.println(solution.isPalindrome(text2)); // Output: false\n    }\n}\n"}
{"task_id": "Java/49", "generation": "        long result = 1;\n        for (int i = 0; i < p; i++) {\n            result = (result * n) % p;\n        }\n        return (int) result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int n = 5;\n        int p = 3;\n        System.out.println(solution.modp(n, p)); // Output: 2\n    }\n}\n"}
{"task_id": "Java/50", "generation": "    StringBuilder sb = new StringBuilder();\n    for (char ch : s.toCharArray()) {\n        char decodedChar = (char) ('a' + ((ch - 5 - 'a' + 26) % 26));\n        sb.append(decodedChar);\n    }\n    return sb.toString();\n}\n}\n"}
{"task_id": "Java/51", "generation": "        StringBuilder result = new StringBuilder();\n        \n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' &&\n                c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n                result.append(c);\n            }\n        }\n        \n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String text = \"Hello, World!\";\n        System.out.println(solution.removeVowels(text)); // Output: Hll, Wrld!\n    }\n}\n"}
{"task_id": "Java/52", "generation": "        for (int num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> list1 = Arrays.asList(1, 2, 3, 4, 5);\n        int threshold1 = 6;\n        System.out.println(solution.belowThreshold(list1, threshold1)); // Output: true\n\n        List<Integer> list2 = Arrays.asList(10, 20, 30, 40, 50);\n        int threshold2 = 25;\n        System.out.println(solution.belowThreshold(list2, threshold2)); // Output: false\n    }\n}\n"}
{"task_id": "Java/53", "generation": "    return x + y;\n}\n"}
{"task_id": "Java/54", "generation": "        if (s0.length() != s1.length()) {\n            return false;\n        }\n\n        char[] s0Chars = s0.toCharArray();\n        char[] s1Chars = s1.toCharArray();\n\n        Arrays.sort(s0Chars);\n        Arrays.sort(s1Chars);\n\n        return Arrays.equals(s0Chars, s1Chars);\n    }\n}\n"}
{"task_id": "Java/55", "generation": "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        \n        int a = 0;\n        int b = 1;\n        int c = 0;\n        \n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        \n        return c;\n    }\n}\n"}
{"task_id": "Java/56", "generation": "        Stack<Character> stack = new Stack<>();\n        \n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '(' || bracket == '[' || bracket == '{') {\n                stack.push(bracket);\n            } else if (bracket == ')' || bracket == ']' || bracket == '}') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                \n                char openingBracket = stack.pop();\n                if ((bracket == ')' && openingBracket != '(') ||\n                    (bracket == ']' && openingBracket != '[') ||\n                    (bracket == '}' && openingBracket != '{')) {\n                    return false;\n                }\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n}\n"}
{"task_id": "Java/57", "generation": "    boolean increasing = true;\n    boolean decreasing = true;\n    \n    for (int i = 0; i < l.size() - 1; i++) {\n        if (l.get(i) > l.get(i + 1)) {\n            increasing = false;\n        }\n        if (l.get(i) < l.get(i + 1)) {\n            decreasing = false;\n        }\n    }\n    \n    return increasing || decreasing;\n}\n"}
{"task_id": "Java/58", "generation": "        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> commonSet = new HashSet<>();\n        \n        for (Integer num : l2) {\n            if (set1.contains(num)) {\n                commonSet.add(num);\n            }\n        }\n        \n        List<Integer> commonList = new ArrayList<>(commonSet);\n        return commonList;\n    }\n}\n"}
{"task_id": "Java/59", "generation": "        int maxPrime = -1;\n        \n        // Check for 2 as a prime factor\n        while (n % 2 == 0) {\n            maxPrime = 2;\n            n /= 2;\n        }\n        \n        // Check for odd prime factors\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                maxPrime = i;\n                n /= i;\n            }\n        }\n        \n        // If the number is a prime number greater than 2\n        if (n > 2) {\n            maxPrime = n;\n        }\n        \n        return maxPrime;\n    }\n}\n"}
{"task_id": "Java/60", "generation": "        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int n = 5;\n        System.out.println(\"Sum of numbers from 1 to \" + n + \" is: \" + solution.sumToN(n));\n    }\n}\n"}
{"task_id": "Java/61", "generation": "        Stack<Character> stack = new Stack<>();\n        \n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '(' || bracket == '[' || bracket == '{') {\n                stack.push(bracket);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                \n                char top = stack.pop();\n                if ((bracket == ')' && top != '(') || (bracket == ']' && top != '[') || (bracket == '}' && top != '{')) {\n                    return false;\n                }\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        String test1 = \"((()))\";\n        String test2 = \"((())\";\n        \n        System.out.println(solution.correctBracketing(test1)); // Output: true\n        System.out.println(solution.correctBracketing(test2)); // Output: false\n    }\n}\n"}
{"task_id": "Java/62", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 0; i < xs.size() - 1; i++) {\n            int derivative = xs.get(i + 1) - xs.get(i);\n            result.add(derivative);\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> input = Arrays.asList(1, 3, 5, 7, 9);\n        List<Integer> output = solution.derivative(input);\n        \n        System.out.println(\"Input List: \" + input);\n        System.out.println(\"Derivative List: \" + output);\n    }\n}\n"}
{"task_id": "Java/63", "generation": "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        \n        int a = 0;\n        int b = 1;\n        int c = 0;\n        \n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        \n        return c;\n    }\n}\n"}
{"task_id": "Java/64", "generation": "        int count = 0;\n        s = s.toLowerCase();\n        \n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String input = \"Hello World\";\n        int result = solution.vowelsCount(input);\n        System.out.println(\"Number of vowels in the string: \" + result);\n    }\n}\n"}
{"task_id": "Java/65", "generation": "        // Convert integer x to binary string\n        String binaryString = Integer.toBinaryString(x);\n        \n        // Perform circular shift operation\n        String shiftedBinaryString = binaryString.substring(shift) + binaryString.substring(0, shift);\n        \n        // Convert binary string back to integer\n        int shiftedInt = Integer.parseInt(shiftedBinaryString, 2);\n        \n        // Return the integer as a string\n        return String.valueOf(shiftedInt);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int x = 10;\n        int shift = 2;\n        String result = solution.circularShift(x, shift);\n        System.out.println(\"Circular shifted result: \" + result);\n    }\n}\n"}
{"task_id": "Java/66", "generation": "        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isDigit(c)) {\n                int digit = Character.getNumericValue(c);\n                sum += digit;\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String input = \"abc123def456ghi\";\n        int result = solution.digitSum(input);\n        System.out.println(\"Sum of digits in the string: \" + result);\n    }\n}\n"}
{"task_id": "Java/67", "generation": "        if (s == null || s.length() == 0 || n <= 0) {\n            return 0;\n        }\n        \n        Map<Character, Integer> fruitCount = new HashMap<>();\n        int maxFruits = 0;\n        int start = 0;\n        \n        for (int end = 0; end < s.length(); end++) {\n            char fruit = s.charAt(end);\n            fruitCount.put(fruit, fruitCount.getOrDefault(fruit, 0) + 1);\n            \n            while (fruitCount.size() > n) {\n                char startFruit = s.charAt(start);\n                fruitCount.put(startFruit, fruitCount.get(startFruit) - 1);\n                if (fruitCount.get(startFruit) == 0) {\n                    fruitCount.remove(startFruit);\n                }\n                start++;\n            }\n            \n            maxFruits = Math.max(maxFruits, end - start + 1);\n        }\n        \n        return maxFruits;\n    }\n}\n"}
{"task_id": "Java/68", "generation": "        List<Integer> pluckedList = new ArrayList<>();\n        \n        for (int num : arr) {\n            if (num % 3 == 0) {\n                pluckedList.add(num);\n            }\n        }\n        \n        return pluckedList;\n    }\n}\n"}
{"task_id": "Java/69", "generation": "        if (lst.isEmpty()) {\n            return -1;\n        }\n        \n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == i) {\n                return i;\n            }\n        }\n        \n        return -1;\n    }\n}\n"}
{"task_id": "Java/70", "generation": "        Collections.sort(lst, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                if (a % 2 == 0 && b % 2 == 0) {\n                    return a - b;\n                } else if (a % 2 != 0 && b % 2 != 0) {\n                    return a - b;\n                } else {\n                    return a % 2 == 0 ? 1 : -1;\n                }\n            }\n        });\n        \n        return lst;\n    }\n}\n"}
{"task_id": "Java/71", "generation": "        if (a + b > c && a + c > b && b + c > a) {\n            double s = (a + b + c) / 2;\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            return area;\n        } else {\n            System.out.println(\"Invalid sides. Triangle cannot be formed.\");\n            return -1;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        double a = 3.0;\n        double b = 4.0;\n        double c = 5.0;\n        double area = solution.triangleArea(a, b, c);\n        if (area != -1) {\n            System.out.println(\"Area of the triangle with sides \" + a + \", \" + b + \", \" + c + \" is: \" + area);\n        }\n    }\n}\n"}
{"task_id": "Java/72", "generation": "        int totalWeight = 0;\n        for (int weight : q) {\n            totalWeight += weight;\n        }\n        \n        if (w < totalWeight) {\n            return false; // Drone weight is greater than total package weight\n        }\n        \n        if (totalWeight > w) {\n            return false; // Total package weight is greater than drone weight capacity\n        }\n        \n        return true; // Drone will fly\n    }\n}\n"}
{"task_id": "Java/73", "generation": "        Collections.sort(arr);\n        int currentSum = 0;\n\n        for (int num : arr) {\n            if (currentSum + 1 < num) {\n                return currentSum + 1;\n            }\n            currentSum += num;\n        }\n\n        return currentSum + 1;\n    }\n}\n"}
{"task_id": "Java/74", "generation": "        List<String> commonElements = new ArrayList<>();\n        \n        for (String str : lst1) {\n            if (lst2.contains(str)) {\n                commonElements.add(str);\n            }\n        }\n        \n        return commonElements;\n    }\n}\n"}
{"task_id": "Java/75", "generation": "        if (!isPrime(a)) {\n            return false;\n        }\n        \n        for (int i = 2; i <= a; i++) {\n            if (isPrime(i) && isPrime(a / i)) {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int num = 17;\n        System.out.println(solution.isMultiplyPrime(num)); // Output: true\n    }\n}\n"}
{"task_id": "Java/76", "generation": "        if (x <= 0 || n <= 1) {\n            return false;\n        }\n        \n        double root = Math.pow(x, 1.0 / n);\n        \n        return Math.floor(root) == root;\n    }\n}\n"}
{"task_id": "Java/77", "generation": "        double cubeRoot = Math.cbrt(a);\n        int cubeRootInt = (int) cubeRoot;\n        \n        return cubeRootInt * cubeRootInt * cubeRootInt == a;\n    }\n}\n"}
{"task_id": "Java/78", "generation": "        // Convert hexadecimal number to decimal\n        int decimal = Integer.parseInt(num, 16);\n        \n        // Convert decimal number to binary\n        String binary = Integer.toBinaryString(decimal);\n        \n        // Count the number of set bits in the binary representation\n        int count = 0;\n        for (int i = 0; i < binary.length(); i++) {\n            if (binary.charAt(i) == '1') {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/79", "generation": "    if (decimal == 0) {\n        return \"0\";\n    }\n    \n    StringBuilder binary = new StringBuilder();\n    \n    while (decimal > 0) {\n        int remainder = decimal % 2;\n        binary.append(remainder);\n        decimal = decimal / 2;\n    }\n    \n    return binary.reverse().toString();\n}\n\npublic static void main(String[] args) {\n    Solution solution = new Solution();\n    int decimal = 10;\n    String binary = solution.decimalToBinary(decimal);\n    System.out.println(\"Binary representation of \" + decimal + \" is: \" + binary);\n}\n"}
{"task_id": "Java/80", "generation": "        Set<Integer> seen = new HashSet<>();\n        int num = Integer.parseInt(s);\n        \n        while (num != 1 && !seen.contains(num)) {\n            seen.add(num);\n            int sum = 0;\n            char[] digits = String.valueOf(num).toCharArray();\n            for (char digit : digits) {\n                int d = digit - '0';\n                sum += d * d;\n            }\n            num = sum;\n        }\n        \n        return num == 1;\n    }\n}\n"}
{"task_id": "Java/81", "generation": "        List<String> letterGrades = new ArrayList<>();\n        \n        for (Double grade : grades) {\n            if (grade >= 90) {\n                letterGrades.add(\"A\");\n            } else if (grade >= 80) {\n                letterGrades.add(\"B\");\n            } else if (grade >= 70) {\n                letterGrades.add(\"C\");\n            } else if (grade >= 60) {\n                letterGrades.add(\"D\");\n            } else {\n                letterGrades.add(\"F\");\n            }\n        }\n        \n        return letterGrades;\n    }\n}\n"}
{"task_id": "Java/82", "generation": "        int length = string.length();\n        if (length <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String input = \"Hello\";\n        System.out.println(\"Is the length of the string prime? \" + solution.primeLength(input));\n    }\n}\n"}
{"task_id": "Java/83", "generation": "        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            String numStr = String.valueOf(i);\n            if (numStr.charAt(0) == '1' && numStr.charAt(numStr.length() - 1) == '1') {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int n = 100;\n        int result = solution.startsOneEnds(n);\n        System.out.println(\"Number of integers from 1 to \" + n + \" that start and end with 1: \" + result);\n    }\n}\n"}
{"task_id": "Java/84", "generation": "        if (isPrime(N)) {\n            return \"YES\";\n        } else {\n            for (int i = 2; i <= N / 2; i++) {\n                if (isPrime(i) && isPrime(N - i)) {\n                    return \"YES\";\n                }\n            }\n            return \"NO\";\n        }\n    }\n    \n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/85", "generation": "        int sum = 0;\n        for (int num : lst) {\n            sum += num;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = new ArrayList<>();\n        numbers.add(1);\n        numbers.add(2);\n        numbers.add(3);\n        \n        Solution solution = new Solution();\n        int result = solution.add(numbers);\n        System.out.println(\"Sum of numbers: \" + result);\n    }\n}\n"}
{"task_id": "Java/86", "generation": "        char[] chars = s.toCharArray();\n        int mid = chars.length / 2;\n        \n        // Split the input string into two halves\n        char[] firstHalf = Arrays.copyOfRange(chars, 0, mid);\n        char[] secondHalf = Arrays.copyOfRange(chars, mid, chars.length);\n        \n        // Sort each half separately\n        Arrays.sort(firstHalf);\n        Arrays.sort(secondHalf);\n        \n        // Merge the sorted halves back together\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < mid; i++) {\n            sb.append(firstHalf[i]);\n            sb.append(secondHalf[i]);\n        }\n        \n        // If the second half is longer, append the remaining character\n        if (secondHalf.length > firstHalf.length) {\n            sb.append(secondHalf[secondHalf.length - 1]);\n        }\n        \n        return sb.toString();\n    }\n}\n"}
{"task_id": "Java/87", "generation": "       List<Integer> result = new ArrayList<>();\n        \n        if (x >= 0 && x < lst.size()) {\n            result = lst.get(x);\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/88", "generation": "        Collections.sort(array);\n        return array;\n    }\n}\n"}
{"task_id": "Java/89", "generation": "        // Step 1: Convert the string to lowercase\n        s = s.toLowerCase();\n        \n        // Step 2: Remove all non-alphabetic characters\n        s = s.replaceAll(\"[^a-z]\", \"\");\n        \n        // Step 3: Replace each letter with its corresponding number in the alphabet\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            int num = c - 'a' + 1;\n            sb.append(num);\n        }\n        \n        // Step 4: Reverse the resulting string\n        return sb.reverse().toString();\n    }\n}\n"}
{"task_id": "Java/90", "generation": "        int n = lst.size();\n        int i = -1;\n        \n        // Find the index of the first element that is smaller than the element immediately after it\n        for (int j = 0; j < n - 1; j++) {\n            if (lst.get(j) < lst.get(j + 1)) {\n                i = j;\n                break;\n            }\n        }\n        \n        if (i == -1) {\n            // No next smallest element exists\n            return Optional.empty();\n        }\n        \n        int j = i + 1;\n        for (int k = j + 1; k < n; k++) {\n            if (lst.get(k) > lst.get(i) && lst.get(k) < lst.get(j)) {\n                j = k;\n            }\n        }\n        \n        // Swap elements at index i and index j\n        Collections.swap(lst, i, j);\n        \n        // Sort the sublist starting from index i+1 to the end of the list\n        Collections.sort(lst.subList(i + 1, n));\n        \n        return Optional.of(lst.get(i));\n    }\n}\n"}
{"task_id": "Java/91", "generation": "        if (S == null || S.isEmpty()) {\n            return -1; // Invalid input\n        }\n        \n        char prevChar = S.charAt(0);\n        for (int i = 1; i < S.length(); i++) {\n            char currentChar = S.charAt(i);\n            if (currentChar == prevChar) {\n                return 1; // Bored\n            }\n            prevChar = currentChar;\n        }\n        \n        return 0; // Not bored\n    }\n}\n"}
{"task_id": "Java/92", "generation": "        if (!(x instanceof Integer) || !(y instanceof Integer) || !(z instanceof Integer)) {\n            return false;\n        }\n        \n        int intX = (int) x;\n        int intY = (int) y;\n        int intZ = (int) z;\n        \n        return intX != 0 || intY != 0 || intZ != 0;\n    }\n}\n"}
{"task_id": "Java/93", "generation": "        int n = message.length();\n        String[][] dp = new String[n][n];\n        \n        for (int len = 1; len <= n; len++) {\n            for (int i = 0; i < n - len + 1; i++) {\n                int j = i + len - 1;\n                dp[i][j] = message.substring(i, j + 1);\n                String sub = message.substring(i, j + 1);\n                \n                // Check if the substring repeats\n                int repeatIndex = (sub + sub).indexOf(sub, 1);\n                if (repeatIndex < sub.length()) {\n                    String encoded = sub.length() / repeatIndex + \"[\" + dp[i][i + repeatIndex - 1] + \"]\";\n                    if (encoded.length() < dp[i][j].length()) {\n                        dp[i][j] = encoded;\n                    }\n                }\n                \n                // Check for optimal encoding by splitting the substring\n                for (int k = i; k < j; k++) {\n                    if (dp[i][k].length() + dp[k + 1][j].length() < dp[i][j].length()) {\n                        dp[i][j] = dp[i][k] + dp[k + 1][j];\n                    }\n                }\n            }\n        }\n        \n        return dp[0][n - 1];\n    }\n}\n"}
{"task_id": "Java/94", "generation": "        int sum = 0;\n        for (int num : lst) {\n            sum += num;\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/95", "generation": "        if (dict == null) {\n            return false;\n        }\n        \n        for (Map.Entry<Object, Object> entry : dict.entrySet()) {\n            if (!(entry.getKey() instanceof String)) {\n                return false;\n            }\n            \n            if (!(entry.getValue() instanceof String)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/96", "generation": "List<Integer> countUpTo(int n) {\n    List<Integer> result = new ArrayList<>();\n    for (int i = 1; i <= n; i++) {\n        result.add(i);\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    Solution solution = new Solution();\n    int n = 5;\n    List<Integer> numbers = solution.countUpTo(n);\n    System.out.println(\"Numbers up to \" + n + \": \" + numbers);\n}\n"}
{"task_id": "Java/97", "generation": "        if (a == 0 || b == 0) {\n            return 0;\n        }\n        \n        int sign = (a < 0 ^ b < 0) ? -1 : 1;\n        a = Math.abs(a);\n        b = Math.abs(b);\n        \n        int result = 0;\n        while (b > 0) {\n            if ((b & 1) == 1) {\n                result += a;\n            }\n            a <<= 1;\n            b >>= 1;\n        }\n        \n        return sign * result;\n    }\n}\n"}
{"task_id": "Java/98", "generation": "        int count = 0;\n        \n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/99", "generation": "        int count = 0;\n        \n        for (int i = 0; i < value.length(); i++) {\n            char c = value.charAt(i);\n            if (Character.isUpperCase(c)) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/100", "generation": "        List<Integer> pile = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            pile.add(i);\n        }\n        return pile;\n    }\n}\n"}
{"task_id": "Java/101", "generation": "        List<String> wordList = new ArrayList<>();\n        \n        // Split the input string into words based on spaces\n        String[] words = s.split(\" \");\n        \n        // Convert each word to lowercase and add it to the list\n        for (String word : words) {\n            wordList.add(word.toLowerCase());\n        }\n        \n        return wordList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String input = \"Hello World Java Programming\";\n        List<String> wordStrings = solution.wordStrings(input);\n        \n        System.out.println(\"Lowercase words:\");\n        for (String word : wordStrings) {\n            System.out.println(word);\n        }\n    }\n}\n"}
{"task_id": "Java/102", "generation": "        // Your code here\n    }\n}\n"}
{"task_id": "Java/103", "generation": "double avg = (n + m) / 2.0;\nint roundedAvg = (int) Math.round(avg);\nreturn roundedAvg;\n}\n"}
{"task_id": "Java/104", "generation": "        Set<Integer> uniqueDigitsSet = new HashSet<>();\n        \n        for (int num : x) {\n            String numStr = String.valueOf(num);\n            for (int i = 0; i < numStr.length(); i++) {\n                uniqueDigitsSet.add(Character.getNumericValue(numStr.charAt(i)));\n            }\n        }\n        \n        List<Integer> uniqueDigitsList = new ArrayList<>(uniqueDigitsSet);\n        return uniqueDigitsList;\n    }\n}\n"}
{"task_id": "Java/105", "generation": "        Map<Integer, List<String>> map = new HashMap<>();\n        \n        for (Integer num : arr) {\n            int length = String.valueOf(num).length();\n            String strNum = String.valueOf(num);\n            \n            if (!map.containsKey(length)) {\n                map.put(length, new ArrayList<>());\n            }\n            \n            map.get(length).add(strNum);\n        }\n        \n        List<String> result = new ArrayList<>();\n        \n        map.entrySet().stream()\n            .sorted(Map.Entry.comparingByKey())\n            .forEach(entry -> result.addAll(entry.getValue()));\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/106", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i <= n; i++) {\n            if (i % 3 == 0) {\n                result.add(3);\n            }\n            if (i % 5 == 0) {\n                result.add(5);\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> output = solution.f(15);\n        System.out.println(output);\n    }\n}\n"}
{"task_id": "Java/107", "generation": "        List<Integer> evenPalindromes = new ArrayList<>();\n        List<Integer> oddPalindromes = new ArrayList<>();\n        \n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenPalindromes.add(i);\n                } else {\n                    oddPalindromes.add(i);\n                }\n            }\n        }\n        \n        List<Integer> result = new ArrayList<>();\n        result.addAll(evenPalindromes);\n        result.addAll(oddPalindromes);\n        \n        return result;\n    }\n\n    public boolean isPalindrome(int num) {\n        String str = String.valueOf(num);\n        int left = 0;\n        int right = str.length() - 1;\n        \n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/108", "generation": "        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        \n        for (int num : arr) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n        \n        return frequencyMap.size();\n    }\n}\n"}
{"task_id": "Java/109", "generation": "        if (arr.size() != 2) {\n            return false;\n        }\n        \n        int diff = Math.abs(arr.get(0) - arr.get(1));\n        \n        if (diff % 2 == 0 && diff >= 2) {\n            return true;\n        }\n        \n        return false;\n    }\n}\n"}
{"task_id": "Java/110", "generation": "        List<Integer> combinedList = new ArrayList<>();\n        \n        // Add elements from lst1 to combinedList\n        for (Integer num : lst1) {\n            combinedList.add(num);\n        }\n        \n        // Add elements from lst2 to combinedList\n        for (Integer num : lst2) {\n            combinedList.add(num);\n        }\n        \n        // Convert combinedList to a string\n        StringBuilder sb = new StringBuilder();\n        for (Integer num : combinedList) {\n            sb.append(num).append(\" \");\n        }\n        \n        return sb.toString().trim();\n    }\n\n    public static void main(String[] args) {\n        List<Integer> lst1 = Arrays.asList(1, 2, 3);\n        List<Integer> lst2 = Arrays.asList(4, 5, 6);\n        \n        Solution solution = new Solution();\n        String result = solution.exchange(lst1, lst2);\n        \n        System.out.println(\"Combined List: \" + result);\n    }\n}\n"}
{"task_id": "Java/111", "generation": "        Map<String, Integer> histogramMap = new HashMap<>();\n        \n        for (int i = 0; i < test.length(); i++) {\n            String character = String.valueOf(test.charAt(i));\n            histogramMap.put(character, histogramMap.getOrDefault(character, 0) + 1);\n        }\n        \n        return histogramMap;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String test = \"hello\";\n        Map<String, Integer> histogramData = solution.histogram(test);\n        \n        for (Map.Entry<String, Integer> entry : histogramData.entrySet()) {\n            System.out.println(entry.getKey() + \": \" + entry.getValue());\n        }\n    }\n}\n"}
{"task_id": "Java/112", "generation": "        char[] sArray = s.toCharArray();\n        char[] cArray = c.toCharArray();\n        \n        Stack<Character> stack = new Stack<>();\n        \n        for (char ch : sArray) {\n            if (ch != cArray[0]) {\n                stack.push(ch);\n            }\n        }\n        \n        List<Object> result = new ArrayList<>();\n        \n        while (!stack.isEmpty()) {\n            result.add(stack.pop());\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/113", "generation": "        List<String> oddLengthStrings = new ArrayList<>();\n        \n        for (String str : lst) {\n            if (str.length() % 2 != 0) {\n                oddLengthStrings.add(str);\n            }\n        }\n        \n        return oddLengthStrings;\n    }\n}\n"}
{"task_id": "Java/114", "generation": "        int minSum = Integer.MAX_VALUE;\n        int currentSum = 0;\n        int start = 0;\n        \n        for (int end = 0; end < nums.size(); end++) {\n            currentSum += nums.get(end);\n            \n            while (currentSum >= 0) {\n                minSum = Math.min(minSum, currentSum);\n                currentSum -= nums.get(start);\n                start++;\n            }\n        }\n        \n        return minSum == Integer.MAX_VALUE ? 0 : minSum;\n    }\n}\n"}
{"task_id": "Java/115", "generation": "        if (grid == null || grid.size() == 0 || grid.get(0).size() == 0) {\n            return 0;\n        }\n        \n        int maxFilled = 0;\n        \n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(0).size(); j++) {\n                if (grid.get(i).get(j) == 0 && capacity > 0) {\n                    maxFilled = Math.max(maxFilled, fill(grid, i, j, capacity));\n                }\n            }\n        }\n        \n        return maxFilled;\n    }\n\n    private int fill(List<List<Integer>> grid, int i, int j, int capacity) {\n        if (i < 0 || i >= grid.size() || j < 0 || j >= grid.get(0).size() || grid.get(i).get(j) == 1 || capacity == 0) {\n            return 0;\n        }\n        \n        grid.get(i).set(j, 1);\n        int filled = 1;\n        \n        filled += fill(grid, i + 1, j, capacity - 1);\n        filled += fill(grid, i - 1, j, capacity - 1);\n        filled += fill(grid, i, j + 1, capacity - 1);\n        filled += fill(grid, i, j - 1, capacity - 1);\n        \n        return filled;\n    }\n}\n"}
{"task_id": "Java/116", "generation": "        // Convert List to array\n        Integer[] array = arr.toArray(new Integer[arr.size()]);\n        \n        // Sort the array\n        Arrays.sort(array);\n        \n        // Convert array back to List\n        List<Integer> sortedList = new ArrayList<>(Arrays.asList(array));\n        \n        return sortedList;\n    }\n}\n"}
{"task_id": "Java/117", "generation": "        List<String> result = new ArrayList<>();\n        \n        // Split the input string into words\n        String[] words = s.split(\" \");\n        \n        // Filter out words with length less than or equal to n\n        for (String word : words) {\n            if (word.length() <= n) {\n                result.add(word);\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/118", "generation": "        List<Character> vowels = Arrays.asList('a', 'e', 'i', 'o', 'u');\n        \n        for (char c : word.toCharArray()) {\n            if (vowels.contains(Character.toLowerCase(c))) {\n                return Character.toString(c);\n            }\n        }\n        \n        return \"\";\n    }\n}\n"}
{"task_id": "Java/119", "generation": "        Stack<Character> stack = new Stack<>();\n        \n        for (String str : lst) {\n            for (char c : str.toCharArray()) {\n                if (c == '(') {\n                    stack.push(c);\n                } else if (c == ')') {\n                    if (stack.isEmpty()) {\n                        return \"NO\";\n                    } else {\n                        stack.pop();\n                    }\n                }\n            }\n        }\n        \n        if (!stack.isEmpty()) {\n            return \"NO\";\n        } else {\n            return \"YES\";\n        }\n    }\n}\n"}
{"task_id": "Java/120", "generation": "        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());\n        \n        for (int num : arr) {\n            pq.offer(num);\n            if (pq.size() > k) {\n                pq.poll();\n            }\n        }\n        \n        List<Integer> result = new ArrayList<>(pq);\n        return result;\n    }\n}\n"}
{"task_id": "Java/121", "generation": "        Collections.sort(lst);\n        \n        int count = 0;\n        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i).equals(lst.get(i + 1))) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/122", "generation": "        int sum = 0;\n        for (int num : arr) {\n            sum += num;\n        }\n        sum += k;\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> arr = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5));\n        int k = 10;\n        Solution solution = new Solution();\n        int result = solution.addElements(arr, k);\n        System.out.println(\"Sum of elements in the list with k added: \" + result);\n    }\n}\n"}
{"task_id": "Java/123", "generation": "        List<Integer> result = new ArrayList<>();\n        while (n != 1) {\n            if (n % 2 != 0) {\n                result.add(n);\n            }\n            n = (n % 2 == 0) ? n / 2 : 3 * n + 1;\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int n = 27; // Example value of n\n        List<Integer> oddCollatz = solution.getOddCollatz(n);\n        System.out.println(\"Odd numbers in Collatz sequence for n = \" + n + \": \" + oddCollatz);\n    }\n}\n"}
{"task_id": "Java/124", "generation": "        if (date.length() != 10) {\n            return false;\n        }\n        \n        String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n            return false;\n        }\n        \n        int year = Integer.parseInt(parts[0]);\n        int month = Integer.parseInt(parts[1]);\n        int day = Integer.parseInt(parts[2]);\n        \n        if (year < 1000 || year > 9999) {\n            return false;\n        }\n        \n        if (month < 1 || month > 12) {\n            return false;\n        }\n        \n        if (day < 1 || day > 31) {\n            return false;\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/125", "generation": "        String[] words = txt.split(\"\\\\s+\"); // Split text into words based on spaces\n        List<String> cleanedWords = new ArrayList<>();\n        \n        for (String word : words) {\n            String cleanedWord = word.replaceAll(\"[^a-zA-Z]\", \"\"); // Remove non-alphabetic characters\n            cleanedWords.add(cleanedWord);\n        }\n        \n        return cleanedWords;\n    }\n}\n"}
{"task_id": "Java/126", "generation": "        if (lst == null || lst.size() <= 1) {\n            return true;\n        }\n        \n        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i) > lst.get(i + 1)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/127", "generation": "        int start = Math.max(interval1.get(0), interval2.get(0));\n        int end = Math.min(interval1.get(1), interval2.get(1));\n        \n        if (start > end) {\n            return \"\";\n        } else {\n            return \"[\" + start + \", \" + end + \"]\";\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> interval1 = new ArrayList<>(Arrays.asList(1, 5));\n        List<Integer> interval2 = new ArrayList<>(Arrays.asList(3, 7));\n        \n        String result = solution.intersection(interval1, interval2);\n        System.out.println(\"Intersection interval: \" + result);\n    }\n}\n"}
{"task_id": "Java/128", "generation": "        int negCount = 0;\n        \n        for (int num : arr) {\n            if (num < 0) {\n                negCount++;\n            }\n        }\n        \n        if (negCount % 2 == 0) {\n            return Optional.of(1); // Positive sign\n        } else {\n            return Optional.of(-1); // Negative sign\n        }\n    }\n\n    public static void main(String[] args) {\n        List<Integer> arr = Arrays.asList(-2, 3, -4, 5);\n        Solution solution = new Solution();\n        Optional<Integer> result = solution.prodSigns(arr);\n        if (result.isPresent()) {\n            System.out.println(\"Product of signs: \" + result.get());\n        } else {\n            System.out.println(\"List is empty\");\n        }\n    }\n}\n"}
{"task_id": "Java/129", "generation": "        int m = grid.size();\n        int n = grid.get(0).size();\n        \n        int[][] minCost = new int[m][n];\n        for (int[] row : minCost) {\n            Arrays.fill(row, Integer.MAX_VALUE);\n        }\n        \n        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[2] - b[2]);\n        pq.offer(new int[]{0, 0, 0});\n        \n        int[][] dirs = {{0, 1}, {1, 0}};\n        \n        while (!pq.isEmpty()) {\n            int[] curr = pq.poll();\n            int row = curr[0];\n            int col = curr[1];\n            int cost = curr[2];\n            \n            if (row == m - 1 && col == n - 1) {\n                return Arrays.asList(cost);\n            }\n            \n            for (int[] dir : dirs) {\n                int newRow = row + dir[0];\n                int newCol = col + dir[1];\n                \n                if (newRow < 0 || newRow >= m || newCol < 0 || newCol >= n) {\n                    continue;\n                }\n                \n                int newCost = cost + grid.get(newRow).get(newCol);\n                \n                if (newCost < minCost[newRow][newCol] && newCost <= k) {\n                    minCost[newRow][newCol] = newCost;\n                    pq.offer(new int[]{newRow, newCol, newCost});\n                }\n            }\n        }\n        \n        return Arrays.asList(-1);\n    }\n}\n"}
{"task_id": "Java/130", "generation": "        List<Integer> triangleNumbers = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            int triangleNumber = i * (i + 1) / 2;\n            triangleNumbers.add(triangleNumber);\n        }\n        return triangleNumbers;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int n = 5;\n        List<Integer> triangleNumbers = solution.tri(n);\n        System.out.println(\"Triangle numbers up to \" + n + \": \" + triangleNumbers);\n    }\n}\n"}
{"task_id": "Java/131", "generation": "        String str = String.valueOf(n);\n        int count = 0;\n        \n        for (int i = 0; i < str.length(); i++) {\n            if (Character.isDigit(str.charAt(i))) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/132", "generation": "        Stack<Character> stack = new Stack<>();\n        \n        for (char c : string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String testString = \"((()))\";\n        System.out.println(solution.isNested(testString)); // Output: true\n    }\n}\n"}
{"task_id": "Java/133", "generation": "        int sum = 0;\n        for (Double num : lst) {\n            sum += Math.pow(num, 2);\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Double> lst = new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0));\n        System.out.println(solution.sumSquares(lst)); // Output: 55\n    }\n}\n"}
{"task_id": "Java/134", "generation": "        if (txt == null || txt.isEmpty()) {\n            return false;\n        }\n        \n        char lastChar = txt.charAt(txt.length() - 1);\n        return Character.isLetter(lastChar);\n    }\n}\n"}
{"task_id": "Java/135", "generation": "        int sum = 0;\n        for (int num : arr) {\n            sum += num;\n        }\n\n        if (sum % 2 != 0) {\n            return 0; // Sum is not divisible by 2, cannot arrange elements in pairs\n        }\n\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int num : arr) {\n            int remainder = num % (sum / 2);\n            map.put(remainder, map.getOrDefault(remainder, 0) + 1);\n        }\n\n        for (int num : arr) {\n            int remainder = num % (sum / 2);\n            if (remainder == 0) {\n                if (map.get(0) % 2 != 0) {\n                    return 0; // Cannot form pairs for elements with remainder 0\n                }\n            } else if (map.get(remainder) != map.get(sum / 2 - remainder)) {\n                return 0; // Cannot form pairs for elements with different remainders\n            }\n        }\n\n        return 1; // All elements can be arranged in pairs\n    }\n}\n"}
{"task_id": "Java/136", "generation": "        List<Optional<Integer>> result = new ArrayList<>();\n        if(lst.isEmpty()){\n            return result;\n        }\n        \n        Integer largest = null;\n        Integer smallest = null;\n        \n        for(Integer num : lst){\n            if(largest == null || num > largest){\n                largest = num;\n            }\n            if(smallest == null || num < smallest){\n                smallest = num;\n            }\n        }\n        \n        result.add(Optional.ofNullable(largest));\n        result.add(Optional.ofNullable(smallest));\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/137", "generation": "        if (a.getClass() != b.getClass()) {\n            return Optional.empty();\n        }\n\n        if (a instanceof Integer) {\n            return Optional.of(((Integer) a).compareTo((Integer) b));\n        } else if (a instanceof String) {\n            return Optional.of(((String) a).compareTo((String) b));\n        } else if (a instanceof Double) {\n            return Optional.of(((Double) a).compareTo((Double) b));\n        } else {\n            // Handle other types as needed\n            return Optional.empty();\n        }\n    }\n}\n"}
{"task_id": "Java/138", "generation": "        int sum = 0;\n        int num = n;\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                sum += digit;\n            }\n            num /= 10;\n        }\n        \n        return sum == n;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        int n = scanner.nextInt();\n        boolean result = solution.isEqualToSumEven(n);\n        if (result) {\n            System.out.println(\"The sum of even digits is equal to the number.\");\n        } else {\n            System.out.println(\"The sum of even digits is not equal to the number.\");\n        }\n    }\n}\n"}
{"task_id": "Java/139", "generation": "    long factorial = 1;\n    long specialFactorial = 1;\n    \n    for (int i = 1; i <= n; i++) {\n        factorial *= i;\n        if (i % 2 != 0) {\n            specialFactorial *= i;\n        }\n    }\n    \n    return specialFactorial;\n}\n\npublic static void main(String[] args) {\n    Solution solution = new Solution();\n    int n = 5; // Example value of n\n    long result = solution.specialFactorial(n);\n    System.out.println(\"Special Factorial of \" + n + \" is: \" + result);\n}\n"}
{"task_id": "Java/140", "generation": "        // Remove leading and trailing spaces\n        text = text.trim();\n        \n        // Replace multiple spaces between words with a single space\n        text = text.replaceAll(\"\\\\s+\", \" \");\n        \n        // Remove any extra spaces at the beginning or end of the text\n        text = text.trim();\n        \n        return text;\n    }\n}\n"}
{"task_id": "Java/141", "generation": "        if (file_name == null || file_name.isEmpty()) {\n            return \"File name cannot be null or empty\";\n        }\n\n        if (!file_name.matches(\"[a-zA-Z0-9_.]+\")) {\n            return \"File name can only contain alphanumeric characters, underscores, and periods\";\n        }\n\n        if (file_name.startsWith(\".\") || file_name.endsWith(\".\")) {\n            return \"File name cannot start or end with a period\";\n        }\n\n        if (file_name.contains(\"..\")) {\n            return \"File name cannot contain consecutive periods\";\n        }\n\n        if (file_name.length() > 255) {\n            return \"File name cannot exceed 255 characters\";\n        }\n\n        return \"File name is valid\";\n    }\n}\n"}
{"task_id": "Java/142", "generation": "        int sum = 0;\n        for (int num : lst) {\n            sum += num * num;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5));\n        Solution solution = new Solution();\n        int result = solution.sumSquares(numbers);\n        System.out.println(\"Sum of squares: \" + result);\n    }\n}\n"}
{"task_id": "Java/143", "generation": "    // Split the sentence into words\n    String[] words = sentence.split(\" \");\n    \n    // Count the number of words\n    int wordCount = words.length;\n    \n    // Return the number of words as a string\n    return \"Number of words in the sentence: \" + wordCount;\n}\n\npublic static void main(String[] args) {\n    Solution solution = new Solution();\n    String sentence = \"This is a sample sentence\";\n    System.out.println(solution.wordsInSentence(sentence));\n}\n"}
{"task_id": "Java/144", "generation": "        try {\n            int numerator = Integer.parseInt(x);\n            int denominator = Integer.parseInt(n);\n\n            int gcd = findGCD(numerator, denominator);\n\n            numerator /= gcd;\n            denominator /= gcd;\n\n            return numerator == 1 && denominator == 2;\n        } catch (NumberFormatException e) {\n            return false;\n        }\n    }\n\n    private int findGCD(int a, int b) {\n        if (b == 0) {\n            return a;\n        }\n        return findGCD(b, a % b);\n    }\n}\n"}
{"task_id": "Java/145", "generation": "        Map<Integer, Integer> map = new HashMap<>();\n        for (int num : nums) {\n            int points = getPoints(num);\n            map.put(points, num);\n        }\n        \n        List<Integer> result = new ArrayList<>();\n        List<Integer> sortedPoints = new ArrayList<>(map.keySet());\n        Collections.sort(sortedPoints, Collections.reverseOrder());\n        \n        for (int points : sortedPoints) {\n            result.add(map.get(points));\n        }\n        \n        return result;\n    }\n\n    private int getPoints(int num) {\n        // Implement your logic to calculate points for a number\n        return num; // For now, just return the number itself as points\n    }\n}\n"}
{"task_id": "Java/146", "generation": "        int sum = 0;\n        for (int num : nums) {\n            if (num % 2 == 0) {\n                sum += num;\n            }\n        }\n        return sum;\n    }\n}\n"}
{"task_id": "Java/147", "generation": "        int maxTriple = (int) Math.floor(Math.cbrt(n));\n        return maxTriple;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.getMaxTriples(10)); // Output: 2\n        System.out.println(solution.getMaxTriples(20)); // Output: 2\n        System.out.println(solution.getMaxTriples(30)); // Output: 3\n    }\n}\n"}
{"task_id": "Java/148", "generation": "        Map<String, String> parent = new HashMap<>();\n        Queue<String> queue = new LinkedList<>();\n        Set<String> visited = new HashSet<>();\n        \n        queue.offer(planet1);\n        visited.add(planet1);\n        \n        while (!queue.isEmpty()) {\n            String current = queue.poll();\n            \n            if (current.equals(planet2)) {\n                break;\n            }\n            \n            List<String> neighbors = getNeighbors(current);\n            for (String neighbor : neighbors) {\n                if (!visited.contains(neighbor)) {\n                    queue.offer(neighbor);\n                    visited.add(neighbor);\n                    parent.put(neighbor, current);\n                }\n            }\n        }\n        \n        List<String> path = new ArrayList<>();\n        String current = planet2;\n        while (current != null) {\n            path.add(0, current);\n            current = parent.get(current);\n        }\n        \n        return path;\n    }\n\n    private List<String> getNeighbors(String planet) {\n        Map<String, List<String>> planetNeighbors = new HashMap<>();\n        planetNeighbors.put(\"Earth\", Arrays.asList(\"Mars\", \"Venus\"));\n        planetNeighbors.put(\"Mars\", Arrays.asList(\"Earth\", \"Jupiter\"));\n        planetNeighbors.put(\"Venus\", Arrays.asList(\"Earth\", \"Mercury\"));\n        planetNeighbors.put(\"Jupiter\", Arrays.asList(\"Mars\", \"Saturn\"));\n        planetNeighbors.put(\"Mercury\", Arrays.asList(\"Venus\"));\n        planetNeighbors.put(\"Saturn\", Arrays.asList(\"Jupiter\"));\n\n        return planetNeighbors.get(planet);\n    }\n}\n"}
{"task_id": "Java/149", "generation": "        List<String> sortedList = new ArrayList<>(lst);\n        Collections.sort(sortedList);\n        return sortedList;\n    }\n}\n"}
{"task_id": "Java/150", "generation": "        int result = 0;\n        \n        // Find the binary representation of x and y\n        String binaryX = String.format(\"%\" + n + \"s\", Integer.toBinaryString(x)).replace(' ', '0');\n        String binaryY = String.format(\"%\" + n + \"s\", Integer.toBinaryString(y)).replace(' ', '0');\n        \n        // Set all the bits after the longest common prefix to 1\n        for (int i = 0; i < n; i++) {\n            if (binaryX.charAt(i) == binaryY.charAt(i)) {\n                result = result << 1;\n                result = result | (binaryX.charAt(i) - '0');\n            } else {\n                result = result << (n - i);\n                break;\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/151", "generation": "        List<Integer> integers = new ArrayList<>();\n        \n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                integers.add((Integer) obj);\n            }\n        }\n        \n        if (integers.size() < 2) {\n            return 0; // Not enough integers in the list\n        }\n        \n        Collections.sort(integers);\n        \n        int largest = integers.get(integers.size() - 1);\n        int secondLargest = integers.get(integers.size() - 2);\n        \n        int difference = largest - secondLargest;\n        \n        return 2 * difference;\n    }\n}\n"}
{"task_id": "Java/152", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 0; i < game.size(); i++) {\n            if (game.get(i).equals(guess.get(i))) {\n                result.add(1);\n            } else {\n                result.add(0);\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> game = Arrays.asList(1, 2, 3, 4, 5);\n        List<Integer> guess = Arrays.asList(1, 2, 5, 4, 5);\n        \n        List<Integer> result = solution.compare(game, guess);\n        \n        System.out.println(\"Comparison result: \" + result);\n    }\n}\n"}
{"task_id": "Java/153", "generation": "        String strongestExtension = \"\";\n        int maxLength = 0;\n\n        for (String extension : extensions) {\n            int commonPrefixLength = 0;\n            int minLength = Math.min(class_name.length(), extension.length());\n            \n            for (int i = 0; i < minLength; i++) {\n                if (class_name.charAt(i) == extension.charAt(i)) {\n                    commonPrefixLength++;\n                } else {\n                    break;\n                }\n            }\n            \n            if (commonPrefixLength > maxLength || (commonPrefixLength == maxLength && extensions.indexOf(extension) < extensions.indexOf(strongestExtension))) {\n                maxLength = commonPrefixLength;\n                strongestExtension = extension;\n            }\n        }\n\n        return strongestExtension;\n    }\n}\n"}
{"task_id": "Java/154", "generation": "        if (a.length() != b.length()) {\n            return false;\n        }\n        \n        String concatenated = a + a;\n        \n        return concatenated.contains(b);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        String a = \"abc\";\n        String b = \"cab\";\n        \n        boolean result = solution.cycpatternCheck(a, b);\n        \n        if (result) {\n            System.out.println(\"Strings can form a cyclic pattern.\");\n        } else {\n            System.out.println(\"Strings cannot form a cyclic pattern.\");\n        }\n    }\n}\n"}
{"task_id": "Java/155", "generation": "        List<Integer> counts = new ArrayList<>();\n        int evenCount = 0;\n        int oddCount = 0;\n        \n        String numStr = String.valueOf(num);\n        \n        for (int i = 0; i < numStr.length(); i++) {\n            int digit = Character.getNumericValue(numStr.charAt(i));\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n        \n        counts.add(evenCount);\n        counts.add(oddCount);\n        \n        return counts;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int num = 123456789;\n        List<Integer> counts = solution.evenOddCount(num);\n        System.out.println(\"Even Count: \" + counts.get(0));\n        System.out.println(\"Odd Count: \" + counts.get(1));\n    }\n}\n"}
{"task_id": "Java/156", "generation": "        if (number < 1 || number > 3999) {\n            return \"Invalid number\";\n        }\n\n        String[] romanSymbols = {\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"};\n        int[] values = {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n\n        StringBuilder sb = new StringBuilder();\n        int i = values.length - 1;\n\n        while (number > 0) {\n            if (number >= values[i]) {\n                sb.append(romanSymbols[i]);\n                number -= values[i];\n            } else {\n                i--;\n            }\n        }\n\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.intToMiniRoman(354)); // Output: CCCLIV\n    }\n}\n"}
{"task_id": "Java/157", "generation": "        if (a + b <= c || b + c <= a || a + c <= b) {\n            return false; // Not a triangle\n        }\n        \n        if (a * a + b * b == c * c || b * b + c * c == a * a || a * a + c * c == b * b) {\n            return true; // Right-angled triangle\n        } else {\n            return false; // Not a right-angled triangle\n        }\n    }\n}\n"}
{"task_id": "Java/158", "generation": "        String maxWord = \"\";\n        \n        for (String word : words) {\n            if (word.compareTo(maxWord) > 0) {\n                maxWord = word;\n            }\n        }\n        \n        return maxWord;\n    }\n}\n"}
{"task_id": "Java/159", "generation": "        List<Integer> eatenCandies = new ArrayList<>();\n        \n        if (remaining >= need) {\n            for (int i = 0; i < need; i++) {\n                eatenCandies.add(number);\n                remaining -= number;\n            }\n        } else {\n            for (int i = 0; i < remaining; i++) {\n                eatenCandies.add(number);\n                remaining -= number;\n            }\n        }\n        \n        return eatenCandies;\n    }\n}\n"}
{"task_id": "Java/160", "generation": "        int result = operand.get(0);\n        int index = 1;\n\n        for (String op : operator) {\n            int nextOperand = operand.get(index);\n            switch (op) {\n                case \"+\":\n                    result += nextOperand;\n                    break;\n                case \"-\":\n                    result -= nextOperand;\n                    break;\n                case \"*\":\n                    result *= nextOperand;\n                    break;\n                case \"/\":\n                    result /= nextOperand;\n                    break;\n                default:\n                    System.out.println(\"Invalid operator: \" + op);\n                    break;\n            }\n            index++;\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<String> operator = new ArrayList<>(Arrays.asList(\"+\", \"*\", \"-\"));\n        List<Integer> operand = new ArrayList<>(Arrays.asList(5, 3, 2, 4));\n        int result = solution.doAlgebra(operator, operand);\n        System.out.println(\"Result: \" + result);\n    }\n}\n"}
{"task_id": "Java/161", "generation": "        // Split the input string into words\n        String[] words = s.split(\" \");\n        \n        // Reverse each word\n        for (int i = 0; i < words.length; i++) {\n            words[i] = new StringBuilder(words[i]).reverse().toString();\n        }\n        \n        // Join the reversed words back together\n        StringBuilder reversedString = new StringBuilder();\n        for (String word : words) {\n            reversedString.append(word).append(\" \");\n        }\n        \n        // Remove the extra space at the end and return the reversed string\n        return reversedString.toString().trim();\n    }\n}\n"}
{"task_id": "Java/162", "generation": "        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String md5Hash = bigInt.toString(16);\n        return Optional.of(md5Hash);\n    }\n}\n"}
{"task_id": "Java/163", "generation": "        List<Integer> generatedIntegers = new ArrayList<>();\n        \n        for (int i = a; i <= b; i++) {\n            generatedIntegers.add(i);\n        }\n        \n        return generatedIntegers;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int a = 1;\n        int b = 10;\n        List<Integer> generatedIntegers = solution.generateIntegers(a, b);\n        \n        System.out.println(\"Generated Integers between \" + a + \" and \" + b + \": \" + generatedIntegers);\n    }\n}\n"}
