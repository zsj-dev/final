{"task_id": "Java/0", "generation": "    Collections.sort(numbers);\n    for (int i = 0; i < numbers.size() - 1; i++) {\n        if (Math.abs(numbers.get(i) - numbers.get(i + 1)) < threshold) {\n            return true;\n        }\n    }\n    return false;\n}\n"}
{"task_id": "Java/1", "generation": "    List<String> result = new ArrayList<>();\n    \n    StringBuilder currentGroup = new StringBuilder();\n    int openCount = 0;\n    \n    for (char c : paren_string.toCharArray()) {\n        if (c == '(') {\n            openCount++;\n        } else if (c == ')') {\n            openCount--;\n        }\n        \n        currentGroup.append(c);\n        \n        if (openCount == 0) {\n            result.add(currentGroup.toString());\n            currentGroup = new StringBuilder();\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "Java/2", "generation": "    int integerPart = (int) number;\n    double decimalPart = number - integerPart;\n    return decimalPart;\n}\n"}
{"task_id": "Java/3", "generation": "    int balance = 0;\n    for (int operation : operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n\npublic static void main(String[] args) {\n    Solution solution = new Solution();\n    System.out.println(solution.belowZero(Arrays.asList(1, 2, 3))); // false\n    System.out.println(solution.belowZero(Arrays.asList(1, 2, -4, 5))); // true\n}\n"}
{"task_id": "Java/4", "generation": "        // Calculate the mean of the dataset\n        double sum = 0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n\n        // Calculate the absolute differences and sum them up\n        double absDiffSum = 0;\n        for (double num : numbers) {\n            absDiffSum += Math.abs(num - mean);\n        }\n\n        // Calculate the mean absolute deviation\n        double mad = absDiffSum / numbers.size();\n\n        return mad;\n    }\n}\n"}
{"task_id": "Java/5", "generation": "    List<Integer> interspersedList = new ArrayList<>();\n    \n    for (int i = 0; i < numbers.size(); i++) {\n        interspersedList.add(numbers.get(i));\n        if (i < numbers.size() - 1) {\n            interspersedList.add(delimiter);\n        }\n    }\n    \n    return interspersedList;\n}\n"}
{"task_id": "Java/6", "generation": "        List<Integer> result = new ArrayList<>();\n        String[] groups = paren_string.split(\" \");\n        \n        for (String group : groups) {\n            int maxNestingLevel = 0;\n            int currentNestingLevel = 0;\n            \n            for (char c : group.toCharArray()) {\n                if (c == '(') {\n                    currentNestingLevel++;\n                    maxNestingLevel = Math.max(maxNestingLevel, currentNestingLevel);\n                } else if (c == ')') {\n                    currentNestingLevel--;\n                }\n            }\n            \n            result.add(maxNestingLevel);\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> result = solution.parseNestedParens(\"(()()) ((())) () ((())()())\");\n        System.out.println(result);\n    }\n}\n"}
{"task_id": "Java/7", "generation": "    List<String> filteredStrings = new ArrayList<>();\n    \n    for (String str : strings) {\n        if (str.contains(substring)) {\n            filteredStrings.add(str);\n        }\n    }\n    \n    return filteredStrings;\n}\n"}
{"task_id": "Java/8", "generation": "        int sum = 0;\n        int product = 1;\n        \n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n        \n        return Arrays.asList(sum, product);\n    }\n}\n"}
{"task_id": "Java/9", "generation": "        List<Integer> rollingMaxList = new ArrayList<>();\n        Deque<Integer> deque = new LinkedList<>();\n        \n        for (int i = 0; i < numbers.size(); i++) {\n            while (!deque.isEmpty() && numbers.get(i) > deque.peekLast()) {\n                deque.pollLast();\n            }\n            deque.offerLast(numbers.get(i));\n            rollingMaxList.add(deque.peekFirst());\n            if (i >= 3 && numbers.get(i - 3) == deque.peekFirst()) {\n                deque.pollFirst();\n            }\n        }\n        \n        return rollingMaxList;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 2, 3, 4, 2);\n        List<Integer> rollingMaxList = solution.rollingMax(numbers);\n        System.out.println(rollingMaxList);\n    }\n}\n"}
{"task_id": "Java/10", "generation": "    if (string == null || string.isEmpty()) {\n        return \"\";\n    }\n    \n    int i = string.length() - 1;\n    while (i >= 0 && !isPalindrome(string.substring(i))) {\n        i--;\n    }\n    \n    StringBuilder palindrome = new StringBuilder(string);\n    for (int j = i - 1; j >= 0; j--) {\n        palindrome.append(string.charAt(j));\n    }\n    \n    return palindrome.toString();\n}\n"}
{"task_id": "Java/11", "generation": "    char[] arrA = a.toCharArray();\n    char[] arrB = b.toCharArray();\n    \n    StringBuilder result = new StringBuilder();\n    \n    for (int i = 0; i < arrA.length; i++) {\n        if (arrA[i] != arrB[i]) {\n            result.append(\"1\");\n        } else {\n            result.append(\"0\");\n        }\n    }\n    \n    return result.toString();\n}\n\npublic static void main(String[] args) {\n    Solution solution = new Solution();\n    String a = \"010\";\n    String b = \"110\";\n    System.out.println(solution.stringXor(a, b)); // Output: \"100\"\n}\n"}
{"task_id": "Java/12", "generation": "    if (strings.isEmpty()) {\n        return Optional.empty();\n    }\n\n    String longestString = strings.get(0);\n    for (String str : strings) {\n        if (str.length() > longestString.length()) {\n            longestString = str;\n        }\n    }\n\n    return Optional.of(longestString);\n}\n"}
{"task_id": "Java/13", "generation": "        int smaller = Math.min(a, b);\n        int gcd = 1;\n        \n        for (int i = 1; i <= smaller; i++) {\n            if (a % i == 0 && b % i == 0) {\n                gcd = i;\n            }\n        }\n        \n        return gcd;\n    }\n}\n"}
{"task_id": "Java/14", "generation": "    List<String> prefixes = new ArrayList<>();\n    \n    for (int i = 0; i < string.length(); i++) {\n        prefixes.add(string.substring(0, i + 1));\n    }\n    \n    return prefixes;\n}\n\npublic static void main(String[] args) {\n    Solution solution = new Solution();\n    List<String> prefixes = solution.allPrefixes(\"abc\");\n    System.out.println(prefixes);\n}\n"}
{"task_id": "Java/15", "generation": "    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i <= n; i++) {\n        sb.append(i);\n        if (i < n) {\n            sb.append(\" \");\n        }\n    }\n    return sb.toString();\n}\n"}
{"task_id": "Java/16", "generation": "    string = string.toLowerCase();\n    Set<Character> distinctChars = new HashSet<>();\n    \n    for (char c : string.toCharArray()) {\n        distinctChars.add(c);\n    }\n    \n    return distinctChars.size();\n}\n"}
{"task_id": "Java/17", "generation": "    List<Integer> durations = new ArrayList<>();\n    String[] notes = string.split(\" \");\n    \n    for (String note : notes) {\n        if (note.equals(\"o\")) {\n            durations.add(4);\n        } else if (note.equals(\"o|\")) {\n            durations.add(2);\n        } else if (note.equals(\".|\")) {\n            durations.add(1);\n        }\n    }\n    \n    return durations;\n}\n```\n\nYou can test this method with the example provided in the prompt:\n\n```java\npublic static void main(String[] args) {\n    Solution solution = new Solution();\n    List<Integer> durations = solution.parseMusic(\"o o| .| o| o| .| .| .| .| o o\");\n    System.out.println(durations);\n}\n```\n\nThis should output:\n```\n[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n"}
{"task_id": "Java/18", "generation": "    int count = 0;\n    int index = 0;\n    \n    while (index < string.length()) {\n        index = string.indexOf(substring, index);\n        if (index == -1) {\n            break;\n        }\n        count++;\n        index++;\n    }\n    \n    return count;\n}\n"}
{"task_id": "Java/19", "generation": "        String[] numberWords = numbers.split(\" \");\n        \n        Map<String, Integer> numberMap = new HashMap<>();\n        numberMap.put(\"zero\", 0);\n        numberMap.put(\"one\", 1);\n        numberMap.put(\"two\", 2);\n        numberMap.put(\"three\", 3);\n        numberMap.put(\"four\", 4);\n        numberMap.put(\"five\", 5);\n        numberMap.put(\"six\", 6);\n        numberMap.put(\"seven\", 7);\n        numberMap.put(\"eight\", 8);\n        numberMap.put(\"nine\", 9);\n        \n        Arrays.sort(numberWords, Comparator.comparingInt(numberMap::get));\n        \n        return String.join(\" \", numberWords);\n    }\n}\n"}
{"task_id": "Java/20", "generation": "        Collections.sort(numbers);\n        double minDiff = Double.MAX_VALUE;\n        List<Double> closestPair = new ArrayList<>();\n\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = Math.abs(numbers.get(i) - numbers.get(i + 1));\n            if (diff < minDiff) {\n                minDiff = diff;\n                closestPair.clear();\n                closestPair.add(numbers.get(i));\n                closestPair.add(numbers.get(i + 1));\n            }\n        }\n\n        return closestPair;\n    }\n}\n"}
{"task_id": "Java/21", "generation": "    double min = Collections.min(numbers);\n    double max = Collections.max(numbers);\n    double range = max - min;\n    \n    List<Double> scaledNumbers = new ArrayList<>();\n    for (double number : numbers) {\n        double scaledValue = (number - min) / range;\n        scaledNumbers.add(scaledValue);\n    }\n    \n    return scaledNumbers;\n}\n"}
{"task_id": "Java/22", "generation": "    List<Integer> filteredIntegers = new ArrayList<>();\n    \n    for (Object value : values) {\n        if (value instanceof Integer) {\n            filteredIntegers.add((Integer) value);\n        }\n    }\n    \n    return filteredIntegers;\n}\n"}
{"task_id": "Java/23", "generation": "    int length = 0;\n    for (int i = 0; i < string.length(); i++) {\n        length++;\n    }\n    return length;\n}\n"}
{"task_id": "Java/24", "generation": "        int largestDivisor = 1;\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0 && i > largestDivisor) {\n                largestDivisor = i;\n            }\n        }\n        return largestDivisor;\n    }\n}\n"}
{"task_id": "Java/25", "generation": "        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        return factors;\n    }\n}\n"}
{"task_id": "Java/26", "generation": "        List<Integer> uniqueNumbers = new ArrayList<>();\n        Set<Integer> seen = new HashSet<>();\n        \n        for (Integer number : numbers) {\n            if (!seen.contains(number)) {\n                uniqueNumbers.add(number);\n                seen.add(number);\n            }\n        }\n        \n        return uniqueNumbers;\n    }\n}\n"}
{"task_id": "Java/27", "generation": "    StringBuilder result = new StringBuilder();\n    \n    for (char c : string.toCharArray()) {\n        if (Character.isLowerCase(c)) {\n            result.append(Character.toUpperCase(c));\n        } else if (Character.isUpperCase(c)) {\n            result.append(Character.toLowerCase(c));\n        } else {\n            result.append(c);\n        }\n    }\n    \n    return result.toString();\n}\n\npublic static void main(String[] args) {\n    Solution solution = new Solution();\n    String input = \"Hello\";\n    String output = solution.flipCase(input);\n    System.out.println(output); // Output: \"hELLO\"\n}\n"}
{"task_id": "Java/28", "generation": "    StringBuilder result = new StringBuilder();\n    for (String str : strings) {\n        result.append(str);\n    }\n    return result.toString();\n}\n"}
{"task_id": "Java/29", "generation": "        List<String> filteredList = new ArrayList<>();\n        \n        for (String str : strings) {\n            if (str.startsWith(prefix)) {\n                filteredList.add(str);\n            }\n        }\n        \n        return filteredList;\n    }\n}\n"}
{"task_id": "Java/30", "generation": "        List<Integer> positiveNumbers = new ArrayList<>();\n        \n        for (Integer num : l) {\n            if (num > 0) {\n                positiveNumbers.add(num);\n            }\n        }\n        \n        return positiveNumbers;\n    }\n}\n"}
{"task_id": "Java/31", "generation": "    if (n < 2) {\n        return false;\n    }\n    if (n == 2) {\n        return true;\n    }\n    for (int i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "Java/32", "generation": "        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"Number of coefficients must be even.\");\n        }\n\n        double largestNonZeroCoefficient = 0;\n        for (double coefficient : xs) {\n            if (coefficient != 0 && Math.abs(coefficient) > Math.abs(largestNonZeroCoefficient)) {\n                largestNonZeroCoefficient = coefficient;\n            }\n        }\n\n        // Implement numerical methods like bisection or Newton's method to find the zero point here\n\n        return 0.0; // Placeholder, replace with actual zero point\n    }\n"}
{"task_id": "Java/33", "generation": "    List<Integer> modifiedList = new ArrayList<>();\n    List<Integer> temp = new ArrayList<>();\n\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            temp.add(l.get(i));\n        }\n    }\n\n    Collections.sort(temp);\n\n    int tempIndex = 0;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            modifiedList.add(temp.get(tempIndex));\n            tempIndex++;\n        } else {\n            modifiedList.add(l.get(i));\n        }\n    }\n\n    return modifiedList;\n}\n"}
{"task_id": "Java/34", "generation": "    Set<Integer> uniqueSet = new HashSet<>(l);\n    List<Integer> uniqueList = new ArrayList<>(uniqueSet);\n    Collections.sort(uniqueList);\n    return uniqueList;\n}\n"}
{"task_id": "Java/35", "generation": "    int max = Integer.MIN_VALUE;\n    for (int num : l) {\n        if (num > max) {\n            max = num;\n        }\n    }\n    return max;\n}\n"}
{"task_id": "Java/36", "generation": "        int count = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String numStr = String.valueOf(i);\n                if (numStr.contains(\"7\")) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/37", "generation": "    List<Integer> oddIndices = new ArrayList<>();\n    List<Integer> evenIndices = new ArrayList<>();\n\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 2 == 0) {\n            evenIndices.add(l.get(i));\n        } else {\n            oddIndices.add(l.get(i));\n        }\n    }\n\n    Collections.sort(evenIndices);\n\n    List<Integer> result = new ArrayList<>();\n    int evenIndex = 0;\n    int oddIndex = 0;\n\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 2 == 0) {\n            result.add(evenIndices.get(evenIndex));\n            evenIndex++;\n        } else {\n            result.add(oddIndices.get(oddIndex));\n            oddIndex++;\n        }\n    }\n\n    return result;\n}\n"}
{"task_id": "Java/38", "generation": "        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // reverse cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}\n"}
{"task_id": "Java/39", "generation": "        int count = 0;\n        int num = 1;\n        while (count < n) {\n            num++;\n            if (isFibonacci(num) && isPrime(num)) {\n                count++;\n            }\n        }\n        return num;\n    }\n\n    public boolean isFibonacci(int num) {\n        int a = 0;\n        int b = 1;\n        while (b < num) {\n            int temp = b;\n            b = a + b;\n            a = temp;\n        }\n        return b == num;\n    }\n\n    public boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/40", "generation": "        Collections.sort(l);\n        for (int i = 0; i < l.size() - 2; i++) {\n            int left = i + 1;\n            int right = l.size() - 1;\n            while (left < right) {\n                int sum = l.get(i) + l.get(left) + l.get(right);\n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n        return false;\n    }\n}\n"}
{"task_id": "Java/41", "generation": "        return n;\n    }\n}\n"}
{"task_id": "Java/42", "generation": "        List<Integer> result = new ArrayList<>();\n        for (Integer num : l) {\n            result.add(num + 1);\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/43", "generation": "        // Create a set to store the elements we have seen so far\n        Set<Integer> seen = new HashSet<>();\n        \n        // Iterate through the list\n        for (int num : l) {\n            // Check if the negative of the current number is in the set\n            if (seen.contains(-num)) {\n                return true;\n            }\n            // Add the current number to the set\n            seen.add(num);\n        }\n        \n        // If we reach this point, no pair sums to zero\n        return false;\n    }\n}\n"}
{"task_id": "Java/44", "generation": "    if (base < 2 || base > 9) {\n        return \"Invalid base\";\n    }\n    \n    StringBuilder result = new StringBuilder();\n    \n    while (x > 0) {\n        int remainder = x % base;\n        result.append(remainder);\n        x /= base;\n    }\n    \n    return result.reverse().toString();\n}\n"}
{"task_id": "Java/45", "generation": "    double area = 0.5 * a * h;\n    return area;\n}\n"}
{"task_id": "Java/46", "generation": "        if (n == 0 || n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 2;\n        } else if (n == 3) {\n            return 0;\n        }\n        \n        int[] fib4Array = new int[n+1];\n        fib4Array[0] = 0;\n        fib4Array[1] = 0;\n        fib4Array[2] = 2;\n        fib4Array[3] = 0;\n        \n        for (int i = 4; i <= n; i++) {\n            fib4Array[i] = fib4Array[i-1] + fib4Array[i-2] + fib4Array[i-3] + fib4Array[i-4];\n        }\n        \n        return fib4Array[n];\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fib4(5)); // Output: 4\n        System.out.println(solution.fib4(6)); // Output: 8\n        System.out.println(solution.fib4(7)); // Output: 14\n    }\n}\n"}
{"task_id": "Java/47", "generation": "        Collections.sort(l);\n        int size = l.size();\n        if (size % 2 == 1) {\n            return l.get(size / 2);\n        } else {\n            int mid1 = l.get(size / 2 - 1);\n            int mid2 = l.get(size / 2);\n            return (double) (mid1 + mid2) / 2;\n        }\n    }\n}\n"}
{"task_id": "Java/48", "generation": "    if (text == null || text.isEmpty()) {\n        return true;\n    }\n    \n    int start = 0;\n    int end = text.length() - 1;\n    \n    while (start < end) {\n        if (text.charAt(start) != text.charAt(end)) {\n            return false;\n        }\n        start++;\n        end--;\n    }\n    \n    return true;\n}\n"}
{"task_id": "Java/49", "generation": "        if (n == 0) {\n            return 1 % p;\n        }\n        \n        BigInteger base = BigInteger.valueOf(2);\n        BigInteger exponent = BigInteger.valueOf(n);\n        BigInteger modulus = BigInteger.valueOf(p);\n        \n        BigInteger result = base.modPow(exponent, modulus);\n        \n        return result.intValue();\n    }\n}\n"}
{"task_id": "Java/50", "generation": "    StringBuilder sb = new StringBuilder();\n    for (char ch : s.toCharArray()) {\n        char decodedChar = (char) ('a' + ((ch - 5 - 'a' + 26) % 26));\n        sb.append(decodedChar);\n    }\n    return sb.toString();\n}\n"}
{"task_id": "Java/51", "generation": "    StringBuilder result = new StringBuilder();\n    for (int i = 0; i < text.length(); i++) {\n        char c = text.charAt(i);\n        if (!(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')) {\n            result.append(c);\n        }\n    }\n    return result.toString();\n}\n"}
{"task_id": "Java/52", "generation": "    boolean result = true;\n    for (int num : l) {\n        if (num >= t) {\n            result = false;\n            break;\n        }\n    }\n    return result;\n}\n"}
{"task_id": "Java/53", "generation": "        return x + y;\n    }\n}\n"}
{"task_id": "Java/54", "generation": "        // 1. Create two HashMaps to store the character frequencies of each word\n        Map<Character, Integer> freqMap0 = new HashMap<>();\n        Map<Character, Integer> freqMap1 = new HashMap<>();\n\n        // 2. Iterate through each character in the first word and update the frequency in the first HashMap\n        for (char c : s0.toCharArray()) {\n            freqMap0.put(c, freqMap0.getOrDefault(c, 0) + 1);\n        }\n\n        // 3. Iterate through each character in the second word and update the frequency in the second HashMap\n        for (char c : s1.toCharArray()) {\n            freqMap1.put(c, freqMap1.getOrDefault(c, 0) + 1);\n        }\n\n        // 4. Compare the two HashMaps to see if they have the same frequencies for each character\n        return freqMap0.equals(freqMap1); // 5. If the frequencies match for all characters, return true. Otherwise, return false\n    }\n}\n"}
{"task_id": "Java/55", "generation": "    if (n == 0 || n == 1) {\n        return n;\n    }\n    \n    int a = 0;\n    int b = 1;\n    \n    for (int i = 2; i <= n; i++) {\n        int next = a + b;\n        a = b;\n        b = next;\n    }\n    \n    return b;\n}\n"}
{"task_id": "Java/56", "generation": "    Stack<Character> stack = new Stack<>();\n    \n    for (char c : brackets.toCharArray()) {\n        if (c == '<') {\n            stack.push(c);\n        } else if (c == '>') {\n            if (stack.isEmpty()) {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    \n    return stack.isEmpty();\n}\n"}
{"task_id": "Java/57", "generation": "        boolean increasing = true;\n        boolean decreasing = true;\n\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n                increasing = false;\n            }\n            if (l.get(i) > l.get(i - 1)) {\n                decreasing = false;\n            }\n        }\n\n        return increasing || decreasing;\n    }\n}\n"}
{"task_id": "Java/58", "generation": "        Set<Integer> set = new HashSet<>();\n        List<Integer> commonElements = new ArrayList<>();\n\n        for (int num : l1) {\n            set.add(num);\n        }\n\n        for (int num : l2) {\n            if (set.contains(num)) {\n                commonElements.add(num);\n            }\n        }\n\n        Collections.sort(commonElements);\n        return commonElements;\n    }\n}\n"}
{"task_id": "Java/59", "generation": "        int largestPrimeFactor = 1;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                boolean isPrime = true;\n                for (int j = 2; j <= Math.sqrt(i); j++) {\n                    if (i % j == 0) {\n                        isPrime = false;\n                        break;\n                    }\n                }\n                if (isPrime) {\n                    largestPrimeFactor = i;\n                }\n            }\n        }\n        return largestPrimeFactor;\n    }\n}\n"}
{"task_id": "Java/60", "generation": "        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n"}
{"task_id": "Java/61", "generation": "    Stack<Character> stack = new Stack<>();\n    \n    for (char bracket : brackets.toCharArray()) {\n        if (bracket == '(') {\n            stack.push(bracket);\n        } else if (bracket == ')') {\n            if (stack.isEmpty()) {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    \n    return stack.isEmpty();\n}\n"}
{"task_id": "Java/62", "generation": "        List<Integer> derivativeCoefficients = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            derivativeCoefficients.add(xs.get(i) * i);\n        }\n        return derivativeCoefficients;\n    }\n}\n"}
{"task_id": "Java/63", "generation": "        if (n == 0 || n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 1;\n        }\n        \n        int[] fibfib = new int[n+1];\n        fibfib[0] = 0;\n        fibfib[1] = 0;\n        fibfib[2] = 1;\n        \n        for (int i = 3; i <= n; i++) {\n            fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3];\n        }\n        \n        return fibfib[n];\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fibfib(1)); // Output: 0\n        System.out.println(solution.fibfib(5)); // Output: 4\n        System.out.println(solution.fibfib(8)); // Output: 24\n    }\n}\n"}
{"task_id": "Java/64", "generation": "        s = s.toLowerCase();\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            } else if (i == s.length() - 1 && c == 'y') {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/65", "generation": "    String numStr = String.valueOf(x);\n    int numDigits = numStr.length();\n    \n    if (shift > numDigits) {\n        return new StringBuilder(numStr).reverse().toString();\n    }\n    \n    shift = shift % numDigits;\n    String shiftedStr = numStr.substring(numDigits - shift) + numStr.substring(0, numDigits - shift);\n    \n    return shiftedStr;\n}\n\npublic static void main(String[] args) {\n    Solution solution = new Solution();\n    System.out.println(solution.circularShift(12, 1)); // Output: \"21\"\n    System.out.println(solution.circularShift(12, 2)); // Output: \"12\"\n}\n"}
{"task_id": "Java/66", "generation": "    int sum = 0;\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        if (Character.isUpperCase(c)) {\n            sum += (int) c;\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "Java/67", "generation": "    String[] parts = s.split(\" \");\n    int apples = Integer.parseInt(parts[0]);\n    int oranges = Integer.parseInt(parts[3]);\n    \n    int mangoes = n - apples - oranges;\n    \n    return mangoes;\n}\n\npublic static void main(String[] args) {\n    Solution solution = new Solution();\n    System.out.println(solution.fruitDistribution(\"5 apples and 6 oranges\", 19)); // Output: 8\n    System.out.println(solution.fruitDistribution(\"0 apples and 1 oranges\", 3)); // Output: 2\n    System.out.println(solution.fruitDistribution(\"2 apples and 3 oranges\", 100)); // Output: 95\n    System.out.println(solution.fruitDistribution(\"100 apples and 1 oranges\", 120)); // Output: 19\n}\n"}
{"task_id": "Java/68", "generation": "        List<Integer> result = new ArrayList<>();\n        int smallestEvenValue = Integer.MAX_VALUE;\n        int smallestEvenIndex = -1;\n\n        for (int i = 0; i < arr.size(); i++) {\n            int currentValue = arr.get(i);\n            if (currentValue % 2 == 0 && currentValue < smallestEvenValue) {\n                smallestEvenValue = currentValue;\n                smallestEvenIndex = i;\n            }\n        }\n\n        if (smallestEvenIndex != -1) {\n            result.add(smallestEvenValue);\n            result.add(smallestEvenIndex);\n        }\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/69", "generation": "    Map<Integer, Integer> frequencyMap = new HashMap<>();\n    int result = -1;\n\n    for (int num : lst) {\n        frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n    }\n\n    for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n        int num = entry.getKey();\n        int frequency = entry.getValue();\n\n        if (frequency >= num) {\n            result = Math.max(result, num);\n        }\n    }\n\n    return result > 0 ? result : -1;\n}\n\npublic static void main(String[] args) {\n    Solution solution = new Solution();\n    System.out.println(solution.search(Arrays.asList(4, 1, 2, 2, 3, 1))); // Output: 2\n    System.out.println(solution.search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4))); // Output: 3\n    System.out.println(solution.search(Arrays.asList(5, 5, 4, 4, 4))); // Output: -1\n}\n"}
{"task_id": "Java/70", "generation": "        // Step 1: Sort the list in ascending order\n        Collections.sort(lst);\n\n        // Step 2: Create a new list to store the strange sorted elements\n        List<Integer> result = new ArrayList<>();\n\n        // Step 3: Initialize pointers\n        int start = 0;\n        int end = lst.size() - 1;\n\n        // Step 4: Alternate between adding elements from start and end pointers\n        while (start <= end) {\n            result.add(lst.get(start));\n            if (start != end) {\n                result.add(lst.get(end));\n            }\n            start++;\n            end--;\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.strangeSortList(Arrays.asList(1, 2, 3, 4))); // [1, 4, 2, 3]\n        System.out.println(solution.strangeSortList(Arrays.asList(5, 5, 5, 5))); // [5, 5, 5, 5]\n        System.out.println(solution.strangeSortList(Arrays.asList())); // []\n    }\n}\n"}
{"task_id": "Java/71", "generation": "        // Check if the three sides form a valid triangle\n        if (a + b > c && a + c > b && b + c > a) {\n            // Calculate the semi-perimeter of the triangle\n            double s = (a + b + c) / 2;\n            // Calculate the area of the triangle using Heron's formula\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            // Round the area to 2 decimal points\n            return Math.round(area * 100.0) / 100.0;\n        } else {\n            // Return -1 if the sides do not form a valid triangle\n            return -1;\n        }\n    }\n}\n"}
{"task_id": "Java/72", "generation": "    if (!isBalanced(q)) {\n        return false;\n    }\n    \n    int sum = 0;\n    for (int num : q) {\n        sum += num;\n    }\n    \n    return sum <= w;\n}\n\nprivate boolean isBalanced(List<Integer> q) {\n    int left = 0;\n    int right = q.size() - 1;\n    \n    while (left < right) {\n        if (!q.get(left).equals(q.get(right))) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    \n    return true;\n}\n"}
{"task_id": "Java/73", "generation": "        int changes = 0;\n        int left = 0;\n        int right = arr.size() - 1;\n\n        while (left < right) {\n            if (arr.get(left) != arr.get(right)) {\n                changes++;\n            }\n            left++;\n            right--;\n        }\n\n        return changes;\n    }\n}\n"}
{"task_id": "Java/74", "generation": "        int totalChars1 = lst1.stream().mapToInt(String::length).sum();\n        int totalChars2 = lst2.stream().mapToInt(String::length).sum();\n\n        if (totalChars1 < totalChars2 || totalChars1 == totalChars2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}\n"}
{"task_id": "Java/75", "generation": "        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < 100; i++) {\n            boolean isPrime = true;\n            for (int j = 2; j < i; j++) {\n                if (i % j == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                primes.add(i);\n            }\n        }\n\n        for (int i = 0; i < primes.size(); i++) {\n            for (int j = i + 1; j < primes.size(); j++) {\n                for (int k = j + 1; k < primes.size(); k++) {\n                    if (primes.get(i) * primes.get(j) * primes.get(k) == a) {\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n}\n"}
{"task_id": "Java/76", "generation": "    if (x == 1) {\n        return true;\n    }\n    if (x <= 0) {\n        return false;\n    }\n    \n    for (int i = 1; i <= x; i++) {\n        if (Math.pow(n, i) == x) {\n            return true;\n        }\n    }\n    \n    return false;\n}\n"}
{"task_id": "Java/77", "generation": "    a = Math.abs(a); // Make input positive\n    \n    for (int i = 1; i * i * i <= a; i++) {\n        if (i * i * i == a) {\n            return true;\n        }\n    }\n    \n    return false;\n}\n"}
{"task_id": "Java/78", "generation": "        int count = 0;\n        String hexDigits = \"0123456789ABCDEF\";\n        String primes = \"2357BD\";\n        \n        // Convert hexadecimal number to decimal\n        long decimalNum = Long.parseLong(num, 16);\n        \n        // Check each digit of the decimal number\n        while (decimalNum > 0) {\n            int digit = (int) (decimalNum % 10);\n            if (primes.contains(String.valueOf(hexDigits.charAt(digit)))) {\n                count++;\n            }\n            decimalNum /= 10;\n        }\n        \n        return count;\n    }\n}\n"}
{"task_id": "Java/79", "generation": "    String binary = Integer.toBinaryString(decimal);\n    return \"db\" + binary + \"db\";\n}\n```\n\npublic static void main(String[] args) {\n    Solution solution = new Solution();\n    System.out.println(solution.decimalToBinary(15));  // Output: \"db1111db\"\n    System.out.println(solution.decimalToBinary(32));  // Output: \"db100000db\"\n}\n"}
{"task_id": "Java/80", "generation": "    if (s.length() < 3) {\n        return false;\n    }\n    \n    for (int i = 0; i <= s.length() - 3; i++) {\n        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n            return false;\n        }\n    }\n    \n    return true;\n}\n"}
{"task_id": "Java/81", "generation": "        List<String> letterGrades = new ArrayList<>();\n        \n        for (Double gpa : grades) {\n            if (gpa == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (gpa > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (gpa > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (gpa > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (gpa > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (gpa > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (gpa > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (gpa > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (gpa > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (gpa > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (gpa > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (gpa > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        \n        return letterGrades;\n    }\n}\n"}
{"task_id": "Java/82", "generation": "    int length = string.length();\n    if (length <= 1) {\n        return false;\n    }\n    for (int i = 2; i <= Math.sqrt(length); i++) {\n        if (length % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "Java/83", "generation": "        int count = (int) (Math.pow(10, n-1) + Math.pow(10, n-1) - Math.pow(10, n-2));\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int n = 3;\n        System.out.println(\"Count of n-digit positive integers that start or end with 1: \" + solution.startsOneEnds(n));\n    }\n}\n"}
{"task_id": "Java/84", "generation": "    // Convert N to binary representation\n    String binary = Integer.toBinaryString(N);\n    \n    // Calculate the sum of digits in the binary representation\n    int sum = 0;\n    for (int i = 0; i < binary.length(); i++) {\n        sum += binary.charAt(i) - '0';\n    }\n    \n    // Convert the sum to binary string\n    return Integer.toBinaryString(sum);\n}\n```\n\nYou can test this solution with the given examples:\n\n```java\npublic static void main(String[] args) {\n    Solution solution = new Solution();\n    System.out.println(solution.solve(1000)); // Output: \"1\"\n    System.out.println(solution.solve(150)); // Output: \"110\"\n    System.out.println(solution.solve(147)); // Output: \"1100\"\n}\n"}
{"task_id": "Java/85", "generation": "    int sum = 0;\n    for (int i = 1; i < lst.size(); i += 2) {\n        if (lst.get(i) % 2 == 0) {\n            sum += lst.get(i);\n        }\n    }\n    return sum;\n}\n\npublic static void main(String[] args) {\n    Solution solution = new Solution();\n    List<Integer> lst = Arrays.asList(4, 2, 6, 7);\n    System.out.println(solution.add(lst)); // Output should be 2\n}\n"}
{"task_id": "Java/86", "generation": "    String[] words = s.split(\" \");\n    StringBuilder result = new StringBuilder();\n    \n    for (int i = 0; i < words.length; i++) {\n        char[] chars = words[i].toCharArray();\n        Arrays.sort(chars);\n        result.append(new String(chars));\n        \n        if (i < words.length - 1) {\n            result.append(\" \");\n        }\n    }\n    \n    return result.toString();\n}\n\npublic static void main(String[] args) {\n    Solution solution = new Solution();\n    \n    System.out.println(solution.antiShuffle(\"Hi\")); // Output: \"Hi\"\n    System.out.println(solution.antiShuffle(\"hello\")); // Output: \"ehllo\"\n    System.out.println(solution.antiShuffle(\"Hello World!!!\")); // Output: \"Hello !!!Wdlor\"\n}\n"}
{"task_id": "Java/87", "generation": "    List<List<Integer>> result = new ArrayList<>();\n    \n    for (int i = 0; i < lst.size(); i++) {\n        List<Integer> row = lst.get(i);\n        for (int j = 0; j < row.size(); j++) {\n            if (row.get(j) == x) {\n                List<Integer> coordinate = new ArrayList<>();\n                coordinate.add(i);\n                coordinate.add(j);\n                result.add(coordinate);\n            }\n        }\n    }\n    \n    Collections.sort(result, (a, b) -> a.get(0) - b.get(0));\n    \n    for (List<Integer> coordinate : result) {\n        Collections.sort(coordinate, Collections.reverseOrder());\n    }\n    \n    return result;\n}\n"}
{"task_id": "Java/88", "generation": "    if (array.isEmpty()) {\n        return new ArrayList<>();\n    }\n\n    int first = array.get(0);\n    int last = array.get(array.size() - 1);\n    int sum = first + last;\n\n    List<Integer> sortedArray = new ArrayList<>(array);\n\n    if (sum % 2 == 0) {\n        Collections.sort(sortedArray, Collections.reverseOrder());\n    } else {\n        Collections.sort(sortedArray);\n    }\n\n    return sortedArray;\n}\n"}
{"task_id": "Java/89", "generation": "    StringBuilder encrypted = new StringBuilder();\n    for (char c : s.toCharArray()) {\n        if (Character.isLowerCase(c)) {\n            char shifted = (char) (((c - 'a' + 2 * 2) % 26) + 'a');\n            encrypted.append(shifted);\n        } else {\n            encrypted.append(c);\n        }\n    }\n    return encrypted.toString();\n}\n\npublic static void main(String[] args) {\n    Solution solution = new Solution();\n    System.out.println(solution.encrypt(\"hi\")); // Output: \"lm\"\n    System.out.println(solution.encrypt(\"asdfghjkl\")); // Output: \"ewhjklnop\"\n    System.out.println(solution.encrypt(\"gf\")); // Output: \"kj\"\n    System.out.println(solution.encrypt(\"et\")); // Output: \"ix\"\n}\n"}
{"task_id": "Java/90", "generation": "    if (lst.size() < 2) {\n        return Optional.empty();\n    }\n    \n    Collections.sort(lst);\n    return Optional.of(lst.get(1));\n}\n"}
{"task_id": "Java/91", "generation": "    String[] sentences = S.split(\"[.?!]\");\n    int boredomCount = 0;\n    \n    for (String sentence : sentences) {\n        String trimmedSentence = sentence.trim();\n        if (trimmedSentence.startsWith(\"I\")) {\n            boredomCount++;\n        }\n    }\n    \n    return boredomCount;\n}\n\npublic static void main(String[] args) {\n    Solution solution = new Solution();\n    \n    System.out.println(solution.isBored(\"Hello world\")); // Output: 0\n    System.out.println(solution.isBored(\"The sky is blue. The sun is shining. I love this weather\")); // Output: 1\n}\n"}
{"task_id": "Java/92", "generation": "    if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n        int a = (int) x;\n        int b = (int) y;\n        int c = (int) z;\n        \n        return a == b + c || b == a + c || c == a + b;\n    }\n    return false;\n}\n"}
{"task_id": "Java/93", "generation": "    char[] encodedMessage = new char[message.length()];\n    for (int i = 0; i < message.length(); i++) {\n        char c = message.charAt(i);\n        if (Character.isLetter(c)) {\n            if (Character.isUpperCase(c)) {\n                encodedMessage[i] = Character.toLowerCase(c);\n            } else {\n                encodedMessage[i] = Character.toUpperCase(c);\n            }\n            if (isVowel(c)) {\n                encodedMessage[i] = (char) (c + 2);\n            }\n        } else {\n            encodedMessage[i] = c;\n        }\n    }\n    return new String(encodedMessage);\n}\n\nprivate boolean isVowel(char c) {\n    return \"AEIOUaeiou\".indexOf(c) != -1;\n}\n\npublic static void main(String[] args) {\n    Solution solution = new Solution();\n    System.out.println(solution.encode(\"test\")); // Output: TGST\n    System.out.println(solution.encode(\"This is a message\")); // Output: tHKS KS C MGSSCGG\n}\n"}
{"task_id": "Java/94", "generation": "    if (num <= 1) {\n        return false;\n    }\n    for (int i = 2; i <= Math.sqrt(num); i++) {\n        if (num % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\npublic int sumOfDigits(int num) {\n    int sum = 0;\n    while (num > 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n    return sum;\n}\n\npublic int largestPrimeSum(List<Integer> lst) {\n    int largestPrime = Integer.MIN_VALUE;\n    for (int num : lst) {\n        if (isPrime(num) && num > largestPrime) {\n            largestPrime = num;\n        }\n    }\n    return sumOfDigits(largestPrime);\n}\n"}
{"task_id": "Java/95", "generation": "    if (dict.isEmpty()) {\n        return false;\n    }\n\n    boolean allLowerCase = true;\n    boolean allUpperCase = true;\n\n    for (Object key : dict.keySet()) {\n        if (!(key instanceof String)) {\n            return false;\n        }\n\n        String keyStr = (String) key;\n        if (!keyStr.equals(keyStr.toLowerCase())) {\n            allLowerCase = false;\n        }\n        if (!keyStr.equals(keyStr.toUpperCase())) {\n            allUpperCase = false;\n        }\n    }\n\n    return allLowerCase || allUpperCase;\n}\n"}
{"task_id": "Java/96", "generation": "        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.countUpTo(5));  // [2, 3]\n        System.out.println(solution.countUpTo(11)); // [2, 3, 5, 7]\n        System.out.println(solution.countUpTo(0));  // []\n        System.out.println(solution.countUpTo(20)); // [2, 3, 5, 7, 11, 13, 17, 19]\n        System.out.println(solution.countUpTo(1));  // []\n        System.out.println(solution.countUpTo(18)); // [2, 3, 5, 7, 11, 13, 17]\n    }\n}\n"}
{"task_id": "Java/97", "generation": "    int unitA = Math.abs(a % 10);\n    int unitB = Math.abs(b % 10);\n    \n    return unitA * unitB;\n}\n"}
{"task_id": "Java/98", "generation": "    int count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        if (i % 2 == 0 && \"AEIOU\".indexOf(c) != -1) {\n            count++;\n        }\n    }\n    return count;\n}\n\npublic static void main(String[] args) {\n    Solution solution = new Solution();\n    System.out.println(solution.countUpper(\"aBCdEf\")); // Output: 1\n    System.out.println(solution.countUpper(\"abcdefg\")); // Output: 0\n    System.out.println(solution.countUpper(\"dBBE\")); // Output: 0\n}\n"}
{"task_id": "Java/99", "generation": "    double num = Double.parseDouble(value);\n    long rounded = Math.round(num);\n    \n    if (rounded > num) {\n        return (int) Math.ceil(num);\n    } else {\n        return (int) Math.floor(num);\n    }\n}\n\npublic static void main(String[] args) {\n    Solution solution = new Solution();\n    System.out.println(solution.closest_integer(\"10\")); // Output: 10\n    System.out.println(solution.closest_integer(\"15.3\")); // Output: 15\n}\n"}
{"task_id": "Java/100", "generation": "        List<Integer> levels = new ArrayList<>();\n        levels.add(n);\n        \n        int stones = n;\n        for (int i = 1; i < n; i++) {\n            if (n % 2 == 0) {\n                stones += 1;\n            } else {\n                stones += 2;\n            }\n            levels.add(stones);\n        }\n        \n        return levels;\n    }\n}\n"}
{"task_id": "Java/101", "generation": "    String[] wordsArray = s.split(\"[,\\\\s]+\");\n    List<String> wordsList = Arrays.asList(wordsArray);\n    return wordsList;\n}\n"}
{"task_id": "Java/102", "generation": "    int largestEven = -1;\n    for (int i = y; i >= x; i--) {\n        if (i % 2 == 0) {\n            largestEven = i;\n            break;\n        }\n    }\n    return largestEven;\n}\n"}
{"task_id": "Java/103", "generation": "        // Check if n is greater than m\n        if (n > m) {\n            return -1;\n        }\n        \n        // Calculate the average of integers from n through m\n        int sum = 0;\n        int count = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n            count++;\n        }\n        \n        int avg = Math.round((float) sum / count); // Round the average to the nearest integer\n        \n        // Convert the rounded average to binary\n        String binary = Integer.toBinaryString(avg);\n        \n        return binary;\n    }\n}\n"}
{"task_id": "Java/104", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int num : x) {\n            boolean hasEvenDigit = false;\n            int temp = num;\n            \n            while (temp > 0) {\n                int digit = temp % 10;\n                if (digit % 2 == 0) {\n                    hasEvenDigit = true;\n                    break;\n                }\n                temp /= 10;\n            }\n            \n            if (!hasEvenDigit) {\n                result.add(num);\n            }\n        }\n        \n        Collections.sort(result);\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> input1 = Arrays.asList(15, 33, 1422, 1);\n        List<Integer> output1 = solution.uniqueDigits(input1);\n        System.out.println(output1); // [1, 15, 33]\n        \n        List<Integer> input2 = Arrays.asList(152, 323, 1422, 10);\n        List<Integer> output2 = solution.uniqueDigits(input2);\n        System.out.println(output2); // []\n    }\n}\n"}
{"task_id": "Java/105", "generation": "        List<String> result = new ArrayList<>();\n        \n        // Step 1: Filter out integers between 1 and 9 inclusive\n        List<Integer> filteredList = arr.stream()\n                .filter(num -> num >= 1 && num <= 9)\n                .collect(Collectors.toList());\n        \n        // Step 2: Sort the filtered list\n        Collections.sort(filteredList);\n        \n        // Step 3: Reverse the sorted list\n        Collections.reverse(filteredList);\n        \n        // Step 4: Replace integers with corresponding names\n        Map<Integer, String> numberToName = Map.of(\n                1, \"One\", 2, \"Two\", 3, \"Three\", 4, \"Four\",\n                5, \"Five\", 6, \"Six\", 7, \"Seven\", 8, \"Eight\", 9, \"Nine\"\n        );\n        \n        for (Integer num : filteredList) {\n            result.add(numberToName.get(num));\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/106", "generation": "        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        int factorial = 1;\n        \n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                factorial *= i;\n                result.add(factorial);\n            } else {\n                sum += i;\n                result.add(sum);\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/107", "generation": "        int evenCount = 0;\n        int oddCount = 0;\n        \n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n        \n        List<Integer> result = new ArrayList<>();\n        result.add(evenCount);\n        result.add(oddCount);\n        \n        return result;\n    }\n    \n    private boolean isPalindrome(int num) {\n        String str = String.valueOf(num);\n        int left = 0;\n        int right = str.length() - 1;\n        \n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/108", "generation": "    int count = 0;\n    for (int num : arr) {\n        int sum = 0;\n        int temp = Math.abs(num);\n        while (temp != 0) {\n            sum += temp % 10;\n            temp /= 10;\n        }\n        if (num < 0) {\n            sum *= -1;\n        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n"}
{"task_id": "Java/109", "generation": "    if (arr.isEmpty()) {\n        return true;\n    }\n    \n    int minIndex = 0;\n    int min = arr.get(0);\n    \n    for (int i = 1; i < arr.size(); i++) {\n        if (arr.get(i) < min) {\n            min = arr.get(i);\n            minIndex = i;\n        }\n    }\n    \n    return minIndex == 0;\n}\n"}
{"task_id": "Java/110", "generation": "    int oddCount1 = 0;\n    int oddCount2 = 0;\n    \n    for (int num : lst1) {\n        if (num % 2 != 0) {\n            oddCount1++;\n        }\n    }\n    \n    for (int num : lst2) {\n        if (num % 2 != 0) {\n            oddCount2++;\n        }\n    }\n    \n    if (oddCount1 > oddCount2) {\n        return \"NO\";\n    } else {\n        return \"YES\";\n    }\n}\n"}
{"task_id": "Java/111", "generation": "    Map<String, Integer> result = new HashMap<>();\n    \n    // Split the input string into individual letters\n    String[] letters = test.split(\" \");\n    \n    // Count the occurrences of each letter\n    Map<String, Integer> countMap = new HashMap<>();\n    for (String letter : letters) {\n        countMap.put(letter, countMap.getOrDefault(letter, 0) + 1);\n    }\n    \n    // Find the maximum occurrence\n    int maxCount = 0;\n    for (int count : countMap.values()) {\n        maxCount = Math.max(maxCount, count);\n    }\n    \n    // Add letters with maximum occurrence to the result map\n    for (Map.Entry<String, Integer> entry : countMap.entrySet()) {\n        if (entry.getValue() == maxCount) {\n            result.put(entry.getKey(), entry.getValue());\n        }\n    }\n    \n    return result;\n}\n"}
{"task_id": "Java/112", "generation": "        StringBuilder result = new StringBuilder();\n        \n        for (char ch : s.toCharArray()) {\n            if (c.indexOf(ch) == -1) {\n                result.append(ch);\n            }\n        }\n        \n        String resultString = result.toString();\n        boolean isPalindrome = isPalindrome(resultString);\n        \n        return Arrays.asList(resultString, isPalindrome);\n    }\n    \n    private boolean isPalindrome(String s) {\n        int left = 0;\n        int right = s.length() - 1;\n        \n        while (left < right) {\n            if (s.charAt(left) != s.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n}\n"}
{"task_id": "Java/113", "generation": "    List<String> result = new ArrayList<>();\n    \n    for (String str : lst) {\n        int count = 0;\n        for (char c : str.toCharArray()) {\n            if (Character.isDigit(c) && (c - '0') % 2 != 0) {\n                count++;\n            }\n        }\n        result.add(\"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + str + \" of the \" + count + \"nput.\");\n    }\n    \n    return result;\n}\n"}
{"task_id": "Java/114", "generation": "        int currentSum = 0;\n        int minSum = Integer.MAX_VALUE;\n\n        for (int num : nums) {\n            currentSum += num;\n            minSum = Math.min(minSum, currentSum);\n            if (currentSum < 0) {\n                currentSum = 0;\n            }\n        }\n\n        return minSum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4))); // Output: 1\n        System.out.println(solution.minSubArraySum(Arrays.asList(-1, -2, -3))); // Output: -6\n    }\n}\n"}
{"task_id": "Java/115", "generation": "        int maxWater = 0;\n        for (List<Integer> well : grid) {\n            maxWater = Math.max(maxWater, Collections.frequency(well, 1));\n        }\n\n        int totalLowering = 0;\n        for (List<Integer> well : grid) {\n            int currentWater = Collections.frequency(well, 1);\n            int diff = maxWater - currentWater;\n            totalLowering += (int) Math.ceil((double) diff / capacity);\n        }\n\n        return totalLowering;\n    }\n}\n"}
{"task_id": "Java/116", "generation": "        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                int countA = Integer.bitCount(Math.abs(a));\n                int countB = Integer.bitCount(Math.abs(b));\n\n                if (countA != countB) {\n                    return countA - countB;\n                } else {\n                    return a - b;\n                }\n            }\n        });\n\n        return arr;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5)));\n        System.out.println(solution.sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2)));\n        System.out.println(solution.sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4)));\n    }\n}\n"}
{"task_id": "Java/117", "generation": "    List<String> result = new ArrayList<>();\n    \n    if (s.isEmpty()) {\n        return result;\n    }\n    \n    String[] words = s.split(\" \");\n    \n    for (String word : words) {\n        if (countConsonants(word) == n) {\n            result.add(word);\n        }\n    }\n    \n    return result;\n}\n\nprivate int countConsonants(String word) {\n    int count = 0;\n    for (char c : word.toCharArray()) {\n        if (Character.isLetter(c) && !isVowel(c)) {\n            count++;\n        }\n    }\n    return count;\n}\n\nprivate boolean isVowel(char c) {\n    c = Character.toLowerCase(c);\n    return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n}\n"}
{"task_id": "Java/118", "generation": "        if (word == null || word.length() < 3) {\n            return \"\";\n        }\n        \n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n        \n        for (int i = word.length() - 2; i > 0; i--) {\n            if (!vowels.contains(word.charAt(i))) {\n                if (isConsonant(word.charAt(i)) && isConsonant(word.charAt(i - 1))) {\n                    for (int j = i - 1; j > 0; j--) {\n                        if (vowels.contains(word.charAt(j))) {\n                            return String.valueOf(word.charAt(j));\n                        }\n                    }\n                }\n            }\n        }\n        \n        return \"\";\n    }\n    \n    private boolean isConsonant(char c) {\n        return !Character.isLetter(c) || !isVowel(c);\n    }\n    \n    private boolean isVowel(char c) {\n        return \"aeiouAEIOU\".indexOf(c) != -1;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.getClosestVowel(\"yogurt\")); // Output: \"u\"\n        System.out.println(solution.getClosestVowel(\"FULL\")); // Output: \"U\"\n        System.out.println(solution.getClosestVowel(\"quick\")); // Output: \"\"\n        System.out.println(solution.getClosestVowel(\"ab\")); // Output: \"\"\n    }\n"}
{"task_id": "Java/119", "generation": "    int balance = 0;\n    for (String str : lst) {\n        for (char c : str.toCharArray()) {\n            if (c == '(') {\n                balance++;\n            } else if (c == ')') {\n                balance--;\n            }\n            if (balance < 0) {\n                return \"No\";\n            }\n        }\n    }\n    return balance == 0 ? \"Yes\" : \"No\";\n}\n\npublic static void main(String[] args) {\n    Solution solution = new Solution();\n    System.out.println(solution.matchParens(Arrays.asList(\"()(\", \")\"))); // Output: Yes\n    System.out.println(solution.matchParens(Arrays.asList(\")\", \")\"))); // Output: No\n}\n"}
{"task_id": "Java/120", "generation": "        Collections.sort(arr, Collections.reverseOrder());\n        return arr.subList(0, k);\n    }\n}\n"}
{"task_id": "Java/121", "generation": "    int sum = 0;\n    for (int i = 1; i < lst.size(); i += 2) {\n        if (lst.get(i) % 2 != 0) {\n            sum += lst.get(i);\n        }\n    }\n    return sum;\n}\n\npublic static void main(String[] args) {\n    Solution solution = new Solution();\n    System.out.println(solution.solution(Arrays.asList(5, 8, 7, 1))); // Output: 12\n    System.out.println(solution.solution(Arrays.asList(3, 3, 3, 3, 3))); // Output: 9\n    System.out.println(solution.solution(Arrays.asList(30, 13, 24, 321))); // Output: 0\n}\n"}
{"task_id": "Java/122", "generation": "    int sum = 0;\n    for (int i = 0; i < k; i++) {\n        if (arr.get(i) >= 10 && arr.get(i) <= 99) {\n            sum += arr.get(i);\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "Java/123", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        while (n != 1) {\n            if (n % 2 != 0) {\n                result.add(n);\n            }\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n        }\n        \n        result.add(1); // Add 1 as it is the last element in the Collatz sequence\n        \n        Collections.sort(result); // Sort the list in increasing order\n        \n        return result;\n    }\n"}
{"task_id": "Java/124", "generation": "    if (date == null || date.isEmpty()) {\n        return false;\n    }\n\n    String[] parts = date.split(\"-\");\n    if (parts.length != 3) {\n        return false;\n    }\n\n    int month = Integer.parseInt(parts[0]);\n    int day = Integer.parseInt(parts[1]);\n    int year = Integer.parseInt(parts[2]);\n\n    if (month < 1 || month > 12) {\n        return false;\n    }\n\n    if (day < 1 || day > 31) {\n        return false;\n    }\n\n    if ((month == 4 || month == 6 || month == 9 || month == 11) && day > 30) {\n        return false;\n    }\n\n    if (month == 2) {\n        if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0) {\n            if (day > 29) {\n                return false;\n            }\n        } else {\n            if (day > 28) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n"}
{"task_id": "Java/125", "generation": "    if (txt.contains(\" \")) {\n        return Arrays.asList(txt.split(\"\\\\s+\"));\n    } else if (txt.contains(\",\")) {\n        return Arrays.asList(txt.split(\",\"));\n    } else {\n        int count = 0;\n        for (char c : txt.toCharArray()) {\n            if (Character.isLowerCase(c) && (c - 'a') % 2 != 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n"}
{"task_id": "Java/126", "generation": "    // Check for duplicates\n    Set<Integer> set = new HashSet<>();\n    for (int num : lst) {\n        if (!set.add(num)) {\n            return false; // Duplicate found\n        }\n    }\n    \n    // Check if list is sorted\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst.get(i) < lst.get(i - 1)) {\n            return false; // Not sorted\n        }\n    }\n    \n    return true; // List is sorted\n}\n"}
{"task_id": "Java/127", "generation": "    int start = Math.max(interval1.get(0), interval2.get(0));\n    int end = Math.min(interval1.get(1), interval2.get(1));\n    \n    if (start > end) {\n        return \"NO\"; // No intersection\n    }\n    \n    int length = end - start;\n    \n    if (isPrime(length)) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n\nprivate boolean isPrime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "Java/128", "generation": "    if (arr.isEmpty()) {\n        return Optional.empty();\n    }\n\n    int sum = 0;\n    int product = 1;\n\n    for (int num : arr) {\n        sum += Math.abs(num) * Integer.signum(num);\n        product *= Integer.signum(num);\n    }\n\n    return Optional.of(sum * product);\n}\n"}
{"task_id": "Java/129", "generation": "        int n = grid.size();\n        int startValue = Integer.MAX_VALUE;\n        int startX = -1;\n        int startY = -1;\n\n        // Find the starting cell with the smallest value\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid.get(i).get(j) < startValue) {\n                    startValue = grid.get(i).get(j);\n                    startX = i;\n                    startY = j;\n                }\n            }\n        }\n\n        List<Integer> minPath = new ArrayList<>();\n        minPath.add(startValue);\n\n        // Explore all possible paths of length k\n        explorePaths(grid, startX, startY, k - 1, minPath);\n\n        return minPath;\n    }\n\n    private void explorePaths(List<List<Integer>> grid, int x, int y, int steps, List<Integer> path) {\n        if (steps == 0) {\n            return;\n        }\n\n        int n = grid.size();\n        int[][] directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n\n        List<int[]> neighbors = new ArrayList<>();\n        for (int[] dir : directions) {\n            int newX = x + dir[0];\n            int newY = y + dir[1];\n            if (newX >= 0 && newX < n && newY >= 0 && newY < n) {\n                neighbors.add(new int[]{newX, newY});\n            }\n        }\n\n        Collections.sort(neighbors, (a, b) -> {\n            int valA = grid.get(a[0]).get(a[1]);\n            int valB = grid.get(b[0]).get(b[1]);\n            return valA - valB;\n        });\n\n        for (int[] neighbor : neighbors) {\n            int newX = neighbor[0];\n            int newY = neighbor[1];\n            int value = grid.get(newX).get(newY);\n            path.add(value);\n            explorePaths(grid, newX, newY, steps - 1, path);\n            if (path.size() == steps + 1) {\n                return;\n            }\n            path.remove(path.size() - 1);\n        }\n    }\n}\n"}
{"task_id": "Java/130", "generation": "        List<Integer> result = new ArrayList<>();\n        if (n >= 0) {\n            result.add(1);\n            if (n >= 1) {\n                result.add(3);\n                if (n >= 2) {\n                    result.add(2);\n                    for (int i = 3; i <= n; i++) {\n                        if (i % 2 == 0) {\n                            result.add(1 + i / 2);\n                        } else {\n                            result.add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n                        }\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/131", "generation": "    String numStr = String.valueOf(n);\n    int product = 1;\n    \n    for (int i = 0; i < numStr.length(); i++) {\n        int digit = Character.getNumericValue(numStr.charAt(i));\n        if (digit % 2 != 0) {\n            product *= digit;\n        }\n    }\n    \n    if (product == 1) {\n        return 0;\n    }\n    \n    return product;\n}\n\npublic static void main(String[] args) {\n    Solution solution = new Solution();\n    System.out.println(solution.digits(1));    // Output: 1\n    System.out.println(solution.digits(4));    // Output: 0\n    System.out.println(solution.digits(235));  // Output: 15\n}\n"}
{"task_id": "Java/132", "generation": "        Stack<Character> stack = new Stack<>();\n        \n        for(char c : string.toCharArray()) {\n            if(c == '[') {\n                stack.push(c);\n            } else if(c == ']') {\n                if(!stack.isEmpty()) {\n                    stack.pop();\n                }\n            }\n        }\n        \n        return !stack.isEmpty();\n    }\n"}
{"task_id": "Java/133", "generation": "    int sum = 0;\n    for (Double num : lst) {\n        int rounded = (int) Math.ceil(num);\n        sum += rounded * rounded;\n    }\n    return sum;\n}\n"}
{"task_id": "Java/134", "generation": "    if (txt.isEmpty()) {\n        return false;\n    }\n    \n    char lastChar = txt.charAt(txt.length() - 1);\n    \n    if (Character.isLetter(lastChar) && (txt.length() == 1 || txt.charAt(txt.length() - 2) == ' ')) {\n        return true;\n    }\n    \n    return false;\n}\n\npublic static void main(String[] args) {\n    Solution solution = new Solution();\n    System.out.println(solution.checkIfLastCharIsALetter(\"apple pie\")); // false\n    System.out.println(solution.checkIfLastCharIsALetter(\"apple pi e\")); // true\n    System.out.println(solution.checkIfLastCharIsALetter(\"apple pi e \")); // false\n    System.out.println(solution.checkIfLastCharIsALetter(\"\")); // false\n}\n"}
{"task_id": "Java/135", "generation": "    int index = -1;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr.get(i) < arr.get(i - 1)) {\n            index = i - 1;\n        }\n    }\n    return index;\n}\n\npublic static void main(String[] args) {\n    Solution solution = new Solution();\n    \n    System.out.println(solution.canArrange(Arrays.asList(1, 2, 4, 3, 5))); // Output should be 3\n    System.out.println(solution.canArrange(Arrays.asList(1, 2, 3))); // Output should be -1\n}\n"}
{"task_id": "Java/136", "generation": "        Integer largestNegative = null;\n        Integer smallestPositive = null;\n\n        for (Integer num : lst) {\n            if (num < 0 && (largestNegative == null || num > largestNegative)) {\n                largestNegative = num;\n            } else if (num > 0 && (smallestPositive == null || num < smallestPositive)) {\n                smallestPositive = num;\n            }\n        }\n\n        List<Optional<Integer>> result = new ArrayList<>();\n        result.add(Optional.ofNullable(largestNegative));\n        result.add(Optional.ofNullable(smallestPositive));\n\n        return result;\n    }\n}\n"}
{"task_id": "Java/137", "generation": "    if (a.getClass() != b.getClass()) {\n        return Optional.empty();\n    }\n\n    if (a instanceof Integer) {\n        int intA = (int) a;\n        int intB = (int) b;\n        if (intA > intB) {\n            return Optional.of(intA);\n        } else if (intB > intA) {\n            return Optional.of(intB);\n        }\n    } else if (a instanceof Float) {\n        float floatA = (float) a;\n        float floatB = (float) b;\n        if (floatA > floatB) {\n            return Optional.of(floatA);\n        } else if (floatB > floatA) {\n            return Optional.of(floatB);\n        }\n    } else if (a instanceof String) {\n        String strA = (String) a;\n        String strB = (String) b;\n        double doubleA = Double.parseDouble(strA.replace(\",\", \".\"));\n        double doubleB = Double.parseDouble(strB.replace(\",\", \".\"));\n        if (doubleA > doubleB) {\n            return Optional.of(strA);\n        } else if (doubleB > doubleA) {\n            return Optional.of(strB);\n        }\n    }\n\n    return Optional.empty();\n}\n"}
{"task_id": "Java/138", "generation": "    if (n % 2 != 0 || n < 8) {\n        return false;\n    }\n    \n    for (int i = 2; i <= n / 2; i += 2) {\n        for (int j = i; j <= n / 2; j += 2) {\n            for (int k = j; k <= n / 2; k += 2) {\n                int l = n - i - j - k;\n                if (l % 2 == 0 && l >= k) {\n                    return true;\n                }\n            }\n        }\n    }\n    \n    return false;\n}\n"}
{"task_id": "Java/139", "generation": "        long result = 1;\n        for (int i = n; i > 0; i--) {\n            result *= factorial(i);\n        }\n        return result;\n    }\n\n    private long factorial(int n) {\n        if (n == 0) {\n            return 1;\n        }\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.specialFactorial(4)); // Output: 288\n    }\n}\n"}
{"task_id": "Java/140", "generation": "        // Step 1: Replace all spaces with underscores\n        text = text.replace(\" \", \"_\");\n\n        // Step 2: Replace all consecutive spaces with a single underscore\n        text = text.replaceAll(\"_+\", \"_\");\n\n        // Step 3: Replace more than 2 consecutive spaces with a hyphen\n        text = text.replaceAll(\"_{3,}\", \"-\");\n\n        return text;\n    }\n}\n"}
{"task_id": "Java/141", "generation": "        int digitCount = 0;\n        for (char c : file_name.toCharArray()) {\n            if (Character.isDigit(c)) {\n                digitCount++;\n            }\n        }\n        if (digitCount > 3) {\n            return \"No\";\n        }\n\n        int dotCount = 0;\n        for (char c : file_name.toCharArray()) {\n            if (c == '.') {\n                dotCount++;\n            }\n        }\n        if (dotCount != 1) {\n            return \"No\";\n        }\n\n        String[] parts = file_name.split(\"\\\\.\");\n        if (parts.length != 2 || parts[0].isEmpty() || !Character.isLetter(parts[0].charAt(0))) {\n            return \"No\";\n        }\n\n        String[] validExtensions = {\"txt\", \"exe\", \"dll\"};\n        if (!Arrays.asList(validExtensions).contains(parts[1])) {\n            return \"No\";\n        }\n\n        return \"Yes\";\n    }\n}\n"}
{"task_id": "Java/142", "generation": "    int sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 3 == 0) {\n            sum += lst.get(i) * lst.get(i); // Square the integer entry\n        } else if (i % 4 == 0) {\n            sum += lst.get(i) * lst.get(i) * lst.get(i); // Cube the integer entry\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "Java/143", "generation": "        String[] words = sentence.split(\" \");\n        StringBuilder result = new StringBuilder();\n\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                result.append(word).append(\" \");\n            }\n        }\n\n        return result.toString().trim();\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"}
{"task_id": "Java/144", "generation": "    String[] xParts = x.split(\"/\");\n    String[] nParts = n.split(\"/\");\n    \n    int xNumerator = Integer.parseInt(xParts[0]);\n    int xDenominator = Integer.parseInt(xParts[1]);\n    \n    int nNumerator = Integer.parseInt(nParts[0]);\n    int nDenominator = Integer.parseInt(nParts[1]);\n    \n    int resultNumerator = xNumerator * nNumerator;\n    int resultDenominator = xDenominator * nDenominator;\n    \n    double result = (double) resultNumerator / resultDenominator;\n    \n    return result % 1 == 0;\n}\n\npublic static void main(String[] args) {\n    Solution solution = new Solution();\n    System.out.println(solution.simplify(\"1/5\", \"5/1\")); // true\n    System.out.println(solution.simplify(\"1/6\", \"2/1\")); // false\n    System.out.println(solution.simplify(\"7/10\", \"10/2\")); // false\n}\n"}
{"task_id": "Java/145", "generation": "        Collections.sort(nums, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer num1, Integer num2) {\n                int sum1 = getDigitSum(num1);\n                int sum2 = getDigitSum(num2);\n                if (sum1 == sum2) {\n                    return nums.indexOf(num1) - nums.indexOf(num2);\n                }\n                return sum1 - sum2;\n            }\n        });\n        return nums;\n    }\n\n    private int getDigitSum(int num) {\n        int sum = 0;\n        num = Math.abs(num);\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> nums = Arrays.asList(1, 11, -1, -11, -12);\n        System.out.println(solution.orderByPoints(nums)); // Output: [-1, -11, 1, -12, 11]\n        \n        List<Integer> emptyList = Arrays.asList();\n        System.out.println(solution.orderByPoints(emptyList)); // Output: []\n    }\n}\n"}
{"task_id": "Java/146", "generation": "    int count = 0;\n    for (int num : nums) {\n        if (num > 10 && isOdd(num) && isOdd(getFirstDigit(num))) {\n            count++;\n        }\n    }\n    return count;\n}\n\nprivate boolean isOdd(int num) {\n    return num % 2 != 0;\n}\n\nprivate int getFirstDigit(int num) {\n    String numStr = String.valueOf(Math.abs(num));\n    return Character.getNumericValue(numStr.charAt(0));\n}\n\npublic static void main(String[] args) {\n    Solution solution = new Solution();\n    System.out.println(solution.specialFilter(Arrays.asList(15, -73, 14, -15))); // Output: 1\n    System.out.println(solution.specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109))); // Output: 2\n}\n"}
{"task_id": "Java/147", "generation": "        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        \n        int count = 0;\n        for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        \n        return count;\n"}
{"task_id": "Java/148", "generation": "        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        \n        if (!planets.contains(planet1) || !planets.contains(planet2)) {\n            return new ArrayList<>();\n        }\n        \n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n        \n        int start = Math.min(index1, index2);\n        int end = Math.max(index1, index2);\n        \n        List<String> result = new ArrayList<>();\n        for (int i = start + 1; i < end; i++) {\n            result.add(planets.get(i));\n        }\n        \n        return result;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.bf(\"Jupiter\", \"Neptune\")); // Output: [\"Saturn\", \"Uranus\"]\n        System.out.println(solution.bf(\"Earth\", \"Mercury\")); // Output: [\"Venus\"]\n        System.out.println(solution.bf(\"Mercury\", \"Uranus\")); // Output: [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n    }\n}\n"}
{"task_id": "Java/149", "generation": "    // Filter out strings with odd lengths\n    List<String> filteredList = new ArrayList<>();\n    for (String str : lst) {\n        if (str.length() % 2 == 0) {\n            filteredList.add(str);\n        }\n    }\n    \n    // Sort the filtered list based on length and then alphabetically\n    Collections.sort(filteredList, (a, b) -> {\n        if (a.length() != b.length()) {\n            return a.length() - b.length();\n        } else {\n            return a.compareTo(b);\n        }\n    });\n    \n    return filteredList;\n}\n"}
{"task_id": "Java/150", "generation": "    if (isPrime(n)) {\n        return x;\n    } else {\n        return y;\n    }\n}\n\nprivate boolean isPrime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n"}
{"task_id": "Java/151", "generation": "    int sum = 0;\n    for (Object obj : lst) {\n        if (obj instanceof Integer) {\n            int num = (int) obj;\n            if (num > 0 && num % 2 != 0) {\n                sum += num * num;\n            }\n        }\n    }\n    return sum;\n}\n"}
{"task_id": "Java/152", "generation": "    List<Integer> differences = new ArrayList<>();\n    \n    for (int i = 0; i < game.size(); i++) {\n        int difference = Math.abs(game.get(i) - guess.get(i));\n        differences.add(difference);\n    }\n    \n    return differences;\n}\n"}
{"task_id": "Java/153", "generation": "        int maxStrength = Integer.MIN_VALUE;\n        String strongestExtension = \"\";\n        \n        for (String extension : extensions) {\n            int capCount = 0;\n            int smCount = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    capCount++;\n                } else if (Character.isLowerCase(c)) {\n                    smCount++;\n                }\n            }\n            int strength = capCount - smCount;\n            if (strength > maxStrength || (strength == maxStrength && extensions.indexOf(extension) < extensions.indexOf(strongestExtension))) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n        \n        return class_name + \".\" + strongestExtension;\n    }\n}\n"}
{"task_id": "Java/154", "generation": "    if (a.length() != b.length()) {\n        return false;\n    }\n    \n    String doubleA = a + a;\n    \n    return doubleA.contains(b);\n}\n"}
{"task_id": "Java/155", "generation": "    int evenCount = 0;\n    int oddCount = 0;\n    \n    String numStr = String.valueOf(Math.abs(num));\n    \n    for (int i = 0; i < numStr.length(); i++) {\n        int digit = Character.getNumericValue(numStr.charAt(i));\n        if (digit % 2 == 0) {\n            evenCount++;\n        } else {\n            oddCount++;\n        }\n    }\n    \n    List<Integer> result = new ArrayList<>();\n    result.add(evenCount);\n    result.add(oddCount);\n    \n    return result;\n}\n\npublic static void main(String[] args) {\n    Solution solution = new Solution();\n    System.out.println(solution.evenOddCount(-12)); // Output: [1, 1]\n    System.out.println(solution.evenOddCount(123)); // Output: [1, 2]\n}\n"}
{"task_id": "Java/156", "generation": "        TreeMap<Integer, String> romanMap = new TreeMap<>(Collections.reverseOrder());\n        romanMap.put(1000, \"M\");\n        romanMap.put(900, \"CM\");\n        romanMap.put(500, \"D\");\n        romanMap.put(400, \"CD\");\n        romanMap.put(100, \"C\");\n        romanMap.put(90, \"XC\");\n        romanMap.put(50, \"L\");\n        romanMap.put(40, \"XL\");\n        romanMap.put(10, \"X\");\n        romanMap.put(9, \"IX\");\n        romanMap.put(5, \"V\");\n        romanMap.put(4, \"IV\");\n        romanMap.put(1, \"I\");\n\n        StringBuilder result = new StringBuilder();\n        for (Map.Entry<Integer, String> entry : romanMap.entrySet()) {\n            int value = entry.getKey();\n            String numeral = entry.getValue();\n            while (number >= value) {\n                result.append(numeral);\n                number -= value;\n            }\n        }\n\n        return result.toString().toLowerCase();\n    }\n}\n"}
{"task_id": "Java/157", "generation": "        // Check if the sides can form a triangle\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return false;\n        }\n        \n        // Check if the triangle is a right-angled triangle\n        if (a * a + b * b == c * c || b * b + c * c == a * a || a * a + c * c == b * b) {\n            return true;\n        }\n        \n        return false;\n    }\n}\n"}
{"task_id": "Java/158", "generation": "    String maxWord = \"\";\n    int maxUniqueChars = 0;\n    \n    for (String word : words) {\n        Set<Character> uniqueChars = new HashSet<>();\n        for (char c : word.toCharArray()) {\n            uniqueChars.add(c);\n        }\n        \n        if (uniqueChars.size() > maxUniqueChars || \n            (uniqueChars.size() == maxUniqueChars && word.compareTo(maxWord) < 0)) {\n            maxWord = word;\n            maxUniqueChars = uniqueChars.size();\n        }\n    }\n    \n    return maxWord;\n}\n```\n\nYou can test this function with the provided examples:\n\n```java\npublic static void main(String[] args) {\n    Solution solution = new Solution();\n    \n    List<String> words1 = Arrays.asList(\"name\", \"of\", \"string\");\n    System.out.println(solution.findMax(words1)); // Output: \"string\"\n    \n    List<String> words2 = Arrays.asList(\"name\", \"enam\", \"game\");\n    System.out.println(solution.findMax(words2)); // Output: \"enam\"\n    \n    List<String> words3 = Arrays.asList(\"aaaaaaa\", \"bb\", \"cc\");\n    System.out.println(solution.findMax(words3)); // Output: \"aaaaaaa\"\n}\n"}
{"task_id": "Java/159", "generation": "        int totalCarrotsEaten = number + need;\n        int carrotsLeft = remaining - totalCarrotsEaten;\n        carrotsLeft = Math.max(0, carrotsLeft); // Ensure carrotsLeft is not negative\n        List<Integer> result = new ArrayList<>();\n        result.add(totalCarrotsEaten);\n        result.add(carrotsLeft);\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.eat(5, 6, 10)); // [11, 4]\n        System.out.println(solution.eat(4, 8, 9)); // [12, 1]\n        System.out.println(solution.eat(1, 10, 10)); // [11, 0]\n        System.out.println(solution.eat(2, 11, 5)); // [7, 0]\n    }\n}\n"}
{"task_id": "Java/160", "generation": "        int result = operand.get(0);\n        for (int i = 0; i < operator.size(); i++) {\n            String op = operator.get(i);\n            int nextOperand = operand.get(i + 1);\n            switch (op) {\n                case \"+\":\n                    result += nextOperand;\n                    break;\n                case \"-\":\n                    result -= nextOperand;\n                    break;\n                case \"*\":\n                    result *= nextOperand;\n                    break;\n                case \"/\":\n                    result /= nextOperand;\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, nextOperand);\n                    break;\n                default:\n                    System.out.println(\"Invalid operator: \" + op);\n            }\n        }\n        return result;\n    }\n}\n"}
{"task_id": "Java/161", "generation": "    StringBuilder result = new StringBuilder();\n    boolean hasLetter = false;\n    \n    for (char c : s.toCharArray()) {\n        if (Character.isLetter(c)) {\n            hasLetter = true;\n            if (Character.isUpperCase(c)) {\n                result.append(Character.toLowerCase(c));\n            } else {\n                result.append(Character.toUpperCase(c));\n            }\n        } else {\n            result.append(c);\n        }\n    }\n    \n    if (!hasLetter) {\n        return result.reverse().toString();\n    }\n    \n    return result.toString();\n}\n\npublic static void main(String[] args) {\n    Solution solution = new Solution();\n    System.out.println(solution.solve(\"1234\")); // Output: \"4321\"\n    System.out.println(solution.solve(\"ab\")); // Output: \"AB\"\n    System.out.println(solution.solve(\"#a@C\")); // Output: \"#A@c\"\n}\n"}
{"task_id": "Java/162", "generation": "    if (text.isEmpty()) {\n        return Optional.empty();\n    }\n\n    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n    md.update(text.getBytes());\n    byte[] digest = md.digest();\n\n    BigInteger bigInt = new BigInteger(1, digest);\n    String hashText = bigInt.toString(16);\n\n    // Pad with leading zeros if the length is less than 32\n    while (hashText.length() < 32) {\n        hashText = \"0\" + hashText;\n    }\n\n    return Optional.of(hashText);\n}\n"}
{"task_id": "Java/163", "generation": "    List<Integer> evenDigits = new ArrayList<>();\n    \n    for (int i = Math.min(a, b); i <= Math.max(a, b); i++) {\n        if (i % 2 == 0) {\n            evenDigits.add(i);\n        }\n    }\n    \n    return evenDigits;\n}\n"}
