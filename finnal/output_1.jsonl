{"task_id": "Java/0", "generation": "        // Sort the list of numbers\n        Collections.sort(numbers);\n\n        // Iterate through the list to check for closest elements\n        for (int i = 1; i < numbers.size(); i++) {\n            double diff = numbers.get(i) - numbers.get(i - 1);\n            if (diff < threshold) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Double> numbers1 = Arrays.asList(1.0, 2.0, 3.0);\n        System.out.println(solution.hasCloseElements(numbers1, 0.5)); // false\n\n        List<Double> numbers2 = Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0);\n        System.out.println(solution.hasCloseElements(numbers2, 0.3)); // true\n    }\n}"}
{"task_id": "Java/0", "generation": "        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) < threshold) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5));\n        System.out.println(solution.hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3));\n    }\n}"}
{"task_id": "Java/0", "generation": "        Collections.sort(numbers);\n        \n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = Math.abs(numbers.get(i) - numbers.get(i+1));\n            if (diff < threshold) {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n}"}
{"task_id": "Java/0", "generation": "        if(numbers == null || numbers.size() < 2) {\n            return false;\n        }\n        \n        Collections.sort(numbers);\n        \n        for(int i=0; i<numbers.size()-1; i++) {\n            double diff = Math.abs(numbers.get(i) - numbers.get(i+1));\n            if(diff < threshold) {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)); // false\n        System.out.println(solution.hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)); // true\n    }\n}"}
{"task_id": "Java/0", "generation": "        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = Math.abs(numbers.get(i) - numbers.get(i + 1));\n            if (diff < threshold) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)); // false\n        System.out.println(solution.hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)); // true\n    }\n}"}
{"task_id": "Java/1", "generation": "        List<String> result = new ArrayList<>();\n        int count = 0;\n        StringBuilder sb = new StringBuilder();\n        \n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                count++;\n            } else if (paren_string.charAt(i) == ')') {\n                count--;\n            }\n            \n            sb.append(paren_string.charAt(i));\n            \n            if (count == 0) {\n                result.add(sb.toString().replaceAll(\"\\\\s\",\"\"));\n                sb = new StringBuilder();\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String input = \"( ) (( )) (( )( ))\";\n        List<String> output = solution.separateParenGroups(input);\n        for (String str : output) {\n            System.out.println(str);\n        }\n    }\n}"}
{"task_id": "Java/1", "generation": "        List<String> result = new ArrayList<>();\n        StringBuilder currGroup = new StringBuilder();\n        int openCount = 0;\n        \n        // Remove spaces from the input string\n        paren_string = paren_string.replaceAll(\" \", \"\");\n        \n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                if (openCount > 0) {\n                    currGroup.append(c);\n                }\n                openCount++;\n            } else if (c == ')') {\n                openCount--;\n                if (openCount > 0) {\n                    currGroup.append(c);\n                } else {\n                    result.add(currGroup.toString());\n                    currGroup = new StringBuilder();\n                }\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the function with example input\n        String input = \"( ) (( )) (( )( ))\";\n        List<String> result = solution.separateParenGroups(input);\n        System.out.println(result);\n    }\n}"}
{"task_id": "Java/1", "generation": "        paren_string = paren_string.replace(\" \", \"\"); // remove spaces from the input string\n        List<String> result = new ArrayList<>();\n        int start = 0;\n        int end = 0;\n        \n        for (int i = 0; i < paren_string.length(); i++) {\n            if (paren_string.charAt(i) == '(') {\n                start = i;\n            } else if (paren_string.charAt(i) == ')') {\n                end = i;\n                result.add(paren_string.substring(start, end + 1));\n            }\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/1", "generation": "        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        \n        StringBuilder currentGroup = new StringBuilder();\n        \n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            \n            if (c == '(') {\n                stack.push(c);\n                currentGroup.append(c);\n            } else if (c == ')') {\n                stack.pop();\n                currentGroup.append(c);\n                \n                if (stack.isEmpty()) {\n                    result.add(currentGroup.toString());\n                    currentGroup = new StringBuilder();\n                }\n            }\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/1", "generation": "        List<String> groups = new ArrayList<>();\n        int count = 0;\n        StringBuilder current_group = new StringBuilder();\n        \n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                count++;\n                if (count == 1) {\n                    current_group = new StringBuilder();\n                }\n            } else if (c == ')') {\n                count--;\n                if (count == 0) {\n                    groups.add(current_group.toString());\n                }\n            }\n            \n            if (count > 0) {\n                current_group.append(c);\n            }\n        }\n        \n        return groups;\n    }\n}"}
{"task_id": "Java/2", "generation": "        int integerPart = (int) number; // Get the integer part by casting the number to an integer\n        double decimalPart = number - integerPart; // Subtract integer part from number to get decimal part\n        return decimalPart;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.truncateNumber(3.5)); // 0.5\n        System.out.println(solution.truncateNumber(6.78)); // 0.78\n        System.out.println(solution.truncateNumber(9.0)); // 0.0\n    }\n}"}
{"task_id": "Java/2", "generation": "        int intPart = (int) number;\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.truncateNumber(3.5)); // 0.5\n        System.out.println(solution.truncateNumber(6.72)); // 0.72\n        System.out.println(solution.truncateNumber(8.0)); // 0.0\n        System.out.println(solution.truncateNumber(17.89)); // 0.89\n    }\n}"}
{"task_id": "Java/2", "generation": "        int integerPart = (int) number;\n        return number - integerPart;\n    }\n\n    public static void main(String[] args) {\n        double number = 3.5;\n        Solution solution = new Solution();\n        System.out.println(solution.truncateNumber(number));\n    }\n}"}
{"task_id": "Java/2", "generation": "        int integerPart = (int) number;\n        double decimalPart = number - integerPart;\n        \n        return decimalPart;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.truncateNumber(3.5)); // 0.5\n        System.out.println(solution.truncateNumber(10.75)); // 0.75\n        System.out.println(solution.truncateNumber(5.6789)); // 0.6789\n    }\n}"}
{"task_id": "Java/2", "generation": "        // Get the integer part of the number by casting it to int\n        int intPart = (int) number;\n\n        // Calculate the decimal part by subtracting the integer part from the original number\n        double decimalPart = number - intPart;\n\n        return decimalPart;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.truncateNumber(3.5)); // Expected output: 0.5\n        System.out.println(solution.truncateNumber(5.25)); // Expected output: 0.25\n        System.out.println(solution.truncateNumber(8.123)); // Expected output: 0.123\n    }\n}"}
{"task_id": "Java/3", "generation": "        int balance = 0;\n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.belowZero(Arrays.asList(1, 2, 3))); // false\n        System.out.println(solution.belowZero(Arrays.asList(1, 2, -4, 5))); // true\n    }\n}"}
{"task_id": "Java/3", "generation": "        int balance = 0;\n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> test1 = Arrays.asList(1, 2, 3);\n        List<Integer> test2 = Arrays.asList(1, 2, -4, 5);\n\n        System.out.println(solution.belowZero(test1)); // false\n        System.out.println(solution.belowZero(test2)); // true\n    }\n}"}
{"task_id": "Java/3", "generation": "        int balance = 0;\n        \n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n}"}
{"task_id": "Java/3", "generation": "        int balance = 0;\n        \n        for(int operation : operations) {\n            balance += operation;\n            if(balance < 0) {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n}"}
{"task_id": "Java/3", "generation": "        int balance = 0;\n        \n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n}"}
{"task_id": "Java/4", "generation": "        // Calculate mean of the dataset\n        double mean = numbers.stream().mapToDouble(Double::doubleValue).average().orElse(Double.NaN);\n\n        // Calculate sum of absolute differences from mean\n        double sum = numbers.stream().mapToDouble(n -> Math.abs(n - mean)).sum();\n\n        // Calculate average absolute difference\n        double mad = sum / numbers.size();\n        \n        return mad;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Double> numbers = Arrays.asList(1.0, 2.0, 3.0, 4.0);\n        System.out.println(solution.meanAbsoluteDeviation(numbers)); // Output: 1.0\n    }\n}"}
{"task_id": "Java/4", "generation": "        double mean = calculateMean(numbers);\n        double sum = 0;\n        \n        for (double num : numbers) {\n            sum += Math.abs(num - mean);\n        }\n        \n        return sum / numbers.size();\n    }\n    \n    private double calculateMean(List<Double> numbers) {\n        double sum = 0;\n        \n        for (double num : numbers) {\n            sum += num;\n        }\n        \n        return sum / numbers.size();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Double> numbers = Arrays.asList(1.0, 2.0, 3.0, 4.0);\n        System.out.println(solution.meanAbsoluteDeviation(numbers)); // Output: 1.0\n    }\n}"}
{"task_id": "Java/4", "generation": "        double mean = calculateMean(numbers);\n        double sum = 0;\n        \n        for (double num : numbers) {\n            sum += Math.abs(num - mean);\n        }\n        \n        return sum / numbers.size();\n    }\n\n    private double calculateMean(List<Double> numbers) {\n        double sum = 0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        return sum / numbers.size();\n    }\n}"}
{"task_id": "Java/4", "generation": "        // Calculate the mean of the dataset\n        double sum = 0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n\n        // Calculate the absolute differences from the mean and sum them up\n        double sumDifferences = 0;\n        for (double num : numbers) {\n            sumDifferences += Math.abs(num - mean);\n        }\n\n        // Calculate the mean absolute deviation\n        double mad = sumDifferences / numbers.size();\n\n        return mad;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test the meanAbsoluteDeviation method\n        List<Double> testNumbers = Arrays.asList(1.0, 2.0, 3.0, 4.0);\n        System.out.println(solution.meanAbsoluteDeviation(testNumbers)); // Output should be 1.0\n    }\n}"}
{"task_id": "Java/4", "generation": "        double mean = calculateMean(numbers);\n        double sum = 0;\n        for (double num : numbers) {\n            sum += Math.abs(num - mean);\n        }\n        return sum / numbers.size();\n    }\n\n    private double calculateMean(List<Double> numbers) {\n        double sum = 0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        return sum / numbers.size();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Double> numbers = Arrays.asList(1.0, 2.0, 3.0, 4.0);\n        System.out.println(solution.meanAbsoluteDeviation(numbers));\n    }\n}"}
{"task_id": "Java/5", "generation": "        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i != numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n    \n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.intersperse(Arrays.asList(1, 2, 3), 4)); // Output: [1, 4, 2, 4, 3]\n        System.out.println(sol.intersperse(Arrays.asList(), 4)); // Output: []\n    }\n}"}
{"task_id": "Java/5", "generation": "        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        // Test the intersperse method\n        System.out.println(solution.intersperse(Arrays.asList(1, 2, 3), 4)); // [1, 4, 2, 4, 3]\n        System.out.println(solution.intersperse(Arrays.asList(10, 20, 30, 40), 50)); // [10, 50, 20, 50, 30, 50, 40]\n        System.out.println(solution.intersperse(Collections.emptyList(), 5)); // []\n    }\n}"}
{"task_id": "Java/5", "generation": "        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i != numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    } \n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.intersperse(Arrays.asList(1, 2, 3), 4));\n    }\n}"}
{"task_id": "Java/5", "generation": "        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i != numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test case 1\n        List<Integer> test1 = new ArrayList<>();\n        List<Integer> result1 = solution.intersperse(test1, 4);\n        System.out.println(\"Test case 1: \" + result1); // Expected output: []\n\n        // Test case 2\n        List<Integer> test2 = Arrays.asList(1, 2, 3);\n        List<Integer> result2 = solution.intersperse(test2, 4);\n        System.out.println(\"Test case 2: \" + result2); // Expected output: [1, 4, 2, 4, 3]\n    }\n}"}
{"task_id": "Java/5", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        \n        return result;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test case 1\n        List<Integer> test1 = solution.intersperse(Collections.emptyList(), 4);\n        System.out.println(test1); // Output: []\n        \n        // Test case 2\n        List<Integer> test2 = solution.intersperse(Arrays.asList(1, 2, 3), 4);\n        System.out.println(test2); // Output: [1, 4, 2, 4, 3]\n    }\n}"}
{"task_id": "Java/6", "generation": "        List<Integer> result = new ArrayList<>();\n        for (String group : paren_string.split(\" \")) {\n            int maxDepth = 0;\n            int currentDepth = 0;\n            for (char c : group.toCharArray()) {\n                if (c == '(') {\n                    currentDepth++;\n                    maxDepth = Math.max(maxDepth, currentDepth);\n                } else if (c == ')') {\n                    currentDepth--;\n                }\n            }\n            result.add(maxDepth);\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/6", "generation": "        List<Integer> depths = new ArrayList<>();\n        int depth = 0;\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                depth++;\n            } else if (c == ')') {\n                depths.add(depth);\n                depth--;\n            }\n        }\n        return depths;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String paren_string = \"(()()) ((())) () ((())()())\";\n        List<Integer> result = solution.parseNestedParens(paren_string);\n\n        for (int depth : result) {\n            System.out.print(depth + \" \");\n        }\n    }\n}"}
{"task_id": "Java/6", "generation": "        List<Integer> result = new ArrayList<>();\n        int maxDepth = 0;\n        int currentDepth = 0;\n        \n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                currentDepth++;\n                maxDepth = Math.max(maxDepth, currentDepth);\n            } else if (c == ')') {\n                currentDepth--;\n            } else if (c == ' ') {\n                result.add(maxDepth);\n                maxDepth = 0;\n                currentDepth = 0;\n            }\n        }\n        \n        result.add(maxDepth);\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.parseNestedParens(\"(()()) ((())) () ((())()())\"));\n        System.out.println(solution.parseNestedParens(\"((()))\"));\n        System.out.println(solution.parseNestedParens(\"()()()()()\"));\n        System.out.println(solution.parseNestedParens(\"(())(())(())\"));\n        System.out.println(solution.parseNestedParens(\"(((())))\"));\n    }\n}"}
{"task_id": "Java/6", "generation": "        List<Integer> result = new ArrayList<>();\n        for (String group : paren_string.split(\" \")) {\n            int maxDepth = 0, currentDepth = 0;\n            for (char c : group.toCharArray()) {\n                if (c == '(') {\n                    currentDepth++;\n                    maxDepth = Math.max(maxDepth, currentDepth);\n                } else if (c == ')') {\n                    currentDepth--;\n                }\n            }\n            result.add(maxDepth);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.parseNestedParens(\"(()()) ((())) () ((())()())\"));\n    }\n}"}
{"task_id": "Java/6", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (String group : paren_string.split(\" \")) {\n            int max_depth = 0;\n            int current_depth = 0;\n            \n            for (char c : group.toCharArray()) {\n                if (c == '(') {\n                    current_depth++;\n                    max_depth = Math.max(max_depth, current_depth);\n                } else if (c == ')') {\n                    current_depth--;\n                }\n            }\n            \n            result.add(max_depth);\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.parseNestedParens(\"(()()) ((())) () ((())()())\"));\n    }\n}"}
{"task_id": "Java/7", "generation": "        List<String> filteredList = new ArrayList<>();\n        \n        for (String str : strings) {\n            if (str.contains(substring)) {\n                filteredList.add(str);\n            }\n        }\n        \n        return filteredList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.filterBySubstring(List.of(), \"a\")); // []\n        System.out.println(solution.filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")); // [\"abc\", \"bacd\", \"array\"]\n    }\n}"}
{"task_id": "Java/7", "generation": "        List<String> filteredStrings = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                filteredStrings.add(s);\n            }\n        }\n        return filteredStrings;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the filterBySubstring method\n        System.out.println(solution.filterBySubstring(List.of(), \"a\")); // []\n        System.out.println(solution.filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")); // [\"abc\", \"bacd\", \"array\"]\n    }\n}"}
{"task_id": "Java/7", "generation": "        List<String> filteredStrings = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                filteredStrings.add(s);\n            }\n        }\n        return filteredStrings;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\"));\n    }\n}"}
{"task_id": "Java/7", "generation": "        List<String> filteredList = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                filteredList.add(str);\n            }\n        }\n        return filteredList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        List<String> test1 = new ArrayList<>();\n        System.out.println(solution.filterBySubstring(test1, \"a\")); // []\n        \n        List<String> test2 = Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\");\n        System.out.println(solution.filterBySubstring(test2, \"a\")); // [abc, bacd, array]\n    }\n}"}
{"task_id": "Java/7", "generation": "        List<String> filteredStrings = new ArrayList<>();\n        for (String str : strings) {\n            if (str.contains(substring)) {\n                filteredStrings.add(str);\n            }\n        }\n        return filteredStrings;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.filterBySubstring(List.of(), \"a\")); // []\n        System.out.println(solution.filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")); // [\"abc\", \"bacd\", \"array\"]\n    }\n}"}
{"task_id": "Java/8", "generation": "        int sum = 0;\n        int product = 1;\n        \n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n        \n        List<Integer> result = new ArrayList<>();\n        result.add(sum);\n        result.add(product);\n        \n        return result;\n    }\n}"}
{"task_id": "Java/8", "generation": "        int sum = 0;\n        int product = 1;\n        \n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n        \n        return Arrays.asList(sum, product);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test case 1\n        List<Integer> input1 = new ArrayList<>();\n        System.out.println(solution.sumProduct(input1)); // Output should be [0, 1]\n        \n        // Test case 2\n        List<Integer> input2 = Arrays.asList(1, 2, 3, 4);\n        System.out.println(solution.sumProduct(input2)); // Output should be [10, 24]\n    }\n}"}
{"task_id": "Java/8", "generation": "        int sum = 0;\n        int product = 1;\n\n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n\n        return Arrays.asList(sum, product);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.sumProduct(new ArrayList<>()));\n        System.out.println(solution.sumProduct(Arrays.asList(1, 2, 3, 4)));\n    }\n}"}
{"task_id": "Java/8", "generation": "        int sum = 0;\n        int product = 1;\n        \n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n        \n        return Arrays.asList(sum, product);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test case 1\n        List<Integer> emptyList = new ArrayList<>();\n        List<Integer> result1 = solution.sumProduct(emptyList);\n        System.out.println(result1); // Expected output: [0, 1]\n        \n        // Test case 2\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4);\n        List<Integer> result2 = solution.sumProduct(numbers);\n        System.out.println(result2); // Expected output: [10, 24]\n    }\n}"}
{"task_id": "Java/8", "generation": "        int sum = 0;\n        int product = 1;\n\n        for (Integer number : numbers) {\n            sum += number;\n            product *= number;\n        }\n\n        return Arrays.asList(sum, product);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test case 1\n        List<Integer> numbers1 = new ArrayList<>();\n        System.out.println(solution.sumProduct(numbers1)); // Output: [0, 1]\n        \n        // Test case 2\n        List<Integer> numbers2 = Arrays.asList(1, 2, 3, 4);\n        System.out.println(solution.sumProduct(numbers2)); // Output: [10, 24]\n    }\n}"}
{"task_id": "Java/9", "generation": "        List<Integer> rollingMax = new ArrayList<>();\n        Deque<Integer> deque = new LinkedList<>();\n\n        for (int i = 0; i < numbers.size(); i++) {\n            while (!deque.isEmpty() && deque.peekLast() < numbers.get(i)) {\n                deque.removeLast();\n            }\n            deque.addLast(numbers.get(i));\n\n            if (i >= 3) {\n                rollingMax.add(deque.peekFirst());\n                if (deque.peekFirst() == numbers.get(i - 3)) {\n                    deque.removeFirst();\n                }\n            }\n        }\n\n        return rollingMax;\n    }\n}"}
{"task_id": "Java/9", "generation": "        List<Integer> rollingMax = new ArrayList<>();\n        Deque<Integer> queue = new LinkedList<>();\n        \n        for (int i = 0; i < numbers.size(); i++) {\n            // Remove elements that are smaller than the current element\n            while (!queue.isEmpty() && queue.peekLast() < numbers.get(i)) {\n                queue.pollLast();\n            }\n            \n            // Add current element to the queue\n            queue.offer(numbers.get(i));\n            \n            // Add the rolling maximum to the result list\n            rollingMax.add(queue.peekFirst());\n            \n            // Remove elements that are outside the rolling window\n            if (i >= queue.peekFirst())\n                queue.pollFirst();\n        }\n        \n        return rollingMax;\n    }\n}"}
{"task_id": "Java/9", "generation": "        Deque<Integer> deque = new ArrayDeque<>();\n        List<Integer> result = new ArrayList<>();\n\n        for (int i = 0; i < numbers.size(); i++) {\n            while (!deque.isEmpty() && deque.peekLast() < numbers.get(i)) {\n                deque.pollLast();\n            }\n            deque.offerLast(numbers.get(i));\n\n            result.add(deque.peekFirst());\n\n            if (i >= 3 && deque.peekFirst() == numbers.get(i - 3)) {\n                deque.pollFirst();\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> numbers = Arrays.asList(1, 2, 3, 2, 3, 4, 2);\n        List<Integer> result = solution.rollingMax(numbers);\n        \n        System.out.println(result);\n    }\n}"}
{"task_id": "Java/9", "generation": "        List<Integer> rollingMaxList = new ArrayList<>();\n        Deque<Integer> deque = new ArrayDeque<>();\n\n        for (int i = 0; i < numbers.size(); i++) {\n            // Remove elements from the front that are out of the window\n            while (!deque.isEmpty() && deque.peekFirst() < i - 2) {\n                deque.pollFirst();\n            }\n\n            // Remove elements from the back which are less than the current element\n            while (!deque.isEmpty() && numbers.get(deque.peekLast()) < numbers.get(i)) {\n                deque.pollLast();\n            }\n\n            // Add the current element to the deque\n            deque.offerLast(i);\n\n            // Add the rolling maximum for the current window to the result list\n            rollingMaxList.add(numbers.get(deque.peekFirst()));\n        }\n\n        return rollingMaxList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 2, 3, 4, 2);\n        List<Integer> rollingMaxList = solution.rollingMax(numbers);\n        System.out.println(rollingMaxList);\n    }\n}"}
{"task_id": "Java/9", "generation": "        Deque<Integer> deque = new LinkedList<>();\n        List<Integer> result = new ArrayList<>();\n\n        for (int i = 0; i < numbers.size(); i++) {\n            while (!deque.isEmpty() && deque.peekLast() < numbers.get(i)) {\n                deque.pollLast();\n            }\n            deque.offerLast(numbers.get(i));\n\n            result.add(deque.peekFirst());\n\n            if (numbers.get(i) == deque.peekFirst()) {\n                deque.pollFirst();\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 2, 3, 4, 2);\n        List<Integer> rollingMax = solution.rollingMax(numbers);\n\n        System.out.println(rollingMax);\n    }\n}"}
{"task_id": "Java/10", "generation": "        if (string == null || string.length() == 0) {\n            return \"\";\n        }\n        int i = 0;\n        int j = string.length() - 1;\n        while (j >= 0) {\n            if (string.charAt(i) == string.charAt(j)) {\n                i++;\n            }\n            j--;\n        }\n        StringBuilder palindrome = new StringBuilder(string);\n        for (int k = i; k < string.length(); k++) {\n            palindrome.append(string.charAt(k));\n        }\n        return palindrome.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.makePalindrome(\"\")); // Output: \"\"\n        System.out.println(solution.makePalindrome(\"cat\")); // Output: \"catac\"\n        System.out.println(solution.makePalindrome(\"cata\")); // Output: \"catac\"\n    }\n}"}
{"task_id": "Java/10", "generation": "        if (string == null || string.length() == 0) {\n            return \"\";\n        }\n        \n        int n = string.length();\n        int i = n - 1;\n        while (i >= 0) {\n            if (isPalindrome(string.substring(i))) {\n                break;\n            }\n            i--;\n        }\n        \n        StringBuilder sb = new StringBuilder(string);\n        sb.append(new StringBuilder(string.substring(0, i)).reverse());\n        return sb.toString();\n    }\n}"}
{"task_id": "Java/10", "generation": "        int n = string.length();\n        if (n == 0) {\n            return \"\";\n        }\n        int i = n - 1;\n        while (i >= 0) {\n            if (isPalindrome(string.substring(i))) {\n                break;\n            }\n            i--;\n        }\n        StringBuilder sb = new StringBuilder();\n        sb.append(string);\n        for (int j = i - 1; j >= 0; j--) {\n            sb.append(string.charAt(j));\n        }\n        return sb.toString();\n    }\n}"}
{"task_id": "Java/10", "generation": "        if (string.isEmpty()) {\n            return \"\";\n        }\n        int i = 0;\n        int j = string.length() - 1;\n        while (j >= 0) {\n            if (string.charAt(i) == string.charAt(j)) {\n                i++;\n            }\n            j--;\n        }\n        String palindromicSuffix = string.substring(i);\n        String prefix = new StringBuilder(string.substring(0, i)).reverse().toString();\n        return string + prefix + palindromicSuffix;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test isPalindrome function\n        System.out.println(solution.isPalindrome(\"madam\")); // true\n        System.out.println(solution.isPalindrome(\"hello\")); // false\n\n        // Test makePalindrome function\n        System.out.println(solution.makePalindrome(\"cat\")); // catac\n        System.out.println(solution.makePalindrome(\"cata\")); // catac\n    }\n}"}
{"task_id": "Java/10", "generation": "        if (string == null || string.length() == 0) {\n            return \"\";\n        }\n\n        int i = string.length() - 1;\n        while (i >= 0 && !isPalindrome(string.substring(0, i + 1))) {\n            i--;\n        }\n\n        String prefix = string.substring(i + 1);\n        StringBuilder sb = new StringBuilder();\n        sb.append(string);\n        sb.append(new StringBuilder(prefix).reverse().toString());\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.makePalindrome(\"cat\")); // \"catac\"\n        System.out.println(solution.makePalindrome(\"cata\")); // \"catac\"\n    }\n}"}
{"task_id": "Java/11", "generation": "        StringBuilder sb = new StringBuilder();\n        \n        if(a.length() != b.length()){\n            return \"Invalid inputs\";\n        }\n        \n        for(int i=0; i<a.length(); i++){\n            if(a.charAt(i) == b.charAt(i)){\n                sb.append(\"0\");\n            } else {\n                sb.append(\"1\");\n            }\n        }\n        \n        return sb.toString();\n    }\n}"}
{"task_id": "Java/11", "generation": "        StringBuilder result = new StringBuilder();\n        \n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n                result.append(\"0\");\n            } else {\n                result.append(\"1\");\n            }\n        }\n        \n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.stringXor(\"010\", \"110\")); // Output: \"100\"\n    }\n}"}
{"task_id": "Java/11", "generation": "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n                sb.append(\"0\");\n            } else {\n                sb.append(\"1\");\n            }\n        }\n        return sb.toString();\n    }\n}"}
{"task_id": "Java/11", "generation": "        StringBuilder result = new StringBuilder();\n\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) != b.charAt(i)) {\n                result.append(\"1\");\n            } else {\n                result.append(\"0\");\n            }\n        }\n\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        String a = \"010\";\n        String b = \"110\";\n        System.out.println(solution.stringXor(a, b)); // Output: \"100\"\n    }\n}"}
{"task_id": "Java/11", "generation": "        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n                result.append(\"0\");\n            } else {\n                result.append(\"1\");\n            }\n        }\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.stringXor(\"010\", \"110\")); // \"100\"\n    }\n}"}
{"task_id": "Java/12", "generation": "        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        String longestString = strings.get(0);\n        for (String str : strings) {\n            if (str.length() > longestString.length()) {\n                longestString = str;\n            }\n        }\n        \n        return Optional.of(longestString);\n    }\n}"}
{"task_id": "Java/12", "generation": "        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        String longestString = strings.get(0);\n        for (String str : strings) {\n            if (str.length() > longestString.length()) {\n                longestString = str;\n            }\n        }\n        \n        return Optional.of(longestString);\n    }\n}"}
{"task_id": "Java/12", "generation": "        if(strings.isEmpty()){\n            return Optional.empty();\n        }\n        \n        String longestString = strings.get(0);\n        for(String str : strings){\n            if(str.length() > longestString.length()){\n                longestString = str;\n            }\n        }\n        \n        return Optional.of(longestString);\n    }\n}"}
{"task_id": "Java/12", "generation": "        if(strings.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        String longestString = \"\";\n        for(String str : strings) {\n            if(str.length() > longestString.length()) {\n                longestString = str;\n            }\n        }\n        \n        return Optional.of(longestString);\n    }\n}"}
{"task_id": "Java/12", "generation": "        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String longestString = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longestString.length()) {\n                longestString = s;\n            }\n        }\n\n        return Optional.of(longestString);\n    }\n}"}
{"task_id": "Java/13", "generation": "        if (b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(b, a % b);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.greatestCommonDivisor(3, 5)); // 1\n        System.out.println(solution.greatestCommonDivisor(25, 15)); // 5\n    }\n}"}
{"task_id": "Java/13", "generation": "        if (b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(b, a % b);\n    }\n}"}
{"task_id": "Java/13", "generation": "        if (b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(b, a % b);\n    }\n}"}
{"task_id": "Java/13", "generation": "        if (b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(b, a % b);\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.greatestCommonDivisor(3, 5)); // 1\n        System.out.println(sol.greatestCommonDivisor(25, 15)); // 5\n    }\n}"}
{"task_id": "Java/13", "generation": "        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n}"}
{"task_id": "Java/14", "generation": "        List<String> prefixes = new ArrayList<>();\n        StringBuilder currPrefix = new StringBuilder();\n        \n        for (int i = 0; i < string.length(); i++) {\n            currPrefix.append(string.charAt(i));\n            prefixes.add(currPrefix.toString());\n        }\n        \n        return prefixes;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the allPrefixes method\n        System.out.println(solution.allPrefixes(\"abc\")); // [\"a\", \"ab\", \"abc\"]\n    }\n}"}
{"task_id": "Java/14", "generation": "        List<String> prefixes = new ArrayList<>();\n        \n        for (int i = 0; i < string.length(); i++) {\n            prefixes.add(string.substring(0, i+1));\n        }\n        \n        return prefixes;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the allPrefixes method\n        String testString = \"abc\";\n        List<String> result = solution.allPrefixes(testString);\n        System.out.println(result);\n    }\n}"}
{"task_id": "Java/14", "generation": "        List<String> prefixes = new ArrayList<>();\n        String prefix = \"\";\n        \n        for (int i = 0; i < string.length(); i++) {\n            prefix += string.charAt(i);\n            prefixes.add(prefix);\n        }\n        \n        return prefixes;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the allPrefixes method\n        System.out.println(solution.allPrefixes(\"abc\")); // [\"a\", \"ab\", \"abc\"]\n    }\n}"}
{"task_id": "Java/14", "generation": "        List<String> prefixes = new ArrayList<>();\n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        return prefixes;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.allPrefixes(\"abc\")); // [\"a\", \"ab\", \"abc\"]\n        System.out.println(solution.allPrefixes(\"hello\")); // [\"h\", \"he\", \"hel\", \"hell\", \"hello\"]\n    }\n}"}
{"task_id": "Java/14", "generation": "        List<String> prefixes = new ArrayList<>();\n        \n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        \n        return prefixes;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the function with example test case\n        List<String> result = solution.allPrefixes(\"abc\");\n        System.out.println(result);\n    }\n}"}
{"task_id": "Java/15", "generation": "        StringBuilder sb = new StringBuilder();\n        \n        for (int i = 0; i <= n; i++) {\n            sb.append(i).append(\" \");\n        }\n        \n        return sb.toString().trim();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.stringSequence(0)); // \"0\"\n        System.out.println(solution.stringSequence(5)); // \"0 1 2 3 4 5\"\n    }\n}"}
{"task_id": "Java/15", "generation": "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.append(i).append(\" \");\n        }\n        return sb.toString().trim();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.stringSequence(0)); // \"0\"\n        System.out.println(solution.stringSequence(5)); // \"0 1 2 3 4 5\"\n    }\n}"}
{"task_id": "Java/15", "generation": "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n        }\n        return sb.toString().trim();\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.stringSequence(0)); // \"0\"\n        System.out.println(sol.stringSequence(5)); // \"0 1 2 3 4 5\"\n    }\n}"}
{"task_id": "Java/15", "generation": "        StringBuilder stringBuilder = new StringBuilder();\n        \n        for (int i = 0; i <= n; i++) {\n            stringBuilder.append(i);\n            if (i != n) {\n                stringBuilder.append(\" \");\n            }\n        }\n        \n        return stringBuilder.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.stringSequence(0)); // \"0\"\n        System.out.println(solution.stringSequence(5)); // \"0 1 2 3 4 5\"\n    }\n}"}
{"task_id": "Java/15", "generation": "        StringBuilder sb = new StringBuilder();\n        \n        for (int i = 0; i <= n; i++) {\n            sb.append(i);\n            if (i != n) {\n                sb.append(\" \");\n            }\n        }\n        \n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.stringSequence(0)); // \"0\"\n        System.out.println(solution.stringSequence(5)); // \"0 1 2 3 4 5\"\n    }\n}"}
{"task_id": "Java/16", "generation": "        // Use a hashset to keep track of distinct characters\n        Set<Character> distinctChars = new HashSet<>();\n\n        // Convert the string to lowercase to handle case insensitivity\n        String lowerString = string.toLowerCase();\n\n        // Iterate through each character in the string\n        for (char c : lowerString.toCharArray()) {\n            // Add the character to the hashset\n            distinctChars.add(c);\n        }\n\n        // Return the size of the hashset, which represents the number of distinct characters\n        return distinctChars.size();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.countDistinctCharacters(\"xyzXYZ\")); // Output: 3\n        System.out.println(solution.countDistinctCharacters(\"Jerry\")); // Output: 4\n    }\n}"}
{"task_id": "Java/16", "generation": "        // Create a HashSet to store distinct characters\n        Set<Character> charSet = new HashSet<>();\n        \n        // Convert the string to lowercase to ignore case sensitivity\n        string = string.toLowerCase();\n\n        // Iterate through the characters of the string and add them to the HashSet\n        for (int i = 0; i < string.length(); i++) {\n            charSet.add(string.charAt(i));\n        }\n        \n        // Return the size of the HashSet, which represents the number of distinct characters\n        return charSet.size();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.countDistinctCharacters(\"xyzXYZ\")); // Output: 3\n        System.out.println(solution.countDistinctCharacters(\"Jerry\")); // Output: 4\n    }\n}"}
{"task_id": "Java/16", "generation": "        // Convert the string to lowercase to ignore case\n        string = string.toLowerCase();\n        \n        // Use a set to store unique characters\n        Set<Character> uniqueChars = new HashSet<>();\n        \n        // Iterate through each character in the string and add it to the set\n        for(char c : string.toCharArray()) {\n            uniqueChars.add(c);\n        }\n        \n        // Return the size of the set, which is the count of distinct characters\n        return uniqueChars.size();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.countDistinctCharacters(\"xyzXYZ\")); // Output: 3\n        System.out.println(solution.countDistinctCharacters(\"Jerry\")); // Output: 4\n    }\n}"}
{"task_id": "Java/16", "generation": "        // Convert the string to lowercase to remove case sensitivity\n        string = string.toLowerCase();\n        \n        // Create a set to store distinct characters\n        Set<Character> charSet = new HashSet<>();\n        \n        // Iterate through the string and add distinct characters to the set\n        for (char c : string.toCharArray()) {\n            if (!charSet.contains(c)) {\n                charSet.add(c);\n            }\n        }\n        \n        // Return the size of the set, which represents the number of distinct characters\n        return charSet.size();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.countDistinctCharacters(\"xyzXYZ\")); // 3\n        System.out.println(solution.countDistinctCharacters(\"Jerry\")); // 4\n    }\n}"}
{"task_id": "Java/16", "generation": "        // Create a HashSet to store distinct characters\n        Set<Character> charSet = new HashSet<>();\n        \n        // Convert the input string to lowercase to make the comparison case-insensitive\n        String lowercaseString = string.toLowerCase();\n        \n        // Iterate through each character in the lowercase string\n        for (int i = 0; i < lowercaseString.length(); i++) {\n            char c = lowercaseString.charAt(i);\n            // Add the character to the HashSet if it's not already present\n            charSet.add(c);\n        }\n        \n        // Return the size of the HashSet, which represents the number of distinct characters\n        return charSet.size();\n    }\n}"}
{"task_id": "Java/17", "generation": "        List<Integer> beats = new ArrayList<>();\n        String[] notes = string.split(\" \");\n\n        for (String note : notes) {\n            switch (note) {\n                case \"o\":\n                    beats.add(4);\n                    break;\n                case \"o|\":\n                    beats.add(2);\n                    break;\n                case \".|\":\n                    beats.add(1);\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return beats;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test the parseMusic function\n        List<Integer> result = solution.parseMusic(\"o o| .| o| o| .| .| .| .| o o\");\n        System.out.println(result);\n    }\n}"}
{"task_id": "Java/17", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        String[] notes = string.split(\" \");\n        \n        for (String note : notes) {\n            if (note.equals(\"o\")) {\n                result.add(4);\n            } else if (note.equals(\"o|\")) {\n                result.add(2);\n            } else if (note.equals(\".|\")) {\n                result.add(1);\n            }\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/17", "generation": "        List<Integer> beats = new ArrayList<>();\n        \n        String[] notes = string.split(\" \");\n        \n        for (String note : notes) {\n            if (note.equals(\"o\")) {\n                beats.add(4);\n            } else if (note.equals(\"o|\")) {\n                beats.add(2);\n            } else if (note.equals(\".|\")) {\n                beats.add(1);\n            }\n        }\n        \n        return beats;\n    }\n}\n\nclass Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        String input = \"o o| .| o| o| .| .| .| .| o o\";\n        List<Integer> result = solution.parseMusic(input);\n        \n        System.out.println(result);\n    }\n}"}
{"task_id": "Java/17", "generation": "        List<Integer> beats = new ArrayList<>();\n        String[] notes = string.split(\" \");\n        \n        for (String note : notes) {\n            switch (note) {\n                case \"o\":\n                    beats.add(4);\n                    break;\n                case \"o|\":\n                    beats.add(2);\n                    break;\n                case \".|\":\n                    beats.add(1);\n                    break;\n                default:\n                    break;\n            }\n        }\n        \n        return beats;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.parseMusic(\"o o| .| o| o| .| .| .| .| o o\"));\n    }\n}"}
{"task_id": "Java/17", "generation": "        List<Integer> beats = new ArrayList<>();\n        String[] notes = string.split(\" \");\n\n        for (String note : notes) {\n            if (note.equals(\"o\")) {\n                beats.add(4);\n            } else if (note.equals(\"o|\")) {\n                beats.add(2);\n            } else if (note.equals(\".|\")) {\n                beats.add(1);\n            }\n        }\n\n        return beats;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.parseMusic(\"o o| .| o| o| .| .| .| .| o o\"));\n    }\n}"}
{"task_id": "Java/18", "generation": "        int count = 0;\n        int index = string.indexOf(substring, 0);\n        while (index != -1) {\n            count++;\n            index = string.indexOf(substring, index + 1);\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.howManyTimes(\"\", \"a\")); // 0\n        System.out.println(solution.howManyTimes(\"aaa\", \"a\")); // 3\n        System.out.println(solution.howManyTimes(\"aaaa\", \"aa\")); // 3\n    }\n}"}
{"task_id": "Java/18", "generation": "        if (string == null || substring == null || string.isEmpty() || substring.isEmpty()) {\n            return 0;\n        }\n        \n        int count = 0;\n        int index = 0;\n\n        while (index < string.length()) {\n            index = string.indexOf(substring, index);\n            if (index == -1) {\n                break;\n            }\n            count++;\n            index++;\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.howManyTimes(\"\", \"a\")); // 0\n        System.out.println(solution.howManyTimes(\"aaa\", \"a\")); // 3\n        System.out.println(solution.howManyTimes(\"aaaa\", \"aa\")); // 3\n    }\n}"}
{"task_id": "Java/18", "generation": "        if (substring.length() == 0) {\n            return 0;\n        }\n        \n        int count = 0;\n        int index = 0;\n        while ((index = string.indexOf(substring, index)) != -1) {\n            count++;\n            index++;\n        }\n        \n        return count;\n    }\n}"}
{"task_id": "Java/18", "generation": "        if (string == null || substring == null || string.isEmpty() || substring.isEmpty()) {\n            return 0;\n        }\n\n        int count = 0;\n        int index = 0;\n\n        while (index < string.length() - substring.length() + 1) {\n            if (string.substring(index, index + substring.length()).equals(substring)) {\n                count++;\n                index++;\n            } else {\n                index++;\n            }\n        }\n\n        return count;\n    }\n}\n\n// Running the tests to validate the solution\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.howManyTimes(\"\", \"a\")); // 0\n        System.out.println(solution.howManyTimes(\"aaa\", \"a\")); // 3\n        System.out.println(solution.howManyTimes(\"aaaa\", \"aa\")); // 3\n    }\n}"}
{"task_id": "Java/18", "generation": "        if (string == null || substring == null) {\n            return 0;\n        }\n        \n        int count = 0;\n        int index = 0;\n        while (index >= 0 && index < string.length()) {\n            index = string.indexOf(substring, index);\n            if (index >= 0) {\n                count++;\n                index++;\n            }\n        }\n        \n        return count;\n    }\n}"}
{"task_id": "Java/19", "generation": "        // Split the input string into individual numbers\n        String[] numberArr = numbers.split(\" \");\n\n        // Create a map to store the mapping of number words to their respective values\n        Map<String, Integer> numberMap = new HashMap<>();\n        numberMap.put(\"zero\", 0);\n        numberMap.put(\"one\", 1);\n        numberMap.put(\"two\", 2);\n        numberMap.put(\"three\", 3);\n        numberMap.put(\"four\", 4);\n        numberMap.put(\"five\", 5);\n        numberMap.put(\"six\", 6);\n        numberMap.put(\"seven\", 7);\n        numberMap.put(\"eight\", 8);\n        numberMap.put(\"nine\", 9);\n\n        // Create a list to store the numeric values of the numbers\n        List<Integer> numList = new ArrayList<>();\n\n        // Convert each number word to its corresponding numeric value and store in numList\n        for (String num : numberArr) {\n            numList.add(numberMap.get(num));\n        }\n\n        // Sort the numeric values\n        Collections.sort(numList);\n\n        // Create a StringBuilder to store the sorted numbers as words\n        StringBuilder result = new StringBuilder();\n\n        // Convert the sorted numeric values back to their corresponding number words\n        for (int i = 0; i < numList.size(); i++) {\n            for (Map.Entry<String, Integer> entry : numberMap.entrySet()) {\n                if (entry.getValue() == numList.get(i)) {\n                    result.append(entry.getKey());\n                    result.append(\" \");\n                    break;\n                }\n            }\n        }\n\n        // Remove the extra space at the end and return the result as a string\n        return result.toString().trim();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test the sortNumbers method\n        System.out.println(solution.sortNumbers(\"three one five\")); // \"one three five\"\n    }\n}"}
{"task_id": "Java/19", "generation": "        // Create a map to store the mapping of words to numbers\n        Map<String, Integer> map = new HashMap<>();\n        map.put(\"zero\", 0);\n        map.put(\"one\", 1);\n        map.put(\"two\", 2);\n        map.put(\"three\", 3);\n        map.put(\"four\", 4);\n        map.put(\"five\", 5);\n        map.put(\"six\", 6);\n        map.put(\"seven\", 7);\n        map.put(\"eight\", 8);\n        map.put(\"nine\", 9);\n        \n        // Split the input string by space\n        String[] words = numbers.split(\" \");\n        \n        // Create a list to store the numbers in integer form\n        List<Integer> nums = new ArrayList<>();\n        \n        // Convert words to numbers\n        for (String word : words) {\n            nums.add(map.get(word));\n        }\n        \n        // Sort the numbers\n        Collections.sort(nums);\n        \n        // Create a new string with sorted numbers\n        StringBuilder sb = new StringBuilder();\n        for (int num : nums) {\n            sb.append(map.entrySet().stream().filter(entry -> entry.getValue() == num).findFirst().get().getKey()).append(\" \");\n        }\n        \n        return sb.toString().trim();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.sortNumbers(\"three one five\"));  // Output: \"one three five\"\n    }\n}"}
{"task_id": "Java/19", "generation": "        // Map to store the mapping of number words to their corresponding integer values\n        Map<String, Integer> numberMap = new HashMap<>();\n        numberMap.put(\"zero\", 0);\n        numberMap.put(\"one\", 1);\n        numberMap.put(\"two\", 2);\n        numberMap.put(\"three\", 3);\n        numberMap.put(\"four\", 4);\n        numberMap.put(\"five\", 5);\n        numberMap.put(\"six\", 6);\n        numberMap.put(\"seven\", 7);\n        numberMap.put(\"eight\", 8);\n        numberMap.put(\"nine\", 9);\n        \n        // Split the input string by spaces\n        String[] numArr = numbers.split(\" \");\n        \n        // Sort the numbers based on their integer values\n        Arrays.sort(numArr, (a, b) -> {\n            return numberMap.get(a) - numberMap.get(b);\n        });\n        \n        // Join the sorted numbers back into a string\n        String sortedNumbers = String.join(\" \", numArr);\n        \n        return sortedNumbers;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the sortNumbers function\n        String input = \"three one five\";\n        System.out.println(solution.sortNumbers(input)); // Output: \"one three five\"\n    }\n}"}
{"task_id": "Java/19", "generation": "        Map<String, Integer> numberMap = new HashMap<>();\n        numberMap.put(\"zero\", 0);\n        numberMap.put(\"one\", 1);\n        numberMap.put(\"two\", 2);\n        numberMap.put(\"three\", 3);\n        numberMap.put(\"four\", 4);\n        numberMap.put(\"five\", 5);\n        numberMap.put(\"six\", 6);\n        numberMap.put(\"seven\", 7);\n        numberMap.put(\"eight\", 8);\n        numberMap.put(\"nine\", 9);\n        \n        List<String> numberList = Arrays.asList(numbers.split(\" \"));\n        Collections.sort(numberList, new Comparator<String>() {\n            @Override\n            public int compare(String num1, String num2) {\n                return Integer.compare(numberMap.get(num1), numberMap.get(num2));\n            }\n        });\n        \n        StringBuilder sb = new StringBuilder();\n        for (String num : numberList) {\n            sb.append(num).append(\" \");\n        }\n        \n        return sb.toString().trim();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.sortNumbers(\"three one five\")); // \"one three five\"\n    }\n}"}
{"task_id": "Java/19", "generation": "        // Split the input string into individual words\n        String[] words = numbers.split(\" \");\n        \n        // Create a map to store the numerical values of each word\n        Map<String, Integer> wordToNumber = new HashMap<>();\n        wordToNumber.put(\"zero\", 0);\n        wordToNumber.put(\"one\", 1);\n        wordToNumber.put(\"two\", 2);\n        wordToNumber.put(\"three\", 3);\n        wordToNumber.put(\"four\", 4);\n        wordToNumber.put(\"five\", 5);\n        wordToNumber.put(\"six\", 6);\n        wordToNumber.put(\"seven\", 7);\n        wordToNumber.put(\"eight\", 8);\n        wordToNumber.put(\"nine\", 9);\n        \n        // Create a list to store the numerical values of the words\n        List<Integer> numbersList = new ArrayList<>();\n        \n        // Convert the words to numbers and add them to the list\n        for (String word : words) {\n            numbersList.add(wordToNumber.get(word));\n        }\n        \n        // Sort the list\n        Collections.sort(numbersList);\n        \n        // Create a string builder to construct the final string\n        StringBuilder sortedNumbers = new StringBuilder();\n        \n        // Convert the numbers back to words and append them to the string builder\n        for (int number : numbersList) {\n            for (Map.Entry<String, Integer> entry : wordToNumber.entrySet()) {\n                if (entry.getValue() == number) {\n                    sortedNumbers.append(entry.getKey()).append(\" \");\n                    break;\n                }\n            }\n        }\n        \n        // Trim the extra space at the end and return the final string\n        return sortedNumbers.toString().trim();\n    }\n}"}
{"task_id": "Java/20", "generation": "        List<Double> sortedNumbers = new ArrayList<>(numbers);\n        Collections.sort(sortedNumbers);\n        \n        double minDiff = Double.MAX_VALUE;\n        List<Double> result = new ArrayList<>();\n\n        for (int i = 0; i < sortedNumbers.size() - 1; i++) {\n            double diff = Math.abs(sortedNumbers.get(i) - sortedNumbers.get(i + 1));\n            if (diff < minDiff) {\n                minDiff = diff;\n                result.clear();\n                result.add(sortedNumbers.get(i));\n                result.add(sortedNumbers.get(i + 1));\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))); // [2.0, 2.2]\n        System.out.println(solution.findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))); // [2.0, 2.0]\n    }\n}"}
{"task_id": "Java/20", "generation": "        // Sort the numbers to make finding the closest pair easier\n        Collections.sort(numbers);\n        \n        // Initialize variables to keep track of the closest pair and their difference\n        double minDiff = Double.MAX_VALUE;\n        double first = numbers.get(0);\n        double second = numbers.get(1);\n        \n        // Iterate through the list of numbers to find the closest pair\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = Math.abs(numbers.get(i) - numbers.get(i+1));\n            if (diff < minDiff) {\n                minDiff = diff;\n                first = numbers.get(i);\n                second = numbers.get(i+1);\n            }\n        }\n        \n        // Return the closest pair in order\n        List<Double> closestPair = new ArrayList<>();\n        closestPair.add(first);\n        closestPair.add(second);\n        return closestPair;\n    }\n}"}
{"task_id": "Java/20", "generation": "        // Sort the numbers in ascending order\n        Collections.sort(numbers);\n\n        // Initialize variables to keep track of the minimum difference and the pair of closest numbers\n        double minDiff = Double.MAX_VALUE;\n        List<Double> closestPair = new ArrayList<>();\n\n        // Iterate through the list of numbers\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            // Calculate the difference between the current number and the next number\n            double diff = Math.abs(numbers.get(i) - numbers.get(i + 1));\n            \n            // Update the minimum difference and the closest pair if the current difference is smaller\n            if (diff < minDiff) {\n                minDiff = diff;\n                closestPair.clear();\n                closestPair.add(numbers.get(i));\n                closestPair.add(numbers.get(i + 1));\n            }\n        }\n        \n        return closestPair;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test the solution with sample inputs\n        System.out.println(solution.findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)));\n        System.out.println(solution.findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)));\n    }\n}"}
{"task_id": "Java/20", "generation": "        Collections.sort(numbers);\n        List<Double> closest = new ArrayList<>();\n        double minDiff = Double.MAX_VALUE;\n        \n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = numbers.get(i+1) - numbers.get(i);\n            if (diff < minDiff) {\n                minDiff = diff;\n                closest.clear();\n                closest.add(numbers.get(i));\n                closest.add(numbers.get(i+1));\n            } else if (diff == minDiff) {\n                closest.add(numbers.get(i));\n                closest.add(numbers.get(i+1));\n            }\n        }\n        \n        return closest;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Double> numbers1 = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\n        List<Double> closest1 = solution.findClosestElements(numbers1);\n        System.out.println(closest1);\n        \n        List<Double> numbers2 = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0);\n        List<Double> closest2 = solution.findClosestElements(numbers2);\n        System.out.println(closest2);\n    }\n}"}
{"task_id": "Java/20", "generation": "        if (numbers == null || numbers.size() < 2) {\n            throw new IllegalArgumentException(\"List must contain at least two numbers\");\n        }\n        \n        // Sort the list of numbers\n        Collections.sort(numbers);\n        \n        double minDifference = Double.MAX_VALUE;\n        List<Double> closestNumbers = new ArrayList<>();\n        \n        // Iterate through the list to find the closest pair\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double difference = Math.abs(numbers.get(i) - numbers.get(i + 1));\n            if (difference < minDifference) {\n                minDifference = difference;\n                closestNumbers.clear();\n                closestNumbers.add(numbers.get(i));\n                closestNumbers.add(numbers.get(i + 1));\n            } else if (difference == minDifference) {\n                closestNumbers.add(numbers.get(i));\n                closestNumbers.add(numbers.get(i + 1));\n            }\n        }\n        \n        return closestNumbers;\n    }\n}"}
{"task_id": "Java/21", "generation": "        // Find the min and max values in the list\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        \n        // Calculate the range of values\n        double range = max - min;\n        \n        // Rescale each number in the list to range from 0 to 1\n        List<Double> rescaledNumbers = new ArrayList<>();\n        for (double num : numbers) {\n            double rescaledNum = (num - min) / range;\n            rescaledNumbers.add(rescaledNum);\n        }\n        \n        return rescaledNumbers;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        List<Double> numbers = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0);\n        List<Double> rescaledNumbers = sol.rescaleToUnit(numbers);\n        System.out.println(rescaledNumbers);\n    }\n}"}
{"task_id": "Java/21", "generation": "        // Find the minimum and maximum numbers in the list\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        \n        // Calculate the linear transform parameters\n        double slope = 1.0 / (max - min);\n        double intercept = -min * slope;\n        \n        // Apply the linear transform to each number in the list\n        List<Double> rescaledNumbers = new ArrayList<>();\n        for (double number : numbers) {\n            double rescaled = slope * number + intercept;\n            rescaledNumbers.add(rescaled);\n        }\n        \n        return rescaledNumbers;\n    }\n}"}
{"task_id": "Java/21", "generation": "        // Find the minimum and maximum values in the list\n        double min = numbers.get(0);\n        double max = numbers.get(0);\n        for (double num : numbers) {\n            if (num < min) {\n                min = num;\n            }\n            if (num > max) {\n                max = num;\n            }\n        }\n\n        // Calculate the range of values\n        double range = max - min;\n\n        // Apply linear transform to rescale the values to the range [0, 1]\n        List<Double> rescaledNumbers = new ArrayList<>();\n        for (double num : numbers) {\n            double rescaledNum = (num - min) / range;\n            rescaledNumbers.add(rescaledNum);\n        }\n\n        return rescaledNumbers;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        \n        List<Double> numbers = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0);\n        List<Double> rescaledNumbers = sol.rescaleToUnit(numbers);\n        \n        System.out.println(rescaledNumbers);\n    }\n}"}
{"task_id": "Java/21", "generation": "        List<Double> rescaledList = new ArrayList<>();\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        \n        for (double num : numbers) {\n            double rescaledNum = (num - min) / (max - min);\n            rescaledList.add(rescaledNum);\n        }\n        \n        return rescaledList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Double> numbers = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0);\n        List<Double> rescaledNumbers = solution.rescaleToUnit(numbers);\n        System.out.println(rescaledNumbers);\n    }\n}"}
{"task_id": "Java/21", "generation": "        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        double range = max - min;\n        \n        List<Double> rescaled = new ArrayList<>();\n        \n        for (double num : numbers) {\n            double rescaledNum = (num - min) / range;\n            rescaled.add(rescaledNum);\n        }\n        \n        return rescaled;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Double> numbers = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0);\n        List<Double> rescaled = solution.rescaleToUnit(numbers);\n\n        System.out.println(rescaled);\n    }\n}"}
{"task_id": "Java/22", "generation": "        List<Integer> integers = new ArrayList<>();\n        for (Object obj : values) {\n            if (obj instanceof Integer) {\n                integers.add((Integer)obj);\n            }\n        }\n        return integers;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Object> test1 = Arrays.asList('a', 3.14, 5);\n        System.out.println(solution.filterIntergers(test1)); // [5]\n        \n        List<Object> test2 = Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of());\n        System.out.println(solution.filterIntergers(test2)); // [1, 2, 3]\n    }\n}"}
{"task_id": "Java/22", "generation": "        List<Integer> integers = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                integers.add((Integer) value);\n            }\n        }\n        return integers;\n    }\n}"}
{"task_id": "Java/22", "generation": "        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Object> test1 = Arrays.asList('a', 3.14, 5);\n        List<Integer> result1 = solution.filterIntergers(test1);\n        System.out.println(result1);\n\n        List<Object> test2 = Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of());\n        List<Integer> result2 = solution.filterIntergers(test2);\n        System.out.println(result2);\n    }\n}"}
{"task_id": "Java/22", "generation": "        List<Integer> integers = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                integers.add((Integer) value);\n            }\n        }\n        return integers;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Object> values1 = Arrays.asList('a', 3.14, 5);\n        System.out.println(solution.filterIntergers(values1)); // [5]\n\n        List<Object> values2 = Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of());\n        System.out.println(solution.filterIntergers(values2)); // [1, 2, 3]\n    }\n}"}
{"task_id": "Java/22", "generation": "        List<Integer> integers = new ArrayList<>();\n        \n        for (Object value : values) {\n            if (value instanceof Integer) {\n                integers.add((Integer) value);\n            }\n        }\n        \n        return integers;\n    }\n}"}
{"task_id": "Java/23", "generation": "        return string.length();\n    }\n\n    /**\n    Convert the given string to uppercase\n    >>> toUpperCase(\"hello\")\n    \"HELLO\"\n    >>> toUpperCase(\"WoRld\")\n    \"WORLD\"\n     */\n    public String toUpperCase(String string) {\n        return string.toUpperCase();\n    }\n\n    /**\n    Reverse the given string\n    >>> reverseString(\"hello\")\n    \"olleh\"\n    >>> reverseString(\"abc123\")\n    \"321cba\"\n     */\n    public String reverseString(String string) {\n        return new StringBuilder(string).reverse().toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.strlen(\"\")); // 0\n        System.out.println(solution.strlen(\"abc\")); // 3\n\n        System.out.println(solution.toUpperCase(\"hello\")); // HELLO\n        System.out.println(solution.toUpperCase(\"WoRld\")); // WORLD\n\n        System.out.println(solution.reverseString(\"hello\")); // olleh\n        System.out.println(solution.reverseString(\"abc123\")); // 321cba\n    }\n}"}
{"task_id": "Java/23", "generation": "        return string.length();\n    }\n\n    /**\n    Reverse a string\n    >>> reverseString(\"hello\")\n    \"olleh\"\n    >>> reverseString(\"world\")\n    \"dlrow\"\n     */\n    public String reverseString(String string) {\n        char[] charArray = string.toCharArray();\n        int i = 0;\n        int j = string.length() - 1;\n        \n        while (i < j) {\n            char temp = charArray[i];\n            charArray[i] = charArray[j];\n            charArray[j] = temp;\n            i++;\n            j--;\n        }\n        \n        return new String(charArray);\n    }\n    \n    /**\n    Check if a string is palindrome\n    >>> isPalindrome(\"racecar\")\n    true\n    >>> isPalindrome(\"hello\")\n    false\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        \n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "Java/23", "generation": "        return string.length();\n    }\n\n    /**\n    Reverse a given string\n    >>> reverseString(\"hello\")\n    \"olleh\"\n    >>> reverseString(\"world\")\n    \"dlrow\"\n     */\n    public String reverseString(String string) {\n        // Convert string to char array\n        char[] charArray = string.toCharArray();\n        \n        // Use two pointers to reverse the string\n        int start = 0;\n        int end = string.length() - 1;\n        \n        while (start < end) {\n            char temp = charArray[start];\n            charArray[start] = charArray[end];\n            charArray[end] = temp;\n            start++;\n            end--;\n        }\n        \n        return new String(charArray);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.strlen(\"\")); // 0\n        System.out.println(solution.strlen(\"abc\")); // 3\n        \n        System.out.println(solution.reverseString(\"hello\")); // \"olleh\"\n        System.out.println(solution.reverseString(\"world\")); // \"dlrow\"\n    }\n}"}
{"task_id": "Java/23", "generation": "        return string.length();\n    }\n\n    /**\n    Reverse a given string\n    >>> reverseString(\"hello\")\n    \"olleh\"\n    >>> reverseString(\"racecar\")\n    \"racecar\"\n     */\n    public String reverseString(String string) {\n        char[] charArray = string.toCharArray();\n        int start = 0;\n        int end = string.length() - 1;\n\n        while (start < end) {\n            char temp = charArray[start];\n            charArray[start] = charArray[end];\n            charArray[end] = temp;\n            start++;\n            end--;\n        }\n\n        return new String(charArray);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.strlen(\"\"));\n        System.out.println(solution.strlen(\"abc\"));\n\n        System.out.println(solution.reverseString(\"hello\"));\n        System.out.println(solution.reverseString(\"racecar\"));\n    }\n}"}
{"task_id": "Java/23", "generation": "        return string.length();\n    }\n\n    /**\n    Return true if the given string is palindrome, false otherwise\n    >>> isPalindrome(\"racecar\")\n    true\n    >>> isPalindrome(\"hello\")\n    false\n     */\n    public boolean isPalindrome(String string) {\n        int left = 0;\n        int right = string.length() - 1;\n\n        while (left < right) {\n            if (string.charAt(left) != string.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases for strlen method\n        System.out.println(solution.strlen(\"\")); // 0\n        System.out.println(solution.strlen(\"abc\")); // 3\n\n        // Test cases for isPalindrome method\n        System.out.println(solution.isPalindrome(\"racecar\")); // true\n        System.out.println(solution.isPalindrome(\"hello\")); // false\n    }\n}"}
{"task_id": "Java/24", "generation": "        for (int i = n-1; i > 0; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return -1;\n    }"}
{"task_id": "Java/24", "generation": "        int largestDiv = 1;\n        \n        // Find all divisors of n\n        for (int i = 2; i <= n/2; i++) {\n            if (n % i == 0) {\n                largestDiv = Math.max(largestDiv, i);\n            }\n        }\n        \n        return largestDiv;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the largestDivisor method\n        int n = 15;\n        System.out.println(solution.largestDivisor(n));\n    }\n}"}
{"task_id": "Java/24", "generation": "        for (int i = n - 1; i >= 1; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.largestDivisor(15));  // Output: 5\n    }\n}"}
{"task_id": "Java/24", "generation": "        // Iterate from n-1 to 1 and find the largest number that divides n evenly\n        for (int i = n - 1; i >= 1; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return 1; // default return value\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.largestDivisor(15)); // Output: 5\n        System.out.println(solution.largestDivisor(25)); // Output: 5\n        System.out.println(solution.largestDivisor(36)); // Output: 18\n        System.out.println(solution.largestDivisor(100)); // Output: 50\n    }\n}"}
{"task_id": "Java/24", "generation": "        int largestDivisor = 1;\n        \n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                largestDivisor = i;\n            }\n        }\n        \n        return largestDivisor;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        Scanner scanner = new Scanner(System.in);\n        \n        System.out.print(\"Enter a number: \");\n        int n = scanner.nextInt();\n        \n        System.out.println(\"Largest divisor of \" + n + \" is: \" + sol.largestDivisor(n));\n    }\n}"}
{"task_id": "Java/25", "generation": "        List<Integer> factors = new ArrayList<>();\n        \n        // Check for factors of 2\n        while (n % 2 == 0) {\n            factors.add(2);\n            n /= 2;\n        }\n        \n        // Check for odd factors\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        \n        // If remaining number is a prime greater than 2\n        if (n > 2) {\n            factors.add(n);\n        }\n        \n        return factors;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.factorize(8)); // [2, 2, 2]\n        System.out.println(solution.factorize(25)); // [5, 5]\n        System.out.println(solution.factorize(70)); // [2, 5, 7]\n    }\n}"}
{"task_id": "Java/25", "generation": "        List<Integer> factors = new ArrayList<>();\n        \n        for (int i = 2; i*i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        \n        if (n > 1) {\n            factors.add(n);\n        }\n        \n        return factors;\n    }\n}"}
{"task_id": "Java/25", "generation": "        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        return factors;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.factorize(8)); // [2, 2, 2]\n        System.out.println(solution.factorize(25)); // [5, 5]\n        System.out.println(solution.factorize(70)); // [2, 5, 7]\n    }\n}"}
{"task_id": "Java/25", "generation": "        List<Integer> factors = new ArrayList<>();\n        \n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        \n        return factors;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.factorize(8)); // [2, 2, 2]\n        System.out.println(solution.factorize(25)); // [5, 5]\n        System.out.println(solution.factorize(70)); // [2, 5, 7]\n    }\n}"}
{"task_id": "Java/25", "generation": "        List<Integer> factors = new ArrayList<>();\n        \n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n = n / i;\n            }\n        }\n        \n        return factors;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.factorize(8)); // [2, 2, 2]\n        System.out.println(solution.factorize(25)); // [5, 5]\n        System.out.println(solution.factorize(70)); // [2, 5, 7]\n    }\n}"}
{"task_id": "Java/26", "generation": "        Set<Integer> set = new LinkedHashSet<>(numbers);\n        return new ArrayList<>(set);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        List<Integer> test1 = Arrays.asList(1, 2, 3, 2, 4);\n        System.out.println(solution.removeDuplicates(test1)); // [1, 3, 4]\n        \n        List<Integer> test2 = Arrays.asList(1, 1, 2, 2, 3, 3, 4, 4);\n        System.out.println(solution.removeDuplicates(test2)); // [1, 2, 3, 4]\n        \n        List<Integer> test3 = Arrays.asList(1, 2, 3, 4);\n        System.out.println(solution.removeDuplicates(test3)); // [1, 2, 3, 4]\n    }\n}"}
{"task_id": "Java/26", "generation": "        Set<Integer> seen = new HashSet<>();\n        List<Integer> result = new ArrayList<>();\n\n        for (Integer num : numbers) {\n            if (!seen.contains(num)) {\n                seen.add(num);\n                result.add(num);\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<Integer> numbers1 = Arrays.asList(1, 2, 3, 2, 4);\n        System.out.println(solution.removeDuplicates(numbers1)); // Output: [1, 3, 4]\n\n        // Test case 2\n        List<Integer> numbers2 = Arrays.asList(1, 1, 2, 2, 3, 3, 4, 4);\n        System.out.println(solution.removeDuplicates(numbers2)); // Output: [1, 2, 3, 4]\n\n        // Test case 3\n        List<Integer> numbers3 = Arrays.asList(1, 2, 3, 4);\n        System.out.println(solution.removeDuplicates(numbers3)); // Output: [1, 2, 3, 4]\n    }\n}"}
{"task_id": "Java/26", "generation": "        // Create a map to store the count of each element\n        Map<Integer, Integer> countMap = new HashMap<>();\n        \n        // Iterate through the list of numbers and update the count in the map\n        for (int num : numbers) {\n            countMap.put(num, countMap.getOrDefault(num, 0) + 1);\n        }\n        \n        // Filter out elements with count greater than 1\n        List<Integer> result = numbers.stream()\n                .filter(num -> countMap.get(num) == 1)\n                .collect(Collectors.toList());\n        \n        return result;\n    }\n}"}
{"task_id": "Java/26", "generation": "        Set<Integer> set = new HashSet<>();\n        List<Integer> result = new ArrayList<>();\n        \n        for (Integer num : numbers) {\n            if (!set.contains(num)) {\n                result.add(num);\n                set.add(num);\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> numbers = Arrays.asList(1, 2, 3, 2, 4);\n        List<Integer> result = solution.removeDuplicates(numbers);\n        \n        System.out.println(result.stream()\n                                 .map(String::valueOf)\n                                 .collect(Collectors.joining(\", \")));\n    }\n}"}
{"task_id": "Java/26", "generation": "        Set<Integer> seen = new HashSet<>();\n        List<Integer> result = new ArrayList<>();\n        \n        for (Integer number : numbers) {\n            if (!seen.contains(number)) {\n                result.add(number);\n                seen.add(number);\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 2, 4);\n        List<Integer> result = solution.removeDuplicates(numbers);\n\n        System.out.println(result.stream().map(Object::toString).collect(Collectors.joining(\", \")));\n    }\n}"}
{"task_id": "Java/27", "generation": "        char[] chars = string.toCharArray();\n        \n        for (int i = 0; i < chars.length; i++) {\n            char c = chars[i];\n            \n            if (Character.isLowerCase(c)) {\n                chars[i] = Character.toUpperCase(c);\n            } else if (Character.isUpperCase(c)) {\n                chars[i] = Character.toLowerCase(c);\n            }\n        }\n        \n        return new String(chars);\n    }\n}"}
{"task_id": "Java/27", "generation": "        char[] charArray = string.toCharArray();\n        for (int i = 0; i < charArray.length; i++) {\n            if (Character.isLowerCase(charArray[i])) {\n                charArray[i] = Character.toUpperCase(charArray[i]);\n            } else if (Character.isUpperCase(charArray[i])) {\n                charArray[i] = Character.toLowerCase(charArray[i]);\n            }\n        }\n        return new String(charArray);\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"Enter a string:\");\n        String input = scanner.nextLine();\n\n        Solution solution = new Solution();\n        String result = solution.flipCase(input);\n\n        System.out.println(\"Flipped case string: \" + result);\n    }\n}"}
{"task_id": "Java/27", "generation": "        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = Character.toUpperCase(chars[i]);\n            } else if (Character.isUpperCase(chars[i])) {\n                chars[i] = Character.toLowerCase(chars[i]);\n            }\n        }\n        return new String(chars);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.flipCase(\"Hello\")); // Output: \"hELLO\"\n    }\n}"}
{"task_id": "Java/27", "generation": "        char[] charArray = string.toCharArray();\n        for (int i = 0; i < charArray.length; i++) {\n            char c = charArray[i];\n            if (Character.isLowerCase(c)) {\n                charArray[i] = Character.toUpperCase(c);\n            } else if (Character.isUpperCase(c)) {\n                charArray[i] = Character.toLowerCase(c);\n            }\n        }\n        return new String(charArray);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.flipCase(\"Hello\")); // Output: hELLO\n        System.out.println(solution.flipCase(\"WORLD\")); // Output: world\n        System.out.println(solution.flipCase(\"HeLLo WoRLd\")); // Output: hEllO wOrlD\n    }\n}"}
{"task_id": "Java/27", "generation": "        char[] charArray = string.toCharArray();\n        \n        for (int i = 0; i < charArray.length; i++) {\n            char c = charArray[i];\n            if (Character.isLowerCase(c)) {\n                charArray[i] = Character.toUpperCase(c);\n            } else if (Character.isUpperCase(c)) {\n                charArray[i] = Character.toLowerCase(c);\n            }\n        }\n        \n        return new String(charArray);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the flipCase method\n        System.out.println(solution.flipCase(\"Hello\")); // \"hELLO\"\n    }\n}"}
{"task_id": "Java/28", "generation": "        StringBuilder sb = new StringBuilder();\n        for (String str : strings) {\n            sb.append(str);\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.concatenate(Arrays.asList(\"a\", \"b\", \"c\"))); // Output: \"abc\"\n        System.out.println(sol.concatenate(Collections.emptyList())); // Output: \"\"\n    }\n}"}
{"task_id": "Java/28", "generation": "        StringBuilder sb = new StringBuilder();\n        for (String str : strings) {\n            sb.append(str);\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<String> strings = Arrays.asList(\"a\", \"b\", \"c\");\n        System.out.println(solution.concatenate(strings)); // Output: \"abc\"\n    }\n}"}
{"task_id": "Java/28", "generation": "        StringBuilder sb = new StringBuilder();\n        for(String str : strings) {\n            sb.append(str);\n        }\n        return sb.toString();\n    }\n}"}
{"task_id": "Java/28", "generation": "        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.concatenate(Arrays.asList(\"a\", \"b\", \"c\")));\n    }\n}"}
{"task_id": "Java/28", "generation": "        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test case 1\n        List<String> strings1 = List.of();\n        System.out.println(solution.concatenate(strings1)); // Expected output: \"\"\n        \n        // Test case 2\n        List<String> strings2 = Arrays.asList(\"a\", \"b\", \"c\");\n        System.out.println(solution.concatenate(strings2)); // Expected output: \"abc\"\n    }\n}"}
{"task_id": "Java/29", "generation": "        return strings.stream()\n            .filter(s -> s.startsWith(prefix))\n            .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<String> test1 = solution.filterByPrefix(List.of(), \"a\");\n        System.out.println(test1); // []\n\n        List<String> test2 = solution.filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\");\n        System.out.println(test2); // [\"abc\", \"array\"]\n    }\n}"}
{"task_id": "Java/29", "generation": "        return strings.stream()\n                      .filter(s -> s.startsWith(prefix))\n                      .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.filterByPrefix(List.of(), \"a\")); // []\n        System.out.println(solution.filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")); // [\"abc\", \"array\"]\n    }\n}"}
{"task_id": "Java/29", "generation": "        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.filterByPrefix(List.of(), \"a\")); // []\n        System.out.println(solution.filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")); // [\"abc\", \"array\"]\n    }\n}"}
{"task_id": "Java/29", "generation": "        return strings.stream()\n                      .filter(s -> s.startsWith(prefix))\n                      .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<String> input1 = new ArrayList<>(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"));\n        String prefix1 = \"a\";\n        List<String> output1 = solution.filterByPrefix(input1, prefix1);\n        System.out.println(output1); // Output: [\"abc\", \"array\"]\n\n        List<String> input2 = new ArrayList<>(Arrays.asList(\"hello\", \"world\", \"java\", \"programming\"));\n        String prefix2 = \"p\";\n        List<String> output2 = solution.filterByPrefix(input2, prefix2);\n        System.out.println(output2); // Output: [\"programming\"]\n    }\n}"}
{"task_id": "Java/29", "generation": "        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.filterByPrefix(Collections.emptyList(), \"a\")); // []\n        System.out.println(solution.filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")); // [\"abc\", \"array\"]\n    }\n}"}
{"task_id": "Java/30", "generation": "        return l.stream()\n                .filter(num -> num > 0)\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> test1 = Arrays.asList(-1, 2, -4, 5, 6);\n        List<Integer> test2 = Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\n\n        System.out.println(solution.getPositive(test1));\n        System.out.println(solution.getPositive(test2));\n    }\n}"}
{"task_id": "Java/30", "generation": "        return l.stream()\n                .filter(num -> num > 0)\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> test1 = Arrays.asList(-1, 2, -4, 5, 6);\n        List<Integer> test2 = Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\n\n        System.out.println(solution.getPositive(test1)); // [2, 5, 6]\n        System.out.println(solution.getPositive(test2)); // [5, 3, 2, 3, 9, 123, 1]\n    }\n}"}
{"task_id": "Java/30", "generation": "        return l.stream()\n                .filter(num -> num > 0)\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> test1 = Arrays.asList(-1, 2, -4, 5, 6);\n        List<Integer> test2 = Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\n\n        System.out.println(solution.getPositive(test1)); // [2, 5, 6]\n        System.out.println(solution.getPositive(test2)); // [5, 3, 2, 3, 9, 123, 1]\n    }\n}"}
{"task_id": "Java/30", "generation": "        return l.stream()\n                .filter(num -> num > 0)\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> l1 = Arrays.asList(-1, 2, -4, 5, 6);\n        List<Integer> l2 = Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\n\n        System.out.println(solution.getPositive(l1));\n        System.out.println(solution.getPositive(l2));\n    }\n}"}
{"task_id": "Java/30", "generation": "        return l.stream()\n                .filter(num -> num > 0)\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> list1 = Arrays.asList(-1, 2, -4, 5, 6);\n        List<Integer> list2 = Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\n\n        System.out.println(solution.getPositive(list1)); // [2, 5, 6]\n        System.out.println(solution.getPositive(list2)); // [5, 3, 2, 3, 9, 123, 1]\n    }\n}"}
{"task_id": "Java/31", "generation": "        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.isPrime(6)); // false\n        System.out.println(solution.isPrime(101)); // true\n        System.out.println(solution.isPrime(11)); // true\n        System.out.println(solution.isPrime(13441)); // true\n        System.out.println(solution.isPrime(61)); // true\n        System.out.println(solution.isPrime(4)); // false\n        System.out.println(solution.isPrime(1)); // false\n    }\n}"}
{"task_id": "Java/31", "generation": "        if (n <= 1) {\n            return false;\n        }\n        if (n <= 3) {\n            return true;\n        }\n        if (n % 2 == 0 || n % 3 == 0) {\n            return false;\n        }\n        \n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.isPrime(6)); // false\n        System.out.println(solution.isPrime(101)); // true\n        System.out.println(solution.isPrime(11)); // true\n        System.out.println(solution.isPrime(13441)); // true\n        System.out.println(solution.isPrime(61)); // true\n        System.out.println(solution.isPrime(4)); // false\n        System.out.println(solution.isPrime(1)); // false\n    }\n}"}
{"task_id": "Java/31", "generation": "        if (n <= 1) {\n            return false;\n        }\n        if (n <= 3) {\n            return true;\n        }\n        if (n % 2 == 0 || n % 3 == 0) {\n            return false;\n        }\n\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}"}
{"task_id": "Java/31", "generation": "        if (n <= 1) {\n            return false;\n        }\n        if (n <= 3) {\n            return true;\n        }\n        if (n % 2 == 0 || n % 3 == 0) {\n            return false;\n        }\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/31", "generation": "        if (n <= 1) {\n            return false;\n        }\n        if (n == 2 || n == 3) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.isPrime(6)); // false\n        System.out.println(solution.isPrime(101)); // true\n        System.out.println(solution.isPrime(11)); // true\n        System.out.println(solution.isPrime(13441)); // true\n        System.out.println(solution.isPrime(61)); // true\n        System.out.println(solution.isPrime(4)); // false\n        System.out.println(solution.isPrime(1)); // false\n    }\n}"}
{"task_id": "Java/32", "generation": "        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"Invalid input. List size should be even.\");\n        }\n        \n        // Use the Rational Root Theorem to find potential roots\n        List<Double> potentialRoots = new ArrayList<>();\n        double lastNonZero = 0;\n        for (int i = xs.size() - 1; i >= 0; i--) {\n            if (xs.get(i) != 0) {\n                lastNonZero = xs.get(i);\n                for (int j = 1; j * j <= Math.abs(xs.get(i)); j++) {\n                    if (Math.abs(xs.get(i)) % j == 0) {\n                        potentialRoots.add((double) j);\n                        potentialRoots.add(-(double) j);\n                        if (j != Math.abs(xs.get(i)) / j) {\n                            potentialRoots.add((double) (Math.abs(xs.get(i)) / j));\n                            potentialRoots.add(-(double) (Math.abs(xs.get(i)) / j));\n                        }\n                    }\n                }\n                break;\n            }\n        }\n        \n        // Evaluate potential roots\n        for (double root : potentialRoots) {\n            if (Math.abs(poly(xs, root)) < 1e-6) {\n                return root;\n            }\n        }\n        \n        return lastNonZero; // If no zero found, return the largest non-zero coefficient\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.findZero(Arrays.asList(1.0, 2.0))); // Expected output: -0.5\n        System.out.println(sol.findZero(Arrays.asList(-6.0, 11.0, -6.0, 1.0))); // Expected output: 1.0\n    }\n}"}
{"task_id": "Java/32", "generation": "        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"List of coefficients must have an even number of elements\");\n        }\n        \n        // Find the largest non-zero coefficient\n        double largestNonZero = 0;\n        for (double coef : xs) {\n            if (coef != 0 && (coef > largestNonZero || largestNonZero == 0)) {\n                largestNonZero = coef;\n            }\n        }\n        \n        // Check if the polynomial has a zero-crossing\n        if (poly(xs, largestNonZero) * poly(xs, -largestNonZero) > 0) {\n            throw new IllegalArgumentException(\"Polynomial does not have a zero-crossing\");\n        }\n        \n        // Use binary search to find the zero point\n        double left = -largestNonZero;\n        double right = largestNonZero;\n        double epsilon = 1e-6;\n        while (Math.abs(right - left) > epsilon) {\n            double mid = (left + right) / 2;\n            double midValue = poly(xs, mid);\n            if (midValue == 0) {\n                return mid;\n            } else if (midValue * poly(xs, left) < 0) {\n                right = mid;\n            } else {\n                left = mid;\n            }\n        }\n        \n        return left;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        \n        List<Double> poly1 = Arrays.asList(1.0, 2.0); // f(x) = 1 + 2x\n        System.out.println(sol.findZero(poly1)); // Expected output: -0.5\n        \n        List<Double> poly2 = Arrays.asList(-6.0, 11.0, -6.0, 1.0); // f(x) = -6 + 11x - 6x^2 + x^3\n        System.out.println(sol.findZero(poly2)); // Expected output: 1.0\n    }\n}"}
{"task_id": "Java/32", "generation": "        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"The number of coefficients must be even.\");\n        }\n        \n        // The largest non-zero coefficient\n        double a = xs.get(xs.size() - 1);\n        \n        if (a == 0) {\n            throw new IllegalArgumentException(\"The largest coefficient must be non-zero.\");\n        }\n        \n        List<Double> modifiedCoefficients = new ArrayList<>();\n        \n        for (int i = 0; i < xs.size(); i++) {\n            modifiedCoefficients.add(xs.get(i) / a); // Divide all coefficients by largest non-zero coefficient\n        }\n\n        // Use Sturm's theorem to find number of roots between -1000 and 1000\n        // This assumes that there is only one root between -1000 and 1000\n        int rootsBetweenOneAndOneThousand = countRoots(modifiedCoefficients, 1000) - countRoots(modifiedCoefficients, -1000);\n        \n        if (rootsBetweenOneAndOneThousand != 1) {\n            throw new IllegalArgumentException(\"The polynomial must have exactly one root in the range of -1000 to 1000.\");\n        }\n        \n        // Use binary search to find the root within the range [-1000, 1000]\n        double left = -1000;\n        double right = 1000;\n        double epsilon = 1e-6;\n        while (right - left > epsilon) {\n            double mid = (left + right) / 2;\n            if (poly(modifiedCoefficients, mid) * poly(modifiedCoefficients, left) < 0) {\n                right = mid;\n            } else {\n                left = mid;\n            }\n        }\n        \n        return (left + right) / 2; // Return the approximate root\n    }\n    \n    /**\n    Counts the number of roots of the polynomial in the interval [-1000, x]\n    return the number of roots in the interval\n     */\n    private int countRoots(List<Double> xs, double x) {\n        int changes = 0;\n        double prev = poly(xs, -1000);\n        for (double i = -999; i <= x; i++) {\n            double curr = poly(xs, i);\n            if (prev * curr < 0) {\n                changes++;\n            }\n            prev = curr;\n        }\n        return changes;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.findZero(Arrays.asList(1.0, 2.0))); // Expected output: -0.5\n        System.out.println(solution.findZero(Arrays.asList(-6.0, 11.0, -6.0, 1.0))); // Expected output: 1.0\n    }\n}"}
{"task_id": "Java/32", "generation": "        if(xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"Number of coefficients must be even\");\n        }\n        \n        if(xs.get(xs.size()-2) == 0) {\n            throw new IllegalArgumentException(\"Largest non-zero coefficient should not be zero\");\n        }\n        \n        List<Double> firstDerivative = new ArrayList<>();\n        \n        for(int i = 1; i < xs.size(); i++) {\n            firstDerivative.add(xs.get(i) * i);\n        }\n        \n        List<Double> roots = new ArrayList<>();\n        \n        for(int i = 0; i < firstDerivative.size() - 1; i++) {\n            if ((firstDerivative.get(i) < 0 && firstDerivative.get(i + 1) > 0) || \n                (firstDerivative.get(i) > 0 && firstDerivative.get(i + 1) < 0)) {\n                \n                double a = xs.get(i) / firstDerivative.get(i);\n                double b = xs.get(i + 1) / firstDerivative.get(i + 1);\n                roots.add(a + (b - a) / 2);\n            }\n        }\n        \n        return roots.get(0);\n    }\n}"}
{"task_id": "Java/32", "generation": "        if (xs.size() % 2 != 0 || xs.isEmpty()) {\n            throw new IllegalArgumentException(\"Invalid input coefficients\");\n        }\n        \n        // Find the largest non-zero coefficient\n        double largestNonZero = 0;\n        for (double c : xs) {\n            if (c != 0 && Math.abs(c) > Math.abs(largestNonZero)) {\n                largestNonZero = c;\n            }\n        }\n        \n        // Only take coefficients where largestNonZero is the highest degree\n        List<Double> newCoefficients = new ArrayList<>();\n        int degree = xs.size() - 1;\n        for (double c : xs) {\n            if (c != 0 && Math.abs(c) == Math.abs(largestNonZero)) {\n                newCoefficients.add(c * Math.pow(-1, degree));\n                degree -= 2;\n            } else {\n                newCoefficients.add(0.0);\n            }\n        }\n        \n        // Find zero using largest coefficient\n        double x = -1.0;\n        double epsilon = 1e-10;\n        while (Math.abs(poly(newCoefficients, x)) > epsilon) {\n            x += 1.0;\n        }\n        \n        return x;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Double> coeffs1 = Arrays.asList(1.0, 2.0);\n        System.out.println(\"f(x) = 1 + 2x, Zero point: \" + solution.findZero(coeffs1));\n        \n        List<Double> coeffs2 = Arrays.asList(-6.0, 11.0, -6.0, 1.0);\n        System.out.println(\"(x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3, Zero point: \" + solution.findZero(coeffs2));\n    }\n}"}
{"task_id": "Java/33", "generation": "        List<Integer> sorted = new ArrayList<>(l);\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                List<Integer> sublist = new ArrayList<>();\n                for (int j = i; j < Math.min(i + 3, l.size()); j++) {\n                    sublist.add(l.get(j));\n                }\n                Collections.sort(sublist);\n                for (int j = i; j < Math.min(i + 3, l.size()); j++) {\n                    sorted.set(j, sublist.get(j - i));\n                }\n            }\n        }\n        return sorted;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> l1 = Arrays.asList(1, 2, 3);\n        List<Integer> result1 = solution.sortThird(l1);\n        System.out.println(result1); // Output: [1, 2, 3]\n\n        List<Integer> l2 = Arrays.asList(5, 6, 3, 4, 8, 9, 2);\n        List<Integer> result2 = solution.sortThird(l2);\n        System.out.println(result2); // Output: [2, 6, 3, 4, 8, 9, 5]\n    }\n}"}
{"task_id": "Java/33", "generation": "        List<Integer> sortedThird = new ArrayList<>();\n        \n        List<Integer> thirdIndices = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                thirdIndices.add(i);\n            }\n        }\n        \n        Collections.sort(thirdIndices);\n        \n        int thirdIndex = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (thirdIndex < thirdIndices.size() && i == thirdIndices.get(thirdIndex)) {\n                sortedThird.add(l.get(thirdIndices.get(thirdIndex)));\n                thirdIndex++;\n            } else {\n                sortedThird.add(l.get(i));\n            }\n        }\n        \n        return sortedThird;\n    }\n}"}
{"task_id": "Java/33", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                result.add(l.get(i));\n            } else {\n                result.add(-1);\n            }\n        }\n        \n        Collections.sort(result);\n        \n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 != 0) {\n                result.add(l.get(i));\n            }\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/33", "generation": "        List<Integer> result = new ArrayList<>(l);\n        \n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                List<Integer> sublist = new ArrayList<>();\n                for (int j = i; j < l.size(); j += 3) {\n                    sublist.add(l.get(j));\n                }\n                Collections.sort(sublist);\n                int index = 0;\n                for (int j = i; j < l.size(); j += 3) {\n                    result.set(j, sublist.get(index++));\n                }\n            }\n        }\n        \n        return result;\n    }\n}\n"}
{"task_id": "Java/33", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        // Loop through the list l\n        for (int i = 0; i < l.size(); i++) {\n            // Check if the index is divisible by three\n            if (i % 3 == 0) {\n                // Get the sublist containing the values at indices i, i+3, i+6, ...\n                List<Integer> tempList = new ArrayList<>();\n                for (int j = i; j < l.size(); j += 3) {\n                    tempList.add(l.get(j));\n                }\n                \n                // Sort the sublist\n                Collections.sort(tempList);\n                \n                // Add the sorted values to the result list\n                for (int j = i; j < l.size(); j += 3) {\n                    result.add(tempList.remove(0));\n                }\n            } else {\n                // Add the value at index i as is\n                result.add(l.get(i));\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n\n        // Test the function with sample inputs\n        System.out.println(sol.sortThird(Arrays.asList(1, 2, 3))); // [1, 2, 3]\n        System.out.println(sol.sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))); // [2, 6, 3, 4, 8, 9, 5]\n    }\n}"}
{"task_id": "Java/34", "generation": "        Set<Integer> uniqueSet = new HashSet<>(l);\n        List<Integer> uniqueList = new ArrayList<>(uniqueSet);\n        Collections.sort(uniqueList);\n        return uniqueList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> list = Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123);\n        List<Integer> uniqueList = solution.unique(list);\n        System.out.println(uniqueList);\n    }\n}"}
{"task_id": "Java/34", "generation": "        Set<Integer> uniqueSet = new HashSet<>(l);\n        List<Integer> uniqueList = new ArrayList<>(uniqueSet);\n        Collections.sort(uniqueList);\n        return uniqueList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> l = Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123);\n        List<Integer> uniqueList = solution.unique(l);\n        \n        System.out.println(uniqueList);\n    }\n}"}
{"task_id": "Java/34", "generation": "        Set<Integer> uniqueSet = new HashSet<>(l);\n        List<Integer> uniqueList = new ArrayList<>(uniqueSet);\n        Collections.sort(uniqueList);\n        return uniqueList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> input = Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123);\n        List<Integer> output = solution.unique(input);\n        System.out.println(output);\n    }\n}"}
{"task_id": "Java/34", "generation": "        Set<Integer> set = new HashSet<>(l);\n        List<Integer> uniqueList = new ArrayList<>(set);\n        Collections.sort(uniqueList);\n        return uniqueList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> l = Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123);\n        List<Integer> uniqueList = solution.unique(l);\n        System.out.println(uniqueList);\n    }\n}"}
{"task_id": "Java/34", "generation": "        Set<Integer> set = new HashSet<Integer>(l);\n        List<Integer> uniqueList = new ArrayList<Integer>(set);\n        Collections.sort(uniqueList);\n        return uniqueList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> input = Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123);\n        List<Integer> output = solution.unique(input);\n        System.out.println(output);\n    }\n}"}
{"task_id": "Java/35", "generation": "        int max = Integer.MIN_VALUE;\n        for (int num : l) {\n            if (num > max) {\n                max = num;\n            }\n        }\n        return max;\n    }\n}"}
{"task_id": "Java/35", "generation": "        int max = Integer.MIN_VALUE;\n        for (int num : l) {\n            if (num > max) {\n                max = num;\n            }\n        }\n        return max;\n    }\n}\n\n// Test\nclass Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> l1 = Arrays.asList(1, 2, 3);\n        List<Integer> l2 = Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\n        \n        System.out.println(solution.maxElement(l1)); // Output: 3\n        System.out.println(solution.maxElement(l2)); // Output: 123\n    }\n}"}
{"task_id": "Java/35", "generation": "        int max = Integer.MIN_VALUE;\n        for (int num : l) {\n            if (num > max) {\n                max = num;\n            }\n        }\n        return max;\n    }\n}"}
{"task_id": "Java/35", "generation": "        int max = Integer.MIN_VALUE;\n        for (int num : l) {\n            max = Math.max(max, num);\n        }\n        return max;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n\n        // Test cases\n        List<Integer> l1 = Arrays.asList(1, 2, 3);\n        List<Integer> l2 = Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\n\n        System.out.println(sol.maxElement(l1)); // Output: 3\n        System.out.println(sol.maxElement(l2)); // Output: 123\n    }\n}"}
{"task_id": "Java/35", "generation": "        int max = Integer.MIN_VALUE;\n        for (int num : l) {\n            if (num > max) {\n                max = num;\n            }\n        }\n        return max;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> l1 = Arrays.asList(1, 2, 3);\n        List<Integer> l2 = Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\n\n        System.out.println(solution.maxElement(l1));  // Output: 3\n        System.out.println(solution.maxElement(l2));  // Output: 123\n    }\n}"}
{"task_id": "Java/36", "generation": "        int count = 0;\n        \n        for (int i = 1; i < n; i++) {\n            if ((i % 11 == 0 || i % 13 == 0) && hasDigitSeven(i)) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n    \n    private boolean hasDigitSeven(int num) {\n        while (num > 0) {\n            if (num % 10 == 7) {\n                return true;\n            }\n            num /= 10;\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/36", "generation": "        int count = 0;\n        \n        for(int i=1; i<n; i++) {\n            if(i % 11 == 0 || i % 13 == 0) {\n                String numStr = String.valueOf(i);\n                for(int j=0; j<numStr.length(); j++) {\n                    if(numStr.charAt(j) == '7') {\n                        count++;\n                        break;\n                    }\n                }\n            }\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fizzBuzz(50)); // 0\n        System.out.println(solution.fizzBuzz(78)); // 2\n        System.out.println(solution.fizzBuzz(79)); // 3\n    }\n}"}
{"task_id": "Java/36", "generation": "        int count = 0;\n        \n        for (int i = 0; i < n; i++) {\n            if ((i % 11 == 0 || i % 13 == 0) && Integer.toString(i).contains(\"7\")) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}"}
{"task_id": "Java/36", "generation": "        int count = 0;\n        \n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String numStr = String.valueOf(i);\n                if (numStr.contains(\"7\")) {\n                    count++;\n                }\n            }\n        }\n        \n        return count;\n    }\n}"}
{"task_id": "Java/36", "generation": "        int count = 0;\n        \n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String numStr = String.valueOf(i);\n                for (int j = 0; j < numStr.length(); j++) {\n                    if (numStr.charAt(j) == '7') {\n                        count++;\n                    }\n                }\n            }\n        }\n        \n        return count;\n    }\n}"}
{"task_id": "Java/37", "generation": "        List<Integer> sortedEven = new ArrayList<>(l);\n        List<Integer> evenIndices = new ArrayList<>();\n        \n        // Get the even indices\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 != 0) {\n                evenIndices.add(i);\n            }\n        }\n        \n        // Sort the values at even indices\n        evenIndices.sort(Comparator.comparing(l::get));\n\n        // Update the values at even indices in sortedEven\n        for (int i = 0; i < evenIndices.size(); i++) {\n            sortedEven.set(evenIndices.get(i), l.get(evenIndices.get(i)));\n        }\n        \n        return sortedEven;\n    }\n}"}
{"task_id": "Java/37", "generation": "        List<Integer> sortedEven = new ArrayList<>();\n        List<Integer> evenValues = new ArrayList<>();\n        \n        // Separate even and odd values\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                evenValues.add(l.get(i));\n            } else {\n                sortedEven.add(l.get(i));\n            }\n        }\n        \n        // Sort even values\n        Collections.sort(evenValues);\n        \n        // Merge even and odd values\n        for (int i = 0, j = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                sortedEven.add(i, evenValues.get(j));\n                j++;\n            }\n        }\n        \n        return sortedEven;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        \n        List<Integer> l1 = Arrays.asList(1, 2, 3);\n        List<Integer> result1 = sol.sortEven(l1);\n        System.out.println(result1); // [1, 2, 3]\n        \n        List<Integer> l2 = Arrays.asList(5, 6, 3, 4);\n        List<Integer> result2 = sol.sortEven(l2);\n        System.out.println(result2); // [3, 6, 5, 4]\n    }\n}"}
{"task_id": "Java/37", "generation": "        List<Integer> sorted = new ArrayList<>(l);\n        List<Integer> evenValues = new ArrayList<>();\n\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                evenValues.add(l.get(i));\n            }\n        }\n\n        Collections.sort(evenValues);\n\n        int index = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 != 0) {\n                sorted.set(i, evenValues.get(index));\n                index++;\n            }\n        }\n\n        return sorted;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.sortEven(Arrays.asList(1, 2, 3)));\n        System.out.println(solution.sortEven(Arrays.asList(5, 6, 3, 4)));\n    }\n}"}
{"task_id": "Java/37", "generation": "        // Create a separate list for even indices values\n        List<Integer> evenValues = new ArrayList<>();\n        \n        // Iterate through the list to get values at even indices\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                evenValues.add(l.get(i));\n            }\n        }\n        \n        // Sort the even index values\n        Collections.sort(evenValues);\n        \n        // Create a new list to store the final result\n        List<Integer> result = new ArrayList<>();\n        \n        // Iterate through the original list to build the result list\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                result.add(evenValues.get(i / 2));\n            } else {\n                result.add(l.get(i));\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test the function with provided test cases\n        List<Integer> test1 = Arrays.asList(1, 2, 3);\n        List<Integer> test2 = Arrays.asList(5, 6, 3, 4);\n\n        System.out.println(solution.sortEven(test1));\n        System.out.println(solution.sortEven(test2));\n    }\n}"}
{"task_id": "Java/37", "generation": "        List<Integer> evenIndices = new ArrayList<>();\n        List<Integer> sortedEvenIndices = new ArrayList<>();\n        \n        // Populate evenIndices List with values from even indices of l\n        for (int i = 0; i < l.size(); i += 2) {\n            evenIndices.add(l.get(i));\n        }\n        \n        // Sort evenIndices List\n        Collections.sort(evenIndices);\n        \n        // Populate sortedEvenIndices with values from even indices sorted\n        int index = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                sortedEvenIndices.add(evenIndices.get(index));\n                index++;\n            } else {\n                sortedEvenIndices.add(l.get(i));\n            }\n        }\n        \n        return sortedEvenIndices;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n\n        // Test the sortEven function\n        List<Integer> test1 = Arrays.asList(1, 2, 3);\n        List<Integer> result1 = sol.sortEven(test1);\n        System.out.println(result1); // Output: [1, 2, 3]\n\n        List<Integer> test2 = Arrays.asList(5, 6, 3, 4);\n        List<Integer> result2 = sol.sortEven(test2);\n        System.out.println(result2); // Output: [3, 6, 5, 4]\n    }\n}"}
{"task_id": "Java/38", "generation": "        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // reverse cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test encodeCyclic function\n        String input1 = \"abcdefgh\";\n        String encoded1 = solution.encodeCyclic(input1);\n        System.out.println(\"Encoded string for '\" + input1 + \"': \" + encoded1);\n\n        // Test decodeCyclic function\n        String input2 = \"defghabc\";\n        String decoded2 = solution.decodeCyclic(input2);\n        System.out.println(\"Decoded string for '\" + input2 + \"': \" + decoded2);\n    }\n}"}
{"task_id": "Java/38", "generation": "        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // reverse cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String input = \"abcde12345\";\n        String encoded = solution.encodeCyclic(input);\n        System.out.println(\"Encoded string: \" + encoded);\n        String decoded = solution.decodeCyclic(encoded);\n        System.out.println(\"Decoded string: \" + decoded);\n\n        // Output:\n        // Encoded string: bcd12e345a\n        // Decoded string: abcde12345\n    }\n}"}
{"task_id": "Java/38", "generation": "        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group in reverse. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String input = \"abcde\";\n        String encoded = solution.encodeCyclic(input);\n        System.out.println(\"Encoded: \" + encoded);\n        String decoded = solution.decodeCyclic(encoded);\n        System.out.println(\"Decoded: \" + decoded);\n    }\n}"}
{"task_id": "Java/38", "generation": "        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // reverse cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String input = \"abcde\";\n        String encoded = solution.encodeCyclic(input);\n        System.out.println(\"Encoded string: \" + encoded);\n        String decoded = solution.decodeCyclic(encoded);\n        System.out.println(\"Decoded string: \" + decoded);\n    }\n}"}
{"task_id": "Java/38", "generation": "        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // reverse cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String input = \"abcde\";\n        String encoded = solution.encodeCyclic(input);\n        String decoded = solution.decodeCyclic(encoded);\n\n        System.out.println(\"Original: \" + input);\n        System.out.println(\"Encoded: \" + encoded);\n        System.out.println(\"Decoded: \" + decoded);\n    }\n}"}
{"task_id": "Java/39", "generation": "        int count = 0;\n        int num1 = 1;\n        int num2 = 1;\n        int primeFib = 0;\n        \n        while (count != n) {\n            int sum = num1 + num2;\n            num1 = num2;\n            num2 = sum;\n            \n            if (isPrime(sum)) {\n                primeFib = sum;\n                count++;\n            }\n        }\n        \n        return primeFib;\n    }\n    \n    public boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.primeFib(1));\n        System.out.println(solution.primeFib(2));\n        System.out.println(solution.primeFib(3));\n        System.out.println(solution.primeFib(4));\n        System.out.println(solution.primeFib(5));\n    }\n}"}
{"task_id": "Java/39", "generation": "        int count = 0;\n        int num = 1;\n        while (count < n) {\n            num++;\n            if (isFibonacci(num) && isPrime(num)) {\n                count++;\n            }\n        }\n        return num;\n    }\n\n    public boolean isFibonacci(int num) {\n        int a = 0;\n        int b = 1;\n        while (a < num) {\n            int temp = a;\n            a = b;\n            b = temp + b;\n        }\n        return a == num;\n    }\n\n    public boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.primeFib(1));\n        System.out.println(solution.primeFib(2));\n        System.out.println(solution.primeFib(3));\n        System.out.println(solution.primeFib(4));\n        System.out.println(solution.primeFib(5));\n    }\n}"}
{"task_id": "Java/39", "generation": "        int count = 0;\n        int num = 2;\n\n        while (count < n) {\n            if (isFibonacci(num) && isPrime(num)) {\n                count++;\n            }\n            num++;\n        }\n\n        return num - 1;\n    }\n\n    public boolean isFibonacci(int num) {\n        return isPerfectSquare(5 * num * num + 4) || isPerfectSquare(5 * num * num - 4);\n    }\n\n    public boolean isPerfectSquare(int num) {\n        int sqrt = (int) Math.sqrt(num);\n        return sqrt * sqrt == num;\n    }\n\n    public boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.primeFib(1));\n        System.out.println(solution.primeFib(2));\n        System.out.println(solution.primeFib(3));\n        System.out.println(solution.primeFib(4));\n        System.out.println(solution.primeFib(5));\n    }\n}"}
{"task_id": "Java/39", "generation": "        int count = 0;\n        int num = 1;\n        \n        while (count < n) {\n            num++;\n            if (isFibonacci(num) && isPrime(num)) {\n                count++;\n            }\n        }\n        \n        return num;\n    }\n    \n    // Function to check if a number is a Fibonacci number\n    public boolean isFibonacci(int n) {\n        double sqrt5 = Math.sqrt(5);\n        double phi = (1 + sqrt5) / 2;\n        int a = (int) Math.round(Math.pow(phi, 2));\n        int b = (int) Math.round(Math.pow(-phi, -2));\n        \n        return (a == n || b == n);\n    }\n    \n    // Function to check if a number is prime\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        \n        if (n <= 3) {\n            return true;\n        }\n        \n        if (n % 2 == 0 || n % 3 == 0) {\n            return false;\n        }\n        \n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n    \n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.primeFib(1)); // 2\n        System.out.println(sol.primeFib(2)); // 3\n        System.out.println(sol.primeFib(3)); // 5\n        System.out.println(sol.primeFib(4)); // 13\n        System.out.println(sol.primeFib(5)); // 89\n    }\n}"}
{"task_id": "Java/39", "generation": "        int count = 0;\n        int num = 2;\n\n        while (count < n) {\n            if (isFibonacci(num) && isPrime(num)) {\n                count++;\n            }\n            num++;\n        }\n\n        return num - 1;\n    }\n\n    public boolean isFibonacci(int num) {\n        int a = 5 * num * num;\n        return isPerfectSquare(a + 4) || isPerfectSquare(a - 4);\n    }\n\n    public boolean isPerfectSquare(int x) {\n        int sqr = (int)Math.sqrt(x);\n        return sqr * sqr == x;\n    }\n\n    public boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }"}
{"task_id": "Java/40", "generation": "        Collections.sort(l);\n\n        for (int i = 0; i < l.size() - 2; i++) {\n            int left = i + 1;\n            int right = l.size() - 1;\n            while (left < right) {\n                int sum = l.get(i) + l.get(left) + l.get(right);\n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.triplesSumToZero(Arrays.asList(1, 3, 5, 0))); // false\n        System.out.println(sol.triplesSumToZero(Arrays.asList(1, 3, -2, 1))); // true\n        System.out.println(sol.triplesSumToZero(Arrays.asList(1, 2, 3, 7))); // false\n        System.out.println(sol.triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))); // true\n        System.out.println(sol.triplesSumToZero(Arrays.asList(1))); // false\n    }\n}"}
{"task_id": "Java/40", "generation": "        int n = l.size();\n        if (n < 3) {\n            return false;\n        }\n        Collections.sort(l);\n        for (int i = 0; i < n - 2; i++) {\n            int left = i + 1, right = n - 1;\n            int a = l.get(i);\n            while (left < right) {\n                int b = l.get(left);\n                int c = l.get(right);\n                if (a + b + c == 0) {\n                    return true;\n                } else if (a + b + c < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.triplesSumToZero(Arrays.asList(1, 3, 5, 0)));\n        System.out.println(solution.triplesSumToZero(Arrays.asList(1, 3, -2, 1)));\n        System.out.println(solution.triplesSumToZero(Arrays.asList(1, 2, 3, 7)));\n        System.out.println(solution.triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7)));\n        System.out.println(solution.triplesSumToZero(Arrays.asList(1)));\n    }\n}"}
{"task_id": "Java/40", "generation": "        if (l == null || l.size() < 3) {\n            return false;\n        }\n        \n        Collections.sort(l);\n        \n        for (int i = 0; i < l.size() - 2; i++) {\n            int left = i + 1;\n            int right = l.size() - 1;\n            \n            while (left < right) {\n                int sum = l.get(i) + l.get(left) + l.get(right);\n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n        \n        return false;\n    }\n}"}
{"task_id": "Java/40", "generation": "        Collections.sort(l);\n        int n = l.size();\n        \n        for (int i = 0; i < n - 2; i++) {\n            int a = l.get(i);\n            int start = i + 1;\n            int end = n - 1;\n            \n            while (start < end) {\n                int b = l.get(start);\n                int c = l.get(end);\n                \n                if (a + b + c == 0) {\n                    return true;\n                } else if (a + b + c < 0) {\n                    start++;\n                } else {\n                    end--;\n                }\n            }\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.triplesSumToZero(Arrays.asList(1, 3, 5, 0))); // false\n        System.out.println(solution.triplesSumToZero(Arrays.asList(1, 3, -2, 1))); // true\n        System.out.println(solution.triplesSumToZero(Arrays.asList(1, 2, 3, 7))); // false\n        System.out.println(solution.triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))); // true\n        System.out.println(solution.triplesSumToZero(Arrays.asList(1))); // false\n    }\n}"}
{"task_id": "Java/40", "generation": "        // Sort the list\n        Collections.sort(l);\n\n        // Loop through the list\n        for (int i = 0; i < l.size() - 2; i++) {\n            // Use two pointers approach\n            int left = i + 1;\n            int right = l.size() - 1;\n            \n            while (left < right) {\n                int sum = l.get(i) + l.get(left) + l.get(right);\n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.triplesSumToZero(Arrays.asList(1, 3, 5, 0)));\n        System.out.println(solution.triplesSumToZero(Arrays.asList(1, 3, -2, 1)));\n        System.out.println(solution.triplesSumToZero(Arrays.asList(1, 2, 3, 7)));\n        System.out.println(solution.triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7)));\n        System.out.println(solution.triplesSumToZero(Arrays.asList(1)));\n    }\n}"}
{"task_id": "Java/41", "generation": "        // total number of collisions\n        int collisions = 0;\n        \n        // Since all cars are moving at the same speed, the collision will happen when\n        // one set of cars has moved exactly n positions compared to the other set.\n        // For example, if n=3, the collision will happen when the first car from left to right\n        // is at position 3 and the first car from right to left is at position 0.\n        // This happens for n/2 cars.\n        \n        // Return the number of collisions (n/2) based on above understanding\n        return n/2;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.carRaceCollision(3)); // Expected output: 1\n        System.out.println(solution.carRaceCollision(5)); // Expected output: 2\n        System.out.println(solution.carRaceCollision(8)); // Expected output: 4\n    }\n}"}
{"task_id": "Java/41", "generation": "        // Calculate the number of collisions using combinatorics\n        // Each left-bound car must collide with a right-bound car\n        // Therefore, the total number of collisions is n choose 2\n        int collisions = n * (n-1) / 2;\n        \n        return collisions;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        int n1 = 5;\n        System.out.println(solution.carRaceCollision(n1)); // Output: 10\n\n        // Test case 2\n        int n2 = 3;\n        System.out.println(solution.carRaceCollision(n2)); // Output: 3\n    }\n}"}
{"task_id": "Java/41", "generation": "        // Total number of collisions\n        int collisions = 0;\n        \n        // Number of collisions for each pair of matched cars\n        for (int i = 1; i <= n; i++) {\n            collisions += i;\n        }\n        \n        return collisions;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test case 1\n        int n1 = 1;\n        System.out.println(solution.carRaceCollision(n1)); // Output: 1\n        \n        // Test case 2\n        int n2 = 2;\n        System.out.println(solution.carRaceCollision(n2)); // Output: 3\n    }\n}"}
{"task_id": "Java/41", "generation": "        // Calculate the number of collisions between cars moving in opposite directions\n        // Since all cars move at the same speed, collisions will occur at regular intervals\n        // For a car moving left to right, it will collide with a car moving right to left every 2n distance\n        \n        int distanceBetweenCollisions = 2 * n;\n        \n        // Calculate the number of collisions that will occur within a certain distance\n        // The number of collisions is equal to the number of pairs of cars that can collide\n        // This can be calculated using combinations formula: nCr = n! / (r! * (n-r)!)\n        \n        int collisions = n * (n - 1) / 2;\n        \n        return collisions;\n    }\n\n    public static void main(String[] args) {\n        // Test the function with an example\n        Solution solution = new Solution();\n        int n = 5;\n        int result = solution.carRaceCollision(n);\n        System.out.println(\"Number of collisions: \" + result);\n    }\n}"}
{"task_id": "Java/41", "generation": "        // Calculate the total number of collisions\n        // using the concept of permutations\n        return n * (n - 1) / 2;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test the function with some example inputs\n        int n1 = 1;\n        System.out.println(solution.carRaceCollision(n1)); // Output should be 0\n\n        int n2 = 2;\n        System.out.println(solution.carRaceCollision(n2)); // Output should be 1\n\n        int n3 = 3;\n        System.out.println(solution.carRaceCollision(n3)); // Output should be 3\n    }\n}"}
{"task_id": "Java/42", "generation": "        return l.stream().map(num -> num + 1).collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.incrList(Arrays.asList(1, 2, 3))); // [2, 3, 4]\n        System.out.println(solution.incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))); // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    }\n}"}
{"task_id": "Java/42", "generation": "        return l.stream().map(x -> x + 1).collect(Collectors.toList());\n    }\n}"}
{"task_id": "Java/42", "generation": "        return l.stream()\n                .map(num -> num + 1)\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> test1 = Arrays.asList(1, 2, 3);\n        List<Integer> test2 = Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123);\n\n        System.out.println(solution.incrList(test1));\n        System.out.println(solution.incrList(test2));\n    }\n}"}
{"task_id": "Java/42", "generation": "        return l.stream()\n                .map(num -> num + 1)\n                .collect(Collectors.toList());\n    }\n}"}
{"task_id": "Java/42", "generation": "        return l.stream().map(num -> num + 1).collect(Collectors.toList());\n    }\n}"}
{"task_id": "Java/43", "generation": "        // Create a set to store the numbers seen so far\n        Set<Integer> set = new HashSet<>();\n        \n        // Iterate through each element in the list\n        for (int num : l) {\n            // Check if the negative of the current number exists in the set\n            if (set.contains(-num)) {\n                return true;\n            }\n            // Add the current number to the set\n            set.add(num);\n        }\n        \n        // If we reach this point, no two distinct elements sum to zero\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.pairsSumToZero(Arrays.asList(1, 3, 5, 0))); // false\n        System.out.println(solution.pairsSumToZero(Arrays.asList(1, 3, -2, 1))); // false\n        System.out.println(solution.pairsSumToZero(Arrays.asList(1, 2, 3, 7))); // false\n        System.out.println(solution.pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))); // true\n        System.out.println(solution.pairsSumToZero(Arrays.asList(1))); // false\n    }\n}"}
{"task_id": "Java/43", "generation": "        Set<Integer> set = new HashSet<Integer>();\n        for (int num : l) {\n            if (set.contains(-num)) {\n                return true;\n            }\n            set.add(num);\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/43", "generation": "        Set<Integer> seen = new HashSet<>();\n        for (int num : l) {\n            if (seen.contains(-num)) {\n                return true;\n            }\n            seen.add(num);\n        }\n        return false;\n    }\n}"}
{"task_id": "Java/43", "generation": "        Set<Integer> set = new HashSet<>();\n        for (int num : l) {\n            if (set.contains(-num)) {\n                return true;\n            }\n            set.add(num);\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.pairsSumToZero(Arrays.asList(1, 3, 5, 0))); // false\n        System.out.println(solution.pairsSumToZero(Arrays.asList(1, 3, -2, 1))); // false\n        System.out.println(solution.pairsSumToZero(Arrays.asList(1, 2, 3, 7))); // false\n        System.out.println(solution.pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))); // true\n        System.out.println(solution.pairsSumToZero(Arrays.asList(1))); // false\n    }\n}"}
{"task_id": "Java/43", "generation": "        Set<Integer> seen = new HashSet<>();\n        \n        for (int num : l) {\n            if (seen.contains(-num)) {\n                return true;\n            }\n            seen.add(num);\n        }\n        \n        return false;\n    }\n}"}
{"task_id": "Java/44", "generation": "        StringBuilder sb = new StringBuilder();\n        \n        while (x > 0) {\n            int remainder = x % base;\n            sb.insert(0, remainder);\n            x = x / base;\n        }\n        \n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n\n        System.out.println(sol.changeBase(8, 3)); // should return \"22\"\n        System.out.println(sol.changeBase(8, 2)); // should return \"1000\"\n        System.out.println(sol.changeBase(7, 2)); // should return \"111\"\n    }\n}"}
{"task_id": "Java/44", "generation": "        if (base < 2 || base > 9) {\n            // throw an exception if base is not within the valid range\n            throw new IllegalArgumentException(\"Base should be between 2 and 9\");\n        }\n\n        StringBuilder sb = new StringBuilder();\n\n        while (x > 0) {\n            sb.insert(0, x % base);\n            x /= base;\n        }\n\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.changeBase(8, 3)); // Output: \"22\"\n        System.out.println(solution.changeBase(8, 2)); // Output: \"1000\"\n        System.out.println(solution.changeBase(7, 2)); // Output: \"111\"\n    }\n}"}
{"task_id": "Java/44", "generation": "        // Initialize a stack to store remainders\n        Stack<Integer> stack = new Stack<>();\n        \n        // Continue until x becomes 0\n        while (x != 0) {\n            stack.push(x % base); // Push remainder to stack\n            x = x / base; // Update value of x\n        }\n        \n        // Create a string out of the stack contents\n        StringBuilder sb = new StringBuilder();\n        while (!stack.isEmpty()) {\n            sb.append(stack.pop());\n        }\n        \n        return sb.toString();\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.changeBase(8, 3)); // \"22\"\n        System.out.println(solution.changeBase(8, 2)); // \"1000\"\n        System.out.println(solution.changeBase(7, 2)); // \"111\"\n    }\n}"}
{"task_id": "Java/44", "generation": "        if (base < 2 || base > 9) {\n            throw new IllegalArgumentException(\"Base should be between 2 and 9\");\n        }\n\n        StringBuilder result = new StringBuilder();\n        while (x > 0) {\n            result.insert(0, x % base);\n            x /= base;\n        }\n\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.changeBase(8, 3)); // Output: \"22\"\n        System.out.println(solution.changeBase(8, 2)); // Output: \"1000\"\n        System.out.println(solution.changeBase(7, 2)); // Output: \"111\"\n    }\n}"}
{"task_id": "Java/44", "generation": "        if (base < 2 || base > 9) {\n            return \"Base must be between 2 and 9\";\n        }\n        \n        StringBuilder result = new StringBuilder();\n        \n        while (x > 0) {\n            int remainder = x % base;\n            result.insert(0, remainder);\n            x = x / base;\n        }\n        \n        return result.toString();\n    }\n}"}
{"task_id": "Java/45", "generation": "        return 0.5 * a * h;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner input = new Scanner(System.in);\n\n        System.out.println(\"Enter the length of the side of the triangle: \");\n        double sideLength = input.nextDouble();\n\n        System.out.println(\"Enter the height of the triangle: \");\n        double height = input.nextDouble();\n\n        double area = solution.triangleArea(sideLength, height);\n        System.out.println(\"The area of the triangle is: \" + area);\n\n        input.close();\n    }\n}"}
{"task_id": "Java/45", "generation": "        return 0.5 * a * h;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.println(\"Enter the length of the side of the triangle: \");\n        double a = scanner.nextDouble();\n        System.out.println(\"Enter the height of the triangle: \");\n        double h = scanner.nextDouble();\n\n        double area = solution.triangleArea(a, h);\n        System.out.println(\"The area of the triangle is: \" + area);\n    }\n}"}
{"task_id": "Java/45", "generation": "        return 0.5 * a * h;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Example test cases\n        System.out.println(solution.triangleArea(5, 3)); // 7.5\n    }\n}"}
{"task_id": "Java/45", "generation": "        return 0.5 * a * h;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.triangleArea(5, 3));\n    }\n}"}
{"task_id": "Java/45", "generation": "        return 0.5 * a * h;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.println(\"Enter the length of a side: \");\n        double a = scanner.nextDouble();\n        System.out.println(\"Enter the height of the triangle: \");\n        double h = scanner.nextDouble();\n\n        double area = solution.triangleArea(a, h);\n        System.out.println(\"Area of the triangle: \" + area);\n    }\n}"}
{"task_id": "Java/46", "generation": "        if (n == 0 || n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 2;\n        }\n\n        int[] fib = new int[n + 1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 2;\n        fib[3] = 0;\n\n        for (int i = 4; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3] + fib[i - 4];\n        }\n\n        return fib[n];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fib4(5)); // Output: 4\n        System.out.println(solution.fib4(6)); // Output: 8\n        System.out.println(solution.fib4(7)); // Output: 14\n    }\n}"}
{"task_id": "Java/46", "generation": "        if (n == 0 || n == 1) {\n            return 0;\n        }\n        \n        if (n == 2) {\n            return 2;\n        }\n        \n        if (n == 3) {\n            return 0;\n        }\n        \n        int[] fib4 = new int[n + 1];\n        fib4[0] = 0;\n        fib4[1] = 0;\n        fib4[2] = 2;\n        fib4[3] = 0;\n        \n        for (int i = 4; i <= n; i++) {\n            fib4[i] = fib4[i-1] + fib4[i-2] + fib4[i-3] + fib4[i-4];\n        }\n        \n        return fib4[n];\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.fib4(5));\n        System.out.println(sol.fib4(6));\n        System.out.println(sol.fib4(7));\n    }\n}"}
{"task_id": "Java/46", "generation": "        if (n == 0 || n == 1) {\n            return 0;\n        }\n        \n        int[] dp = new int[Math.max(n+1, 4)];\n        dp[2] = 2;\n\n        for (int i = 3; i <= n; i++) {\n            dp[i] = dp[i-1] + dp[i-2] + dp[i-3] + dp[i-4];\n        }\n\n        return dp[n];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fib4(5)); // Output: 4\n        System.out.println(solution.fib4(6)); // Output: 8\n        System.out.println(solution.fib4(7)); // Output: 14\n    }\n}"}
{"task_id": "Java/46", "generation": "        if (n == 0 || n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 2;\n        } else if (n == 3) {\n            return 0;\n        } \n        \n        int[] fibArray = new int[n+1];\n        fibArray[0] = 0;\n        fibArray[1] = 0;\n        fibArray[2] = 2;\n        fibArray[3] = 0;\n        \n        for (int i = 4; i <= n; i++) {\n            fibArray[i] = fibArray[i-1] + fibArray[i-2] + fibArray[i-3] + fibArray[i-4];\n        }\n        \n        return fibArray[n];\n    }\n}"}
{"task_id": "Java/46", "generation": "        if (n == 0 || n == 1) {\n            return 0;\n        }\n        \n        if (n == 2) {\n            return 2;\n        }\n        \n        int a = 0, b = 0, c = 2, d = 0;\n        \n        for (int i = 3; i <= n; i++) {\n            int temp = d;\n            d = a + b + c + d;\n            a = b;\n            b = c;\n            c = temp;\n        }\n        \n        return d;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fib4(5)); // Output: 4\n        System.out.println(solution.fib4(6)); // Output: 8\n        System.out.println(solution.fib4(7)); // Output: 14\n    }\n}"}
{"task_id": "Java/47", "generation": "        Collections.sort(l);\n        int n = l.size();\n        if (n % 2 == 0) {\n            int mid1 = l.get(n/2);\n            int mid2 = l.get(n/2 - 1);\n            return (mid1 + mid2) / 2.0;\n        } else {\n            return l.get(n/2);\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.median(Arrays.asList(3, 1, 2, 4, 5)));  // 3\n        System.out.println(sol.median(Arrays.asList(-10, 4, 6, 1000, 10, 20)));  // 15.0\n    }\n}"}
{"task_id": "Java/47", "generation": "        Collections.sort(l);\n        int n = l.size();\n        if (n % 2 == 0) {\n            int mid1 = l.get(n/2 - 1);\n            int mid2 = l.get(n/2);\n            return (double) (mid1 + mid2) / 2;\n        } else {\n            return (double) l.get(n/2);\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        \n        List<Integer> l1 = Arrays.asList(3, 1, 2, 4, 5);\n        System.out.println(sol.median(l1));\n        \n        List<Integer> l2 = Arrays.asList(-10, 4, 6, 1000, 10, 20);\n        System.out.println(sol.median(l2));\n    }\n}"}
{"task_id": "Java/47", "generation": "        Collections.sort(l);\n        int size = l.size();\n        if(size % 2 == 0){\n            return (l.get(size/2) + l.get(size/2 - 1))/2.0;\n        } else {\n            return l.get(size/2);\n        }\n    }\n}"}
{"task_id": "Java/47", "generation": "        Collections.sort(l);\n        int size = l.size();\n\n        if (size % 2 == 0) {\n            int mid1 = l.get(size / 2);\n            int mid2 = l.get(size / 2 - 1);\n            return ((double) (mid1 + mid2) / 2);\n        } else {\n            return (double) l.get(size / 2);\n        }\n    }\n}"}
{"task_id": "Java/47", "generation": "        Collections.sort(l);\n        int size = l.size();\n        if (size % 2 == 0) {\n            int mid1 = l.get(size / 2 - 1);\n            int mid2 = l.get(size / 2);\n            return (double)(mid1 + mid2) / 2;\n        } else {\n            return (double)(l.get(size / 2));\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        List<Integer> l1 = Arrays.asList(3, 1, 2, 4, 5);\n        List<Integer> l2 = Arrays.asList(-10, 4, 6, 1000, 10, 20);\n        \n        System.out.println(sol.median(l1));\n        System.out.println(sol.median(l2));\n    }\n}"}
{"task_id": "Java/48", "generation": "        if (text == null || text.length() == 0) {\n            return true;\n        }\n        \n        int left = 0;\n        int right = text.length() - 1;\n        \n        while (left < right) {\n            if (text.charAt(left) != text.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "Java/48", "generation": "        if (text == null || text.length() <= 1) {\n            return true;\n        }\n        \n        int start = 0;\n        int end = text.length() - 1;\n        \n        while (start < end) {\n            if (text.charAt(start) != text.charAt(end)) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        \n        return true;\n    } \n\n    public static void main(String[] args) {\n        System.out.println(isPalindrome(\"\")); // true\n        System.out.println(isPalindrome(\"aba\")); // true\n        System.out.println(isPalindrome(\"aaaaa\")); // true\n        System.out.println(isPalindrome(\"zbcd\")); // false\n    }\n}"}
{"task_id": "Java/48", "generation": "        // Remove all non-alphabetic characters and convert to lowercase\n        text = text.replaceAll(\"[^a-zA-Z]\", \"\").toLowerCase();\n        \n        int low = 0;\n        int high = text.length() - 1;\n        \n        while (low < high) {\n            if (text.charAt(low) != text.charAt(high)) {\n                return false;\n            }\n            low++;\n            high--;\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.isPalindrome(\"\")); // true\n        System.out.println(solution.isPalindrome(\"aba\")); // true\n        System.out.println(solution.isPalindrome(\"aaaaa\")); // true\n        System.out.println(solution.isPalindrome(\"zbcd\")); // false\n    }\n}"}
{"task_id": "Java/48", "generation": "        // Remove all non-letter characters and convert to lowercase\n        String cleanText = text.replaceAll(\"[^a-zA-Z]\", \"\").toLowerCase();\n        \n        // Check if the cleanText is a palindrome\n        int left = 0;\n        int right = cleanText.length() - 1;\n        while (left < right) {\n            if (cleanText.charAt(left) != cleanText.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.isPalindrome(\"\"));  // true\n        System.out.println(solution.isPalindrome(\"aba\"));  // true\n        System.out.println(solution.isPalindrome(\"aaaaa\"));  // true\n        System.out.println(solution.isPalindrome(\"zbcd\"));  // false\n    }\n}"}
{"task_id": "Java/48", "generation": "        if (text == null || text.isEmpty()) {\n            return true;\n        }\n        \n        int i = 0;\n        int j = text.length() - 1;\n        while (i < j) {\n            if (text.charAt(i) != text.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.isPalindrome(\"\")); // true\n        System.out.println(solution.isPalindrome(\"aba\")); // true\n        System.out.println(solution.isPalindrome(\"aaaaa\")); // true\n        System.out.println(solution.isPalindrome(\"zbcd\")); // false\n    }\n}"}
{"task_id": "Java/49", "generation": "        return (int) (Math.pow(2, n) % p);\n    }\n}"}
{"task_id": "Java/49", "generation": "        if (p == 0) {\n            return -1;\n        }\n        int result = 1;\n        n = n % p;\n\n        while (p > 0) {\n            if ((p & 1) == 1) {\n                result = (result * n) % p;\n            }\n            n = (n * n) % p;\n            p >>= 1;\n        }\n\n        return result;\n    }\n}"}
{"task_id": "Java/49", "generation": "        return (int) Math.pow(2, n) % p;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.modp(3, 5)); // Output: 3\n        System.out.println(solution.modp(1101, 101)); // Output: 2\n        System.out.println(solution.modp(0, 101)); // Output: 1\n        System.out.println(solution.modp(3, 11)); // Output: 8\n        System.out.println(solution.modp(100, 101)); // Output: 1\n    }\n}"}
{"task_id": "Java/49", "generation": "        return (int) Math.pow(2, n) % p;\n    }\n}"}
{"task_id": "Java/49", "generation": "        return (int) Math.pow(2, n) % p;\n    }\n}"}
{"task_id": "Java/50", "generation": "        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 5 - 'a' + 26) % 26));\n        }\n        return sb.toString();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        String originalString = \"hello\";\n        String encodedString = solution.encodeShift(originalString);\n        System.out.println(\"Original String: \" + originalString);\n        System.out.println(\"Encoded String: \" + encodedString);\n\n        String decodedString = solution.decodeShift(encodedString);\n        System.out.println(\"Decoded String: \" + decodedString);\n    }\n}"}
{"task_id": "Java/50", "generation": "        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 5 - 'a' + 26) % 26));\n        }\n        return sb.toString();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        String input = \"hello\";\n        String encoded = solution.encodeShift(input);\n        System.out.println(\"Encoded string: \" + encoded);\n\n        String decoded = solution.decodeShift(encoded);\n        System.out.println(\"Decoded string: \" + decoded);\n    }\n}"}
{"task_id": "Java/50", "generation": "        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            // To decode, we need to shift by 21 (since (ch + 21 - 'a') % 26 will give original character)\n            sb.append((char) ('a' + ((ch + 21 - 'a') % 26));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        \n        String originalString = \"hello\";\n        String encodedString = sol.encodeShift(originalString);\n        System.out.println(\"Encoded String: \" + encodedString);\n        \n        String decodedString = sol.decodeShift(encodedString);\n        System.out.println(\"Decoded String: \" + decodedString);\n    }\n}"}
{"task_id": "Java/50", "generation": "        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 5 - 'a' + 26) % 26));\n        }\n        return sb.toString();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        String original = \"hello\";\n        String encoded = solution.encodeShift(original);\n        System.out.println(\"Encoded string: \" + encoded);\n        \n        String decoded = solution.decodeShift(encoded);\n        System.out.println(\"Decoded string: \" + decoded);\n    }\n}"}
{"task_id": "Java/50", "generation": "        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 5 - 'a' + 26) % 26));\n        }\n        return sb.toString();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String input = \"hello\";\n        String encoded = solution.encodeShift(input);\n        System.out.println(\"Encoded: \" + encoded);\n        String decoded = solution.decodeShift(encoded);\n        System.out.println(\"Decoded: \" + decoded);\n    }\n}"}
{"task_id": "Java/51", "generation": "        StringBuilder result = new StringBuilder();\n        \n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (!isVowel(c)) {\n                result.append(c);\n            }\n        }\n        \n        return result.toString();\n    }\n    \n    private boolean isVowel(char c) {\n        c = Character.toLowerCase(c);\n        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.removeVowels(\"\")); // \"\"\n        System.out.println(solution.removeVowels(\"abcdef\\nghijklm\")); // \"bcdf\\nghjklm\"\n        System.out.println(solution.removeVowels(\"abcdef\")); // \"bcdf\"\n        System.out.println(solution.removeVowels(\"aaaaa\")); // \"\"\n        System.out.println(solution.removeVowels(\"aaBAA\")); // \"B\"\n        System.out.println(solution.removeVowels(\"zbcd\")); // \"zbcd\"\n    }\n}"}
{"task_id": "Java/51", "generation": "        StringBuilder result = new StringBuilder();\n        \n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (!isVowel(c)) {\n                result.append(c);\n            }\n        }\n        \n        return result.toString();\n    }\n    \n    private boolean isVowel(char c) {\n        c = Character.toLowerCase(c);\n        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.removeVowels(\"abcdef\\nghijklm\")); // \"bcdf\\nghjklm\"\n        System.out.println(solution.removeVowels(\"abcdef\")); // \"bcdf\"\n        System.out.println(solution.removeVowels(\"aaaaa\")); // \"\"\n        System.out.println(solution.removeVowels(\"aaBAA\")); // \"B\"\n        System.out.println(solution.removeVowels(\"zbcd\")); // \"zbcd\"\n    }\n}"}
{"task_id": "Java/51", "generation": "        StringBuilder result = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n                result.append(c);\n            }\n        }\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.removeVowels(\"\"));\n        System.out.println(solution.removeVowels(\"abcdef\\nghijklm\"));\n        System.out.println(solution.removeVowels(\"abcdef\"));\n        System.out.println(solution.removeVowels(\"aaaaa\"));\n        System.out.println(solution.removeVowels(\"aaBAA\"));\n        System.out.println(solution.removeVowels(\"zbcd\"));\n    }\n}"}
{"task_id": "Java/51", "generation": "        StringBuilder result = new StringBuilder();\n        \n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (!(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\n                  c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')) {\n                result.append(c);\n            }\n        }\n        \n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.removeVowels(\"\")); // \"\"\n        System.out.println(solution.removeVowels(\"abcdef\\nghijklm\")); // \"bcdf\\nghjklm\"\n        System.out.println(solution.removeVowels(\"abcdef\")); // \"bcdf\"\n        System.out.println(solution.removeVowels(\"aaaaa\")); // \"\"\n        System.out.println(solution.removeVowels(\"aaBAA\")); // \"B\"\n        System.out.println(solution.removeVowels(\"zbcd\")); // \"zbcd\"\n    }\n}"}
{"task_id": "Java/51", "generation": "        StringBuilder result = new StringBuilder();\n        \n        for (char c : text.toCharArray()) {\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' &&\n                c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n                result.append(c);\n            }\n        }\n        \n        return result.toString();\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.removeVowels(\"\")); // \"\"\n        System.out.println(solution.removeVowels(\"abcdef\\nghijklm\")); // \"bcdf\\nghjklm\"\n        System.out.println(solution.removeVowels(\"abcdef\")); // \"bcdf\"\n        System.out.println(solution.removeVowels(\"aaaaa\")); // \"\"\n        System.out.println(solution.removeVowels(\"aaBAA\")); // \"B\"\n        System.out.println(solution.removeVowels(\"zbcd\")); // \"zbcd\"\n    }\n}"}
{"task_id": "Java/52", "generation": "        for (int num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.belowThreshold(Arrays.asList(1, 2, 4, 10), 100)); // true\n        System.out.println(sol.belowThreshold(Arrays.asList(1, 20, 4, 10), 5)); // false\n    }\n}"}
{"task_id": "Java/52", "generation": "        for (int num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> l1 = Arrays.asList(1, 2, 4, 10);\n        List<Integer> l2 = Arrays.asList(1, 20, 4, 10);\n        \n        System.out.println(solution.belowThreshold(l1, 100)); // true\n        System.out.println(solution.belowThreshold(l2, 5)); // false\n    }\n}"}
{"task_id": "Java/52", "generation": "        for (int num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> l1 = Arrays.asList(1, 2, 4, 10);\n        int t1 = 100;\n        System.out.println(solution.belowThreshold(l1, t1)); // true\n        \n        List<Integer> l2 = Arrays.asList(1, 20, 4, 10);\n        int t2 = 5;\n        System.out.println(solution.belowThreshold(l2, t2)); // false\n    }\n}"}
{"task_id": "Java/52", "generation": "        for (int num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> test1 = Arrays.asList(1, 2, 4, 10);\n        System.out.println(solution.belowThreshold(test1, 100)); // true\n        \n        List<Integer> test2 = Arrays.asList(1, 20, 4, 10);\n        System.out.println(solution.belowThreshold(test2, 5)); // false\n    }\n}"}
{"task_id": "Java/52", "generation": "        for (int num : l) {\n            if (num >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> l1 = Arrays.asList(1, 2, 4, 10);\n        List<Integer> l2 = Arrays.asList(1, 20, 4, 10);\n\n        System.out.println(solution.belowThreshold(l1, 100)); // true\n        System.out.println(solution.belowThreshold(l2, 5)); // false\n    }\n}"}
{"task_id": "Java/53", "generation": "        return x + y;\n    }\n\n    /**\n    Subtract number y from x\n    >>> subtract(10, 5)\n    5\n    >>> subtract(20, 8)\n    12\n     */\n    public int subtract(int x, int y) {\n        return x - y;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test the add function\n        System.out.println(solution.add(2, 3)); // Output: 5\n        System.out.println(solution.add(5, 7)); // Output: 12\n\n        // Test the subtract function\n        System.out.println(solution.subtract(10, 5)); // Output: 5\n        System.out.println(solution.subtract(20, 8)); // Output: 12\n    }\n}"}
{"task_id": "Java/53", "generation": "        return x + y;\n    }\n\n    /**\n    Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n     */\n    public int multiply(int x, int y) {\n        return x * y;\n    }\n\n    /**\n    Find the maximum of two numbers x and y\n    >>> max(2, 3)\n    3\n    >>> max(5, 7)\n    7\n     */\n    public int max(int x, int y) {\n        return Math.max(x, y);\n    }\n\n    /**\n    Find the minimum of two numbers x and y\n    >>> min(2, 3)\n    2\n    >>> min(5, 7)\n    5\n     */\n    public int min(int x, int y) {\n        return Math.min(x, y);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(\"Adding 2 and 3: \" + solution.add(2, 3));\n        System.out.println(\"Multiplying 2 and 3: \" + solution.multiply(2, 3));\n        System.out.println(\"Maximum of 2 and 3: \" + solution.max(2, 3));\n        System.out.println(\"Minimum of 2 and 3: \" + solution.min(2, 3));\n    }\n}"}
{"task_id": "Java/53", "generation": "        return x + y;\n    }\n\n    /**\n    Subtract two numbers x and y\n    >>> subtract(5, 2)\n    3\n    >>> subtract(10, 7)\n    3\n     */\n    public int subtract(int x, int y) {\n        return x - y;\n    }\n\n    /**\n    Multiply two numbers x and y\n    >>> multiply(3, 4)\n    12\n    >>> multiply(5, 2)\n    10\n     */\n    public int multiply(int x, int y) {\n        return x * y;\n    }\n\n    /**\n    Divide two numbers x and y\n    >>> divide(10, 2)\n    5\n    >>> divide(15, 3)\n    5\n     */\n    public int divide(int x, int y) {\n        return x / y;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(\"Addition: \" + solution.add(2, 3));\n        System.out.println(\"Subtraction: \" + solution.subtract(5, 2));\n        System.out.println(\"Multiplication: \" + solution.multiply(3, 4));\n        System.out.println(\"Division: \" + solution.divide(10, 2));\n    }\n}"}
{"task_id": "Java/53", "generation": "        return x + y;\n    }\n\n    /**\n    Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n     */\n    public int multiply(int x, int y) {\n        return x * y;\n    }\n\n    /**\n    Subtract two numbers x and y\n    >>> subtract(5, 2)\n    3\n    >>> subtract(10, 7)\n    3\n     */\n    public int subtract(int x, int y) {\n        return x - y;\n    }\n\n    /**\n    Divide two numbers x and y\n    >>> divide(10, 2)\n    5\n    >>> divide(15, 3)\n    5\n     */\n    public int divide(int x, int y) {\n        return x / y;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.add(2, 3));\n        System.out.println(sol.multiply(5, 7));\n        System.out.println(sol.subtract(5, 2));\n        System.out.println(sol.divide(10, 2));\n    }\n}"}
{"task_id": "Java/53", "generation": "        return x + y;\n    }\n\n    /**\n    Subtract number y from x\n    >>> subtract(5, 2)\n    3\n    >>> subtract(10, 7)\n    3\n     */\n    public int subtract(int x, int y) {\n        return x - y;\n    }\n\n    /**\n    Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(4, 5)\n    20\n     */\n    public int multiply(int x, int y) {\n        return x * y;\n    }\n\n    /**\n    Divide number x by number y\n    >>> divide(8, 2)\n    4\n    >>> divide(10, 4)\n    2\n     */\n    public int divide(int x, int y) {\n        return x / y;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.add(2, 3));\n        System.out.println(solution.subtract(5, 2));\n        System.out.println(solution.multiply(2, 3));\n        System.out.println(solution.divide(8, 2));\n    }\n}"}
{"task_id": "Java/54", "generation": "        if (s0.length() != s1.length()) {\n            return false;\n        }\n        \n        Map<Character, Integer> charCount0 = new HashMap<>();\n        Map<Character, Integer> charCount1 = new HashMap<>();\n        \n        for (char c : s0.toCharArray()) {\n            charCount0.put(c, charCount0.getOrDefault(c, 0) + 1);\n        }\n        \n        for (char c : s1.toCharArray()) {\n            charCount1.put(c, charCount1.getOrDefault(c, 0) + 1);\n        }\n        \n        return charCount0.equals(charCount1);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")); // true\n        System.out.println(solution.sameChars(\"abcd\", \"dddddddabc\")); // true\n        System.out.println(solution.sameChars(\"dddddddabc\", \"abcd\")); // true\n        System.out.println(solution.sameChars(\"eabcd\", \"dddddddabc\")); // false\n        System.out.println(solution.sameChars(\"abcd\", \"dddddddabce\")); // false\n        System.out.println(solution.sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")); // false\n    }\n}"}
{"task_id": "Java/54", "generation": "        if (s0.length() != s1.length()) {\n            return false;\n        }\n        \n        char[] arr1 = s0.toCharArray();\n        char[] arr2 = s1.toCharArray();\n        \n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        \n        String sortedS0 = new String(arr1);\n        String sortedS1 = new String(arr2);\n        \n        return sortedS0.equals(sortedS1);\n    }\n}"}
{"task_id": "Java/54", "generation": "        // Create a frequency map for each string to count the occurrences of each character\n        HashMap<Character, Integer> map0 = new HashMap<>();\n        HashMap<Character, Integer> map1 = new HashMap<>();\n        \n        // Populate the frequency map for the first string\n        for (char c : s0.toCharArray()) {\n            map0.put(c, map0.getOrDefault(c, 0) + 1);\n        }\n        \n        // Populate the frequency map for the second string\n        for (char c : s1.toCharArray()) {\n            map1.put(c, map1.getOrDefault(c, 0) + 1);\n        }\n        \n        // Check if both maps have the same characters and frequency counts\n        return map0.equals(map1);\n    }\n}"}
{"task_id": "Java/54", "generation": "        // Create character arrays for the two strings\n        char[] charArray1 = s0.toCharArray();\n        char[] charArray2 = s1.toCharArray();\n        \n        // Sort the character arrays\n        Arrays.sort(charArray1);\n        Arrays.sort(charArray2);\n        \n        // Convert the sorted character arrays back to strings\n        String sortedString1 = new String(charArray1);\n        String sortedString2 = new String(charArray2);\n        \n        // Check if the two sorted strings are equal\n        return sortedString1.equals(sortedString2);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")); // true\n        System.out.println(solution.sameChars(\"abcd\", \"dddddddabc\")); // true\n        System.out.println(solution.sameChars(\"dddddddabc\", \"abcd\")); // true\n        System.out.println(solution.sameChars(\"eabcd\", \"dddddddabc\")); // false\n        System.out.println(solution.sameChars(\"abcd\", \"dddddddabce\")); // false\n        System.out.println(solution.sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")); // false\n    }\n}"}
{"task_id": "Java/54", "generation": "        if (s0.length() != s1.length()) {\n            return false;\n        }\n        \n        Map<Character, Integer> charMap = new HashMap<>();\n        \n        for (char c : s0.toCharArray()) {\n            charMap.put(c, charMap.getOrDefault(c, 0) + 1);\n        }\n        \n        for (char c : s1.toCharArray()) {\n            if (!charMap.containsKey(c)) {\n                return false;\n            }\n            int count = charMap.get(c);\n            if (count == 1) {\n                charMap.remove(c);\n            } else {\n                charMap.put(c, count - 1);\n            }\n        }\n        \n        return charMap.isEmpty();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")); // true\n        System.out.println(solution.sameChars(\"abcd\", \"dddddddabc\")); // true\n        System.out.println(solution.sameChars(\"dddddddabc\", \"abcd\")); // true\n        System.out.println(solution.sameChars(\"eabcd\", \"dddddddabc\")); // false\n        System.out.println(solution.sameChars(\"abcd\", \"dddddddabce\")); // false\n        System.out.println(solution.sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")); // false\n    }\n}"}
{"task_id": "Java/55", "generation": "        if (n <= 1) {\n            return n;\n        }\n        \n        int a = 0, b = 1;\n        for (int i = 2; i <= n; i++) {\n            int temp = a + b;\n            a = b;\n            b = temp;\n        }\n        return b;\n    }\n}"}
{"task_id": "Java/55", "generation": "        if (n <= 1) {\n            return n;\n        }\n        \n        int a = 0;\n        int b = 1;\n        int sum = 0;\n        \n        for (int i = 2; i <= n; i++) {\n            sum = a + b;\n            a = b;\n            b = sum;\n        }\n        \n        return sum;\n    }\n}"}
{"task_id": "Java/55", "generation": "        if (n <= 2) {\n            return 1;\n        }\n        \n        int[] dp = new int[n+1];\n        dp[1] = 1;\n        dp[2] = 1;\n        \n        for (int i = 3; i <= n; i++) {\n            dp[i] = dp[i-1] + dp[i-2];\n        }\n        \n        return dp[n];\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.fib(10)); // Output: 55\n        System.out.println(solution.fib(1)); // Output: 1\n        System.out.println(solution.fib(8)); // Output: 21\n    }\n}"}
{"task_id": "Java/55", "generation": "        if (n <= 1) {\n            return n;\n        }\n        \n        int prev1 = 0;\n        int prev2 = 1;\n        int result = 0;\n        \n        for (int i = 2; i <= n; i++) {\n            result = prev1 + prev2;\n            prev1 = prev2;\n            prev2 = result;\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        // Example Usage\n        Solution sol = new Solution();\n        System.out.println(sol.fib(10)); // Output: 55\n        System.out.println(sol.fib(1)); // Output: 1\n        System.out.println(sol.fib(8)); // Output: 21\n    }\n}"}
{"task_id": "Java/55", "generation": "        if (n <= 1) {\n            return n;\n        }\n\n        int a = 0;\n        int b = 1;\n        int c = 0;\n\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n\n        return c;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fib(10)); // Output: 55\n        System.out.println(solution.fib(1)); // Output: 1\n        System.out.println(solution.fib(8)); // Output: 21\n    }\n}"}
{"task_id": "Java/56", "generation": "        Stack<Character> stack = new Stack<>();\n\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else if (c == '>') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n\n        return stack.isEmpty();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.correctBracketing(\"<\")); // false\n        System.out.println(solution.correctBracketing(\"<>\")); // true\n        System.out.println(solution.correctBracketing(\"<<><>>\")); // true\n        System.out.println(solution.correctBracketing(\"><<>\")); // false\n    }\n}"}
{"task_id": "Java/56", "generation": "        Stack<Character> stack = new Stack<Character>();\n        \n        for (int i = 0; i < brackets.length(); i++) {\n            char bracket = brackets.charAt(i);\n            \n            if (bracket == '<') {\n                stack.push(bracket);\n            } else if (bracket == '>') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.correctBracketing(\"<\")); // false\n        System.out.println(solution.correctBracketing(\"<>\")); // true\n        System.out.println(solution.correctBracketing(\"<<><>>\")); // true\n        System.out.println(solution.correctBracketing(\"><<>\")); // false\n    }\n}"}
{"task_id": "Java/56", "generation": "        if (brackets.length() % 2 != 0) {\n            return false;\n        }\n        \n        Stack<Character> stack = new Stack<>();\n        \n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '<') {\n                stack.push('>');\n            } else if (stack.isEmpty() || stack.pop() != bracket) {\n                return false;\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.correctBracketing(\"<\")); // false\n        System.out.println(solution.correctBracketing(\"<>\")); // true\n        System.out.println(solution.correctBracketing(\"<<><>>\")); // true\n        System.out.println(solution.correctBracketing(\"><<>\")); // false\n    }\n}"}
{"task_id": "Java/56", "generation": "        Stack<Character> stack = new Stack<>();\n        \n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '<') {\n                stack.push(bracket);\n            } else if (bracket == '>') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.correctBracketing(\"<\")); // false\n        System.out.println(solution.correctBracketing(\"<>\")); // true\n        System.out.println(solution.correctBracketing(\"<<><>>\")); // true\n        System.out.println(solution.correctBracketing(\"><<>\")); // false\n    }\n}"}
{"task_id": "Java/56", "generation": "        Stack<Character> stack = new Stack<Character>();\n        \n        for(char c : brackets.toCharArray()) {\n            if(c == '<') {\n                stack.push(c);\n            } else if (c == '>') {\n                if(stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.correctBracketing(\"<\")); // false\n        System.out.println(solution.correctBracketing(\"<>\")); // true\n        System.out.println(solution.correctBracketing(\"<<><>>\")); // true\n        System.out.println(solution.correctBracketing(\"><<>\")); // false\n    }\n}"}
{"task_id": "Java/57", "generation": "        boolean increasing = true;\n        boolean decreasing = true;\n\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n                increasing = false;\n            }\n            if (l.get(i) > l.get(i - 1)) {\n                decreasing = false;\n            }\n        }\n\n        return increasing || decreasing;\n    }\n}"}
{"task_id": "Java/57", "generation": "        boolean increasing = true;\n        boolean decreasing = true;\n        \n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i-1)) {\n                increasing = false;\n            } else if (l.get(i) > l.get(i-1)) {\n                decreasing = false;\n            }\n        }\n        \n        return increasing || decreasing;\n    }\n}"}
{"task_id": "Java/57", "generation": "        boolean increasing = true;\n        boolean decreasing = true;\n\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n                increasing = false;\n            } else if (l.get(i) > l.get(i - 1)) {\n                decreasing = false;\n            }\n        }\n\n        return increasing || decreasing;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.monotonic(Arrays.asList(1, 2, 4, 20))); // true\n        System.out.println(solution.monotonic(Arrays.asList(1, 20, 4, 10))); // false\n        System.out.println(solution.monotonic(Arrays.asList(4, 1, 0, -10))); // true\n    }\n}"}
{"task_id": "Java/57", "generation": "        boolean increasing = true;\n        boolean decreasing = true;\n        \n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > l.get(i-1)) {\n                decreasing = false;\n            } else if (l.get(i) < l.get(i-1)) {\n                increasing = false;\n            }\n        }\n        \n        return increasing || decreasing;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> l1 = Arrays.asList(1, 2, 4, 20);\n        List<Integer> l2 = Arrays.asList(1, 20, 4, 10);\n        List<Integer> l3 = Arrays.asList(4, 1, 0, -10);\n        \n        System.out.println(solution.monotonic(l1)); // true\n        System.out.println(solution.monotonic(l2)); // false\n        System.out.println(solution.monotonic(l3)); // true\n    }\n}"}
{"task_id": "Java/57", "generation": "        boolean increasing = true;\n        boolean decreasing = true;\n        \n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n                increasing = false;\n            } else if (l.get(i) > l.get(i - 1)) {\n                decreasing = false;\n            }\n        }\n        \n        return increasing || decreasing;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> l1 = Arrays.asList(1, 2, 4, 20);\n        List<Integer> l2 = Arrays.asList(1, 20, 4, 10);\n        List<Integer> l3 = Arrays.asList(4, 1, 0, -10);\n\n        System.out.println(solution.monotonic(l1)); // true\n        System.out.println(solution.monotonic(l2)); // false\n        System.out.println(solution.monotonic(l3)); // true\n    }\n}"}
{"task_id": "Java/58", "generation": "        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        \n        // Find common elements\n        set1.retainAll(set2);\n        \n        // Sort the common elements and return as a list\n        List<Integer> result = new ArrayList<>(set1);\n        Collections.sort(result);\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        \n        List<Integer> l1 = Arrays.asList(1, 4, 3, 34, 653, 2, 5);\n        List<Integer> l2 = Arrays.asList(5, 7, 1, 5, 9, 653, 121);\n        System.out.println(sol.common(l1, l2)); // [1, 5, 653]\n        \n        l1 = Arrays.asList(5, 3, 2, 8);\n        l2 = Arrays.asList(3, 2);\n        System.out.println(sol.common(l1, l2)); // [2, 3]\n    }\n}"}
{"task_id": "Java/58", "generation": "        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        \n        List<Integer> commonElements = new ArrayList<>();\n        for (int num : set1) {\n            if (set2.contains(num)) {\n                commonElements.add(num);\n            }\n        }\n        \n        Collections.sort(commonElements);\n        \n        return commonElements;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> l1 = Arrays.asList(1, 4, 3, 34, 653, 2, 5);\n        List<Integer> l2 = Arrays.asList(5, 7, 1, 5, 9, 653, 121);\n        System.out.println(solution.common(l1, l2));\n        \n        List<Integer> l3 = Arrays.asList(5, 3, 2, 8);\n        List<Integer> l4 = Arrays.asList(3, 2);\n        System.out.println(solution.common(l3, l4));\n    }\n}"}
{"task_id": "Java/58", "generation": "        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        \n        set1.retainAll(set2);\n        \n        List<Integer> result = new ArrayList<>(set1);\n        Collections.sort(result);\n        \n        return result;\n    }\n}"}
{"task_id": "Java/58", "generation": "        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        \n        set1.retainAll(set2);\n        \n        List<Integer> commonElements = new ArrayList<>(set1);\n        Collections.sort(commonElements);\n        \n        return commonElements;\n    }\n}"}
{"task_id": "Java/58", "generation": "        // Convert lists to sets to remove duplicates\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        \n        // Find intersection between two sets\n        set1.retainAll(set2);\n        \n        // Convert set to list and sort elements\n        List<Integer> result = new ArrayList<>(set1);\n        Collections.sort(result);\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121)));\n        System.out.println(solution.common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2)));\n    }\n}"}
{"task_id": "Java/59", "generation": "        int maxPrime = 2;\n\n        // Divide n by 2 until it is odd\n        while (n % 2 == 0) {\n            n = n / 2;\n        }\n\n        // Check for odd prime factors starting from 3\n        for (int i = 3; i <= Math.sqrt(n); i = i + 2) {\n            while (n % i == 0) {\n                maxPrime = i;\n                n = n / i;\n            }\n        }\n\n        // If n is itself a prime number greater than 2\n        if (n > 2) {\n            maxPrime = n;\n        }\n\n        return maxPrime;\n    }\n}"}
{"task_id": "Java/59", "generation": "        int largestPrime = 0;\n        \n        // Check for factors up to the square root of n\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                // Check if i is a prime factor\n                boolean isPrime = true;\n                for (int j = 2; j <= Math.sqrt(i); j++) {\n                    if (i % j == 0) {\n                        isPrime = false;\n                        break;\n                    }\n                }\n                if (isPrime) {\n                    largestPrime = i;\n                }\n            }\n        }\n        \n        return largestPrime;\n    }\n}"}
{"task_id": "Java/59", "generation": "        int largestPrime = 0;\n        while (n % 2 == 0) {\n            largestPrime = 2;\n            n /= 2;\n        }\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                largestPrime = i;\n                n /= i;\n            }\n        }\n        if (n > 2) {\n            largestPrime = n;\n        }\n        return largestPrime;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.largestPrimeFactor(13195));\n        System.out.println(sol.largestPrimeFactor(2048));\n    }\n}"}
{"task_id": "Java/59", "generation": "        int largestFactor = 0;\n        \n        // Divide n by 2 until it is odd\n        while (n % 2 == 0) {\n            largestFactor = 2;\n            n /= 2;\n        }\n        \n        // Check for odd prime factors\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                largestFactor = i;\n                n /= i;\n            }\n        }\n        \n        // If n is a prime number greater than 2\n        if (n > 2) {\n            largestFactor = n;\n        }\n        \n        return largestFactor;\n    }\n}\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.largestPrimeFactor(13195)); // Output should be 29\n        System.out.println(solution.largestPrimeFactor(2048)); // Output should be 2\n    }\n}"}
{"task_id": "Java/59", "generation": "        int largestPrime = 2;\n        \n        while (n % 2 == 0) {\n            n = n / 2;\n        }\n        \n        for (int i = 3; i <= Math.sqrt(n); i = i + 2) {\n            while (n % i == 0) {\n                largestPrime = i;\n                n = n / i;\n            }\n        }\n        \n        if (n > 2) {\n            largestPrime = n;\n        }\n        \n        return largestPrime;\n    }\n}"}
{"task_id": "Java/60", "generation": "        return n * (n + 1) / 2;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner sc = new Scanner(System.in);\n        \n        System.out.println(\"Enter a number:\");\n        int n = sc.nextInt();\n        \n        int result = solution.sumToN(n);\n        System.out.println(\"Sum of numbers from 1 to \" + n + \" is: \" + result);\n    }\n}"}
{"task_id": "Java/60", "generation": "        return n * (n + 1) / 2;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.sumToN(30));\n        System.out.println(solution.sumToN(100));\n        System.out.println(solution.sumToN(5));\n        System.out.println(solution.sumToN(10));\n        System.out.println(solution.sumToN(1));\n    }\n}"}
{"task_id": "Java/60", "generation": "        return n * (n + 1) / 2;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.sumToN(30));\n        System.out.println(solution.sumToN(100));\n        System.out.println(solution.sumToN(5));\n        System.out.println(solution.sumToN(10));\n        System.out.println(solution.sumToN(1));\n    }\n}"}
{"task_id": "Java/60", "generation": "        return n * (n + 1) / 2;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.sumToN(30)); // Output: 465\n        System.out.println(solution.sumToN(100)); // Output: 5050\n        System.out.println(solution.sumToN(5)); // Output: 15\n        System.out.println(solution.sumToN(10)); // Output: 55\n        System.out.println(solution.sumToN(1)); // Output: 1\n    }\n}"}
{"task_id": "Java/60", "generation": "        // base case\n        if (n == 1) {\n            return 1;\n        }\n        \n        // recursive case\n        return n + sumToN(n - 1);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.sumToN(30)); // Output: 465\n        System.out.println(solution.sumToN(100)); // Output: 5050\n        System.out.println(solution.sumToN(5)); // Output: 15\n        System.out.println(solution.sumToN(10)); // Output: 55\n        System.out.println(solution.sumToN(1)); // Output: 1\n    }\n}"}
{"task_id": "Java/61", "generation": "        Stack<Character> stack = new Stack<>();\n\n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '(') {\n                stack.push(bracket);\n            } else if (bracket == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n\n        return stack.isEmpty();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.correctBracketing(\"(\")); // false\n        System.out.println(solution.correctBracketing(\"()\")); // true\n        System.out.println(solution.correctBracketing(\"(()())\")); // true\n        System.out.println(solution.correctBracketing(\")(()\")); // false\n    }\n}"}
{"task_id": "Java/61", "generation": "        Stack<Character> stack = new Stack<>();\n        \n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '(') {\n                stack.push('(');\n            } else if (bracket == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n}"}
{"task_id": "Java/61", "generation": "        Stack<Character> stack = new Stack<>();\n        \n        for(char c : brackets.toCharArray()) {\n            if(c == '(') {\n                stack.push(c);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.correctBracketing(\"(\")); // false\n        System.out.println(solution.correctBracketing(\"()\")); // true\n        System.out.println(solution.correctBracketing(\"(()())\")); // true\n        System.out.println(solution.correctBracketing(\")(()\")); // false\n    }\n}"}
{"task_id": "Java/61", "generation": "        Stack<Character> stack = new Stack<>();\n        for (char ch : brackets.toCharArray()) {\n            if (ch == '(') {\n                stack.push(ch);\n            } else if (ch == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n\n        return stack.isEmpty();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.correctBracketing(\"(\"));\n        System.out.println(solution.correctBracketing(\"()\"));\n        System.out.println(solution.correctBracketing(\"(()())\"));\n        System.out.println(solution.correctBracketing(\")(()\"));\n    }\n}"}
{"task_id": "Java/61", "generation": "        Stack<Character> stack = new Stack<>();\n        \n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '(') {\n                stack.push(bracket);\n            } else if (bracket == ')') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.correctBracketing(\"(\")); // false\n        System.out.println(solution.correctBracketing(\"()\")); // true\n        System.out.println(solution.correctBracketing(\"(()())\")); // true\n        System.out.println(solution.correctBracketing(\")(()\")); // false\n    }\n}"}
{"task_id": "Java/62", "generation": "        List<Integer> derivatives = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            derivatives.add(xs.get(i) * i);\n        }\n        return derivatives;\n    }\n}"}
{"task_id": "Java/62", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/62", "generation": "        List<Integer> derivativeCoefficients = new ArrayList<>();\n        \n        for(int i=1; i<xs.size(); i++) {\n            derivativeCoefficients.add(xs.get(i) * i);\n        }\n        \n        return derivativeCoefficients;\n    }\n}"}
{"task_id": "Java/62", "generation": "        List<Integer> derivatives = new ArrayList<>();\n\n        for (int i = 1; i < xs.size(); i++) {\n            int coefficient = xs.get(i) * i;\n            derivatives.add(coefficient);\n        }\n\n        return derivatives;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> poly1 = Arrays.asList(3, 1, 2, 4, 5);\n        System.out.println(solution.derivative(poly1));\n\n        List<Integer> poly2 = Arrays.asList(1, 2, 3);\n        System.out.println(solution.derivative(poly2));\n    }\n}"}
{"task_id": "Java/62", "generation": "        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        return result;\n    }\n}"}
{"task_id": "Java/63", "generation": "        if (n == 0 || n == 1) {\n            return 0;\n        }\n        \n        if (n == 2) {\n            return 1;\n        }\n        \n        int[] fibfib = new int[n + 1];\n        fibfib[0] = 0;\n        fibfib[1] = 0;\n        fibfib[2] = 1;\n        \n        for (int i = 3; i <= n; i++) {\n            fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3];\n        }\n        \n        return fibfib[n];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fibfib(1)); // Output: 0\n        System.out.println(solution.fibfib(5)); // Output: 4\n        System.out.println(solution.fibfib(8)); // Output: 24\n    }\n}"}
{"task_id": "Java/63", "generation": "        if (n == 0) {\n            return 0;\n        } else if (n == 1 || n == 2) {\n            return 0;\n        }\n        \n        int[] dp = new int[n+1];\n        dp[2] = 1;\n        \n        for (int i = 3; i <= n; i++) {\n            dp[i] = dp[i-1] + dp[i-2] + dp[i-3];\n        }\n        \n        return dp[n];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fibfib(1)); // 0\n        System.out.println(solution.fibfib(5)); // 4\n        System.out.println(solution.fibfib(8)); // 24\n    }\n}"}
{"task_id": "Java/63", "generation": "        if (n == 0 || n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 1;\n        }\n        \n        int[] fibfibNums = new int[n + 1];\n        fibfibNums[0] = 0;\n        fibfibNums[1] = 0;\n        fibfibNums[2] = 1;\n        \n        for (int i = 3; i <= n; i++) {\n            fibfibNums[i] = fibfibNums[i - 1] + fibfibNums[i - 2] + fibfibNums[i - 3];\n        }\n        \n        return fibfibNums[n];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fibfib(1)); // Output: 0\n        System.out.println(solution.fibfib(5)); // Output: 4\n        System.out.println(solution.fibfib(8)); // Output: 24\n    }\n}"}
{"task_id": "Java/63", "generation": "        if (n == 0 || n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n\n        int[] fibfib = new int[n + 1];\n        fibfib[0] = 0;\n        fibfib[1] = 0;\n        fibfib[2] = 1;\n\n        for (int i = 3; i <= n; i++) {\n            fibfib[i] = fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3];\n        }\n\n        return fibfib[n];\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.fibfib(1)); // 0\n        System.out.println(sol.fibfib(5)); // 4\n        System.out.println(sol.fibfib(8)); // 24\n    }\n}"}
{"task_id": "Java/63", "generation": "        if (n == 0 || n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        \n        int[] fib = new int[n + 1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 1;\n        \n        for (int i = 3; i <= n; i++) {\n            fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n        }\n        \n        return fib[n];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fibfib(1)); // 0\n        System.out.println(solution.fibfib(5)); // 4\n        System.out.println(solution.fibfib(8)); // 24\n    }\n}"}
{"task_id": "Java/64", "generation": "        s = s.toLowerCase();\n        int count = 0;\n        \n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            \n            if ((c == 'a') || (c == 'e') || (c == 'i') || (c == 'o') || (c == 'u')) {\n                count++;\n            }\n        }\n        \n        if (s.endsWith(\"y\")) {\n            count++;\n        }\n        \n        return count;\n    }\n}"}
{"task_id": "Java/64", "generation": "        s = s.toLowerCase();\n        int count = 0;\n        char lastChar = s.charAt(s.length() - 1);\n        \n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n                || (i == s.length() - 1 && c == 'y' && (lastChar == 'a' || lastChar == 'e' || lastChar == 'i' || lastChar == 'o' || lastChar == 'u'))) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}\n\nclass Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.vowelsCount(\"abcde\")); // Output: 2\n        System.out.println(solution.vowelsCount(\"ACEDY\")); // Output: 3\n    }\n}"}
{"task_id": "Java/64", "generation": "        s = s.toLowerCase();\n        char lastChar = s.charAt(s.length()-1);\n        int count = 0;\n        \n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            }\n        }\n        \n        if (lastChar == 'y') {\n            count++;\n        }\n        \n        return count;\n    }\n}\n\nclass Main {\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        \n        // Test cases\n        System.out.println(sol.vowelsCount(\"abcde\")); // Output: 2\n        System.out.println(sol.vowelsCount(\"ACEDY\")); // Output: 3\n    }\n}"}
{"task_id": "Java/64", "generation": "        int count = 0;\n        s = s.toLowerCase();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            }\n        }\n        if (s.endsWith(\"y\")) {\n            count++;\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/64", "generation": "        // Convert the input string to lowercase for easier comparison\n        s = s.toLowerCase();\n        \n        // Initialize a variable to store the count of vowels\n        int count = 0;\n        \n        // Iterate through each character in the string\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            \n            // Check if the character is a vowel\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            }\n            \n            // Check if the character is 'y' and it is at the end of the word\n            if (c == 'y' && i == s.length() - 1) {\n                count++;\n            }\n        }\n        \n        // Return the count of vowels\n        return count;\n    }\n}"}
{"task_id": "Java/65", "generation": "        String numStr = Integer.toString(x);\n        int numDigits = numStr.length();\n        \n        shift = shift % numDigits; // reduce shift to within numDigits\n\n        if (shift == 0) {\n            return numStr; // no shift\n        }\n        \n        if (shift >= numDigits) {\n            StringBuilder sb = new StringBuilder(numStr);\n            return sb.reverse().toString(); // reverse the digits\n        }\n        \n        StringBuilder sb = new StringBuilder();\n        sb.append(numStr.substring(numDigits - shift));\n        sb.append(numStr.substring(0, numDigits - shift));\n        \n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.circularShift(12, 1)); // \"21\"\n        System.out.println(solution.circularShift(12, 2)); // \"12\"\n    }\n}"}
{"task_id": "Java/65", "generation": "        String xStr = String.valueOf(x);\n        int len = xStr.length();\n        \n        if (shift > len) {\n            StringBuilder reversedString = new StringBuilder(xStr);\n            return reversedString.reverse().toString();\n        }\n        \n        shift = shift % len;\n        StringBuilder shiftedString = new StringBuilder();\n        \n        for (int i = len - shift; i < len; i++) {\n            shiftedString.append(xStr.charAt(i));\n        }\n        \n        for (int i = 0; i < len - shift; i++) {\n            shiftedString.append(xStr.charAt(i));\n        }\n        \n        return shiftedString.toString();\n    }\n}\n\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.circularShift(12, 1)); // \"21\"\n        System.out.println(solution.circularShift(12, 2)); // \"12\"\n    }\n}"}
{"task_id": "Java/65", "generation": "        // Convert the integer x to a string\n        String s = String.valueOf(x);\n        \n        // Handle edge case where shift is greater than number of digits\n        shift = shift % s.length();\n        \n        // Create a StringBuilder object to store the result\n        StringBuilder sb = new StringBuilder();\n        \n        // Shift the digits by shifting them right\n        for (int i = 0; i < s.length(); i++) {\n            int pos = (i + shift) % s.length();\n            sb.append(s.charAt(pos));\n        }\n        \n        // Convert the StringBuilder to a string and return\n        String result = sb.toString();\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.circularShift(12, 1)); // \"21\"\n        System.out.println(sol.circularShift(12, 2)); // \"12\"\n    }\n}"}
{"task_id": "Java/65", "generation": "        // Convert integer to string for easier manipulation\n        String num = String.valueOf(x);\n        int n = num.length();\n        \n        // Initialize variables for the shifted number\n        StringBuilder shifted = new StringBuilder();\n        \n        if (shift >= n) {\n            // If shift is greater than or equal to number of digits, reverse digits\n            for (int i = n - 1; i >= 0; i--) {\n                shifted.append(num.charAt(i));\n            }\n        } else {\n            // Circular shift the digits right by shift\n            for (int i = n - shift; i < n; i++) {\n                shifted.append(num.charAt(i));\n            }\n            for (int i = 0; i < n - shift; i++) {\n                shifted.append(num.charAt(i));\n            }\n        }\n        \n        return shifted.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.circularShift(12, 1)); // \"21\"\n        System.out.println(solution.circularShift(12, 2)); // \"12\"\n    }\n}"}
{"task_id": "Java/65", "generation": "        String s = Integer.toString(x);\n        int n = s.length();\n        shift %= n;\n        \n        if (shift == 0) {\n            return s;\n        }\n        \n        if (shift > 0) {\n            return s.substring(n - shift) + s.substring(0, n - shift);\n        } else {\n            return s.substring(-shift) + s.substring(0, -shift);\n        }\n    }\n}"}
{"task_id": "Java/66", "generation": "        int sum = 0;\n        \n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += (int) c;\n            }\n        }\n        \n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.digitSum(\"\")); // 0\n        System.out.println(solution.digitSum(\"abAB\")); // 131\n        System.out.println(solution.digitSum(\"abcCd\")); // 67\n        System.out.println(solution.digitSum(\"helloE\")); // 69\n        System.out.println(solution.digitSum(\"woArBld\")); // 131\n        System.out.println(solution.digitSum(\"aAaaaXa\")); // 153\n    }\n}"}
{"task_id": "Java/66", "generation": "        int sum = 0;\n        \n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += (int) c;\n            }\n        }\n        \n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.digitSum(\"\")); // Output: 0\n        System.out.println(solution.digitSum(\"abAB\")); // Output: 131\n        System.out.println(solution.digitSum(\"abcCd\")); // Output: 67\n        System.out.println(solution.digitSum(\"helloE\")); // Output: 69\n        System.out.println(solution.digitSum(\"woArBld\")); // Output: 131\n        System.out.println(solution.digitSum(\"aAaaaXa\")); // Output: 153\n    }\n}"}
{"task_id": "Java/66", "generation": "        int sum = 0;\n        \n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += (int) c;\n            }\n        }\n        \n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.digitSum(\"\")); // 0\n        System.out.println(solution.digitSum(\"abAB\")); // 131\n        System.out.println(solution.digitSum(\"abcCd\")); // 67\n        System.out.println(solution.digitSum(\"helloE\")); // 69\n        System.out.println(solution.digitSum(\"woArBld\")); // 131\n        System.out.println(solution.digitSum(\"aAaaaXa\")); // 153\n    }\n}"}
{"task_id": "Java/66", "generation": "        int sum = 0;\n        \n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += (int) c;\n            }\n        }\n        \n        return sum;\n    }\n}"}
{"task_id": "Java/66", "generation": "        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += (int) c;\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.digitSum(\"\")); // 0\n        System.out.println(solution.digitSum(\"abAB\")); // 131\n        System.out.println(solution.digitSum(\"abcCd\")); // 67\n        System.out.println(solution.digitSum(\"helloE\")); // 69\n        System.out.println(solution.digitSum(\"woArBld\")); // 131\n        System.out.println(solution.digitSum(\"aAaaaXa\")); // 153\n    }\n}"}
{"task_id": "Java/67", "generation": "        String[] parts = s.split(\"\\\\s+\");\n        int apples = Integer.parseInt(parts[0]);\n        int oranges = Integer.parseInt(parts[3]);\n\n        return n - apples - oranges;\n    }\n}"}
{"task_id": "Java/67", "generation": "        // Split the string into individual words\n        String[] words = s.split(\" \");\n        \n        // Initialize variables to keep track of the number of apples and oranges\n        int apples = 0;\n        int oranges = 0;\n        \n        // Loop through the words to find the numbers of apples and oranges\n        for(int i=0; i<words.length; i++) {\n            if(words[i].equals(\"apples\")) {\n                // Extract the number of apples and convert it to integer\n                apples = Integer.parseInt(words[i-1]);\n            } else if(words[i].equals(\"oranges\")) {\n                // Extract the number of oranges and convert it to integer\n                oranges = Integer.parseInt(words[i-1]);\n            }\n        }\n        \n        // Calculate the number of mango fruits in the basket\n        int mango = n - apples - oranges;\n        \n        return mango;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.fruitDistribution(\"5 apples and 6 oranges\", 19)); // 8\n        System.out.println(solution.fruitDistribution(\"0 apples and 1 oranges\",3)); // 2\n        System.out.println(solution.fruitDistribution(\"2 apples and 3 oranges\", 100)); // 95\n        System.out.println(solution.fruitDistribution(\"100 apples and 1 oranges\",120)); // 19\n    }\n}"}
{"task_id": "Java/67", "generation": "        String[] arr = s.split(\" \");\n        int totalFruits = Integer.parseInt(arr[arr.length - 3]) + Integer.parseInt(arr[arr.length - 1]);\n        \n        return n - totalFruits;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.fruitDistribution(\"5 apples and 6 oranges\", 19)); // 8\n        System.out.println(solution.fruitDistribution(\"0 apples and 1 oranges\", 3)); // 2\n        System.out.println(solution.fruitDistribution(\"2 apples and 3 oranges\", 100)); // 95\n        System.out.println(solution.fruitDistribution(\"100 apples and 1 oranges\", 120)); // 19\n    }\n}"}
{"task_id": "Java/67", "generation": "        int apples = 0;\n        int oranges = 0;\n        \n        // Split the input string into individual words\n        String[] words = s.split(\" \");\n        \n        // Iterate through the words to find the number of apples and oranges\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].equals(\"apples\")) {\n                apples = Integer.parseInt(words[i - 1]);\n            } else if (words[i].equals(\"oranges\")) {\n                oranges = Integer.parseInt(words[i - 1]);\n            }\n        }\n        \n        // Calculate the number of mango fruits\n        int mango = n - apples - oranges;\n        \n        return mango;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.fruitDistribution(\"5 apples and 6 oranges\", 19)); // Output: 8\n        System.out.println(solution.fruitDistribution(\"0 apples and 1 oranges\", 3));   // Output: 2\n        System.out.println(solution.fruitDistribution(\"2 apples and 3 oranges\", 100)); // Output: 95\n        System.out.println(solution.fruitDistribution(\"100 apples and 1 oranges\", 120)); // Output: 19\n    }\n}"}
{"task_id": "Java/67", "generation": "        String[] fruits = s.split(\" \");\n        int apples = Integer.parseInt(fruits[0]);\n        int oranges = Integer.parseInt(fruits[3]);\n        \n        return n - apples - oranges;\n    }\n}"}
{"task_id": "Java/68", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        int smallestEvenValue = Integer.MAX_VALUE;\n        int smallestIndex = Integer.MAX_VALUE;\n        \n        for (int i = 0; i < arr.size(); i++) {\n            int value = arr.get(i);\n            if (value % 2 == 0 && value < smallestEvenValue) {\n                smallestEvenValue = value;\n                smallestIndex = i;\n            }\n        }\n        \n        if (smallestEvenValue != Integer.MAX_VALUE) {\n            result.add(smallestEvenValue);\n            result.add(smallestIndex);\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/68", "generation": "        List<Integer> result = new ArrayList<>();\n        int smallestEvenValue = Integer.MAX_VALUE;\n        int smallestEvenIndex = Integer.MAX_VALUE;\n        \n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            if (num % 2 == 0 && num < smallestEvenValue) {\n                smallestEvenValue = num;\n                smallestEvenIndex = i;\n            }\n        }\n        \n        if (smallestEvenValue == Integer.MAX_VALUE) {\n            return result;\n        }\n        \n        result.add(smallestEvenValue);\n        result.add(smallestEvenIndex);\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> test1 = Arrays.asList(4, 2, 3);\n        System.out.println(solution.pluck(test1)); // Output: [2, 1]\n\n        List<Integer> test2 = Arrays.asList(1, 2, 3);\n        System.out.println(solution.pluck(test2)); // Output: [2, 1]\n\n        List<Integer> test3 = new ArrayList<>();\n        System.out.println(solution.pluck(test3)); // Output: []\n\n        List<Integer> test4 = Arrays.asList(5, 0, 3, 0, 4, 2);\n        System.out.println(solution.pluck(test4)); // Output: [0, 1]\n    }\n}"}
{"task_id": "Java/68", "generation": "        List<Integer> result = new ArrayList<>();\n\n        int smallestEven = Integer.MAX_VALUE;\n        int smallestEvenIndex = -1;\n\n        for (int i = 0; i < arr.size(); i++) {\n            int node = arr.get(i);\n            if (node % 2 == 0 && node < smallestEven) {\n                smallestEven = node;\n                smallestEvenIndex = i;\n            }\n        }\n\n        if (smallestEvenIndex != -1) {\n            result.add(smallestEven);\n            result.add(smallestEvenIndex);\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> input1 = Arrays.asList(4, 2, 3);\n        List<Integer> input2 = Arrays.asList(1, 2, 3);\n        List<Integer> input3 = new ArrayList<>();\n        List<Integer> input4 = Arrays.asList(5, 0, 3, 0, 4, 2);\n\n        System.out.println(solution.pluck(input1));  // [2, 1]\n        System.out.println(solution.pluck(input2));  // [2, 1]\n        System.out.println(solution.pluck(input3));  // []\n        System.out.println(solution.pluck(input4));  // [0, 1]\n    }\n}"}
{"task_id": "Java/68", "generation": "        List<Integer> result = new ArrayList<>();\n        int minEvenValue = Integer.MAX_VALUE;\n        int minEvenIndex = Integer.MAX_VALUE;\n\n        for (int i = 0; i < arr.size(); i++) {\n            int currentValue = arr.get(i);\n            if (currentValue % 2 == 0 && currentValue < minEvenValue) {\n                minEvenValue = currentValue;\n                minEvenIndex = i;\n            }\n        }\n\n        if (minEvenValue != Integer.MAX_VALUE) {\n            result.add(minEvenValue);\n            result.add(minEvenIndex);\n        }\n\n        return result;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Example 1\n        List<Integer> input1 = new ArrayList<>(Arrays.asList(4, 2, 3));\n        System.out.println(solution.pluck(input1)); // [2, 1]\n\n        // Example 2\n        List<Integer> input2 = new ArrayList<>(Arrays.asList(1, 2, 3));\n        System.out.println(solution.pluck(input2)); // [2, 1]\n\n        // Example 3\n        List<Integer> input3 = new ArrayList<>();\n        System.out.println(solution.pluck(input3)); // []\n\n        // Example 4\n        List<Integer> input4 = new ArrayList<>(Arrays.asList(5, 0, 3, 0, 4, 2));\n        System.out.println(solution.pluck(input4)); // [0, 1]\n    }\n}"}
{"task_id": "Java/68", "generation": "        List<Integer> result = new ArrayList<>();\n        int smallestValue = Integer.MAX_VALUE;\n        int smallestIndex = -1;\n\n        for (int i = 0; i < arr.size(); i++) {\n            int currentValue = arr.get(i);\n            if (currentValue % 2 == 0 && currentValue < smallestValue) {\n                smallestValue = currentValue;\n                smallestIndex = i;\n            }\n        }\n\n        if (smallestIndex != -1) {\n            result.add(smallestValue);\n            result.add(smallestIndex);\n        }\n\n        return result;\n    }\n}"}
{"task_id": "Java/69", "generation": "        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n\n        int maxNum = -1;\n        for (int num : frequencyMap.keySet()) {\n            if (num > maxNum && frequencyMap.get(num) >= num) {\n                maxNum = num;\n            }\n        }\n\n        return maxNum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.search(Arrays.asList(4, 1, 2, 2, 3, 1))); // Output: 2\n        System.out.println(solution.search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4))); // Output: 3\n        System.out.println(solution.search(Arrays.asList(5, 5, 4, 4, 4))); // Output: -1\n    }\n}"}
{"task_id": "Java/69", "generation": "        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        \n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n        \n        int maxVal = -1;\n        for (int num : lst) {\n            if (num > 0 && frequencyMap.get(num) >= num) {\n                maxVal = Math.max(maxVal, num);\n            }\n        }\n        \n        return maxVal;\n    }\n}"}
{"task_id": "Java/69", "generation": "        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        \n        // Calculate the frequency of each integer in the list\n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n        \n        // Check for the greatest integer that satisfies the condition\n        int result = -1;\n        for (int num : frequencyMap.keySet()) {\n            int frequency = frequencyMap.get(num);\n            if (num > frequency && frequency >= result) {\n                result = frequency;\n            }\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/69", "generation": "        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        for (int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n        \n        int maxNum = -1;\n        for (int num : frequencyMap.keySet()) {\n            if (num > maxNum && frequencyMap.get(num) >= num) {\n                maxNum = num;\n            }\n        }\n        \n        return maxNum;\n    }\n    \n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        \n        // Test cases\n        System.out.println(sol.search(Arrays.asList(4, 1, 2, 2, 3, 1))); // Output: 2\n        System.out.println(sol.search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4))); // Output: 3\n        System.out.println(sol.search(Arrays.asList(5, 5, 4, 4, 4))); // Output: -1\n    }\n}"}
{"task_id": "Java/69", "generation": "        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        \n        // Count the frequency of each integer in the list\n        for(int num : lst) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n        \n        int result = -1;\n        \n        // Check for the greatest integer that satisfies the conditions\n        for(Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n            int num = entry.getKey();\n            int freq = entry.getValue();\n            \n            if(num > freq && freq >= num && num > result) {\n                result = num;\n            }\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/70", "generation": "        List<Integer> result = new ArrayList<>();\n        Collections.sort(lst);\n        int start = 0;\n        int end = lst.size() - 1;\n        while (start <= end) {\n            if (start == end) {\n                result.add(lst.get(start));\n            } else {\n                result.add(lst.get(start));\n                result.add(lst.get(end));\n            }\n            start++;\n            end--;\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.strangeSortList(Arrays.asList(1, 2, 3, 4))); // [1, 4, 2, 3]\n        System.out.println(solution.strangeSortList(Arrays.asList(5, 5, 5, 5))); // [5, 5, 5, 5]\n        System.out.println(solution.strangeSortList(Arrays.asList())); // []\n    }\n}"}
{"task_id": "Java/70", "generation": "        // Sort the list in ascending order\n        Collections.sort(lst);\n\n        // Create a new list to store the result\n        List<Integer> result = new ArrayList<>();\n\n        // Initialize two pointers, one at the start and one at the end of the list\n        int left = 0;\n        int right = lst.size() - 1;\n\n        // Iterate through the list while the pointers do not cross each other\n        while (left <= right) {\n            // Add the minimum value to the result list\n            result.add(lst.get(left));\n            left++;\n\n            // If the pointers have crossed, break out of the loop\n            if (left > right) {\n                break;\n            }\n\n            // Add the maximum value to the result list\n            result.add(lst.get(right));\n            right--;\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n\n        // Test cases\n        System.out.println(sol.strangeSortList(Arrays.asList(1, 2, 3, 4))); // [1, 4, 2, 3]\n        System.out.println(sol.strangeSortList(Arrays.asList(5, 5, 5, 5))); // [5, 5, 5, 5]\n        System.out.println(sol.strangeSortList(Arrays.asList())); // []\n    }\n}"}
{"task_id": "Java/70", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        if(lst == null || lst.isEmpty()) {\n            return result;\n        }\n        \n        Collections.sort(lst);\n        int left = 0;\n        int right = lst.size()-1;\n        \n        while(left <= right) {\n            if(left == right) {\n                result.add(lst.get(left));\n                break;\n            }\n            \n            result.add(lst.get(left));\n            result.add(lst.get(right));\n            left++;\n            right--;\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.strangeSortList(Arrays.asList(1, 2, 3, 4)));\n        System.out.println(solution.strangeSortList(Arrays.asList(5, 5, 5, 5)));\n        System.out.println(solution.strangeSortList(Arrays.asList()));\n    }\n}"}
{"task_id": "Java/70", "generation": "        List<Integer> result = new ArrayList<>();\n\n        // Sort the list first\n        Collections.sort(lst);\n\n        int left = 0;\n        int right = lst.size() - 1;\n\n        while (left <= right) {\n            if (left == right) {\n                result.add(lst.get(left));\n            } else {\n                result.add(lst.get(left));\n                result.add(lst.get(right));\n            }\n            left++;\n            right--;\n        }\n\n        return result;\n    }\n}"}
{"task_id": "Java/70", "generation": "        List<Integer> result = new ArrayList<>();\n        if (lst == null || lst.isEmpty()) {\n            return result;\n        }\n        \n        Collections.sort(lst);\n        int left = 0;\n        int right = lst.size() - 1;\n        \n        while (left <= right) {\n            if (left == right) {\n                result.add(lst.get(left));\n                break;\n            }\n            result.add(lst.get(left));\n            result.add(lst.get(right));\n            left++;\n            right--;\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/71", "generation": "        // Check if the sides form a valid triangle\n        if (a + b > c && a + c > b && b + c > a) {\n            // Calculate the semi-perimeter of the triangle\n            double s = (a + b + c) / 2;\n            // Calculate the area of the triangle using Heron's formula\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            // Round the area to 2 decimal points\n            return Math.round(area * 100.0) / 100.0;\n        } else {\n            // The sides do not form a valid triangle\n            return -1;\n        }\n    }\n}"}
{"task_id": "Java/71", "generation": "        // Check if the sides form a valid triangle\n        if (a + b > c && b + c > a && a + c > b) {\n            // Calculate the semi-perimeter\n            double s = (a + b + c) / 2;\n            // Calculate the area using Heron's formula\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            // Round the area to 2 decimal points\n            return Math.round(area * 100.0) / 100.0;\n        } else {\n            return -1;\n        }\n    }\n}\n\nclass Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.triangleArea(3, 4, 5)); // Output: 6.0\n        System.out.println(solution.triangleArea(1, 2, 10)); // Output: -1\n    }\n}"}
{"task_id": "Java/71", "generation": "        if (a + b > c && b + c > a && a + c > b) {\n            double s = (a + b + c) / 2;\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            return Math.round(area * 100.0) / 100.0; // round to 2 decimal points\n        } else {\n            return -1;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.triangleArea(3, 4, 5)); // 6.00\n        System.out.println(solution.triangleArea(1, 2, 10)); // -1\n    }\n}"}
{"task_id": "Java/71", "generation": "        // Check if the three sides form a valid triangle\n        if (a + b > c && a + c > b && b + c > a) {\n            // Calculate the area of the triangle using Heron's formula\n            double s = (a + b + c) / 2;\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            // Round the area to 2 decimal points\n            return Math.round(area * 100.0) / 100.0;\n        } else {\n            return -1;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        // Test cases\n        System.out.println(solution.triangleArea(3, 4, 5)); // Output: 6.0\n        System.out.println(solution.triangleArea(1, 2, 10)); // Output: -1\n    }\n}"}
{"task_id": "Java/71", "generation": "        // Check if the three sides form a valid triangle\n        if (a + b > c && a + c > b && b + c > a) {\n            // Calculate the semi-perimeter\n            double s = (a + b + c) / 2;\n            // Calculate the area using Heron's formula\n            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n            // Round the area to 2 decimal points\n            return Math.round(area * 100.0) / 100.0;\n        } else {\n            return -1;\n        }\n    }\n}"}
{"task_id": "Java/72", "generation": "        if (!isPalindrome(q)) {\n            return false;\n        }\n\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n\n        return sum <= w;\n    }\n\n    private boolean isPalindrome(List<Integer> q) {\n        int start = 0;\n        int end = q.size() - 1;\n\n        while (start < end) {\n            if (!q.get(start).equals(q.get(end))) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n\n        return true;\n    }\n}"}
{"task_id": "Java/72", "generation": "        // Check if the list is balanced\n        boolean isBalanced = isBalanced(q);\n        \n        // Calculate the sum of the elements in the list\n        int sum = calculateSum(q);\n        \n        // Check if the sum is less than or equal to the maximum possible weight\n        if(isBalanced && sum <= w) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    \n    // Helper function to check if the list is balanced (palindromic)\n    private boolean isBalanced(List<Integer> q) {\n        int left = 0;\n        int right = q.size() - 1;\n        \n        // Compare elements from left and right ends\n        while(left < right) {\n            if(q.get(left) != q.get(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n    \n    // Helper function to calculate the sum of the elements in the list\n    private int calculateSum(List<Integer> q) {\n        int sum = 0;\n        \n        for(int num : q) {\n            sum += num;\n        }\n        \n        return sum;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.willItFly(Arrays.asList(1, 2), 5)); // false\n        System.out.println(solution.willItFly(Arrays.asList(3, 2, 3), 1)); // false\n        System.out.println(solution.willItFly(Arrays.asList(3, 2, 3), 9)); // true\n        System.out.println(solution.willItFly(Arrays.asList(3), 5)); // true\n    }\n}"}
{"task_id": "Java/72", "generation": "        if (!isPalindromic(q)) {\n            return false;\n        }\n\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n\n        return sum <= w;\n    }\n\n    public boolean isPalindromic(List<Integer> q) {\n        int start = 0;\n        int end = q.size() - 1;\n\n        while (start < end) {\n            if (!q.get(start).equals(q.get(end))) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.willItFly(Arrays.asList(1, 2), 5)); // false\n        System.out.println(solution.willItFly(Arrays.asList(3, 2, 3), 1)); // false\n        System.out.println(solution.willItFly(Arrays.asList(3, 2, 3), 9)); // true\n        System.out.println(solution.willItFly(Arrays.asList(3), 5)); // true\n    }\n}"}
{"task_id": "Java/72", "generation": "        // Check if the list is balanced\n        if (!isPalindrome(q)) {\n            return false;\n        }\n        \n        // Calculate the sum of the elements in the list\n        int sum = 0;\n        for (int num : q) {\n            sum += num;\n        }\n        \n        // Check if the sum is less than or equal to the maximum weight\n        return sum <= w;\n    }\n    \n    // Helper function to check if a list is palindrome\n    private boolean isPalindrome(List<Integer> list) {\n        int left = 0;\n        int right = list.size() - 1;\n        \n        while (left < right) {\n            if (!list.get(left).equals(list.get(right))) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "Java/72", "generation": "        // Check if the list is balanced (palindromic)\n        boolean balanced = isBalanced(q);\n        \n        // Calculate the sum of elements in the list\n        int sum = q.stream().mapToInt(Integer::intValue).sum();\n        \n        // Check if the sum is less than or equal to the maximum possible weight\n        return balanced && sum <= w;\n    }\n    \n    // Helper function to check if a list is balanced (palindromic)\n    private boolean isBalanced(List<Integer> q) {\n        int left = 0;\n        int right = q.size() - 1;\n        \n        while (left < right) {\n            if (q.get(left) != q.get(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.willItFly(Arrays.asList(1, 2), 5)); // false\n        System.out.println(solution.willItFly(Arrays.asList(3, 2, 3), 1)); // false\n        System.out.println(solution.willItFly(Arrays.asList(3, 2, 3), 9)); // true\n        System.out.println(solution.willItFly(Arrays.asList(3), 5)); // true\n    }\n}"}
{"task_id": "Java/73", "generation": "        int n = arr.size();\n        \n        // Create a 2D array to store whether a subarray is palindromic or not\n        boolean[][] palindromic = new boolean[n][n];\n        \n        // Fill the diagonal of the matrix (single elements are always palindromic)\n        for(int i=0; i<n; i++) {\n            palindromic[i][i] = true;\n        }\n        \n        // Fill the palindromic array with values based on subarrays\n        for(int len=2; len<=n; len++) {\n            for(int i=0; i<n-len+1; i++) {\n                int j = i+len-1;\n                if(len == 2) {\n                    palindromic[i][j] = (arr.get(i) == arr.get(j));\n                } else {\n                    palindromic[i][j] = (arr.get(i) == arr.get(j)) && palindromic[i+1][j-1];\n                }\n            }\n        }\n        \n        // Calculate the minimum number of changes needed to make the array palindromic\n        int[] changes = new int[n];\n        for(int i=0; i<n; i++) {\n            int minChanges = n-1;\n            for(int j=0; j<=i; j++) {\n                if(palindromic[j][i]) {\n                    int prevChanges = (j-1 < 0) ? 0 : changes[j-1];\n                    minChanges = Math.min(minChanges, prevChanges);\n                }\n            }\n            changes[i] = minChanges + (n - i - 1);\n        }\n        \n        return changes[n-1];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        List<Integer> arr1 = Arrays.asList(1,2,3,5,4,7,9,6);\n        List<Integer> arr2 = Arrays.asList(1, 2, 3, 4, 3, 2, 2);\n        List<Integer> arr3 = Arrays.asList(1, 2, 3, 2, 1);\n        \n        System.out.println(solution.smallestChange(arr1)); // 4\n        System.out.println(solution.smallestChange(arr2)); // 1\n        System.out.println(solution.smallestChange(arr3)); // 0\n    }\n}"}
{"task_id": "Java/73", "generation": "        int n = arr.size();\n        \n        // Create a 2D array dp to store the minimum number of changes needed for subarrays\n        int[][] dp = new int[n][n];\n        \n        // Fill the dp array with values\n        for (int len = 2; len <= n; len++) {\n            for (int i = 0; i < n - len + 1; i++) {\n                int j = i + len - 1;\n                if (arr.get(i) == arr.get(j)) {\n                    dp[i][j] = dp[i + 1][j - 1];\n                } else {\n                    dp[i][j] = 1 + Math.min(dp[i + 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n        \n        // Return the minimum number of changes needed for the entire array\n        return dp[0][n - 1];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> arr1 = Arrays.asList(1, 2, 3, 5, 4, 7, 9, 6);\n        List<Integer> arr2 = Arrays.asList(1, 2, 3, 4, 3, 2, 2);\n        List<Integer> arr3 = Arrays.asList(1, 2, 3, 2, 1);\n        \n        System.out.println(solution.smallestChange(arr1)); // Output should be 4\n        System.out.println(solution.smallestChange(arr2)); // Output should be 1\n        System.out.println(solution.smallestChange(arr3)); // Output should be 0\n    }\n}"}
{"task_id": "Java/73", "generation": "        int n = arr.size();\n        int[][] dp = new int[n][n];\n\n        for (int l = 1; l < n; l++) {\n            for (int i = 0; i < n - l; i++) {\n                int j = i + l;\n                dp[i][j] = dp[i + 1][j - 1] + (arr.get(i) == arr.get(j) ? 0 : 1);\n            }\n        }\n\n        return dp[0][n - 1];\n    }\n}"}
{"task_id": "Java/73", "generation": "        // Initialize a two-dimensional array to store the minimum number of changes needed to make subarrays palindromic\n        int n = arr.size();\n        int[][] dp = new int[n][n];\n\n        // Fill the diagonal elements of the dp array with 0\n        for (int i = 0; i < n; i++) {\n            dp[i][i] = 0;\n        }\n\n        // Fill the dp array starting from the bottom right corner\n        for (int len = 2; len <= n; len++) {\n            for (int i = 0; i < n - len + 1; i++) {\n                int j = i + len - 1;\n                if (arr.get(i) == arr.get(j)) {\n                    dp[i][j] = dp[i + 1][j - 1];\n                } else {\n                    dp[i][j] = 1 + Math.min(dp[i + 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n\n        return dp[0][n - 1];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> arr1 = Arrays.asList(1, 2, 3, 5, 4, 7, 9, 6);\n        List<Integer> arr2 = Arrays.asList(1, 2, 3, 4, 3, 2, 2);\n        List<Integer> arr3 = Arrays.asList(1, 2, 3, 2, 1);\n\n        System.out.println(solution.smallestChange(arr1)); // Output: 4\n        System.out.println(solution.smallestChange(arr2)); // Output: 1\n        System.out.println(solution.smallestChange(arr3)); // Output: 0\n    }\n}"}
{"task_id": "Java/73", "generation": "        int n = arr.size();\n        int[][] dp = new int[n][n];\n        \n        // Fill the diagonals with 0\n        for (int i = 0; i < n; i++) {\n            dp[i][i] = 0;\n        }\n        \n        // Fill the dp table in bottom-up manner\n        for (int len = 2; len <= n; len++) {\n            for (int i = 0; i < n - len + 1; i++) {\n                int j = i + len - 1;\n                \n                if (len == 2 && arr.get(i) == arr.get(j)) {\n                    dp[i][j] = 0;\n                } else if (arr.get(i) == arr.get(j)) {\n                    dp[i][j] = dp[i + 1][j - 1];\n                } else {\n                    dp[i][j] = 1 + Math.min(dp[i + 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n        \n        return dp[0][n - 1];\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> arr1 = Arrays.asList(1,2,3,5,4,7,9,6);\n        List<Integer> arr2 = Arrays.asList(1, 2, 3, 4, 3, 2, 2);\n        List<Integer> arr3 = Arrays.asList(1, 2, 3, 2, 1);\n        \n        System.out.println(solution.smallestChange(arr1)); // Output: 4\n        System.out.println(solution.smallestChange(arr2)); // Output: 1\n        System.out.println(solution.smallestChange(arr3)); // Output: 0\n    }\n}"}
{"task_id": "Java/74", "generation": "        int total1 = getTotalChars(lst1);\n        int total2 = getTotalChars(lst2);\n        \n        if (total1 < total2 || (total1 == total2 && lst1.size() < lst2.size())) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n    \n    private int getTotalChars(List<String> lst) {\n        int total = 0;\n        for (String str : lst) {\n            total += str.length();\n        }\n        return total;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Testing the examples\n        System.out.println(solution.totalMatch(Arrays.asList(), Arrays.asList())); // []\n        System.out.println(solution.totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\"))); // [\"hI\", \"Hi\"]\n        System.out.println(solution.totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\"))); // [\"hi\", \"admin\"]\n        System.out.println(solution.totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\"))); // [\"hI\", \"hi\", \"hi\"]\n        System.out.println(solution.totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\"))); // [\"4\"]\n    }\n}"}
{"task_id": "Java/74", "generation": "        int totalChars1 = getTotalChars(lst1);\n        int totalChars2 = getTotalChars(lst2);\n        \n        if (totalChars1 < totalChars2) {\n            return lst1;\n        } else if (totalChars1 > totalChars2) {\n            return lst2;\n        } else {\n            return lst1;\n        }\n    }\n    \n    private int getTotalChars(List<String> lst) {\n        int totalChars = 0;\n        for (String str : lst) {\n            totalChars += str.length();\n        }\n        return totalChars;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.totalMatch(Arrays.asList(), Arrays.asList())); // []\n        System.out.println(solution.totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\"))); // [\"hI\", \"Hi\"]\n        System.out.println(solution.totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\"))); // [\"hi\", \"admin\"]\n        System.out.println(solution.totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\"))); // [\"hI\", \"hi\", \"hi\"]\n        System.out.println(solution.totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\"))); // [\"4\"]\n    }\n}"}
{"task_id": "Java/74", "generation": "        int totalChars1 = 0;\n        int totalChars2 = 0;\n        \n        for (String s : lst1) {\n            totalChars1 += s.length();\n        }\n        \n        for (String s : lst2) {\n            totalChars2 += s.length();\n        }\n        \n        if (totalChars1 < totalChars2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.totalMatch(Arrays.asList(), Arrays.asList())); // []\n        System.out.println(solution.totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\"))); // [\"hI\", \"Hi\"]\n        System.out.println(solution.totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\"))); // [\"hi\", \"admin\"]\n        System.out.println(solution.totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\"))); // [\"hI\", \"hi\", \"hi\"]\n        System.out.println(solution.totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\"))); // [\"4\"]\n    }\n}"}
{"task_id": "Java/74", "generation": "        int totalChars1 = getTotalChars(lst1);\n        int totalChars2 = getTotalChars(lst2);\n        \n        if(totalChars1 < totalChars2) {\n            return lst1;\n        } else if(totalChars1 > totalChars2) {\n            return lst2;\n        } else {\n            return lst1;\n        }\n    }\n    \n    public int getTotalChars(List<String> lst) {\n        int totalChars = 0;\n        for(String str : lst) {\n            totalChars += str.length();\n        }\n        return totalChars;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.totalMatch(Arrays.asList(), Arrays.asList())); // []\n        System.out.println(sol.totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\"))); // [\"hI\", \"Hi\"]\n        System.out.println(sol.totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\"))); // [\"hi\", \"admin\"]\n        System.out.println(sol.totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\"))); // [\"hI\", \"hi\", \"hi\"]\n        System.out.println(sol.totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\"))); // [\"4\"]\n    }\n}"}
{"task_id": "Java/74", "generation": "        int total1 = getTotalChars(lst1);\n        int total2 = getTotalChars(lst2);\n\n        if (total1 < total2 || (total1 == total2 && lst1.size() <= lst2.size())) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n\n    private int getTotalChars(List<String> lst) {\n        int total = 0;\n        for (String str : lst) {\n            total += str.length();\n        }\n        return total;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test Cases\n        List<String> test1 = solution.totalMatch(Arrays.asList(), Arrays.asList());\n        List<String> test2 = solution.totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\"));\n        List<String> test3 = solution.totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\"));\n        List<String> test4 = solution.totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\"));\n        List<String> test5 = solution.totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\"));\n\n        System.out.println(test1); // Output: []\n        System.out.println(test2); // Output: [\"hI\", \"Hi\"]\n        System.out.println(test3); // Output: [\"hi\", \"admin\"]\n        System.out.println(test4); // Output: [\"hI\", \"hi\", \"hi\"]\n        System.out.println(test5); // Output: [\"4\"]\n    }\n}"}
{"task_id": "Java/75", "generation": "        List<Integer> primes = generatePrimes();\n\n        for (int i = 0; i < primes.size(); i++) {\n            for (int j = i + 1; j < primes.size(); j++) {\n                for (int k = j + 1; k < primes.size(); k++) {\n                    if (primes.get(i) * primes.get(j) * primes.get(k) == a) {\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    private List<Integer> generatePrimes() {\n        List<Integer> primes = new ArrayList<>();\n\n        for (int i = 2; i <= 100; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n\n        return primes;\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.isMultiplyPrime(30)); // true\n        System.out.println(solution.isMultiplyPrime(17)); // false\n        System.out.println(solution.isMultiplyPrime(23)); // false\n    }\n}"}
{"task_id": "Java/75", "generation": "        // 1 is not a prime number, so return false if a is 1\n        if (a == 1) {\n            return false;\n        }\n        \n        // Get all prime numbers less than 100\n        List<Integer> primeNumbers = getPrimeNumbers();\n        \n        // Try all combinations of 3 prime numbers to see if their multiplication equals a\n        for (int i = 0; i < primeNumbers.size(); i++) {\n            for (int j = i + 1; j < primeNumbers.size(); j++) {\n                for (int k = j + 1; k < primeNumbers.size(); k++) {\n                    if (primeNumbers.get(i) * primeNumbers.get(j) * primeNumbers.get(k) == a) {\n                        return true;\n                    }\n                }\n            }\n        }\n        \n        return false;\n    }\n    \n    // Function to get all prime numbers less than 100\n    public List<Integer> getPrimeNumbers() {\n        List<Integer> primeNumbers = new ArrayList<>();\n        \n        for (int i = 2; i < 100; i++) {\n            boolean isPrime = true;\n            for (int j = 2; j < i; j++) {\n                if (i % j == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                primeNumbers.add(i);\n            }\n        }\n        \n        return primeNumbers;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.isMultiplyPrime(30)); // true\n        System.out.println(solution.isMultiplyPrime(18)); // false\n        System.out.println(solution.isMultiplyPrime(2)); // false\n    }\n}"}
{"task_id": "Java/75", "generation": "        // Use the Sieve of Eratosthenes algorithm to generate all prime numbers less than 100\n        boolean[] primes = new boolean[100];\n        Arrays.fill(primes, true);\n        primes[0] = false;\n        primes[1] = false;\n        \n        for (int i = 2; i*i < 100; i++) {\n            if (primes[i]) {\n                for (int j = i * i; j < 100; j += i) {\n                    primes[j] = false;\n                }\n            }\n        }\n        \n        // Find all possible combinations of 3 prime numbers that multiply to the given number\n        for (int i = 2; i < 100; i++) {\n            if (primes[i]) {\n                for (int j = 2; j < 100; j++) {\n                    if (primes[j] && i != j) {\n                        for (int k = 2; k < 100; k++) {\n                            if (primes[k] && i != k && j != k) {\n                                if (i * j * k == a) {\n                                    return true;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        return false;\n    }\n    \n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        \n        // Test cases\n        System.out.println(sol.isMultiplyPrime(30)); // true\n        System.out.println(sol.isMultiplyPrime(31)); // false\n        System.out.println(sol.isMultiplyPrime(210)); // true\n        System.out.println(sol.isMultiplyPrime(14)); // false\n    }\n}"}
{"task_id": "Java/75", "generation": "        // Check if number is less than 6 or a prime number itself\n        if (a < 6) {\n            return false;\n        }\n        \n        // Check for all possible combinations of 3 prime numbers (less than 100)\n        for (int i = 2; i <= 100; i++) {\n            if (isPrime(i)) {\n                for (int j = i; j <= 100; j++) {\n                    if (isPrime(j)) {\n                        for (int k = j; k <= 100; k++) {\n                            if (isPrime(k) && i * j * k == a) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        return false;\n    }\n    \n    // Helper function to check if a number is prime\n    public boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.isMultiplyPrime(30)); // true\n        System.out.println(solution.isMultiplyPrime(17)); // false\n        System.out.println(solution.isMultiplyPrime(2)); // false\n        System.out.println(solution.isMultiplyPrime(7)); // false\n    }\n}"}
{"task_id": "Java/75", "generation": "        if (a < 6) {\n            return false;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(a); i++) {\n            if (a % i == 0 && isPrime(i)) {\n                int quotient = a / i;\n                if (isPrime(quotient)) {\n                    return true;\n                }\n            }\n        }\n        \n        return false;\n    }\n    \n    private boolean isPrime(int num) {\n        if (num < 2) {\n            return false;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.isMultiplyPrime(30)); // true\n        System.out.println(solution.isMultiplyPrime(31)); // false\n    }\n}"}
{"task_id": "Java/76", "generation": "        if (x == 1) {\n            return true;\n        }\n        \n        int power = (int) (Math.log(x) / Math.log(n));\n        \n        return Math.pow(n, power) == x;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.isSimplePower(1, 4)); // true\n        System.out.println(solution.isSimplePower(2, 2)); // true\n        System.out.println(solution.isSimplePower(8, 2)); // true\n        System.out.println(solution.isSimplePower(3, 2)); // false\n        System.out.println(solution.isSimplePower(3, 1)); // false\n        System.out.println(solution.isSimplePower(5, 3)); // false\n    }\n}"}
{"task_id": "Java/76", "generation": "        if (x == 1 && n == 1) {\n            return false;\n        }\n        \n        if (x % n != 0) {\n            return false;\n        }\n        \n        int power = 0;\n        int num = x;\n        \n        while (num % n == 0) {\n            num /= n;\n            power++;\n        }\n        \n        return num == 1 && power > 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.isSimplePower(1, 4)); // true\n        System.out.println(solution.isSimplePower(2, 2)); // true\n        System.out.println(solution.isSimplePower(8, 2)); // true\n        System.out.println(solution.isSimplePower(3, 2)); // false\n        System.out.println(solution.isSimplePower(3, 1)); // false\n        System.out.println(solution.isSimplePower(5, 3)); // false\n    }\n}"}
{"task_id": "Java/76", "generation": "        if (x <= 0 || n <= 0) {\n            return false;\n        }\n        \n        double result = Math.log(x) / Math.log(n);\n        \n        return Math.pow(n, (int) result) == x;\n    }\n}"}
{"task_id": "Java/76", "generation": "        if (x == 1) {\n            return true;\n        }\n        \n        if (n == 1) {\n            return false;\n        }\n        \n        int power = 1;\n        while (power < x) {\n            power *= n;\n        }\n        \n        return power == x;\n    }\n}"}
{"task_id": "Java/76", "generation": "        if (x <= 0 || n <= 0) {\n            return false;\n        }\n        \n        int power = 0;\n        double result = Math.pow(n, power);\n        \n        while (result < x) {\n            power++;\n            result = Math.pow(n, power);\n        }\n        \n        return result == x;\n    }\n}"}
{"task_id": "Java/77", "generation": "        if (a == 0 || a == 1) {\n            return true;\n        }\n        \n        for (int i = 1; i * i * i <= Math.abs(a); i++) {\n            if (i * i * i == Math.abs(a)) {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.iscube(1)); // true\n        System.out.println(solution.iscube(2)); // false\n        System.out.println(solution.iscube(-1)); // true\n        System.out.println(solution.iscube(64)); // true\n        System.out.println(solution.iscube(0)); // true\n        System.out.println(solution.iscube(180)); // false\n    }\n}"}
{"task_id": "Java/77", "generation": "        // Check if the input number is a cube of some integer number\n        double cubeRoot = Math.cbrt(Math.abs(a)); // Calculate the cube root of the absolute value of the input\n        return Math.pow(Math.round(cubeRoot), 3) == Math.abs(a); // Check if the cube of the rounded cube root equals the input\n    }\n\n    // Main function to test the iscube function\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.iscube(1)); // true\n        System.out.println(solution.iscube(2)); // false\n        System.out.println(solution.iscube(-1)); // true\n        System.out.println(solution.iscube(64)); // true\n        System.out.println(solution.iscube(0)); // true\n        System.out.println(solution.iscube(180)); // false\n    }\n}"}
{"task_id": "Java/77", "generation": "        // Check if the given integer is a cube of some integer number\n        if (a == 0) {\n            return true;\n        } else {\n            int cubeRoot = (int) Math.round(Math.cbrt(Math.abs(a)));\n            return cubeRoot * cubeRoot * cubeRoot == Math.abs(a);\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.iscube(1)); // true\n        System.out.println(solution.iscube(2)); // false\n        System.out.println(solution.iscube(-1)); // true\n        System.out.println(solution.iscube(64)); // true\n        System.out.println(solution.iscube(0)); // true\n        System.out.println(solution.iscube(180)); // false\n    }\n}"}
{"task_id": "Java/77", "generation": "        if (a == 0 || a == 1) {\n            return true;\n        }\n        \n        int cubeRoot = (int) Math.cbrt(a);\n        return cubeRoot * cubeRoot * cubeRoot == a;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.iscube(1)); // true\n        System.out.println(solution.iscube(2)); // false\n        System.out.println(solution.iscube(-1)); // true\n        System.out.println(solution.iscube(64)); // true\n        System.out.println(solution.iscube(0)); // true\n        System.out.println(solution.iscube(180)); // false\n    }\n}"}
{"task_id": "Java/77", "generation": "        // Edge case\n        if (a == 0) {\n            return true;\n        }\n        \n        // Check if the given number is equal to the cube of some integer\n        int cubeRoot = (int) Math.round(Math.cbrt(a));\n        \n        return cubeRoot * cubeRoot * cubeRoot == a;\n    }\n}"}
{"task_id": "Java/78", "generation": "        // Define a set of prime hexadecimal digits\n        Set<Character> primes = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n        \n        int count = 0;\n        for (char c : num.toCharArray()) {\n            if (primes.contains(c)) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.hexKey(\"AB\")); // Output: 1\n        System.out.println(solution.hexKey(\"1077E\")); // Output: 2\n        System.out.println(solution.hexKey(\"ABED1A33\")); // Output: 4\n        System.out.println(solution.hexKey(\"123456789ABCDEF0\")); // Output: 6\n        System.out.println(solution.hexKey(\"2020\")); // Output: 2\n    }\n}"}
{"task_id": "Java/78", "generation": "        int count = 0;\n        \n        // Create a set of prime hexadecimal digits\n        Set<Character> primes = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n        \n        // Loop through each character in the hexadecimal number string\n        for (int i = 0; i < num.length(); i++) {\n            char c = num.charAt(i);\n            if (primes.contains(c)) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.hexKey(\"AB\")); // 1\n        System.out.println(solution.hexKey(\"1077E\")); // 2\n        System.out.println(solution.hexKey(\"ABED1A33\")); // 4\n        System.out.println(solution.hexKey(\"123456789ABCDEF0\")); // 6\n        System.out.println(solution.hexKey(\"2020\")); // 2\n    }\n}"}
{"task_id": "Java/78", "generation": "        int count = 0;\n        Set<Character> primes = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n        \n        for (int i = 0; i < num.length(); i++) {\n            char c = num.charAt(i);\n            if (primes.contains(c)) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.hexKey(\"AB\")); // 1\n        System.out.println(solution.hexKey(\"1077E\")); // 2\n        System.out.println(solution.hexKey(\"ABED1A33\")); // 4\n        System.out.println(solution.hexKey(\"123456789ABCDEF0\")); // 6\n        System.out.println(solution.hexKey(\"2020\")); // 2\n    }\n}"}
{"task_id": "Java/78", "generation": "        // Initialize a counter for counting prime hexadecimal digits\n        int count = 0;\n        \n        // Define a set of prime hexadecimal digits\n        Set<Character> primes = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n        \n        // Iterate through each character in the input hexadecimal number\n        for (char c : num.toCharArray()) {\n            // Check if the character is a prime hexadecimal digit\n            if (primes.contains(c)) {\n                count++; // Increment the counter if it is a prime digit\n            }\n        }\n        \n        return count; // Return the total count of prime hexadecimal digits\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.hexKey(\"AB\")); // Output: 1\n        System.out.println(solution.hexKey(\"1077E\")); // Output: 2\n        System.out.println(solution.hexKey(\"ABED1A33\")); // Output: 4\n        System.out.println(solution.hexKey(\"123456789ABCDEF0\")); // Output: 6\n        System.out.println(solution.hexKey(\"2020\")); // Output: 2\n    }\n}"}
{"task_id": "Java/78", "generation": "        // Define a set to store the prime hexadecimal digits\n        Set<Character> primes = new HashSet<>(Arrays.asList('2', '3', '5', '7', 'B', 'D'));\n        \n        // Initialize a counter to count prime digits\n        int count = 0;\n        \n        // Loop through the hexadecimal number string\n        for (char c : num.toCharArray()) {\n            if (primes.contains(c)) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.hexKey(\"AB\")); // Output: 1\n        System.out.println(solution.hexKey(\"1077E\")); // Output: 2\n        System.out.println(solution.hexKey(\"ABED1A33\")); // Output: 4\n        System.out.println(solution.hexKey(\"123456789ABCDEF0\")); // Output: 6\n        System.out.println(solution.hexKey(\"2020\")); // Output: 2\n    }\n}"}
{"task_id": "Java/79", "generation": "        String binary = Integer.toBinaryString(decimal);\n        return \"db\" + binary + \"db\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.decimalToBinary(15)); // should return \"db1111db\"\n        System.out.println(solution.decimalToBinary(32)); // should return \"db100000db\"\n    }\n}"}
{"task_id": "Java/79", "generation": "        // Using Integer class method to convert decimal to binary\n        String binary = Integer.toBinaryString(decimal);\n        \n        // Adding 'db' to the beginning and end of the binary string\n        return \"db\" + binary + \"db\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.decimalToBinary(15)); // Output: db1111db\n        System.out.println(solution.decimalToBinary(32)); // Output: db100000db\n    }\n}"}
{"task_id": "Java/79", "generation": "        // Use Integer class to convert decimal to binary\n        String binary = Integer.toBinaryString(decimal);\n        \n        StringBuilder sb = new StringBuilder();\n        sb.append(\"db\"); // Add initial 'db'\n        \n        // Append binary digits to the StringBuilder\n        for (char c : binary.toCharArray()) {\n            sb.append(c);\n        }\n        \n        sb.append(\"db\"); // Add final 'db'\n        \n        return sb.toString();\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.decimalToBinary(15)); // \"db1111db\"\n        System.out.println(solution.decimalToBinary(32)); // \"db100000db\"\n    }\n}"}
{"task_id": "Java/79", "generation": "        // Use Integer.toBinaryString() method to convert decimal to binary\n        String binary = Integer.toBinaryString(decimal);\n\n        // Add extra characters 'db' at the beginning and end of the string\n        binary = \"db\" + binary + \"db\";\n\n        return binary;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.decimalToBinary(15));  // Output: db1111db\n        System.out.println(solution.decimalToBinary(32));  // Output: db100000db\n    }\n}"}
{"task_id": "Java/79", "generation": "        String binary = Integer.toBinaryString(decimal);\n        return \"db\" + binary + \"db\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.decimalToBinary(15)); // should return \"db1111db\"\n        System.out.println(solution.decimalToBinary(32)); // should return \"db100000db\"\n    }\n}"}
{"task_id": "Java/80", "generation": "        if (s == null || s.length() < 3) {\n            return false;\n        }\n        \n        for (int i = 0; i <= s.length() - 3; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.isHappy(\"a\"));    // false\n        System.out.println(solution.isHappy(\"aa\"));   // false\n        System.out.println(solution.isHappy(\"abcd\")); // true\n        System.out.println(solution.isHappy(\"aabb\")); // false\n        System.out.println(solution.isHappy(\"adb\"));  // true\n        System.out.println(solution.isHappy(\"xyy\"));  // false\n    }\n}"}
{"task_id": "Java/80", "generation": "        if (s.length() < 3) {\n            return false;\n        }\n        \n        for (int i = 0; i <= s.length() - 3; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.isHappy(\"a\")); // false\n        System.out.println(solution.isHappy(\"aa\")); // false\n        System.out.println(solution.isHappy(\"abcd\")); // true\n        System.out.println(solution.isHappy(\"aabb\")); // false\n        System.out.println(solution.isHappy(\"adb\")); // true\n        System.out.println(solution.isHappy(\"xyy\")); // false\n    }\n}"}
{"task_id": "Java/80", "generation": "        if (s.length() < 3) {\n            return false;\n        }\n        \n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.isHappy(\"a\")); // false\n        System.out.println(solution.isHappy(\"aa\")); // false\n        System.out.println(solution.isHappy(\"abcd\")); // true\n        System.out.println(solution.isHappy(\"aabb\")); // false\n        System.out.println(solution.isHappy(\"adb\")); // true\n        System.out.println(solution.isHappy(\"xyy\")); // false\n    }\n}"}
{"task_id": "Java/80", "generation": "        if (s.length() < 3) {\n            return false;\n        }\n        \n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.isHappy(\"a\")); // false\n        System.out.println(solution.isHappy(\"aa\")); // false\n        System.out.println(solution.isHappy(\"abcd\")); // true\n        System.out.println(solution.isHappy(\"aabb\")); // false\n        System.out.println(solution.isHappy(\"adb\")); // true\n        System.out.println(solution.isHappy(\"xyy\")); // false\n    }\n}"}
{"task_id": "Java/80", "generation": "        if (s.length() < 3) {\n            return false;\n        }\n        \n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i+1) || s.charAt(i) == s.charAt(i+2) || s.charAt(i+1) == s.charAt(i+2)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.isHappy(\"a\")); // false\n        System.out.println(solution.isHappy(\"aa\")); // false\n        System.out.println(solution.isHappy(\"abcd\")); // true\n        System.out.println(solution.isHappy(\"aabb\")); // false\n        System.out.println(solution.isHappy(\"adb\")); // true\n        System.out.println(solution.isHappy(\"xyy\")); // false\n    }\n}"}
{"task_id": "Java/81", "generation": "        List<String> letterGrades = new ArrayList<>();\n        \n        for (Double gpa : grades) {\n            if (gpa == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (gpa > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (gpa > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (gpa > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (gpa > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (gpa > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (gpa > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (gpa > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (gpa > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (gpa > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (gpa > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (gpa > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        \n        return letterGrades;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Double> grades = Arrays.asList(4.0, 3.0, 1.7, 2.0, 3.5);\n        List<String> letterGrades = solution.numericalLetterGrade(grades);\n\n        System.out.println(letterGrades); // Output: [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    }\n}"}
{"task_id": "Java/81", "generation": "        List<String> letterGrades = new ArrayList<>();\n        \n        for (double grade : grades) {\n            if (grade == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        \n        return letterGrades;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Double> grades = Arrays.asList(4.0, 3.0, 1.7, 2.0, 3.5);\n        List<String> letterGrades = solution.numericalLetterGrade(grades);\n        \n        System.out.println(letterGrades);\n    }\n}"}
{"task_id": "Java/81", "generation": "        List<String> letterGrades = new ArrayList<>();\n\n        for (Double gpa : grades) {\n            if (gpa == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (gpa > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (gpa > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (gpa > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (gpa > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (gpa > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (gpa > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (gpa > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (gpa > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (gpa > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (gpa > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (gpa > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n\n        return letterGrades;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Double> grades = Arrays.asList(4.0, 3.0, 1.7, 2.0, 3.5);\n        List<String> letterGrades = solution.numericalLetterGrade(grades);\n        System.out.println(letterGrades); // [\"A+\", \"B\", \"C-\", \"C+\", \"A-\"]\n    }\n}"}
{"task_id": "Java/81", "generation": "        List<String> letterGrades = new ArrayList<>();\n\n        for (Double gpa : grades) {\n            if (gpa == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (gpa > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (gpa > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (gpa > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (gpa > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (gpa > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (gpa > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (gpa > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (gpa > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (gpa > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (gpa > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (gpa >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n\n        return letterGrades;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Double> grades = Arrays.asList(4.0, 3.0, 2.7, 1.7, 3.5);\n        List<String> letterGrades = solution.numericalLetterGrade(grades);\n\n        System.out.println(letterGrades);\n    }\n}"}
{"task_id": "Java/81", "generation": "        List<String> letterGrades = new ArrayList<>();\n\n        for (Double gpa : grades) {\n            if (gpa == 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (gpa > 3.7) {\n                letterGrades.add(\"A\");\n            } else if (gpa > 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (gpa > 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (gpa > 2.7) {\n                letterGrades.add(\"B\");\n            } else if (gpa > 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (gpa > 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (gpa > 1.7) {\n                letterGrades.add(\"C\");\n            } else if (gpa > 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (gpa > 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (gpa > 0.7) {\n                letterGrades.add(\"D\");\n            } else if (gpa > 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n\n        return letterGrades;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Double> grades = Arrays.asList(4.0, 3.0, 1.7, 2.0, 3.5);\n        System.out.println(solution.numericalLetterGrade(grades));\n    }\n}"}
{"task_id": "Java/82", "generation": "        int length = string.length();\n        \n        if(length <= 1){\n            return false;\n        }\n        \n        for(int i=2; i<=Math.sqrt(length); i++){\n            if(length % i == 0){\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "Java/82", "generation": "        int length = string.length();\n        \n        if (length <= 1) {\n            return false;\n        }\n        \n        if (length == 2) {\n            return true;\n        }\n        \n        for (int i = 2; i < length; i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "Java/82", "generation": "        int length = string.length();\n        \n        if (length <= 1) {\n            return false;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "Java/82", "generation": "        int length = string.length();\n        \n        // 0 and 1 are not prime numbers\n        if (length == 0 || length == 1) {\n            return false;\n        }\n        \n        // Check if length is a prime number\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "Java/82", "generation": "        int length = string.length();\n        if (length <= 1) {\n            return false;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.primeLength(\"Hello\")); // true\n        System.out.println(solution.primeLength(\"abcdcba\")); // true\n        System.out.println(solution.primeLength(\"kittens\")); // true\n        System.out.println(solution.primeLength(\"orange\")); // false\n    }\n}"}
{"task_id": "Java/83", "generation": "        if (n == 1) {\n            return 1;\n        }\n        \n        int count = 0;\n        \n        // Count the numbers that start with 1\n        count += 9 * (int)Math.pow(10, n-1);\n        \n        // Count the numbers that end with 1\n        count += 9 * (int)Math.pow(10, n-1);\n        \n        // Subtract the duplicates (the numbers that start and end with 1)\n        count -= (int)Math.pow(10, n-2);\n        \n        return count;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.startsOneEnds(1)); // 1\n        System.out.println(solution.startsOneEnds(2)); // 18\n        System.out.println(solution.startsOneEnds(3)); // 171\n        System.out.println(solution.startsOneEnds(4)); // 1710\n    }\n}"}
{"task_id": "Java/83", "generation": "        int count = 0;\n        \n        // Check if n is less than 1\n        if (n < 1) {\n            return 0;\n        }\n        \n        // Count the numbers of n-digit positive integers that start with 1\n        count += Math.pow(10, n - 1);\n        \n        // Count the numbers of n-digit positive integers that end with 1\n        count += Math.pow(10, n - 1);\n        \n        // Subtract the overlapping numbers (those that start and end with 1)\n        count -= 1;\n        \n        return count;\n    }\n    \n    // Main function to test the solution\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.startsOneEnds(2)); // Output: 18\n        System.out.println(solution.startsOneEnds(3)); // Output: 180\n    }\n}"}
{"task_id": "Java/83", "generation": "        // Count of numbers that start with 1\n        int startWithOne = (int) Math.pow(9, n-1);\n\n        // Count of numbers that end with 1\n        int endsWithOne = (int) Math.pow(10, n-1) - (int) Math.pow(9, n-1);\n\n        // Total count of numbers that start or end with 1\n        return startWithOne + endsWithOne;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        int n1 = 2;\n        System.out.println(solution.startsOneEnds(n1)); // Output: 18\n\n        // Test case 2\n        int n2 = 3;\n        System.out.println(solution.startsOneEnds(n2)); // Output: 171\n    }\n}"}
{"task_id": "Java/83", "generation": "        // Count of n-digit positive integers that start with 1\n        int startWithOneCount = (int) Math.pow(10, n - 1);\n\n        // Count of n-digit positive integers that end with 1\n        int endWithOneCount = 0;\n        if (n > 1) {\n            endWithOneCount = (int) Math.pow(10, n - 1);\n        }\n\n        // Total count of n-digit positive integers that start or end with 1\n        return startWithOneCount + endWithOneCount;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.startsOneEnds(1)); // Output: 2\n        System.out.println(solution.startsOneEnds(2)); // Output: 20\n        System.out.println(solution.startsOneEnds(3)); // Output: 200\n        System.out.println(solution.startsOneEnds(5)); // Output: 20000\n        System.out.println(solution.startsOneEnds(6)); // Output: 200000\n    }\n}"}
{"task_id": "Java/83", "generation": "        if (n <= 0) {\n            return 0;\n        }\n        \n        // Count of numbers that start with 1\n        int startWithOne = (int) Math.pow(10, n-1);\n        \n        // Count of numbers that end with 1\n        int endWithOne = 10;\n        \n        return startWithOne + endWithOne - 1;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.startsOneEnds(1)); // Output: 2\n        System.out.println(sol.startsOneEnds(2)); // Output: 20\n        System.out.println(sol.startsOneEnds(3)); // Output: 200\n    }\n}"}
{"task_id": "Java/84", "generation": "        // Convert the integer N to its binary representation\n        String binary = Integer.toBinaryString(N);\n        \n        // Initialize a variable to store the sum of digits in binary\n        int sum = 0;\n        \n        // Calculate the sum of digits in binary\n        for(char c : binary.toCharArray()) {\n            if(c == '1') {\n                sum++;\n            }\n        }\n        \n        // Convert the sum to binary\n        String sumBinary = Integer.toBinaryString(sum);\n        \n        return sumBinary;\n    }\n}\n\n// Test the solution with some example inputs\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.solve(1000)); // Output: \"1\"\n        System.out.println(solution.solve(150)); // Output: \"110\"\n        System.out.println(solution.solve(147)); // Output: \"1100\"\n    }\n}"}
{"task_id": "Java/84", "generation": "        // Convert integer to binary string\n        String binary = Integer.toBinaryString(N);\n        \n        // Initialize sum of digits\n        int sum = 0;\n        \n        // Calculate sum of digits\n        for (char c : binary.toCharArray()) {\n            if (c == '1') {\n                sum++;\n            }\n        }\n        \n        // Convert sum to binary string\n        return Integer.toBinaryString(sum);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.solve(1000)); // Output: \"1\"\n        System.out.println(solution.solve(150)); // Output: \"110\"\n        System.out.println(solution.solve(147)); // Output: \"1100\"\n    }\n}"}
{"task_id": "Java/84", "generation": "        int sum = 0;\n        \n        while (N > 0) {\n            sum += N % 2;\n            N = N / 2;\n        }\n        \n        return Integer.toBinaryString(sum);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.solve(1000)); // Output: 1\n        System.out.println(solution.solve(150)); // Output: 110\n        System.out.println(solution.solve(147)); // Output: 1100\n    }\n}"}
{"task_id": "Java/84", "generation": "        // Convert the integer N to a binary string\n        String binaryString = Integer.toBinaryString(N);\n        \n        // Initialize a sum variable to keep track of the sum of digits\n        int sum = 0;\n        \n        // Iterate through each character in the binary string\n        for (int i = 0; i < binaryString.length(); i++) {\n            // Convert each character to an integer and add it to the sum\n            sum += Character.getNumericValue(binaryString.charAt(i));\n        }\n        \n        // Convert the sum back to a binary string and return it\n        return Integer.toBinaryString(sum);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases to validate the solution\n        int[] testCases = {1000, 150, 147};\n        for (int testCase : testCases) {\n            System.out.println(\"Input: \" + testCase + \", Output: \" + solution.solve(testCase));\n        }\n    }\n}"}
{"task_id": "Java/84", "generation": "        int sum = 0;\n        // Convert the integer to binary string\n        String binaryString = Integer.toBinaryString(N);\n        \n        // Iterate over the binary string and sum up the digits\n        for (int i = 0; i < binaryString.length(); i++) {\n            sum += Character.getNumericValue(binaryString.charAt(i));\n        }\n        \n        // Convert the sum to binary string and return\n        return Integer.toBinaryString(sum);\n    }\n}\n\n// Test cases to validate the solution\nclass Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test case 1\n        int N1 = 1000;\n        System.out.println(solution.solve(N1)); // Output should be \"1\"\n        \n        // Test case 2\n        int N2 = 150;\n        System.out.println(solution.solve(N2)); // Output should be \"110\"\n        \n        // Test case 3\n        int N3 = 147;\n        System.out.println(solution.solve(N3)); // Output should be \"1100\"\n    }\n}"}
{"task_id": "Java/85", "generation": "        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test the add function\n        System.out.println(solution.add(Arrays.asList(4, 2, 6, 7))); // Output should be 2\n    }\n}"}
{"task_id": "Java/85", "generation": "        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test 1\n        List<Integer> lst1 = Arrays.asList(4, 2, 6, 7);\n        System.out.println(solution.add(lst1)); // Output: 2\n\n        // Test 2\n        List<Integer> lst2 = Arrays.asList(1, 5, 8, 3, 2, 6, 9);\n        System.out.println(solution.add(lst2)); // Output: 8\n    }\n}"}
{"task_id": "Java/85", "generation": "        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/85", "generation": "        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test 1\n        List<Integer> lst1 = Arrays.asList(4, 2, 6, 7);\n        System.out.println(solution.add(lst1)); // Output: 2\n\n        // Test 2\n        List<Integer> lst2 = Arrays.asList(1, 3, 5, 7, 9);\n        System.out.println(solution.add(lst2)); // Output: 0\n\n        // Test 3\n        List<Integer> lst3 = Arrays.asList(2, 4, 6, 8, 10);\n        System.out.println(solution.add(lst3)); // Output: 10\n    }\n}"}
{"task_id": "Java/85", "generation": "        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.add(Arrays.asList(4, 2, 6, 7))); // Output: 2\n    }\n}"}
{"task_id": "Java/86", "generation": "        String[] words = s.split(\" \");\n        StringBuilder result = new StringBuilder();\n\n        for (String word : words) {\n            char[] chars = word.toCharArray();\n            Arrays.sort(chars);\n            result.append(chars).append(\" \");\n        }\n\n        return result.toString().trim();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.antiShuffle(\"Hi\")); // Hi\n        System.out.println(solution.antiShuffle(\"hello\")); // ehllo\n        System.out.println(solution.antiShuffle(\"Hello World!!!\")); // Hello !!!Wdlor\n    }\n}"}
{"task_id": "Java/86", "generation": "        String[] words = s.split(\" \");\n        StringBuilder result = new StringBuilder();\n\n        for (String word : words) {\n            char[] chars = word.toCharArray();\n            Arrays.sort(chars);\n            result.append(new String(chars)).append(\" \");\n        }\n\n        return result.toString().trim();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.antiShuffle(\"Hi\")); // Hi\n        System.out.println(solution.antiShuffle(\"hello\")); // ehllo\n        System.out.println(solution.antiShuffle(\"Hello World!!!\")); // Hello !!!Wdlor\n    }\n}"}
{"task_id": "Java/86", "generation": "        // Split the input string into words\n        String[] words = s.split(\" \");\n        \n        // Initialize a new StringBuilder to store the ordered version of the string\n        StringBuilder result = new StringBuilder();\n        \n        // Iterate through each word in the array\n        for(String word : words) {\n            // Convert the word into a character array\n            char[] chars = word.toCharArray();\n            \n            // Sort the character array in ascending order\n            Arrays.sort(chars);\n            \n            // Append the sorted characters back to the result StringBuilder\n            result.append(chars);\n            \n            // Append a space after each word except for the last word\n            if(!word.equals(words[words.length-1])) {\n                result.append(\" \");\n            }\n        }\n        \n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.antiShuffle(\"Hi\")); // \"Hi\"\n        System.out.println(solution.antiShuffle(\"hello\")); // \"ehllo\"\n        System.out.println(solution.antiShuffle(\"Hello World!!!\")); // \"Hello !!!Wdlor\"\n    }\n}"}
{"task_id": "Java/86", "generation": "        StringBuilder result = new StringBuilder();\n        String[] words = s.split(\" \");\n        \n        for (String word : words) {\n            char[] charArray = word.toCharArray();\n            Arrays.sort(charArray);\n            result.append(new String(charArray) + \" \");\n        }\n        \n        return result.toString().trim();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.antiShuffle(\"Hi\")); // Hi\n        System.out.println(solution.antiShuffle(\"hello\")); // ehllo\n        System.out.println(solution.antiShuffle(\"Hello World!!!\")); // Hello !!!Wdlor\n    }\n}"}
{"task_id": "Java/86", "generation": "        if (s == null || s.length() <= 1) {\n            return s;\n        }\n        \n        StringBuilder result = new StringBuilder();\n        String[] words = s.split(\" \");\n        \n        for (String word : words) {\n            char[] chars = word.toCharArray();\n            Arrays.sort(chars);\n            result.append(chars);\n            result.append(\" \");\n        }\n        \n        return result.toString().trim();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.antiShuffle(\"Hi\")); // Hi\n        System.out.println(solution.antiShuffle(\"hello\")); // ehllo\n        System.out.println(solution.antiShuffle(\"Hello World!!!\")); // Hello !!!Wdlor\n    }\n}"}
{"task_id": "Java/87", "generation": "        List<List<Integer>> result = new ArrayList<>();\n        \n        for(int i=0; i<lst.size(); i++){\n            List<Integer> row = lst.get(i);\n            for(int j=0; j<row.size(); j++){\n                if(row.get(j) == x){\n                    List<Integer> coordinate = new ArrayList<>();\n                    coordinate.add(i);\n                    coordinate.add(j);\n                    result.add(coordinate);\n                }\n            }\n        }\n        \n        Collections.sort(result, new Comparator<List<Integer>>(){\n            @Override\n            public int compare(List<Integer> c1, List<Integer> c2){\n                if(c1.get(0) == c2.get(0)){\n                    return c2.get(1) - c1.get(1);\n                }else{\n                    return c1.get(0) - c2.get(0);\n                }\n            }\n        });\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<List<Integer>> lst1 = new ArrayList<>();\n        lst1.add(Arrays.asList(1,2,3,4,5,6));\n        lst1.add(Arrays.asList(1,2,3,4,1,6));\n        lst1.add(Arrays.asList(1,2,3,4,5,1));\n        System.out.println(solution.getRow(lst1, 1)); // [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n\n        List<List<Integer>> lst2 = new ArrayList<>();\n        System.out.println(solution.getRow(lst2, 1)); // []\n\n        List<List<Integer>> lst3 = new ArrayList<>();\n        lst3.add(new ArrayList<>());\n        lst3.add(Arrays.asList(1));\n        lst3.add(Arrays.asList(1, 2, 3));\n        System.out.println(solution.getRow(lst3, 3)); // [[2, 2]]\n    }\n}"}
{"task_id": "Java/87", "generation": "        List<List<Integer>> result = new ArrayList<>();\n\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    List<Integer> coordinate = new ArrayList<>();\n                    coordinate.add(i);\n                    coordinate.add(j);\n                    result.add(coordinate);\n                }\n            }\n        }\n\n        result.sort((a, b) -> {\n            if (!a.get(0).equals(b.get(0))) {\n                return a.get(0) - b.get(0);\n            } else {\n                return b.get(1) - a.get(1);\n            }\n        });\n\n        return result;\n    }\n\n}"}
{"task_id": "Java/87", "generation": "        List<List<Integer>> result = new ArrayList<>();\n        \n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    List<Integer> coordinate = new ArrayList<>();\n                    coordinate.add(i);\n                    coordinate.add(j);\n                    result.add(coordinate);\n                }\n            }\n        }\n        \n        // Sort by row in ascending order\n        Collections.sort(result, new Comparator<List<Integer>>() {\n            @Override\n            public int compare(List<Integer> o1, List<Integer> o2) {\n                return o1.get(0) - o2.get(0);\n            }\n        });\n        \n        // Sort by column in descending order\n        for (List<Integer> coordinate : result) {\n            Collections.sort(coordinate, Collections.reverseOrder());\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<List<Integer>> lst = new ArrayList<>();\n        lst.add(Arrays.asList(1, 2, 3, 4, 5, 6));\n        lst.add(Arrays.asList(1, 2, 3, 4, 1, 6));\n        lst.add(Arrays.asList(1, 2, 3, 4, 5, 1));\n        \n        System.out.println(solution.getRow(lst, 1)); // [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n        \n        System.out.println(solution.getRow(new ArrayList<>(), 1)); // []\n        \n        List<List<Integer>> lst2 = new ArrayList<>();\n        lst2.add(Collections.emptyList());\n        lst2.add(Arrays.asList(1));\n        lst2.add(Arrays.asList(1, 2, 3));\n        \n        System.out.println(solution.getRow(lst2, 3)); // [[2, 2]]\n    }\n}"}
{"task_id": "Java/87", "generation": "        List<List<Integer>> result = new ArrayList<>();\n        \n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    List<Integer> coordinate = new ArrayList<>();\n                    coordinate.add(i); // row\n                    coordinate.add(j); // column\n                    result.add(coordinate);\n                }\n            }\n        }\n        \n        // Sort coordinates by row in ascending order\n        result.sort(Comparator.comparingInt(o -> o.get(0)));\n        \n        // Sort coordinates of the same row by column in descending order\n        for (List<Integer> coordinate : result) {\n            coordinate.sort(Collections.reverseOrder());\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<List<Integer>> test1 = new ArrayList<>();\n        test1.add(Arrays.asList(1,2,3,4,5,6));\n        test1.add(Arrays.asList(1,2,3,4,1,6));\n        test1.add(Arrays.asList(1,2,3,4,5,1));\n        System.out.println(solution.getRow(test1, 1)); // [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n        \n        List<List<Integer>> test2 = new ArrayList<>();\n        test2.add(new ArrayList<>());\n        test2.add(Arrays.asList(1));\n        test2.add(Arrays.asList(1, 2, 3));\n        System.out.println(solution.getRow(test2, 3)); // [[2, 2]]\n    }\n}"}
{"task_id": "Java/87", "generation": "        List<List<Integer>> result = new ArrayList<>();\n        \n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    List<Integer> coordinate = new ArrayList<>();\n                    coordinate.add(i);\n                    coordinate.add(j);\n                    result.add(coordinate);\n                }\n            }\n        }\n        \n        // Sort coordinates initially by rows in ascending order\n        Collections.sort(result, (a, b) -> a.get(0) - b.get(0));\n        \n        // Sort coordinates of the row by columns in descending order\n        for (List<Integer> coord : result) {\n            Collections.sort(coord, (a, b) -> b - a);\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<List<Integer>> lst1 = new ArrayList<>();\n        lst1.add(Arrays.asList(1, 2, 3, 4, 5, 6));\n        lst1.add(Arrays.asList(1, 2, 3, 4, 1, 6));\n        lst1.add(Arrays.asList(1, 2, 3, 4, 5, 1));\n        System.out.println(solution.getRow(lst1, 1));\n\n        List<List<Integer>> lst2 = new ArrayList<>();\n        lst2.add(new ArrayList<>());\n        lst2.add(Arrays.asList(1));\n        lst2.add(Arrays.asList(1, 2, 3));\n        System.out.println(solution.getRow(lst2, 3));\n\n        List<List<Integer>> lst3 = new ArrayList<>();\n        System.out.println(solution.getRow(lst3, 1));\n    }\n}"}
{"task_id": "Java/88", "generation": "        List<Integer> copy = new ArrayList<>(array);\n\n        if (copy.isEmpty()) {\n            return copy;\n        }\n\n        int sum = copy.get(0) + copy.get(copy.size() - 1);\n\n        if (sum % 2 == 0) {\n            Collections.sort(copy, Collections.reverseOrder());\n        } else {\n            Collections.sort(copy);\n        }\n\n        return copy;\n    }\n}"}
{"task_id": "Java/88", "generation": "        List<Integer> copy = new ArrayList<>(array);\n\n        int sum = copy.get(0) + copy.get(copy.size() - 1);\n\n        if (sum % 2 == 0) {\n            Collections.sort(copy, Collections.reverseOrder());\n        } else {\n            Collections.sort(copy);\n        }\n\n        return copy;\n    }\n}"}
{"task_id": "Java/88", "generation": "        List<Integer> sortedArray = new ArrayList<>(array);\n\n        if (array.size() <= 1) {\n            return sortedArray;\n        }\n\n        int sum = array.get(0) + array.get(array.size() - 1);\n\n        if (sum % 2 == 1) {\n            Collections.sort(sortedArray);\n        } else {\n            Collections.sort(sortedArray, Collections.reverseOrder());\n        }\n\n        return sortedArray;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.sortArray(Arrays.asList())); // []\n        System.out.println(solution.sortArray(Arrays.asList(5))); // [5]\n        System.out.println(solution.sortArray(Arrays.asList(2, 4, 3, 0, 1, 5))); // [0, 1, 2, 3, 4, 5]\n        System.out.println(solution.sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6))); // [6, 5, 4, 3, 2, 1, 0]\n    }\n}"}
{"task_id": "Java/88", "generation": "        List<Integer> sortedArray = new ArrayList<>(array);\n        \n        if(array.size() < 2){\n            return sortedArray;\n        }\n        \n        int sum = sortedArray.get(0) + sortedArray.get(sortedArray.size()-1);\n        \n        if(sum % 2 == 0){\n            Collections.sort(sortedArray, Collections.reverseOrder());\n        } else {\n            Collections.sort(sortedArray);\n        }\n        \n        return sortedArray;\n    }\n}"}
{"task_id": "Java/88", "generation": "        List<Integer> sortedArray = new ArrayList<>(array);\n        int first = sortedArray.get(0);\n        int last = sortedArray.get(sortedArray.size() - 1);\n\n        if ((first + last) % 2 == 0) {\n            // Sort in descending order\n            Collections.sort(sortedArray, Collections.reverseOrder());\n        } else {\n            // Sort in ascending order\n            Collections.sort(sortedArray);\n        }\n\n        return sortedArray;\n    }\n}"}
{"task_id": "Java/89", "generation": "        // Create a StringBuilder to store the encrypted string\n        StringBuilder encrypted = new StringBuilder();\n        \n        // Loop through each character in the input string\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            \n            // Check if the character is a letter\n            if (Character.isLetter(c)) {\n                // Determine the new position of the letter after rotation\n                char newChar = (char) (c + 2 * 2);\n                \n                // Handle wrap around for lowercase letters\n                if (Character.isLowerCase(c) && newChar > 'z') {\n                    newChar = (char) ('a' + (newChar - 'z' - 1));\n                }\n                // Handle wrap around for uppercase letters\n                else if (Character.isUpperCase(c) && newChar > 'Z') {\n                    newChar = (char) ('A' + (newChar - 'Z' - 1));\n                }\n                \n                // Append the encrypted character to the StringBuilder\n                encrypted.append(newChar);\n            } else {\n                // If character is not a letter, append it as it is\n                encrypted.append(c);\n            }\n        }\n        \n        // Convert the StringBuilder to a String and return it\n        return encrypted.toString();\n    }\n}"}
{"task_id": "Java/89", "generation": "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n                char encrypted = (char)(c + (2 * 2));\n                if ((Character.isLowerCase(c) && encrypted > 'z') || (Character.isUpperCase(c) && encrypted > 'Z')) {\n                    encrypted = (char)(c - (26 - (2 * 2)));\n                }\n                sb.append(encrypted);\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Testing the examples mentioned in the prompt\n        System.out.println(solution.encrypt(\"hi\")); // Output: \"lm\"\n        System.out.println(solution.encrypt(\"asdfghjkl\")); // Output: \"ewhjklnop\"\n        System.out.println(solution.encrypt(\"gf\")); // Output: \"kj\"\n        System.out.println(solution.encrypt(\"et\")); // Output: \"ix\"\n    }\n}"}
{"task_id": "Java/89", "generation": "        StringBuilder encryptedString = new StringBuilder();\n\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            // Check if character is a lowercase letter\n            if (Character.isLowerCase(c)) {\n                char encryptedChar = (char) ((((c - 'a') + 2) * 2 % 26) + 'a');\n                encryptedString.append(encryptedChar);\n            } else {\n                // Character is not a lowercase letter, so just append it unchanged\n                encryptedString.append(c);\n            }\n        }\n\n        return encryptedString.toString();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.encrypt(\"hi\")); // Output: \"lm\"\n        System.out.println(solution.encrypt(\"asdfghjkl\")); // Output: \"ewhjklnop\"\n        System.out.println(solution.encrypt(\"gf\")); // Output: \"kj\"\n        System.out.println(solution.encrypt(\"et\")); // Output: \"ix\"\n    }\n}"}
{"task_id": "Java/89", "generation": "        StringBuilder encrypted = new StringBuilder();\n        \n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLowerCase(c)) {\n                char encryptedChar = (char) ('a' + (c - 'a' + 2 * 2) % 26);\n                encrypted.append(encryptedChar);\n            } else if (Character.isUpperCase(c)) {\n                char encryptedChar = (char) ('A' + (c - 'A' + 2 * 2) % 26);\n                encrypted.append(encryptedChar);\n            } else {\n                encrypted.append(c);\n            }\n        }\n        \n        return encrypted.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.encrypt(\"hi\")); // Output: \"lm\"\n        System.out.println(solution.encrypt(\"asdfghjkl\")); // Output: \"ewhjklnop\"\n        System.out.println(solution.encrypt(\"gf\")); // Output: \"kj\"\n        System.out.println(solution.encrypt(\"et\")); // Output: \"ix\"\n    }\n}"}
{"task_id": "Java/89", "generation": "        String encrypted = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n                char encryptedChar = (char) (c + 2 * 2);\n                if (Character.isLowerCase(c) && encryptedChar > 'z') {\n                    encryptedChar = (char) ('a' + (encryptedChar - 'z') - 1);\n                } else if (Character.isUpperCase(c) && encryptedChar > 'Z') {\n                    encryptedChar = (char) ('A' + (encryptedChar - 'Z') - 1);\n                }\n                encrypted += encryptedChar;\n            } else {\n                encrypted += c;\n            }\n        }\n        return encrypted;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.encrypt(\"hi\")); // lm\n        System.out.println(sol.encrypt(\"asdfghjkl\")); // ewhjklnop\n        System.out.println(sol.encrypt(\"gf\")); // kj\n        System.out.println(sol.encrypt(\"et\")); // ix\n    }\n}"}
{"task_id": "Java/90", "generation": "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\n        TreeSet<Integer> set = new TreeSet<>(lst);\n\n        return set.size() < 2 ? Optional.empty() : Optional.of(set.higher(set.first()));\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.nextSmallest(Arrays.asList(1, 2, 3, 4, 5))); // Optional[2]\n        System.out.println(solution.nextSmallest(Arrays.asList(5, 1, 4, 3, 2))); // Optional[2]\n        System.out.println(solution.nextSmallest(Arrays.asList())); // Optional.empty\n        System.out.println(solution.nextSmallest(Arrays.asList(1, 1))); // Optional.empty\n    }\n}"}
{"task_id": "Java/90", "generation": "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n        \n        TreeSet<Integer> set = new TreeSet<>(lst);\n        if (set.size() < 2) {\n            return Optional.empty();\n        }\n        \n        return Optional.of(set.pollFirst());\n    }\n}"}
{"task_id": "Java/90", "generation": "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\n        Set<Integer> set = new TreeSet<>(lst);\n        if (set.size() < 2) {\n            return Optional.empty();\n        }\n\n        int smallest = (int) set.toArray()[1];\n        return Optional.of(smallest);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.nextSmallest(Arrays.asList(1, 2, 3, 4, 5))); // Output: Optional[2]\n        System.out.println(solution.nextSmallest(Arrays.asList(5, 1, 4, 3, 2))); // Output: Optional[2]\n        System.out.println(solution.nextSmallest(Arrays.asList())); // Output: Optional.empty\n        System.out.println(solution.nextSmallest(Arrays.asList(1, 1))); // Output: Optional.empty\n    }\n}"}
{"task_id": "Java/90", "generation": "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n        \n        List<Integer> sortedList = new ArrayList<>(lst);\n        Collections.sort(sortedList);\n        \n        Integer smallest = sortedList.get(0);\n        Integer secondSmallest = null;\n        \n        for (Integer num : sortedList) {\n            if (num > smallest) {\n                secondSmallest = num;\n                break;\n            }\n        }\n        \n        return Optional.ofNullable(secondSmallest);\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        \n        System.out.println(sol.nextSmallest(Arrays.asList(1, 2, 3, 4, 5))); // Optional[2]\n        System.out.println(sol.nextSmallest(Arrays.asList(5, 1, 4, 3, 2))); // Optional[2]\n        System.out.println(sol.nextSmallest(Arrays.asList())); // Optional.empty\n        System.out.println(sol.nextSmallest(Arrays.asList(1, 1))); // Optional.empty\n    }\n}"}
{"task_id": "Java/90", "generation": "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n        \n        // Create a TreeSet to store unique elements in sorted order\n        TreeSet<Integer> set = new TreeSet<>(lst);\n        \n        // Get the second smallest element from the sorted set\n        Iterator<Integer> iterator = set.iterator();\n        iterator.next(); // skip the first element (smallest)\n        \n        if (iterator.hasNext()) {\n            return Optional.of(iterator.next());\n        } else {\n            return Optional.empty();\n        }\n    }\n}"}
{"task_id": "Java/91", "generation": "        String[] sentences = S.split(\"[.?!]\");\n        int boredomCount = 0;\n        \n        for (String sentence : sentences) {\n            if (sentence.trim().startsWith(\"I\")) {\n                boredomCount++;\n            }\n        }\n        \n        return boredomCount;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.isBored(\"Hello world\")); // 0\n        System.out.println(solution.isBored(\"The sky is blue. The sun is shining. I love this weather\")); // 1\n    }\n}"}
{"task_id": "Java/91", "generation": "        int boredomCount = 0;\n        String[] sentences = S.split(\"[.?!]\");\n\n        for (String sentence : sentences) {\n            String[] words = sentence.trim().split(\" \");\n            if (words.length > 0 && words[0].equalsIgnoreCase(\"I\")) {\n                boredomCount++;\n            }\n        }\n\n        return boredomCount;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.isBored(\"Hello world\")); // 0\n        System.out.println(solution.isBored(\"The sky is blue. The sun is shining. I love this weather\")); // 1\n    }\n}"}
{"task_id": "Java/91", "generation": "        String[] sentences = S.split(\"[.!?]\");\n        int count = 0;\n        for (String sentence : sentences) {\n            String[] words = sentence.trim().split(\"\\\\s+\");\n            if (words.length > 0 && words[0].equals(\"I\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/91", "generation": "        String[] sentences = S.split(\"[.!?]\");\n        int boredomCount = 0;\n        \n        for (String sentence : sentences) {\n            if (sentence.trim().startsWith(\"I\")) {\n                boredomCount++;\n            }\n        }\n        \n        return boredomCount;\n    }\n}"}
{"task_id": "Java/91", "generation": "        int boredomCount = 0;\n        String[] sentences = S.split(\"[.?!]\");\n\n        for (String sentence : sentences) {\n            if (sentence.trim().startsWith(\"I\")) {\n                boredomCount++;\n            }\n        }\n\n        return boredomCount;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.isBored(\"Hello world\")); // 0\n        System.out.println(solution.isBored(\"The sky is blue. The sun is shining. I love this weather\")); // 1\n    }\n}"}
{"task_id": "Java/92", "generation": "        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int num1 = (int) x;\n            int num2 = (int) y;\n            int num3 = (int) z;\n\n            if (num1 == num2 + num3 || num2 == num1 + num3 || num3 == num1 + num2) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.anyInt(5, 2, 7)); // true\n        System.out.println(solution.anyInt(3, 2, 2)); // false\n        System.out.println(solution.anyInt(3, -2, 1)); // true\n        System.out.println(solution.anyInt(3.6, -2.2, 2)); // false\n    }\n}"}
{"task_id": "Java/92", "generation": "        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int a = (int) x;\n            int b = (int) y;\n            int c = (int) z;\n            return a == b + c || b == a + c || c == a + b;\n        } else {\n            return false;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.anyInt(5, 2, 7)); // true\n        System.out.println(solution.anyInt(3, 2, 2)); // false\n        System.out.println(solution.anyInt(3, -2, 1)); // true\n        System.out.println(solution.anyInt(3.6, -2.2, 2)); // false\n    }\n}"}
{"task_id": "Java/92", "generation": "        if (!(x instanceof Integer) || !(y instanceof Integer) || !(z instanceof Integer)) {\n            return false;\n        }\n\n        int num1 = (int)x;\n        int num2 = (int)y;\n        int num3 = (int)z;\n\n        return num1 == num2 + num3 || num2 == num1 + num3 || num3 == num1 + num2;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Testing the examples from the prompt\n        System.out.println(solution.anyInt(5, 2, 7)); // true\n        System.out.println(solution.anyInt(3, 2, 2)); // false\n        System.out.println(solution.anyInt(3, -2, 1)); // true\n        System.out.println(solution.anyInt(3.6, -2.2, 2)); // false\n    }\n}"}
{"task_id": "Java/92", "generation": "        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int a = (int) x;\n            int b = (int) y;\n            int c = (int) z;\n\n            return a == b + c || b == a + c || c == a + b;\n        }\n\n        return false;\n    }\n}"}
{"task_id": "Java/92", "generation": "        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int num1 = (int) x;\n            int num2 = (int) y;\n            int num3 = (int) z;\n            \n            if (num1 == num2 + num3 || num2 == num1 + num3 || num3 == num1 + num2) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.anyInt(5, 2, 7)); // true\n        System.out.println(solution.anyInt(3, 2, 2)); // false\n        System.out.println(solution.anyInt(3, -2, 1)); // true\n        System.out.println(solution.anyInt(3.6, -2.2, 2)); // false\n    }\n}"}
{"task_id": "Java/93", "generation": "        // Initialize a StringBuilder to store the encoded message\n        StringBuilder encodedMessage = new StringBuilder();\n\n        // Convert the message to lowercase for easier manipulation\n        String lowerCaseMessage = message.toLowerCase();\n\n        // Define a map for vowels and their respective replacements\n        Map<Character, Character> vowelReplacements = new HashMap<>();\n        vowelReplacements.put('a', 'c');\n        vowelReplacements.put('e', 'g');\n        vowelReplacements.put('i', 'k');\n        vowelReplacements.put('o', 'q');\n        vowelReplacements.put('u', 'w');\n\n        // Iterate through each character in the message\n        for (char c : lowerCaseMessage.toCharArray()) {\n            // Check if the character is a letter\n            if (Character.isLetter(c)) {\n                // Swap the case of the letter\n                char encodedChar = Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c);\n                \n                // Replace the vowel with the replacement letter, if it is a vowel\n                if (vowelReplacements.containsKey(c)) {\n                    encodedChar = vowelReplacements.get(c);\n                }\n\n                // Append the encoded character to the StringBuilder\n                encodedMessage.append(encodedChar);\n            } else {\n                // If the character is not a letter, simply append it as is\n                encodedMessage.append(c);\n            }\n        }\n\n        // Convert the StringBuilder to a String and return the encoded message\n        return encodedMessage.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test the encode function\n        System.out.println(solution.encode(\"test\"));  // \"TGST\"\n        System.out.println(solution.encode(\"This is a message\"));  // \"tHKS KS C MGSSCGG\"\n    }\n}"}
{"task_id": "Java/93", "generation": "        // Create a StringBuilder to store the encoded message\n        StringBuilder encodedMessage = new StringBuilder();\n        \n        // Define a mapping of vowels to their replacements\n        Map<Character, Character> vowelReplacements = new HashMap<>();\n        vowelReplacements.put('a', 'c');\n        vowelReplacements.put('e', 'g');\n        vowelReplacements.put('i', 'k');\n        vowelReplacements.put('o', 'q');\n        vowelReplacements.put('u', 'w');\n        \n        // Iterate through each character in the message\n        for(char ch : message.toCharArray()) {\n            // Check if the character is a letter\n            if(Character.isLetter(ch)) {\n                // Swap the case of the letter\n                char encodedChar = Character.isUpperCase(ch) ? Character.toLowerCase(ch) : Character.toUpperCase(ch);\n                \n                // Check if the character is a vowel\n                if(\"aeiouAEIOU\".indexOf(ch) != -1) {\n                    // Replace the vowel with the corresponding letter 2 places ahead\n                    encodedChar = vowelReplacements.get(Character.toLowerCase(ch));\n                }\n                \n                // Append the encoded character to the StringBuilder\n                encodedMessage.append(encodedChar);\n            } else {\n                // Append non-letter characters as is\n                encodedMessage.append(ch);\n            }\n        }\n        \n        // Return the encoded message as a String\n        return encodedMessage.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.encode(\"test\")); // \"TGST\"\n        System.out.println(solution.encode(\"This is a message\")); // \"tHKS KS C MGSSCGG\"\n    }\n}"}
{"task_id": "Java/93", "generation": "        char[] charArray = message.toCharArray();\n        for (int i = 0; i < charArray.length; i++) {\n            char c = charArray[i];\n            if (Character.isLetter(c)) {\n                if (Character.isLowerCase(c)) {\n                    charArray[i] = Character.toUpperCase(c);\n                } else {\n                    charArray[i] = Character.toLowerCase(c);\n                }\n                if (isVowel(c)) {\n                    charArray[i] = (char) (c + 2);\n                }\n            }\n        }\n        return new String(charArray);\n    }\n\n    private boolean isVowel(char c) {\n        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\n            c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U';\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.encode(\"test\")); // \"TGST\"\n        System.out.println(solution.encode(\"This is a message\")); // \"tHKS KS C MGSSCGG\"\n    }\n}"}
{"task_id": "Java/93", "generation": "        StringBuilder encodedMessage = new StringBuilder();\n\n        for (char c : message.toCharArray()) {\n            if (Character.isLetter(c)) {\n                if (Character.isUpperCase(c)) {\n                    char newChar = (char) ((c + 2 - 'A') % 26 + 'A');\n                    if (newChar == 'A' || newChar == 'E' || newChar == 'I' || newChar == 'O' || newChar == 'U') {\n                        newChar++;\n                    }\n                    encodedMessage.append(newChar);\n                } else {\n                    char newChar = (char) ((c + 2 - 'a') % 26 + 'a');\n                    if (newChar == 'a' || newChar == 'e' || newChar == 'i' || newChar == 'o' || newChar == 'u') {\n                        newChar++;\n                    }\n                    encodedMessage.append(newChar);\n                }\n            } else {\n                encodedMessage.append(c);\n            }\n        }\n\n        return encodedMessage.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.encode(\"test\")); // \"TGST\"\n        System.out.println(solution.encode(\"This is a message\")); // \"tHKS KS C MGSSCGG\"\n    }\n}"}
{"task_id": "Java/93", "generation": "        StringBuilder encodedMessage = new StringBuilder();\n\n        for (char c : message.toCharArray()) {\n            if (Character.isLetter(c)) {\n                if (Character.isUpperCase(c)) {\n                    encodedMessage.append(Character.toLowerCase(c));\n                } else {\n                    encodedMessage.append(Character.toUpperCase(c));\n                }\n\n                if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\n                    c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n                    char newChar = (char) (c + 2);\n                    if (newChar == 'a' || newChar == 'e' || newChar == 'i' || newChar == 'o' || newChar == 'u') {\n                        encodedMessage.append(Character.toUpperCase(newChar));\n                    } else {\n                        encodedMessage.append(newChar);\n                    }\n                }\n            } else {\n                encodedMessage.append(c);\n            }\n        }\n\n        return encodedMessage.toString();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.encode(\"test\")); // \"TGST\"\n        System.out.println(solution.encode(\"This is a message\")); // \"tHKS KS C MGSSCGG\"\n    }\n}"}
{"task_id": "Java/94", "generation": "        int maxPrime = 0;\n        for (int num : lst) {\n            if (isPrime(num)) {\n                maxPrime = Math.max(maxPrime, num);\n            }\n        }\n        \n        int sumOfDigits = 0;\n        while (maxPrime > 0) {\n            sumOfDigits += maxPrime % 10;\n            maxPrime /= 10;\n        }\n        \n        return sumOfDigits;\n    }\n    \n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> lst1 = Arrays.asList(0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3);\n        System.out.println(solution.skjkasdkd(lst1));\n\n        List<Integer> lst2 = Arrays.asList(1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1);\n        System.out.println(solution.skjkasdkd(lst2));\n\n        List<Integer> lst3 = Arrays.asList(1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3);\n        System.out.println(solution.skjkasdkd(lst3));\n\n        List<Integer> lst4 = Arrays.asList(0,724,32,71,99,32,6,0,5,91,83,0,5,6);\n        System.out.println(solution.skjkasdkd(lst4));\n\n        List<Integer> lst5 = Arrays.asList(0,81,12,3,1,21);\n        System.out.println(solution.skjkasdkd(lst5));\n\n        List<Integer> lst6 = Arrays.asList(0,8,1,2,1,7);\n        System.out.println(solution.skjkasdkd(lst6));\n    }\n}"}
{"task_id": "Java/94", "generation": "        int maxPrime = Integer.MIN_VALUE;\n        for (int num : lst) {\n            if (isPrime(num) && num > maxPrime) {\n                maxPrime = num;\n            }\n        }\n        \n        int sum = 0;\n        while (maxPrime > 0) {\n            sum += maxPrime % 10;\n            maxPrime /= 10;\n        }\n        \n        return sum;\n    }\n    \n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> test1 = Arrays.asList(0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3);\n        List<Integer> test2 = Arrays.asList(1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1);\n        List<Integer> test3 = Arrays.asList(1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3);\n        List<Integer> test4 = Arrays.asList(0,724,32,71,99,32,6,0,5,91,83,0,5,6);\n        List<Integer> test5 = Arrays.asList(0,81,12,3,1,21);\n        List<Integer> test6 = Arrays.asList(0,8,1,2,1,7);\n        \n        System.out.println(solution.skjkasdkd(test1)); // Output should be 10\n        System.out.println(solution.skjkasdkd(test2)); // Output should be 25\n        System.out.println(solution.skjkasdkd(test3)); // Output should be 13\n        System.out.println(solution.skjkasdkd(test4)); // Output should be 11\n        System.out.println(solution.skjkasdkd(test5)); // Output should be 3\n        System.out.println(solution.skjkasdkd(test6)); // Output should be 7\n    }\n}"}
{"task_id": "Java/94", "generation": "        int maxPrime = 0;\n        for (int num : lst) {\n            if (isPrime(num) && num > maxPrime) {\n                maxPrime = num;\n            }\n        }\n        \n        int sumDigits = 0;\n        while (maxPrime > 0) {\n            sumDigits += maxPrime % 10;\n            maxPrime /= 10;\n        }\n        \n        return sumDigits;\n    }\n    \n    // Helper function to check if a number is prime\n    public boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}\n\nclass Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> lst1 = Arrays.asList(0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3);\n        System.out.println(solution.skjkasdkd(lst1)); // Output should be 10\n        \n        List<Integer> lst2 = Arrays.asList(1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1);\n        System.out.println(solution.skjkasdkd(lst2)); // Output should be 25\n        \n        List<Integer> lst3 = Arrays.asList(1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3);\n        System.out.println(solution.skjkasdkd(lst3)); // Output should be 13\n\n        List<Integer> lst4 = Arrays.asList(0,724,32,71,99,32,6,0,5,91,83,0,5,6);\n        System.out.println(solution.skjkasdkd(lst4)); // Output should be 11\n\n        List<Integer> lst5 = Arrays.asList(0,81,12,3,1,21);\n        System.out.println(solution.skjkasdkd(lst5)); // Output should be 3\n\n        List<Integer> lst6 = Arrays.asList(0,8,1,2,1,7);\n        System.out.println(solution.skjkasdkd(lst6)); // Output should be 7\n    }\n}"}
{"task_id": "Java/94", "generation": "        int maxPrime = 0;\n        for (int num : lst) {\n            if (isPrime(num) && num > maxPrime) {\n                maxPrime = num;\n            }\n        }\n        if (maxPrime == 0) {\n            return 0;\n        }\n        return sumOfDigits(maxPrime);\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private int sumOfDigits(int num) {\n        int sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> lst1 = new ArrayList<>(Arrays.asList(0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3));\n        System.out.println(solution.skjkasdkd(lst1)); // 10\n        \n        List<Integer> lst2 = new ArrayList<>(Arrays.asList(1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1));\n        System.out.println(solution.skjkasdkd(lst2)); // 25\n        \n        List<Integer> lst3 = new ArrayList<>(Arrays.asList(1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3));\n        System.out.println(solution.skjkasdkd(lst3)); // 13\n        \n        List<Integer> lst4 = new ArrayList<>(Arrays.asList(0,724,32,71,99,32,6,0,5,91,83,0,5,6));\n        System.out.println(solution.skjkasdkd(lst4)); // 11\n        \n        List<Integer> lst5 = new ArrayList<>(Arrays.asList(0,81,12,3,1,21));\n        System.out.println(solution.skjkasdkd(lst5)); // 3\n        \n        List<Integer> lst6 = new ArrayList<>(Arrays.asList(0,8,1,2,1,7));\n        System.out.println(solution.skjkasdkd(lst6)); // 7\n    }\n}"}
{"task_id": "Java/94", "generation": "        int maxPrime = 0;\n\n        for (int num : lst) {\n            if (isPrime(num) && num > maxPrime) {\n                maxPrime = num;\n            }\n        }\n\n        int sumOfDigits = 0;\n        while (maxPrime > 0) {\n            sumOfDigits += maxPrime % 10;\n            maxPrime /= 10;\n        }\n\n        return sumOfDigits;\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<List<Integer>> testCases = Arrays.asList(\n            Arrays.asList(0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3),\n            Arrays.asList(1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1),\n            Arrays.asList(1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3),\n            Arrays.asList(0,724,32,71,99,32,6,0,5,91,83,0,5,6),\n            Arrays.asList(0,81,12,3,1,21),\n            Arrays.asList(0,8,1,2,1,7)\n        );\n\n        for (List<Integer> testCase : testCases) {\n            int result = solution.skjkasdkd(testCase);\n            System.out.println(\"Output: \" + result);\n        }\n    }\n}"}
{"task_id": "Java/95", "generation": "        // Check if the map is empty\n        if (dict.isEmpty()) {\n            return false;\n        }\n        \n        // Initialize variables to track if keys are all in lower case or all in upper case\n        boolean lowerCase = true;\n        boolean upperCase = true;\n\n        // Iterate through the keys of the map\n        for (Object key : dict.keySet()) {\n            // Check if the key is a string\n            if (key instanceof String) {\n                String strKey = (String) key;\n                // Check if the key is in lower case\n                if (!strKey.equals(strKey.toLowerCase())) {\n                    lowerCase = false;\n                }\n                // Check if the key is in upper case\n                if (!strKey.equals(strKey.toUpperCase())) {\n                    upperCase = false;\n                }\n            } else {\n                // If the key is not a string, return false\n                return false;\n            }\n        }\n        \n        // Return true if all keys are in lower case or all keys are in upper case, else return false\n        return lowerCase || upperCase;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        Map<Object, Object> dict1 = new HashMap<>();\n        dict1.put(\"a\", \"apple\");\n        dict1.put(\"b\", \"banana\");\n        System.out.println(solution.checkDictCase(dict1)); // True\n\n        Map<Object, Object> dict2 = new HashMap<>();\n        dict2.put(\"a\", \"apple\");\n        dict2.put(\"A\", \"banana\");\n        dict2.put(\"B\", \"banana\");\n        System.out.println(solution.checkDictCase(dict2)); // False\n\n        Map<Object, Object> dict3 = new HashMap<>();\n        dict3.put(\"a\", \"apple\");\n        dict3.put(8, \"banana\");\n        dict3.put(\"a\", \"apple\");\n        System.out.println(solution.checkDictCase(dict3)); // False\n\n        Map<Object, Object> dict4 = new HashMap<>();\n        dict4.put(\"Name\", \"John\");\n        dict4.put(\"Age\", \"36\");\n        dict4.put(\"City\", \"Houston\");\n        System.out.println(solution.checkDictCase(dict4)); // False\n\n        Map<Object, Object> dict5 = new HashMap<>();\n        dict5.put(\"STATE\", \"NC\");\n        dict5.put(\"ZIP\", \"12345\");\n        System.out.println(solution.checkDictCase(dict5)); // True\n    }\n}"}
{"task_id": "Java/95", "generation": "        if(dict.isEmpty()) {\n            return false;\n        }\n        \n        boolean isLowerCase = true;\n        boolean isUpperCase = true;\n        \n        for(Object key : dict.keySet()) {\n            if(!(key instanceof String)) {\n                return false;\n            }\n            String keyString = (String) key;\n            if(!keyString.equals(keyString.toLowerCase())) {\n                isLowerCase = false;\n            }\n            if(!keyString.equals(keyString.toUpperCase())) {\n                isUpperCase = false;\n            }\n        }\n        \n        return isLowerCase || isUpperCase;\n    }\n}"}
{"task_id": "Java/95", "generation": "        if(dict.isEmpty()) {\n            return false;\n        }\n        \n        boolean lowerCase = true;\n        boolean upperCase = true;\n        \n        for(Object key : dict.keySet()) {\n            if(!(key instanceof String)) {\n                return false;\n            }\n            String keyStr = (String) key;\n            if(!keyStr.equals(keyStr.toLowerCase())) {\n                lowerCase = false;\n            }\n            if(!keyStr.equals(keyStr.toUpperCase())) {\n                upperCase = false;\n            }\n        }\n        \n        return lowerCase || upperCase;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        Map<Object, Object> dict1 = new HashMap<>();\n        dict1.put(\"a\", \"apple\");\n        dict1.put(\"b\", \"banana\");\n        System.out.println(solution.checkDictCase(dict1)); // should return true\n        \n        Map<Object, Object> dict2 = new HashMap<>();\n        dict2.put(\"a\", \"apple\");\n        dict2.put(\"A\", \"banana\");\n        dict2.put(\"B\", \"banana\");\n        System.out.println(solution.checkDictCase(dict2)); // should return false\n        \n        Map<Object, Object> dict3 = new HashMap<>();\n        dict3.put(\"a\", \"apple\");\n        dict3.put(8, \"banana\");\n        dict3.put(\"a\", \"apple\");\n        System.out.println(solution.checkDictCase(dict3)); // should return false\n        \n        Map<Object, Object> dict4 = new HashMap<>();\n        dict4.put(\"Name\", \"John\");\n        dict4.put(\"Age\", \"36\");\n        dict4.put(\"City\", \"Houston\");\n        System.out.println(solution.checkDictCase(dict4)); // should return false\n\n        Map<Object, Object> dict5 = new HashMap<>();\n        dict5.put(\"STATE\", \"NC\");\n        dict5.put(\"ZIP\", \"12345\");\n        System.out.println(solution.checkDictCase(dict5)); // should return true\n    }\n}"}
{"task_id": "Java/95", "generation": "        if (dict.isEmpty()) {\n            return false;\n        }\n        \n        boolean isLowerCase = true;\n        boolean isUpperCase = true;\n        \n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            \n            String keyStr = (String) key;\n            if (!keyStr.equals(keyStr.toLowerCase())) {\n                isLowerCase = false;\n            }\n            if (!keyStr.equals(keyStr.toUpperCase())) {\n                isUpperCase = false;\n            }\n        }\n        \n        return isLowerCase || isUpperCase;\n    }\n}"}
{"task_id": "Java/95", "generation": "        if(dict.isEmpty()){\n            return false;\n        }\n        \n        boolean allLowerCase = true;\n        boolean allUpperCase = true;\n        \n        for(Object key : dict.keySet()){\n            if(!(key instanceof String)){\n                return false;\n            }\n            \n            String strKey = (String) key;\n            if(!strKey.equals(strKey.toLowerCase())){\n                allLowerCase = false;\n            }\n            if(!strKey.equals(strKey.toUpperCase())){\n                allUpperCase = false;\n            }\n        }\n        \n        return allLowerCase || allUpperCase;\n    }\n}"}
{"task_id": "Java/96", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        if (n <= 2) {\n            return result;\n        }\n        \n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                result.add(i);\n            }\n        }\n        \n        return result;\n    }\n    \n    // Helper function to check if a number is prime\n    private boolean isPrime(int num) {\n        if (num < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\nclass Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.countUpTo(5)); // [2, 3]\n        System.out.println(solution.countUpTo(11)); // [2, 3, 5, 7]\n        System.out.println(solution.countUpTo(0)); // []\n        System.out.println(solution.countUpTo(20)); // [2, 3, 5, 7, 11, 13, 17, 19]\n        System.out.println(solution.countUpTo(1)); // []\n        System.out.println(solution.countUpTo(18)); // [2, 3, 5, 7, 11, 13, 17]\n    }\n}"}
{"task_id": "Java/96", "generation": "        List<Integer> primes = new ArrayList<>();\n        \n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        \n        return primes;\n    }\n    \n    public boolean isPrime(int num) {\n        if (num < 2) {\n            return false;\n        }\n        \n        for (int i = 2; i < num; i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "Java/96", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        if (n <= 1) {\n            return result;\n        }\n        \n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                result.add(i);\n            }\n        }\n        \n        return result;\n    }\n    \n    public boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.countUpTo(5)); // [2, 3]\n        System.out.println(solution.countUpTo(11)); // [2, 3, 5, 7]\n        System.out.println(solution.countUpTo(0)); // []\n        System.out.println(solution.countUpTo(20)); // [2, 3, 5, 7, 11, 13, 17, 19]\n        System.out.println(solution.countUpTo(1)); // []\n        System.out.println(solution.countUpTo(18)); // [2, 3, 5, 7, 11, 13, 17]\n    }\n}"}
{"task_id": "Java/96", "generation": "        List<Integer> primes = new ArrayList<>();\n        \n        if (n <= 1) {\n            return primes;\n        }\n        \n        for (int i = 2; i < n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        \n        return primes;\n    }\n    \n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "Java/96", "generation": "        List<Integer> result = new ArrayList<>();\n        if (n <= 1) {\n            return result;\n        }\n\n        boolean[] isPrime = new boolean[n];\n        Arrays.fill(isPrime, true);\n\n        for (int i = 2; i * i < n; i++) {\n            if (isPrime[i]) {\n                for (int j = i * i; j < n; j += i) {\n                    isPrime[j] = false;\n                }\n            }\n        }\n\n        for (int i = 2; i < n; i++) {\n            if (isPrime[i]) {\n                result.add(i);\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.countUpTo(5)); // [2,3]\n        System.out.println(solution.countUpTo(11)); // [2,3,5,7]\n        System.out.println(solution.countUpTo(0)); // []\n        System.out.println(solution.countUpTo(20)); // [2,3,5,7,11,13,17,19]\n        System.out.println(solution.countUpTo(1)); // []\n        System.out.println(solution.countUpTo(18)); // [2,3,5,7,11,13,17]\n    }\n}"}
{"task_id": "Java/97", "generation": "        int unitA = Math.abs(a % 10);\n        int unitB = Math.abs(b % 10);\n        \n        return unitA * unitB;\n    }\n}"}
{"task_id": "Java/97", "generation": "        // Get the unit digits of both numbers\n        int unitA = Math.abs(a) % 10;\n        int unitB = Math.abs(b) % 10;\n\n        // Return the product of the unit digits\n        return unitA * unitB;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.multiply(148, 412)); // 16\n        System.out.println(solution.multiply(19, 28)); // 72\n        System.out.println(solution.multiply(2020, 1851)); // 0\n        System.out.println(solution.multiply(14, -15)); // 20\n    }\n}"}
{"task_id": "Java/97", "generation": "        int unitA = Math.abs(a % 10);\n        int unitB = Math.abs(b % 10);\n        \n        return unitA * unitB;\n    }\n}"}
{"task_id": "Java/97", "generation": "        // Get the unit digit of number a and number b\n        int unitA = Math.abs(a) % 10;\n        int unitB = Math.abs(b) % 10;\n        \n        // Return the product of the unit digits\n        return unitA * unitB;\n    }\n}"}
{"task_id": "Java/97", "generation": "        // Get the unit digits of both integers\n        int unitA = Math.abs(a) % 10;\n        int unitB = Math.abs(b) % 10;\n        \n        // Return the product of the unit digits\n        return unitA * unitB;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.multiply(148, 412)); // 16\n        System.out.println(solution.multiply(19, 28)); // 72\n        System.out.println(solution.multiply(2020, 1851)); // 0\n        System.out.println(solution.multiply(14, -15)); // 20\n    }\n}"}
{"task_id": "Java/98", "generation": "        int count = 0;\n        \n        for (int i = 0; i < s.length(); i += 2) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c) && isVowel(c)) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n    \n    private boolean isVowel(char c) {\n        return c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U';\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.countUpper(\"aBCdEf\")); // 1\n        System.out.println(solution.countUpper(\"abcdefg\")); // 0\n        System.out.println(solution.countUpper(\"dBBE\")); // 0\n    }\n}"}
{"task_id": "Java/98", "generation": "        int count = 0;\n        \n        for (int i = 0; i < s.length(); i += 2) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c) && isVowel(c)) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n    \n    private boolean isVowel(char c) {\n        return c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U';\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n\n        // Testing the examples in the prompt\n        System.out.println(sol.countUpper(\"aBCdEf\")); // 1\n        System.out.println(sol.countUpper(\"abcdefg\")); // 0\n        System.out.println(sol.countUpper(\"dBBE\")); // 0\n    }\n}"}
{"task_id": "Java/98", "generation": "        int count = 0;\n        \n        for (int i = 0; i < s.length(); i += 2) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c) && isVowel(c)) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n    \n    private boolean isVowel(char c) {\n        return c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U';\n    }\n}"}
{"task_id": "Java/98", "generation": "        int count = 0;\n        String vowels = \"AEIOU\";\n\n        for (int i = 0; i < s.length(); i += 2) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c) && vowels.indexOf(c) != -1) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.countUpper(\"aBCdEf\")); // 1\n        System.out.println(solution.countUpper(\"abcdefg\")); // 0\n        System.out.println(solution.countUpper(\"dBBE\")); // 0\n    }\n}"}
{"task_id": "Java/98", "generation": "        int count = 0;\n        \n        for (int i = 0; i < s.length(); i += 2) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c) && isVowel(c)) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n    \n    private boolean isVowel(char c) {\n        return c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U';\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.countUpper(\"aBCdEf\")); // 1\n        System.out.println(solution.countUpper(\"abcdefg\")); // 0\n        System.out.println(solution.countUpper(\"dBBE\")); // 0\n    }\n}"}
{"task_id": "Java/99", "generation": "        double num = Double.parseDouble(value);\n        int lower = (int) Math.floor(num);\n        int upper = (int) Math.ceil(num);\n        \n        if (num - lower < upper - num) {\n            return lower;\n        } else {\n            return upper;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.closest_integer(\"10\")); // Output: 10\n        System.out.println(solution.closest_integer(\"15.3\")); // Output: 15\n        System.out.println(solution.closest_integer(\"14.5\")); // Output: 15\n        System.out.println(solution.closest_integer(\"-14.5\")); // Output: -15\n    }\n}"}
{"task_id": "Java/99", "generation": "        // Check if the value contains a decimal point\n        if (value.contains(\".\")) {\n            // Split the value into integer and decimal parts\n            String[] parts = value.split(\"\\\\.\");\n            int integerPart = Integer.parseInt(parts[0]);\n            double decimalPart = Double.parseDouble(\"0.\" + parts[1]);\n\n            // Round the decimal part to the nearest integer\n            int closestInteger;\n            if (decimalPart < 0.5) {\n                closestInteger = (int) Math.floor(decimalPart);\n            } else {\n                closestInteger = (int) Math.ceil(decimalPart);\n            }\n\n            // Check if the integer part is negative\n            if (integerPart < 0) {\n                return integerPart - Math.abs(closestInteger);\n            } else {\n                return integerPart + closestInteger;\n            }\n        } else {\n            // If the value does not contain a decimal point, return the integer value\n            return Integer.parseInt(value);\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.closest_integer(\"10\")); // Output: 10\n        System.out.println(solution.closest_integer(\"15.3\")); // Output: 15\n        System.out.println(solution.closest_integer(\"14.5\")); // Output: 15\n        System.out.println(solution.closest_integer(\"-14.5\")); // Output: -15\n    }\n}"}
{"task_id": "Java/99", "generation": "        double num = Double.parseDouble(value);\n        if (num >= 0) {\n            return (int) Math.ceil(num);\n        } else {\n            return (int) Math.floor(num);\n        }\n    }\n\n    public int closest_integer(String value) {\n        double num = Double.parseDouble(value);\n        int upper = (int) Math.ceil(num);\n        int lower = (int) Math.floor(num);\n\n        if (Math.abs(upper - num) < Math.abs(lower - num)) {\n            return upper;\n        } else {\n            return lower;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.closest_integer(\"10\")); // 10\n        System.out.println(solution.closest_integer(\"15.3\")); // 15\n        System.out.println(solution.closest_integer(\"14.5\")); // 15\n        System.out.println(solution.closest_integer(\"-14.5\")); // -15\n    }\n}"}
{"task_id": "Java/99", "generation": "        double num = Double.parseDouble(value);\n        int floor = (int) Math.floor(num);\n        int ceil = (int) Math.ceil(num);\n\n        if (num - floor < ceil - num) {\n            return floor;\n        } else {\n            return ceil;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.countUpper(\"10\")); // Output: 10\n        System.out.println(solution.countUpper(\"15.3\")); // Output: 15\n        System.out.println(solution.countUpper(\"14.5\")); // Output: 15\n        System.out.println(solution.countUpper(\"-14.5\")); // Output: -15\n    }\n}"}
{"task_id": "Java/99", "generation": "        double num = Double.parseDouble(value);\n        int lower = (int) Math.floor(num);\n        int upper = (int) Math.ceil(num);\n        \n        if (num - lower < upper - num) {\n            return lower;\n        } else {\n            return upper;\n        }\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.countUpper(\"10\")); // 10\n        System.out.println(solution.countUpper(\"15.3\")); // 15\n        System.out.println(solution.countUpper(\"14.5\")); // 15\n        System.out.println(solution.countUpper(\"-14.5\")); // -15\n    }\n}"}
{"task_id": "Java/100", "generation": "        List<Integer> result = new ArrayList<>();\n        result.add(n);\n        \n        int count = n;\n        for (int i = 2; i <= n; i++) {\n            if (count % 2 == 0) {\n                count += 1;\n            } else {\n                count += 2;\n            }\n            result.add(count);\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/100", "generation": "        List<Integer> pile = new ArrayList<>();\n        int stones = n;\n        pile.add(stones);\n        \n        for (int i = 1; i < n; i++) {\n            if (stones % 2 == 0) {\n                stones += 2;\n            } else {\n                stones += 1;\n            }\n            pile.add(stones);\n        }\n        \n        return pile;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.makeAPile(3));  // [3, 5, 7]\n        System.out.println(solution.makeAPile(5));  // [5, 6, 7, 8, 9]\n        System.out.println(solution.makeAPile(1));  // [1]\n    }\n}"}
{"task_id": "Java/100", "generation": "        List<Integer> result = new ArrayList<>();\n        result.add(n);\n        \n        while (n > 1) {\n            if (n % 2 == 0) {\n                n += 1;\n            } else {\n                n += 2;\n            }\n            result.add(n);\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.makeAPile(3)); // [3, 5, 7]\n    }\n}"}
{"task_id": "Java/100", "generation": "        List<Integer> result = new ArrayList<>();\n        result.add(n);\n        int stones = n;\n        \n        for (int i = 1; i < n; i++) {\n            if (stones % 2 == 0) {\n                stones += 1;\n            } else {\n                stones += 2;\n            }\n            result.add(stones);\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test with n = 3\n        List<Integer> result1 = solution.makeAPile(3);\n        System.out.println(result1); // Output: [3, 5, 7]\n    }\n}"}
{"task_id": "Java/100", "generation": "        List<Integer> levels = new ArrayList<>();\n        levels.add(n);\n        \n        for (int i = 1; i < n; i++) {\n            if (n % 2 == 0) {\n                n += 2;\n            } else {\n                n += 1;\n            }\n            levels.add(n);\n        }\n        \n        return levels;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the function with example inputs\n        System.out.println(solution.makeAPile(3)); // Output: [3, 5, 7]\n    }\n}"}
{"task_id": "Java/101", "generation": "        List<String> words = new ArrayList<>();\n        \n        // Split the string by commas or spaces\n        String[] splitWords = s.split(\"[,\\\\s]+\");\n        \n        // Add each word to the list\n        for (String word : splitWords) {\n            words.add(word);\n        }\n        \n        return words;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.wordStrings(\"Hi, my name is John\")); // [Hi, my, name, is, John]\n        System.out.println(solution.wordStrings(\"One, two, three, four, five, six\")); // [One, two, three, four, five, six]\n    }\n}"}
{"task_id": "Java/101", "generation": "        List<String> words = new ArrayList<>();\n        \n        String[] parts = s.split(\"[,\\\\s]+\");\n        \n        for (String part : parts) {\n            words.add(part);\n        }\n        \n        return words;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.wordStrings(\"Hi, my name is John\")); // [Hi, my, name, is, John]\n        System.out.println(solution.wordStrings(\"One, two, three, four, five, six\")); // [One, two, three, four, five, six]\n    }\n}"}
{"task_id": "Java/101", "generation": "        List<String> words = new ArrayList<>();\n        \n        String[] splitString = s.split(\"[,\\\\s]+\");\n        \n        for (String word : splitString) {\n            words.add(word);\n        }\n        \n        return words;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.wordStrings(\"Hi, my name is John\")); // [Hi, my, name, is, John]\n        System.out.println(solution.wordStrings(\"One, two, three, four, five, six\")); // [One, two, three, four, five, six]\n    }\n}"}
{"task_id": "Java/101", "generation": "        List<String> words = new ArrayList<>();\n        \n        String[] split = s.split(\"[,\\\\s]+\");\n        \n        for (String word : split) {\n            words.add(word);\n        }\n        \n        return words;\n    }\n}"}
{"task_id": "Java/101", "generation": "        List<String> words = new ArrayList<>();\n        \n        String[] splitWords = s.split(\"[,\\\\s]+\");\n        \n        for (String word : splitWords) {\n            words.add(word);\n        }\n        \n        return words;\n    }\n}"}
{"task_id": "Java/102", "generation": "        int maxEven = -1; // Initialize the maxEven variable to -1\n        \n        // Loop through the range of numbers from x to y\n        for (int i = x; i <= y; i++) {\n            // Check if the number is even and greater than the current maxEven\n            if (i % 2 == 0 && i > maxEven) {\n                // Update the maxEven variable to the current even number\n                maxEven = i;\n            }\n        }\n        \n        return maxEven; // Return the biggest even number found within the range, or -1 if none found\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.chooseNum(12, 15)); // Output should be 14\n        System.out.println(solution.chooseNum(13, 12)); // Output should be -1\n    }\n}"}
{"task_id": "Java/102", "generation": "        int maxEven = -1;\n        \n        for (int i = y; i >= x; i--) {\n            if (i % 2 == 0) {\n                maxEven = i;\n                break;\n            }\n        }\n        \n        return maxEven;\n    }\n}"}
{"task_id": "Java/102", "generation": "        int maxEven = -1;\n        for (int i = y; i >= x; i--) {\n            if (i % 2 == 0) {\n                maxEven = i;\n                break;\n            }\n        }\n        return maxEven;\n    }\n}"}
{"task_id": "Java/102", "generation": "        int maxEven = -1;\n        \n        for (int i = y; i >= x; i--) {\n            if (i % 2 == 0) {\n                maxEven = i;\n                break;\n            }\n        }\n        \n        return maxEven;\n    }\n}"}
{"task_id": "Java/102", "generation": "        // Initialize a variable to store the biggest even integer\n        int largestEven = -1;\n\n        // Iterate through the numbers in the range [x, y] inclusive\n        for (int i = x; i <= y; i++) {\n            // Check if the number is even and greater than the current largestEven\n            if (i % 2 == 0 && i > largestEven) {\n                largestEven = i;\n            }\n        }\n\n        return largestEven;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.chooseNum(12, 15)); // Output should be 14\n        System.out.println(solution.chooseNum(13, 12)); // Output should be -1\n    }\n}"}
{"task_id": "Java/103", "generation": "        if (n > m) {\n            return -1;\n        }\n        \n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        \n        int avg = Math.round((float)sum / (m - n + 1));\n        \n        return Integer.toBinaryString(avg);\n    }\n}"}
{"task_id": "Java/103", "generation": "        // Check if n is greater than m\n        if (n > m) {\n            return -1;\n        }\n        \n        // Calculate the average of integers from n to m\n        double avg = ((double)n + m) / 2;\n        \n        // Round the average to the nearest integer\n        int roundedAvg = (int)Math.round(avg);\n        \n        // Convert the rounded average to binary\n        String binaryString = Integer.toBinaryString(roundedAvg);\n        \n        return binaryString;\n    }\n}"}
{"task_id": "Java/103", "generation": "        if (n > m) {\n            return -1;\n        }\n        \n        int sum = 0;\n        int count = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n            count++;\n        }\n        \n        int avg = sum / count;\n        String binary = Integer.toBinaryString(avg);\n        \n        return binary;\n    }\n}"}
{"task_id": "Java/103", "generation": "        if (n > m) {\n            return -1;\n        }\n        \n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        \n        int avg = Math.round((float)sum / (m - n + 1));\n        \n        return Integer.toBinaryString(avg);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.roundedAvg(1, 5)); // Should print \"11\"\n        System.out.println(solution.roundedAvg(7, 5)); // Should print -1\n        System.out.println(solution.roundedAvg(10, 20)); // Should print \"1111\"\n        System.out.println(solution.roundedAvg(20, 33)); // Should print \"11011\"\n    }\n}"}
{"task_id": "Java/103", "generation": "        if (n > m) {\n            return -1;\n        }\n        \n        int sum = 0;\n        int count = 0;\n        \n        for (int i = n; i <= m; i++) {\n            sum += i;\n            count++;\n        }\n        \n        int avg = Math.round((float)sum / count);\n        \n        return Integer.toBinaryString(avg);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.roundedAvg(1, 5)); // Output: 11\n        System.out.println(solution.roundedAvg(7, 5)); // Output: -1\n        System.out.println(solution.roundedAvg(10, 20)); // Output: 1111\n        System.out.println(solution.roundedAvg(20, 33)); // Output: 11011\n    }\n}"}
{"task_id": "Java/104", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int num : x) {\n            if (hasNoEvenDigits(num)) {\n                result.add(num);\n            }\n        }\n        \n        Collections.sort(result);\n        \n        return result;\n    }\n    \n    private boolean hasNoEvenDigits(int num) {\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                return false;\n            }\n            num /= 10;\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/104", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int num : x) {\n            int n = num;\n            boolean hasEvenDigit = false;\n            while (n > 0) {\n                int digit = n % 10;\n                if (digit % 2 == 0) {\n                    hasEvenDigit = true;\n                    break;\n                }\n                n /= 10;\n            }\n            if (!hasEvenDigit) {\n                result.add(num);\n            }\n        }\n        \n        Collections.sort(result);\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> test1 = Arrays.asList(15, 33, 1422, 1);\n        List<Integer> result1 = solution.uniqueDigits(test1);\n        System.out.println(result1);\n        \n        List<Integer> test2 = Arrays.asList(152, 323, 1422, 10);\n        List<Integer> result2 = solution.uniqueDigits(test2);\n        System.out.println(result2);\n    }\n}"}
{"task_id": "Java/104", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (Integer num : x) {\n            if (hasNoEvenDigit(num)) {\n                result.add(num);\n            }\n        }\n        \n        Collections.sort(result);\n        \n        return result;\n    }\n    \n    private boolean hasNoEvenDigit(int num) {\n        while (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                return false;\n            }\n            num /= 10;\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/104", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int num : x) {\n            int current = num;\n            boolean hasEvenDigit = false;\n            \n            while (current > 0) {\n                int digit = current % 10;\n                if (digit % 2 == 0) {\n                    hasEvenDigit = true;\n                    break;\n                }\n                current /= 10;\n            }\n            \n            if (!hasEvenDigit) {\n                result.add(num);\n            }\n        }\n        \n        Collections.sort(result);\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> list1 = Arrays.asList(15, 33, 1422, 1);\n        System.out.println(solution.uniqueDigits(list1));\n\n        List<Integer> list2 = Arrays.asList(152, 323, 1422, 10);\n        System.out.println(solution.uniqueDigits(list2));\n    }\n}"}
{"task_id": "Java/104", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int num : x) {\n            boolean hasEvenDigit = false;\n            int temp = num;\n            while (temp > 0) {\n                int digit = temp % 10;\n                if (digit % 2 == 0) {\n                    hasEvenDigit = true;\n                    break;\n                }\n                temp /= 10;\n            }\n            if (!hasEvenDigit) {\n                result.add(num);\n            }\n        }\n        \n        Collections.sort(result);\n        \n        return result;\n    }\n}"}
{"task_id": "Java/105", "generation": "        List<String> result = new ArrayList<>();\n        \n        List<Integer> validNumbers = new ArrayList<>();\n        for (int num : arr) {\n            if (num >= 1 && num <= 9) {\n                validNumbers.add(num);\n            }\n        }\n        \n        Collections.sort(validNumbers);\n        Collections.reverse(validNumbers);\n        \n        for (int num : validNumbers) {\n            switch(num) {\n                case 1: result.add(\"One\"); break;\n                case 2: result.add(\"Two\"); break;\n                case 3: result.add(\"Three\"); break;\n                case 4: result.add(\"Four\"); break;\n                case 5: result.add(\"Five\"); break;\n                case 6: result.add(\"Six\"); break;\n                case 7: result.add(\"Seven\"); break;\n                case 8: result.add(\"Eight\"); break;\n                case 9: result.add(\"Nine\"); break;\n                default: break;\n            }\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/105", "generation": "        List<String> result = new ArrayList<>();\n        \n        if (arr.isEmpty()) {\n            return result;\n        }\n        \n        List<Integer> validNums = new ArrayList<>();\n        \n        // Filter out numbers between 1 and 9\n        for (int num : arr) {\n            if (num >= 1 && num <= 9) {\n                validNums.add(num);\n            }\n        }\n        \n        // Sort valid numbers\n        Collections.sort(validNums);\n        \n        // Reverse the list\n        Collections.reverse(validNums);\n        \n        // Map digits to their corresponding names\n        Map<Integer, String> digitMap = new HashMap<>();\n        digitMap.put(1, \"One\");\n        digitMap.put(2, \"Two\");\n        digitMap.put(3, \"Three\");\n        digitMap.put(4, \"Four\");\n        digitMap.put(5, \"Five\");\n        digitMap.put(6, \"Six\");\n        digitMap.put(7, \"Seven\");\n        digitMap.put(8, \"Eight\");\n        digitMap.put(9, \"Nine\");\n        \n        // Replace digits with names\n        for (int num : validNums) {\n            result.add(digitMap.get(num));\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/105", "generation": "        List<String> result = new ArrayList<>();\n        \n        List<Integer> filteredArr = new ArrayList<>();\n        for (int num : arr) {\n            if (num >= 1 && num <= 9) {\n                filteredArr.add(num);\n            }\n        }\n        \n        Collections.sort(filteredArr);\n        Collections.reverse(filteredArr);\n        \n        for (int num : filteredArr) {\n            switch(num) {\n                case 1:\n                    result.add(\"One\");\n                    break;\n                case 2:\n                    result.add(\"Two\");\n                    break;\n                case 3:\n                    result.add(\"Three\");\n                    break;\n                case 4:\n                    result.add(\"Four\");\n                    break;\n                case 5:\n                    result.add(\"Five\");\n                    break;\n                case 6:\n                    result.add(\"Six\");\n                    break;\n                case 7:\n                    result.add(\"Seven\");\n                    break;\n                case 8:\n                    result.add(\"Eight\");\n                    break;\n                case 9:\n                    result.add(\"Nine\");\n                    break;\n            }\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/105", "generation": "        List<Integer> validNumbers = new ArrayList<>();\n        // Filter out the valid numbers between 1 and 9 inclusive\n        for (int num : arr) {\n            if (num >= 1 && num <= 9) {\n                validNumbers.add(num);\n            }\n        }\n\n        // Sort the valid numbers\n        Collections.sort(validNumbers);\n\n        // Reverse the sorted valid numbers\n        Collections.reverse(validNumbers);\n\n        // Mapping of digits to their corresponding names\n        String[] names = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n\n        List<String> result = new ArrayList<>();\n        for (int num : validNumbers) {\n            result.add(names[num - 1]); // Adjust the index as the names array is 0-indexed\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> arr1 = Arrays.asList(2, 1, 1, 4, 5, 8, 2, 3);\n        System.out.println(solution.byLength(arr1)); // [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n        List<Integer> arr2 = Arrays.asList();\n        System.out.println(solution.byLength(arr2)); // []\n\n        List<Integer> arr3 = Arrays.asList(1, -1, 55);\n        System.out.println(solution.byLength(arr3)); // [\"One\"]\n    }\n}"}
{"task_id": "Java/105", "generation": "        List<String> result = new ArrayList<>();\n        List<Integer> temp = new ArrayList<>();\n\n        // Sort the integers that are between 1 and 9 inclusive\n        for (int num : arr) {\n            if (num >= 1 && num <= 9) {\n                temp.add(num);\n            }\n        }\n        Collections.sort(temp);\n\n        // Reverse the resulting array and replace each digit by its corresponding name\n        Map<Integer, String> digitMap = new HashMap<>();\n        digitMap.put(1, \"One\");\n        digitMap.put(2, \"Two\");\n        digitMap.put(3, \"Three\");\n        digitMap.put(4, \"Four\");\n        digitMap.put(5, \"Five\");\n        digitMap.put(6, \"Six\");\n        digitMap.put(7, \"Seven\");\n        digitMap.put(8, \"Eight\");\n        digitMap.put(9, \"Nine\");\n\n        for (int i = temp.size() - 1; i >= 0; i--) {\n            result.add(digitMap.get(temp.get(i)));\n        }\n\n        return result;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> arr1 = Arrays.asList(2, 1, 1, 4, 5, 8, 2, 3);\n        List<Integer> arr2 = Arrays.asList(1, -1, 55);\n        List<Integer> arr3 = new ArrayList<>();\n\n        System.out.println(solution.byLength(arr1)); // Output: [Eight, Five, Four, Three, Two, Two, One, One]\n        System.out.println(solution.byLength(arr2)); // Output: [One]\n        System.out.println(solution.byLength(arr3)); // Output: []\n    }\n}"}
{"task_id": "Java/106", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sumFrom1ToN(i));\n            }\n        }\n        \n        return result;\n    }\n    \n    private int factorial(int num) {\n        int factorial = 1;\n        for (int i = 1; i <= num; i++) {\n            factorial *= i;\n        }\n        return factorial;\n    }\n    \n    private int sumFrom1ToN(int n) {\n        return (n * (n + 1)) / 2;\n    }\n}"}
{"task_id": "Java/106", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sumOfNumbers(i));\n            }\n        }\n        \n        return result;\n    }\n    \n    // Function to calculate the factorial of a number\n    private int factorial(int n) {\n        if (n == 0) {\n            return 1;\n        }\n        \n        int result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        \n        return result;\n    }\n    \n    // Function to calculate the sum of numbers from 1 to n\n    private int sumOfNumbers(int n) {\n        return n * (n + 1) / 2;\n    }\n}"}
{"task_id": "Java/106", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for(int i = 1; i <= n; i++) {\n            if(i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sumFromOneToN(i));\n            }\n        }\n        \n        return result;\n    }\n    \n    public int factorial(int n) {\n        int result = 1;\n        for(int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n    \n    public int sumFromOneToN(int n) {\n        return (n * (n + 1)) / 2;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.f(5)); // [1, 2, 6, 24, 15]\n    }\n}"}
{"task_id": "Java/106", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for(int i=1; i<=n; i++){\n            if(i % 2 == 0){\n                result.add(factorial(i));\n            } else {\n                result.add(sumFromOneToN(i));\n            }\n        }\n        \n        return result;\n    }\n    \n    private int factorial(int n){\n        int result = 1;\n        \n        for(int i=1; i<=n; i++){\n            result *= i;\n        }\n        \n        return result;\n    }\n    \n    private int sumFromOneToN(int n){\n        return (n * (n + 1)) / 2;\n    }\n}"}
{"task_id": "Java/106", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sum(i));\n            }\n        }\n        \n        return result;\n    }\n    \n    private int factorial(int n) {\n        if (n == 0) {\n            return 1;\n        }\n        return n * factorial(n - 1);\n    }\n    \n    private int sum(int n) {\n        return (n * (n + 1)) / 2;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the f function\n        System.out.println(solution.f(5)); // [1, 2, 6, 24, 15]\n    }\n}"}
{"task_id": "Java/107", "generation": "        int evenCount = 0;\n        int oddCount = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n\n        List<Integer> result = new ArrayList<>();\n        result.add(evenCount);\n        result.add(oddCount);\n\n        return result;\n    }\n\n    private boolean isPalindrome(int num) {\n        String str = String.valueOf(num);\n        int left = 0;\n        int right = str.length() - 1;\n\n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        int n1 = 3;\n        int n2 = 12;\n\n        System.out.println(solution.evenOddPalindrome(n1)); // Output: (1, 2)\n        System.out.println(solution.evenOddPalindrome(n2)); // Output: (4, 6)\n    }\n}"}
{"task_id": "Java/107", "generation": "        // Initialize variables to store the count of even and odd palindromes\n        int evenCount = 0;\n        int oddCount = 0;\n\n        // Check each number from 1 to n for palindrome property\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n\n        List<Integer> result = new ArrayList<>();\n        result.add(evenCount);\n        result.add(oddCount);\n\n        return result;\n    }\n\n    // Helper function to check if a number is palindrome\n    private boolean isPalindrome(int num) {\n        int originalNum = num;\n        int reverseNum = 0;\n\n        while (num != 0) {\n            int digit = num % 10;\n            reverseNum = reverseNum * 10 + digit;\n            num /= 10;\n        }\n\n        return originalNum == reverseNum;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.evenOddPalindrome(3)); // Output: [1, 2]\n        System.out.println(solution.evenOddPalindrome(12)); // Output: [4, 6]\n    }\n}"}
{"task_id": "Java/107", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        int evenCount = 0;\n        int oddCount = 0;\n        \n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n        \n        result.add(evenCount);\n        result.add(oddCount);\n        \n        return result;\n    }\n    \n    public boolean isPalindrome(int num) {\n        String str = String.valueOf(num);\n        int left = 0;\n        int right = str.length() - 1;\n        \n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.evenOddPalindrome(3)); // Output: (1, 2)\n        System.out.println(solution.evenOddPalindrome(12)); // Output: (4, 6)\n    }\n}"}
{"task_id": "Java/107", "generation": "        int even = 0;\n        int odd = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n\n        List<Integer> result = new ArrayList<>();\n        result.add(even);\n        result.add(odd);\n\n        return result;\n    }\n\n    private boolean isPalindrome(int num) {\n        String s = String.valueOf(num);\n        int i = 0;\n        int j = s.length() - 1;\n\n        while (i < j) {\n            if (s.charAt(i) != s.charAt(j))\n                return false;\n            i++;\n            j--;\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        int n1 = 3;\n        List<Integer> result1 = solution.evenOddPalindrome(n1);\n        System.out.println(\"Result for n = \" + n1 + \": \" + result1); // Expected output: (1, 2)\n\n        // Test case 2\n        int n2 = 12;\n        List<Integer> result2 = solution.evenOddPalindrome(n2);\n        System.out.println(\"Result for n = \" + n2 + \": \" + result2); // Expected output: (4, 6)\n    }\n}"}
{"task_id": "Java/107", "generation": "        int evenCount = 0;\n        int oddCount = 0;\n        \n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    evenCount++;\n                } else {\n                    oddCount++;\n                }\n            }\n        }\n        \n        List<Integer> result = new ArrayList<>();\n        result.add(evenCount);\n        result.add(oddCount);\n        \n        return result;\n    }\n    \n    private boolean isPalindrome(int num) {\n        String str = String.valueOf(num);\n        int left = 0;\n        int right = str.length() - 1;\n        \n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the examples in the problem statement\n        System.out.println(solution.evenOddPalindrome(3)); // Output: (1, 2)\n        System.out.println(solution.evenOddPalindrome(12)); // Output: (4, 6)\n    }\n}\n"}
{"task_id": "Java/108", "generation": "        int count = 0;\n        for (int num : arr) {\n            if (sumOfDigits(num) > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private int sumOfDigits(int num) {\n        int sum = 0;\n        String numStr = String.valueOf(num);\n        int sign = 1;\n        int i = 0;\n        if (num < 0) {\n            sign = -1;\n            i = 1;\n        }\n        for (; i < numStr.length(); i++) {\n            char digit = numStr.charAt(i);\n            if (Character.isDigit(digit)) {\n                sum += Character.getNumericValue(digit);\n            }\n        }\n        return sum * sign;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.countNums(Arrays.asList())); // 0\n        System.out.println(solution.countNums(Arrays.asList(-1, 11, -11)); // 1\n        System.out.println(solution.countNums(Arrays.asList(1, 1, 2)); // 3\n    }\n}"}
{"task_id": "Java/108", "generation": "        int count = 0;\n        for (int num : arr) {\n            int sum = 0;\n            int n = Math.abs(num);\n            while (n > 0) {\n                sum += n % 10;\n                n /= 10;\n            }\n\n            if (sum > 0) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> arr1 = Arrays.asList();\n        List<Integer> arr2 = Arrays.asList(-1, 11, -11);\n        List<Integer> arr3 = Arrays.asList(1, 1, 2);\n\n        System.out.println(solution.countNums(arr1)); // 0\n        System.out.println(solution.countNums(arr2)); // 1\n        System.out.println(solution.countNums(arr3)); // 3\n    }\n}"}
{"task_id": "Java/108", "generation": "        int count = 0;\n        for (int num : arr) {\n            int sum = 0;\n            int n = Math.abs(num);\n            while (n > 0) {\n                sum += n % 10;\n                n /= 10;\n            }\n            if (num < 0) {\n                sum *= -1;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "Java/108", "generation": "        int count = 0;\n        for (int num : arr) {\n            int sum = 0;\n\n            if (num < 0) {\n                sum += Integer.parseInt(String.valueOf(num).substring(0, 2));\n            } else {\n                sum += Integer.parseInt(String.valueOf(num).substring(0, 1));\n            }\n\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.countNums(Arrays.asList())); // 0\n        System.out.println(solution.countNums(Arrays.asList(-1, 11, -11))); // 1\n        System.out.println(solution.countNums(Arrays.asList(1, 1, 2))); // 3\n    }\n}"}
{"task_id": "Java/108", "generation": "        int count = 0;\n        for (int num : arr) {\n            int sum = 0;\n            int temp = num;\n            while (temp != 0) {\n                sum += temp % 10;\n                temp = temp / 10;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.countNums(Arrays.asList())); // 0\n        System.out.println(solution.countNums(Arrays.asList(-1, 11, -11))); // 1\n        System.out.println(solution.countNums(Arrays.asList(1, 1, 2))); // 3\n    }\n}"}
{"task_id": "Java/109", "generation": "        if (arr.isEmpty()) {\n            return true;\n        }\n\n        List<Integer> sortedArr = new ArrayList<>(arr);\n        Collections.sort(sortedArr);\n\n        int n = arr.size();\n        for (int i = 0; i < n; i++) {\n            if (sortedArr.equals(arr)) {\n                return true;\n            }\n            arr.add(0, arr.get(n - 1));\n            arr.remove(n);\n        }\n\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.moveOneBall(Arrays.asList(3, 4, 5, 1, 2))); // true\n        System.out.println(solution.moveOneBall(Arrays.asList(3, 5, 4, 1, 2))); // false\n    }\n}"}
{"task_id": "Java/109", "generation": "        if (arr.isEmpty()) {\n            return true;\n        }\n\n        List<Integer> sortedArr = new ArrayList<>(arr);\n        Collections.sort(sortedArr);\n\n        int n = arr.size();\n        for (int i = 0; i < n; i++) {\n            if (arr.equals(sortedArr)) {\n                return true;\n            }\n            arr.add(0, arr.get(n - 1));\n            arr.remove(n);\n        }\n\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.moveOneBall(Arrays.asList(3, 4, 5, 1, 2))); // true\n        System.out.println(solution.moveOneBall(Arrays.asList(3, 5, 4, 1, 2))); // false\n    }\n}"}
{"task_id": "Java/109", "generation": "        // Check if the given array is empty\n        if(arr.isEmpty()) {\n            return true;\n        }\n\n        // Find the index of the smallest element in the array\n        int minIndex = 0;\n        for(int i = 1; i < arr.size(); i++) {\n            if(arr.get(i) < arr.get(minIndex)) {\n                minIndex = i;\n            }\n        }\n\n        // Check if right shifting can result in non-decreasing order\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get((minIndex + i) % arr.size()) > arr.get((minIndex + i + 1) % arr.size())) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.moveOneBall(Arrays.asList(3, 4, 5, 1, 2))); // true\n        System.out.println(solution.moveOneBall(Arrays.asList(3, 5, 4, 1, 2))); // false\n    }\n}"}
{"task_id": "Java/109", "generation": "        // Check if the array is empty\n        if (arr.isEmpty()) {\n            return true;\n        }\n\n        // Find the index of the minimum element in the array\n        int minIdx = 0;\n        int minValue = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < minValue) {\n                minIdx = i;\n                minValue = arr.get(i);\n            }\n        }\n\n        // Check if the array can be sorted by performing right shifts\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get((minIdx + i) % arr.size()) != arr.get(i)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.moveOneBall(Arrays.asList(3, 4, 5, 1, 2))); // true\n        System.out.println(solution.moveOneBall(Arrays.asList(3, 5, 4, 1, 2))); // false\n    }\n}"}
{"task_id": "Java/109", "generation": "        if (arr.isEmpty()) {\n            return true;\n        }\n\n        int n = arr.size();\n        int idxOfMinVal = 0;\n\n        // Find index of minimum value in the array\n        for (int i = 0; i < n; i++) {\n            if (arr.get(i) < arr.get(idxOfMinVal)) {\n                idxOfMinVal = i;\n            }\n        }\n\n        // Check if the array is already in non-decreasing order\n        boolean sorted = true;\n        for (int i = 1; i < n; i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                sorted = false;\n                break;\n            }\n        }\n\n        // If the array is already sorted, return true\n        if (sorted) {\n            return true;\n        }\n\n        // Check if the array can be sorted by right-shifting\n        int rotations = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr.get((idxOfMinVal + i) % n) != arr.get(i)) {\n                break;\n            }\n            rotations++;\n        }\n\n        if (rotations == n) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.moveOneBall(Arrays.asList(3, 4, 5, 1, 2))); // true\n        System.out.println(solution.moveOneBall(Arrays.asList(3, 5, 4, 1, 2))); // false\n    }\n}"}
{"task_id": "Java/110", "generation": "        int oddCount = 0;\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCount++;\n            }\n        }\n        \n        if (oddCount % 2 != 0) {\n            return \"NO\";\n        }\n        \n        return \"YES\";\n    }\n}"}
{"task_id": "Java/110", "generation": "        int oddCount = 0;\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCount++;\n            }\n        }\n        \n        for (int num : lst2) {\n            if (num % 2 != 0) {\n                oddCount++;\n            }\n        }\n        \n        if (oddCount % 2 == 0) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> lst1 = Arrays.asList(1, 2, 3, 4);\n        List<Integer> lst2 = Arrays.asList(1, 2, 3, 4);\n        System.out.println(solution.exchange(lst1, lst2)); // \"YES\"\n\n        lst1 = Arrays.asList(1, 2, 3, 4);\n        lst2 = Arrays.asList(1, 5, 3, 4);\n        System.out.println(solution.exchange(lst1, lst2)); // \"NO\"\n    }\n}"}
{"task_id": "Java/110", "generation": "        int oddCount = 0;\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCount++;\n            }\n        }\n        for (int num : lst2) {\n            if (num % 2 != 0) {\n                oddCount++;\n            }\n        }\n        return (oddCount % 2 == 0) ? \"YES\" : \"NO\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4))); // \"YES\"\n        System.out.println(solution.exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4))); // \"NO\"\n    }\n}"}
{"task_id": "Java/110", "generation": "        // Count the number of odd numbers in lst1\n        int oddCount = 0;\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCount++;\n            }\n        }\n        \n        // If there are no odd numbers in lst1, return \"YES\"\n        if (oddCount == 0) {\n            return \"YES\";\n        }\n        \n        // If there are odd numbers in lst1, check if there are enough even numbers in lst2 to exchange\n        // If the total count of odd numbers in both lists is even, return \"YES\"\n        // Else, return \"NO\"\n        int totalOddCount = oddCount;\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                totalOddCount--;\n            }\n        }\n        \n        if (totalOddCount % 2 == 0) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        List<Integer> lst1 = Arrays.asList(1, 2, 3, 4);\n        List<Integer> lst2 = Arrays.asList(1, 2, 3, 4);\n        System.out.println(solution.exchange(lst1, lst2));  // Should return \"YES\"\n        \n        lst1 = Arrays.asList(1, 2, 3, 4);\n        lst2 = Arrays.asList(1, 5, 3, 4);\n        System.out.println(solution.exchange(lst1, lst2));  // Should return \"NO\"\n    }\n}"}
{"task_id": "Java/110", "generation": "        int oddCount = 0;\n        \n        for (Integer num : lst1) {\n            if (num % 2 == 1) {\n                oddCount++;\n            }\n        }\n        \n        for (Integer num : lst2) {\n            if (num % 2 == 1) {\n                oddCount++;\n            }\n        }\n        \n        if (oddCount % 2 == 0) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}"}
{"task_id": "Java/111", "generation": "        Map<String, Integer> map = new HashMap<>();\n\n        if (test.isEmpty()) {\n            return map;\n        }\n\n        String[] letters = test.split(\" \");\n\n        Map<String, Integer> countMap = new HashMap<>();\n        int maxCount = 0;\n\n        for (String letter : letters) {\n            countMap.put(letter, countMap.getOrDefault(letter, 0) + 1);\n            maxCount = Math.max(maxCount, countMap.get(letter));\n        }\n\n        for (Map.Entry<String, Integer> entry : countMap.entrySet()) {\n            if (entry.getValue() == maxCount) {\n                map.put(entry.getKey(), maxCount);\n            }\n        }\n\n        return map;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.histogram(\"a b c\")); // {\"a\": 1, \"b\": 1, \"c\": 1}\n        System.out.println(solution.histogram(\"a b b a\")); // {\"a\": 2, \"b\": 2}\n        System.out.println(solution.histogram(\"a b c a b\")); // {\"a\": 2, \"b\": 2}\n        System.out.println(solution.histogram(\"b b b b a\")); // {\"b\": 4}\n        System.out.println(solution.histogram(\"\")); // {}\n    }\n}"}
{"task_id": "Java/111", "generation": "        Map<String, Integer> result = new HashMap<>();\n        \n        if (test == null || test.length() == 0) {\n            return result;\n        }\n        \n        String[] tokens = test.split(\" \");\n        \n        Map<String, Integer> counts = new HashMap<>();\n        \n        for (String token : tokens) {\n            counts.put(token, counts.getOrDefault(token, 0) + 1);\n        }\n        \n        int maxCount = 0;\n        \n        for (int count : counts.values()) {\n            maxCount = Math.max(maxCount, count);\n        }\n        \n        for (Map.Entry<String, Integer> entry : counts.entrySet()) {\n            if (entry.getValue() == maxCount) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n        \n        return result;\n    }\n}\n\nclass Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.histogram(\"a b c\")); // {\"a\": 1, \"b\": 1, \"c\": 1}\n        System.out.println(solution.histogram(\"a b b a\")); // {\"a\": 2, \"b\": 2}\n        System.out.println(solution.histogram(\"a b c a b\")); // {\"a\": 2, \"b\": 2}\n        System.out.println(solution.histogram(\"b b b b a\")); // {\"b\": 4}\n        System.out.println(solution.histogram(\"\")); // {}\n    }\n}"}
{"task_id": "Java/111", "generation": "        Map<String, Integer> map = new HashMap<>();\n\n        if (test == null || test.length() == 0) {\n            return map;\n        }\n\n        String[] letters = test.split(\" \");\n        Map<String, Integer> countMap = new HashMap<>();\n\n        for (String letter : letters) {\n            countMap.put(letter, countMap.getOrDefault(letter, 0) + 1);\n        }\n\n        int maxCount = Collections.max(countMap.values());\n\n        for (Map.Entry<String, Integer> entry : countMap.entrySet()) {\n            if (entry.getValue() == maxCount) {\n                map.put(entry.getKey(), entry.getValue());\n            }\n        }\n\n        return map;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.histogram(\"a b c\")); // {\"a\": 1, \"b\": 1, \"c\": 1}\n        System.out.println(solution.histogram(\"a b b a\")); // {\"a\": 2, \"b\": 2}\n        System.out.println(solution.histogram(\"a b c a b\")); // {\"a\": 2, \"b\": 2}\n        System.out.println(solution.histogram(\"b b b b a\")); // {\"b\": 4}\n        System.out.println(solution.histogram(\"\")); // {}\n    }\n}"}
{"task_id": "Java/111", "generation": "        Map<String, Integer> freqMap = new HashMap<>();\n        \n        if (test == null || test.length() == 0) {\n            return freqMap;\n        }\n        \n        String[] letters = test.split(\" \");\n        \n        for (String letter : letters) {\n            freqMap.put(letter, freqMap.getOrDefault(letter, 0) + 1);\n        }\n        \n        Map<String, Integer> result = new HashMap<>();\n        int maxFreq = Collections.max(freqMap.values());\n        \n        for (Map.Entry<String, Integer> entry : freqMap.entrySet()) {\n            if (entry.getValue() == maxFreq) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.histogram(\"a b c\")); // {\"a\": 1, \"b\": 1, \"c\": 1}\n        System.out.println(solution.histogram(\"a b b a\")); // {\"a\": 2, \"b\": 2}\n        System.out.println(solution.histogram(\"a b c a b\")); // {\"a\": 2, \"b\": 2}\n        System.out.println(solution.histogram(\"b b b b a\")); // {\"b\": 4}\n        System.out.println(solution.histogram(\"\")); // {}\n    }\n}"}
{"task_id": "Java/111", "generation": "        Map<String, Integer> result = new HashMap<>();\n        if (test == null || test.isEmpty()) {\n            return result;\n        }\n        \n        String[] letters = test.split(\" \");\n        Map<String, Integer> frequencyMap = new HashMap<>();\n        \n        for (String letter : letters) {\n            frequencyMap.put(letter, frequencyMap.getOrDefault(letter, 0) + 1);\n        }\n        \n        int maxFrequency = Collections.max(frequencyMap.values());\n        \n        for (Map.Entry<String, Integer> entry : frequencyMap.entrySet()) {\n            if (entry.getValue() == maxFrequency) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.histogram(\"a b c\")); // Expected: {\"a\": 1, \"b\": 1, \"c\": 1}\n        System.out.println(solution.histogram(\"a b b a\")); // Expected: {\"a\": 2, \"b\": 2}\n        System.out.println(solution.histogram(\"a b c a b\")); // Expected: {\"a\": 2, \"b\": 2}\n        System.out.println(solution.histogram(\"b b b b a\")); // Expected: {\"b\": 4}\n        System.out.println(solution.histogram(\"\")); // Expected: {}\n    }\n}"}
{"task_id": "Java/112", "generation": "        // Remove characters in string s that are equal to any character in string c\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            if (c.indexOf(s.charAt(i)) == -1) {\n                sb.append(s.charAt(i));\n            }\n        }\n        \n        String result = sb.toString();\n        \n        // Check if the result string is a palindrome\n        boolean isPalindrome = checkPalindrome(result);\n        \n        List<Object> resultList = new ArrayList<>();\n        resultList.add(result);\n        resultList.add(isPalindrome);\n        \n        return resultList;\n    }\n    \n    // Helper function to check if a string is a palindrome\n    private boolean checkPalindrome(String s) {\n        int left = 0;\n        int right = s.length() - 1;\n        \n        while (left < right) {\n            if (s.charAt(left) != s.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.reverseDelete(\"abcde\", \"ae\")); // Output: [\"bcd\", false]\n        System.out.println(solution.reverseDelete(\"abcdef\", \"b\")); // Output: [\"acdef\", false]\n        System.out.println(solution.reverseDelete(\"abcdedcba\", \"ab\")); // Output: [\"cdedc\", true]\n    }\n}"}
{"task_id": "Java/112", "generation": "        // Delete characters in s equal to any character in c\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (c.indexOf(ch) == -1) {\n                sb.append(ch);\n            }\n        }\n        \n        // Check if the result string is palindrome\n        String result = sb.toString();\n        boolean isPalindrome = isPalindrome(result);\n        \n        List<Object> output = new ArrayList<>();\n        output.add(result);\n        output.add(isPalindrome);\n        \n        return output;\n    }\n    \n    // Helper function to check if a string is palindrome\n    private boolean isPalindrome(String s) {\n        int left = 0;\n        int right = s.length() - 1;\n        \n        while (left < right) {\n            if (s.charAt(left) != s.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "Java/112", "generation": "        // Remove characters in s that are equal to any character in c\n        StringBuilder result = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (c.indexOf(ch) == -1) {\n                result.append(ch);\n            }\n        }\n        \n        // Check if the result string is palindrome\n        boolean isPalindrome = checkPalindrome(result.toString());\n        \n        // Return the result string and true/false for palindrome check\n        List<Object> resultList = new ArrayList<>();\n        resultList.add(result.toString());\n        resultList.add(isPalindrome);\n        \n        return resultList;\n    }\n    \n    // Helper method to check if a string is palindrome\n    private boolean checkPalindrome(String s) {\n        int i = 0;\n        int j = s.length() - 1;\n        \n        while (i < j) {\n            if (s.charAt(i) != s.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        \n        return true;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        List<Object> result1 = solution.reverseDelete(\"abcde\", \"ae\");\n        System.out.println(result1); // Output: [bcd, false]\n        \n        List<Object> result2 = solution.reverseDelete(\"abcdef\", \"b\");\n        System.out.println(result2); // Output: [acdef, false]\n        \n        List<Object> result3 = solution.reverseDelete(\"abcdedcba\", \"ab\");\n        System.out.println(result3); // Output: [cdedc, true]\n    }\n}"}
{"task_id": "Java/112", "generation": "        // Delete characters in s that are equal to any character in c\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (c.indexOf(ch) == -1) {\n                sb.append(ch);\n            }\n        }\n        \n        // Check if the result string is palindrome\n        String result = sb.toString();\n        boolean isPalindrome = isPalindrome(result);\n        \n        List<Object> output = new ArrayList<>();\n        output.add(result);\n        output.add(isPalindrome);\n        \n        return output;\n    }\n    \n    public boolean isPalindrome(String s) {\n        int start = 0;\n        int end = s.length() - 1;\n        \n        while (start < end) {\n            if (s.charAt(start) != s.charAt(end)) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "Java/112", "generation": "        // Delete characters in s that are equal to any character in c\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (c.indexOf(ch) == -1) {\n                sb.append(ch);\n            }\n        }\n        \n        // Check if the result string is palindrome\n        String result = sb.toString();\n        boolean isPalindrome = isPalindrome(result);\n        \n        return Arrays.asList(result, isPalindrome);\n    }\n    \n    // Helper method to check if a string is palindrome\n    private boolean isPalindrome(String s) {\n        int left = 0;\n        int right = s.length() - 1;\n        \n        while (left < right) {\n            if (s.charAt(left) != s.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n}\n\nclass Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.reverseDelete(\"abcde\", \"ae\")); // (\"bcd\",false)\n        System.out.println(solution.reverseDelete(\"abcdef\", \"b\")); // (\"acdef\",false)\n        System.out.println(solution.reverseDelete(\"abcdedcba\", \"ab\")); // (\"cdedc\",true)\n    }\n}"}
{"task_id": "Java/113", "generation": "        List<String> result = new ArrayList<>();\n        \n        for(String str : lst) {\n            int count = 0;\n            for(char c : str.toCharArray()) {\n                if(Character.isDigit(c) && (c - '0') % 2 != 0) {\n                    count++;\n                }\n            }\n            String res = \"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + str + \" of the \" + count + \"nput.\";\n            result.add(res);\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/113", "generation": "        List<String> result = new ArrayList<>();\n        \n        for (int i = 0; i < lst.size(); i++) {\n            String str = lst.get(i);\n            int count = 0;\n            for (int j = 0; j < str.length(); j++) {\n                if ((str.charAt(j) - '0') % 2 != 0) {\n                    count++;\n                }\n            }\n            result.add(\"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + (i+1) + \" of the \" + count + \"nput.\");\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.oddCount(Arrays.asList(\"1234567\")));\n        System.out.println(solution.oddCount(Arrays.asList(\"3\",\"11111111\")));\n    }\n}"}
{"task_id": "Java/113", "generation": "        List<String> res = new ArrayList<>();\n        \n        for (String str : lst) {\n            int oddCount = 0;\n            for (char c : str.toCharArray()) {\n                if (Character.isDigit(c) && (c - '0') % 2 != 0) {\n                    oddCount++;\n                }\n            }\n            String newString = str.replace(\"i\", String.valueOf(oddCount));\n            newString = newString.replace(\"4\", \"four\");\n            newString = newString.replace(\"1\", \"one\");\n            newString = newString.replace(\"8\", \"eight\");\n            res.add(\"the number of odd elements \" + newString + \"n the str\" + newString + \"ng \" + str + \" of the 4nput.\");\n        }\n        \n        return res;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<String> lst1 = Arrays.asList(\"1234567\");\n        System.out.println(solution.oddCount(lst1));\n        \n        List<String> lst2 = Arrays.asList(\"3\", \"11111111\");\n        System.out.println(solution.oddCount(lst2));\n    }\n}"}
{"task_id": "Java/113", "generation": "        List<String> result = new ArrayList<>();\n        \n        for (String str : lst) {\n            int count = 0;\n            for (char c : str.toCharArray()) {\n                if (Character.getNumericValue(c) % 2 != 0) {\n                    count++;\n                }\n            }\n            result.add(\"the number of odd elements \" + count + \"n the str\" + count + \"ng \" +\n                    count + \" of the \" + count + \"nput.\");\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/113", "generation": "        List<String> result = new ArrayList<>();\n        \n        for(String str : lst) {\n            int count = 0;\n            for(int i = 0; i < str.length(); i++) {\n                char c = str.charAt(i);\n                if(Character.isDigit(c) && Integer.parseInt(String.valueOf(c)) % 2 != 0) {\n                    count++;\n                }\n            }\n            result.add(\"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + str + \" of the \" + count + \"nput.\");\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/114", "generation": "        // Initialize minSum and currentSum to the maximum integer value\n        int minSum = Integer.MAX_VALUE;\n        int currentSum = Integer.MAX_VALUE;\n        \n        // Iterate through the array to find the minimum sum\n        for (int num : nums) {\n            // If currentSum is negative, set it to the current number\n            if (currentSum < 0) {\n                currentSum = num;\n            } else {\n                currentSum += num;\n            }\n            \n            // Update minSum if currentSum is less than minSum\n            minSum = Math.min(minSum, currentSum);\n        }\n        \n        return minSum;\n    }\n}"}
{"task_id": "Java/114", "generation": "        if(nums == null || nums.isEmpty()) {\n            return Integer.MIN_VALUE;\n        }\n        \n        int minSum = nums.get(0);\n        int currentSum = nums.get(0);\n        \n        for(int i = 1; i < nums.size(); i++) {\n            currentSum = Math.min(nums.get(i), currentSum + nums.get(i));\n            minSum = Math.min(minSum, currentSum);\n        }\n        \n        return minSum;\n    }\n}"}
{"task_id": "Java/114", "generation": "        if (nums == null || nums.size() == 0) {\n            return 0;\n        }\n        \n        int minSum = Integer.MAX_VALUE;\n        int sum = 0;\n        \n        for (int num : nums) {\n            sum += num;\n            minSum = Math.min(minSum, sum);\n            if (sum > 0) {\n                sum = 0;\n            }\n        }\n        \n        return minSum;\n    }\n}"}
{"task_id": "Java/114", "generation": "        int n = nums.size();\n        \n        // Special case where the array is empty\n        if (n == 0) {\n            return 0;\n        }\n        \n        int minSum = nums.get(0);\n        int currentSum = nums.get(0);\n        \n        for (int i = 1; i < n; i++) {\n            // Calculate the current sum by either adding the current element or starting a new sum from the current element\n            currentSum = Math.min(nums.get(i), currentSum + nums.get(i));\n            \n            // Update the minimum sum\n            minSum = Math.min(minSum, currentSum);\n        }\n        \n        return minSum;\n    }\n}"}
{"task_id": "Java/114", "generation": "        int minSum = Integer.MAX_VALUE;\n        \n        for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n            for (int j = i; j < nums.size(); j++) {\n                sum += nums.get(j);\n                // Update the minSum if the current sub-array sum is smaller\n                minSum = Math.min(minSum, sum);\n            }\n        }\n        \n        return minSum;\n    }\n}"}
{"task_id": "Java/115", "generation": "        int rows = grid.size();\n        int cols = grid.get(0).size();\n        int count = 0;\n\n        for (int col = 0; col < cols; col++) {\n            int filled = 0;\n            for (int row = 0; row < rows; row++) {\n                if (grid.get(row).get(col) == 1) {\n                    filled++;\n                    grid.get(row).set(col, 0);\n                }\n            }\n            while (filled > 0) {\n                filled -= capacity;\n                count++;\n            }\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Example 1\n        List<List<Integer>> grid1 = new ArrayList<>();\n        grid1.add(Arrays.asList(0,0,1,0));\n        grid1.add(Arrays.asList(0,1,0,0));\n        grid1.add(Arrays.asList(1,1,1,1));\n        int capacity1 = 1;\n        System.out.println(solution.maxFill(grid1, capacity1)); // Output: 6\n\n        // Example 2\n        List<List<Integer>> grid2 = new ArrayList<>();\n        grid2.add(Arrays.asList(0,0,1,1));\n        grid2.add(Arrays.asList(0,0,0,0));\n        grid2.add(Arrays.asList(1,1,1,1));\n        grid2.add(Arrays.asList(0,1,1,1));\n        int capacity2 = 2;\n        System.out.println(solution.maxFill(grid2, capacity2)); // Output: 5\n\n        // Example 3\n        List<List<Integer>> grid3 = new ArrayList<>();\n        grid3.add(Arrays.asList(0,0,0));\n        grid3.add(Arrays.asList(0,0,0));\n        int capacity3 = 5;\n        System.out.println(solution.maxFill(grid3, capacity3)); // Output: 0\n    }\n}"}
{"task_id": "Java/115", "generation": "        int count = 0;\n        for (List<Integer> row : grid) {\n            int current = 0;\n            for (int well : row) {\n                if (well == 1) {\n                    if (current > 0) {\n                        count += (current + capacity - 1) / capacity;\n                    }\n                    current = 0;\n                } else {\n                    current++;\n                }\n            }\n            if (current > 0) {\n                count += (current + capacity - 1) / capacity;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<List<Integer>> grid1 = new ArrayList<>();\n        grid1.add(Arrays.asList(0, 0, 1, 0));\n        grid1.add(Arrays.asList(0, 1, 0, 0));\n        grid1.add(Arrays.asList(1, 1, 1, 1));\n        System.out.println(solution.maxFill(grid1, 1)); // Output: 6\n\n        List<List<Integer>> grid2 = new ArrayList<>();\n        grid2.add(Arrays.asList(0, 0, 1, 1));\n        grid2.add(Arrays.asList(0, 0, 0, 0));\n        grid2.add(Arrays.asList(1, 1, 1, 1));\n        grid2.add(Arrays.asList(0, 1, 1, 1));\n        System.out.println(solution.maxFill(grid2, 2)); // Output: 5\n\n        List<List<Integer>> grid3 = new ArrayList<>();\n        grid3.add(Arrays.asList(0, 0, 0));\n        grid3.add(Arrays.asList(0, 0, 0));\n        System.out.println(solution.maxFill(grid3, 5)); // Output: 0\n    }\n}"}
{"task_id": "Java/115", "generation": "        int rows = grid.size();\n        int cols = grid.get(0).size();\n\n        int count = 0;\n\n        for (int i = 0; i < cols; i++) {\n            int maxHeight = 0;\n            for (int j = 0; j < rows; j++) {\n                if (grid.get(j).get(i) == 1) {\n                    maxHeight++;\n                }\n            }\n\n            int bucketsNeeded = (int) Math.ceil((double) maxHeight / capacity);\n            count += bucketsNeeded;\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<List<Integer>> grid1 = new ArrayList<>();\n        grid1.add(Arrays.asList(0, 0, 1, 0));\n        grid1.add(Arrays.asList(0, 1, 0, 0));\n        grid1.add(Arrays.asList(1, 1, 1, 1));\n        System.out.println(solution.maxFill(grid1, 1)); // Output: 6\n\n        List<List<Integer>> grid2 = new ArrayList<>();\n        grid2.add(Arrays.asList(0, 0, 1, 1));\n        grid2.add(Arrays.asList(0, 0, 0, 0));\n        grid2.add(Arrays.asList(1, 1, 1, 1));\n        grid2.add(Arrays.asList(0, 1, 1, 1));\n        System.out.println(solution.maxFill(grid2, 2)); // Output: 5\n\n        List<List<Integer>> grid3 = new ArrayList<>();\n        grid3.add(Arrays.asList(0, 0, 0));\n        grid3.add(Arrays.asList(0, 0, 0));\n        System.out.println(solution.maxFill(grid3, 5)); // Output: 0\n    }\n}"}
{"task_id": "Java/115", "generation": "        int rows = grid.size();\n        int cols = grid.get(0).size();\n        int count = 0;\n\n        for (int i = 0; i < rows - 1; i++) {\n            for (int j = 0; j < cols; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    int remainingCapacity = capacity;\n                    int k = i;\n                    while (remainingCapacity > 0 && k < rows && grid.get(k).get(j) == 1) {\n                        grid.get(k).set(j, 0);\n                        remainingCapacity--;\n                        k++;\n                    }\n                    count += (k - i);\n                }\n            }\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Example 1\n        List<List<Integer>> grid1 = new ArrayList<>();\n        grid1.add(Arrays.asList(0, 0, 1, 0));\n        grid1.add(Arrays.asList(0, 1, 0, 0));\n        grid1.add(Arrays.asList(1, 1, 1, 1));\n        int capacity1 = 1;\n        System.out.println(solution.maxFill(grid1, capacity1)); // Output: 6\n\n        // Example 2\n        List<List<Integer>> grid2 = new ArrayList<>();\n        grid2.add(Arrays.asList(0, 0, 1, 1));\n        grid2.add(Arrays.asList(0, 0, 0, 0));\n        grid2.add(Arrays.asList(1, 1, 1, 1));\n        grid2.add(Arrays.asList(0, 1, 1, 1));\n        int capacity2 = 2;\n        System.out.println(solution.maxFill(grid2, capacity2)); // Output: 5\n\n        // Example 3\n        List<List<Integer>> grid3 = new ArrayList<>();\n        grid3.add(Arrays.asList(0, 0, 0));\n        grid3.add(Arrays.asList(0, 0, 0));\n        int capacity3 = 5;\n        System.out.println(solution.maxFill(grid3, capacity3)); // Output: 0\n    }\n}"}
{"task_id": "Java/115", "generation": "        int rows = grid.size();\n        int cols = grid.get(0).size();\n        int count = 0;\n        int max = 0;\n        \n        for (int i = 0; i < rows; i++) {\n            int currentMax = 0;\n            for (int j = 0; j < cols; j++) {\n                currentMax = Math.max(currentMax, grid.get(i).get(j));\n            }\n            max = Math.max(max, currentMax);\n        }\n        \n        return max * capacity;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<List<Integer>> grid1 = new ArrayList<>();\n        grid1.add(Arrays.asList(0, 0, 1, 0));\n        grid1.add(Arrays.asList(0, 1, 0, 0));\n        grid1.add(Arrays.asList(1, 1, 1, 1));\n        System.out.println(solution.maxFill(grid1, 1)); // Output: 6\n\n        List<List<Integer>> grid2 = new ArrayList<>();\n        grid2.add(Arrays.asList(0, 0, 1, 1));\n        grid2.add(Arrays.asList(0, 0, 0, 0));\n        grid2.add(Arrays.asList(1, 1, 1, 1));\n        grid2.add(Arrays.asList(0, 1, 1, 1));\n        System.out.println(solution.maxFill(grid2, 2)); // Output: 5\n\n        List<List<Integer>> grid3 = new ArrayList<>();\n        grid3.add(Arrays.asList(0, 0, 0));\n        grid3.add(Arrays.asList(0, 0, 0));\n        System.out.println(solution.maxFill(grid3, 5)); // Output: 0\n    }\n}"}
{"task_id": "Java/116", "generation": "        // Create a custom comparator to sort the array based on the number of ones in their binary representation\n        Comparator<Integer> customComparator = new Comparator<Integer>() {\n            @Override\n            public int compare(Integer num1, Integer num2) {\n                int count1 = Integer.bitCount(num1);\n                int count2 = Integer.bitCount(num2);\n\n                if (count1 == count2) {\n                    return num1 - num2;\n                } else {\n                    return count1 - count2;\n                }\n            }\n        };\n\n        // Sort the array using the custom comparator\n        Collections.sort(arr, customComparator);\n\n        return arr;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5)));\n        System.out.println(solution.sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2)));\n        System.out.println(solution.sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4)));\n    }\n}"}
{"task_id": "Java/116", "generation": "        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                int count1 = Integer.bitCount(Math.abs(o1));\n                int count2 = Integer.bitCount(Math.abs(o2));\n                \n                if (count1 == count2) {\n                    return o1 - o2;\n                }\n                \n                return count1 - count2;\n            }\n        });\n        \n        return arr;\n    }\n}"}
{"task_id": "Java/116", "generation": "        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer num1, Integer num2) {\n                int num1BinaryOnes = Integer.bitCount(Math.abs(num1));\n                int num2BinaryOnes = Integer.bitCount(Math.abs(num2);\n\n                if (num1BinaryOnes != num2BinaryOnes) {\n                    return num1BinaryOnes - num2BinaryOnes;\n                } else {\n                    return num1 - num2;\n                }\n            }\n        });\n\n        return arr;\n    }\n}"}
{"task_id": "Java/116", "generation": "        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                int count1 = Integer.bitCount(o1);\n                int count2 = Integer.bitCount(o2);\n\n                if (count1 != count2) {\n                    return count1 - count2;\n                } else {\n                    return o1 - o2;\n                }\n            }\n        });\n\n        return arr;\n    }\n}"}
{"task_id": "Java/116", "generation": "        Collections.sort(arr, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                int numOnesA = Integer.bitCount(Math.abs(a));\n                int numOnesB = Integer.bitCount(Math.abs(b));\n\n                if (numOnesA != numOnesB) {\n                    return numOnesA - numOnesB;\n                } else {\n                    return a - b;\n                }\n            }\n        });\n\n        return arr;\n    }\n}"}
{"task_id": "Java/117", "generation": "        List<String> result = new ArrayList<>();\n        \n        if (s.isEmpty()) {\n            return result;\n        }\n        \n        String[] words = s.split(\" \");\n        \n        for (String word : words) {\n            int consonantCount = 0;\n            for (char c : word.toCharArray()) {\n                if (isConsonant(c)) {\n                    consonantCount++;\n                }\n            }\n            if (consonantCount == n) {\n                result.add(word);\n            }\n        }\n        \n        return result;\n    }\n    \n    private boolean isConsonant(char c) {\n        return \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\".indexOf(c) != -1;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.selectWords(\"Mary had a little lamb\", 4)); // [\"little\"]\n        System.out.println(solution.selectWords(\"Mary had a little lamb\", 3)); // [\"Mary\", \"lamb\"]\n        System.out.println(solution.selectWords(\"simple white space\", 2)); // []\n        System.out.println(solution.selectWords(\"Hello world\", 4)); // [\"world\"]\n        System.out.println(solution.selectWords(\"Uncle sam\", 3)); // [\"Uncle\"]\n    }\n}"}
{"task_id": "Java/117", "generation": "        List<String> result = new ArrayList<>();\n        if (s.isEmpty()) {\n            return result;\n        }\n        \n        String[] words = s.split(\" \");\n        for (String word : words) {\n            int count = 0;\n            for (int i = 0; i < word.length(); i++) {\n                char c = Character.toLowerCase(word.charAt(i));\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                    count++;\n                }\n            }\n            if (count == n) {\n                result.add(word);\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.selectWords(\"Mary had a little lamb\", 4)); // [\"little\"]\n        System.out.println(solution.selectWords(\"Mary had a little lamb\", 3)); // [\"Mary\", \"lamb\"]\n        System.out.println(solution.selectWords(\"simple white space\", 2)); // []\n        System.out.println(solution.selectWords(\"Hello world\", 4)); // [\"world\"]\n        System.out.println(solution.selectWords(\"Uncle sam\", 3)); // [\"Uncle\"]\n    }\n}"}
{"task_id": "Java/117", "generation": "        List<String> result = new ArrayList<>();\n        \n        if (s.isEmpty()) {\n            return result;\n        }\n        \n        StringBuilder currentWord = new StringBuilder();\n        int consonantCount = 0;\n        \n        for (int i = 0; i < s.length(); i++) {\n            char c = Character.toLowerCase(s.charAt(i));\n            if (Character.isAlphabetic(c)) {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                    consonantCount++;\n                }\n                currentWord.append(c);\n            } else {\n                if (consonantCount == n) {\n                    result.add(currentWord.toString());\n                }\n                currentWord = new StringBuilder();\n                consonantCount = 0;\n            }\n        }\n        \n        if (consonantCount == n) {\n            result.add(currentWord.toString());\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/117", "generation": "        List<String> resultList = new ArrayList<>();\n        \n        if (s.isEmpty()) {\n            return resultList;\n        }\n        \n        String[] words = s.split(\" \");\n        \n        for (String word : words) {\n            int consonantCount = countConsonants(word);\n            if (consonantCount == n) {\n                resultList.add(word);\n            }\n        }\n        \n        return resultList;\n    }\n    \n    private int countConsonants(String word) {\n        int count = 0;\n        String lowerCaseWord = word.toLowerCase();\n        \n        for (int i = 0; i < word.length(); i++) {\n            char c = lowerCaseWord.charAt(i);\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != ' ') {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}"}
{"task_id": "Java/117", "generation": "        List<String> result = new ArrayList<>();\n        \n        if (s.isEmpty()) {\n            return result;\n        }\n        \n        String[] words = s.split(\" \");\n        \n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                if (isConsonant(c)) {\n                    count++;\n                }\n            }\n            if (count == n) {\n                result.add(word);\n            }\n        }\n        \n        return result;\n    }\n    \n    private boolean isConsonant(char c) {\n        char lower = Character.toLowerCase(c);\n        return \"bcdfghjklmnpqrstvwxyz\".indexOf(lower) != -1;\n    }\n}"}
{"task_id": "Java/118", "generation": "        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        Set<Character> vowelSet = new HashSet<>();\n        for (char vowel : vowels) {\n            vowelSet.add(vowel);\n        }\n\n        boolean foundConsonant = false;\n        for (int i = word.length() - 2; i > 0; i--) {\n            char currChar = word.charAt(i);\n            if (!vowelSet.contains(Character.toLowerCase(currChar))) {\n                foundConsonant = true;\n            } else if (foundConsonant) {\n                return String.valueOf(currChar);\n            }\n        }\n\n        return \"\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.getClosestVowel(\"yogurt\")); // \"u\"\n        System.out.println(solution.getClosestVowel(\"FULL\")); // \"U\"\n        System.out.println(solution.getClosestVowel(\"quick\")); // \"\"\n        System.out.println(solution.getClosestVowel(\"ab\")); // \"\"\n    }\n}"}
{"task_id": "Java/118", "generation": "        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u'));\n\n        int n = word.length();\n        int i = n - 1;\n        \n        while (i >= 0) {\n            char currentChar = word.charAt(i);\n            if (!vowels.contains(currentChar)) {\n                break;\n            }\n            i--;\n        }\n        \n        while (i >= 0) {\n            char currentChar = word.charAt(i);\n            if (vowels.contains(currentChar)) {\n                return String.valueOf(currentChar);\n            }\n            i--;\n        }\n        \n        return \"\";\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.getClosestVowel(\"yogurt\")); // \"u\"\n        System.out.println(solution.getClosestVowel(\"FULL\")); // \"U\"\n        System.out.println(solution.getClosestVowel(\"quick\")); // \"\"\n        System.out.println(solution.getClosestVowel(\"ab\")); // \"\"\n    }\n}"}
{"task_id": "Java/118", "generation": "        // Initialize a set to store vowels\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u'));\n\n        // Iterate through the word from right to left\n        for (int i = word.length() - 2; i > 0; i--) {\n            char currentChar = Character.toLowerCase(word.charAt(i));\n            // Check if the character is a consonant\n            if (!vowels.contains(currentChar)) {\n                // Check if the previous and next characters are vowels\n                if (vowels.contains(Character.toLowerCase(word.charAt(i - 1))) && vowels.contains(Character.toLowerCase(word.charAt(i + 1))) {\n                    // Return the closest vowel\n                    return String.valueOf(word.charAt(i));\n                }\n            }\n        }\n\n        // Return empty string if no closest vowel found\n        return \"\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        // Test cases\n        System.out.println(solution.getClosestVowel(\"yogurt\")); // \"u\"\n        System.out.println(solution.getClosestVowel(\"FULL\")); // \"U\"\n        System.out.println(solution.getClosestVowel(\"quick\")); // \"\"\n        System.out.println(solution.getClosestVowel(\"ab\")); // \"\"\n    }\n}"}
{"task_id": "Java/118", "generation": "        // Store the indexes of vowels in the word\n        Set<Integer> vowelIndexes = new HashSet<>();\n        \n        // Define the vowels\n        Set<Character> vowels = new HashSet<>();\n        vowels.add('a');\n        vowels.add('e');\n        vowels.add('i');\n        vowels.add('o');\n        vowels.add('u');\n        \n        // Find the indexes of vowels in the word\n        for (int i = 1; i < word.length() - 1; i++) {\n            char ch = word.charAt(i);\n            if (vowels.contains(ch)) {\n                vowelIndexes.add(i);\n            }\n        }\n        \n        // Find the closest vowel that stands between two consonants from the right side\n        for (int index : vowelIndexes) {\n            if (index < word.length() - 2 && !vowels.contains(word.charAt(index - 1)) && !vowels.contains(word.charAt(index + 1))) {\n                return String.valueOf(word.charAt(index));\n            }\n        }\n        \n        // If no vowel satisfies the condition, return empty string\n        return \"\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.getClosestVowel(\"yogurt\")); // Should return \"u\"\n        System.out.println(solution.getClosestVowel(\"FULL\")); // Should return \"U\"\n        System.out.println(solution.getClosestVowel(\"quick\")); // Should return \"\"\n        System.out.println(solution.getClosestVowel(\"ab\")); // Should return \"\"\n    }\n}"}
{"task_id": "Java/118", "generation": "        int n = word.length();\n        String vowels = \"aeiouAEIOU\";\n\n        for (int i = n - 2; i > 0; i--) {\n            char c = word.charAt(i);\n            if (vowels.indexOf(c) != -1) {\n                return Character.toString(c);\n            }\n        }\n\n        return \"\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.getClosestVowel(\"yogurt\")); // \"u\"\n        System.out.println(solution.getClosestVowel(\"FULL\")); // \"U\"\n        System.out.println(solution.getClosestVowel(\"quick\")); // \"\"\n        System.out.println(solution.getClosestVowel(\"ab\")); // \"\"\n    }\n}"}
{"task_id": "Java/119", "generation": "        int openParenCount = 0;\n        int closeParenCount = 0;\n\n        for (String str : lst) {\n            for (char c : str.toCharArray()) {\n                if (c == '(') {\n                    openParenCount++;\n                } else {\n                    closeParenCount++;\n                    if (closeParenCount > openParenCount) {\n                        return \"No\";\n                    }\n                }\n            }\n        }\n\n        return openParenCount == closeParenCount ? \"Yes\" : \"No\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases to validate the solution\n        List<String> test1 = Arrays.asList(\"()(\", \")\");\n        List<String> test2 = Arrays.asList(\")\", \")\");\n        \n        System.out.println(solution.matchParens(test1)); // Output should be \"Yes\"\n        System.out.println(solution.matchParens(test2)); // Output should be \"No\"\n    }\n}"}
{"task_id": "Java/119", "generation": "        String str1 = lst.get(0);\n        String str2 = lst.get(1);\n        \n        int openCount = 0;\n        int closeCount = 0;\n        \n        for (char c : str1.toCharArray()) {\n            if (c == '(') {\n                openCount++;\n            } else {\n                closeCount++;\n            }\n        }\n        \n        for (char c : str2.toCharArray()) {\n            if (c == '(') {\n                openCount++;\n            } else {\n                closeCount++;\n            }\n        }\n        \n        if (openCount % 2 == 0 && closeCount % 2 == 0) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        \n        System.out.println(sol.matchParens(Arrays.asList(\"()(\", \")\"))); // Yes\n        System.out.println(sol.matchParens(Arrays.asList(\")\", \")\"))); // No\n    }\n}"}
{"task_id": "Java/119", "generation": "        String str1 = lst.get(0);\n        String str2 = lst.get(1);\n        \n        int count = 0;\n        for(char c: str1.toCharArray()) {\n            if(c == '(') {\n                count++;\n            } else {\n                count--;\n            }\n            if(count < 0) {\n                return \"No\";\n            }\n        }\n        \n        for(char c: str2.toCharArray()) {\n            if(c == '(') {\n                count++;\n            } else {\n                count--;\n            }\n            if(count < 0) {\n                return \"No\";\n            }\n        }\n        \n        return count == 0 ? \"Yes\" : \"No\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.matchParens(Arrays.asList(\"()(\", \")\"))); // Yes\n        System.out.println(solution.matchParens(Arrays.asList(\")\", \")\"))); // No\n    }\n}"}
{"task_id": "Java/119", "generation": "        int count = 0;\n        for (String str : lst) {\n            for (char c : str.toCharArray()) {\n                if (c == '(') {\n                    count++;\n                } else {\n                    count--;\n                }\n                if (count < 0) {\n                    return \"No\";\n                }\n            }\n        }\n        return count == 0 ? \"Yes\" : \"No\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Example 1\n        List<String> lst1 = Arrays.asList(\"()(\", \")\");\n        System.out.println(solution.matchParens(lst1)); // Output: Yes\n\n        // Example 2\n        List<String> lst2 = Arrays.asList(\")\", \")\");\n        System.out.println(solution.matchParens(lst2)); // Output: No\n    }\n}"}
{"task_id": "Java/119", "generation": "        int openParenCount = 0;\n        for (String str : lst) {\n            for (char c : str.toCharArray()) {\n                if (c == '(') {\n                    openParenCount++;\n                } else {\n                    if (openParenCount == 0) {\n                        return \"No\";\n                    }\n                    openParenCount--;\n                }\n            }\n        }\n        return openParenCount == 0 ? \"Yes\" : \"No\";\n    }\n}"}
{"task_id": "Java/120", "generation": "        // Sort the array in descending order\n        Collections.sort(arr, Collections.reverseOrder());\n\n        // Create a new list to store the maximum k numbers\n        List<Integer> result = new ArrayList<>();\n\n        // Add the first k elements from the sorted array to the result list\n        for (int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Example 1\n        List<Integer> arr1 = new ArrayList<>(Arrays.asList(-3, -4, 5));\n        int k1 = 3;\n        System.out.println(solution.maximum(arr1, k1)); // Output: [-4, -3, 5]\n\n        // Example 2\n        List<Integer> arr2 = new ArrayList<>(Arrays.asList(4, -4, 4));\n        int k2 = 2;\n        System.out.println(solution.maximum(arr2, k2)); // Output: [4, 4]\n\n        // Example 3\n        List<Integer> arr3 = new ArrayList<>(Arrays.asList(-3, 2, 1, 2, -1, -2, 1));\n        int k3 = 1;\n        System.out.println(solution.maximum(arr3, k3)); // Output: [2]\n    }\n}"}
{"task_id": "Java/120", "generation": "        // Sort the array in descending order\n        Collections.sort(arr, Collections.reverseOrder());\n\n        // Create a list to store the maximum k numbers\n        List<Integer> maxK = new ArrayList<>();\n\n        // Add the first k elements to the maxK list\n        for (int i = 0; i < k; i++) {\n            maxK.add(arr.get(i));\n        }\n\n        return maxK;\n    }\n}"}
{"task_id": "Java/120", "generation": "        // Sort the array in non-decreasing order\n        Collections.sort(arr);\n\n        // Create a list to store the maximum k numbers\n        List<Integer> result = new ArrayList<>();\n\n        // Add the last k numbers from the sorted array to the result list\n        for (int i = arr.size() - 1; i >= arr.size() - k; i--) {\n            result.add(arr.get(i));\n        }\n\n        return result;\n    }\n}"}
{"task_id": "Java/120", "generation": "        // Create a max heap to store the elements\n        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\n        \n        // Add all elements of the array to the max heap\n        for (int num : arr) {\n            maxHeap.add(num);\n        }\n        \n        // Create a list to store the result\n        List<Integer> result = new ArrayList<>();\n        \n        // Remove k elements from the max heap and add to the result list\n        for (int i = 0; i < k; i++) {\n            result.add(maxHeap.poll());\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test the examples in the prompt\n        List<Integer> arr1 = new ArrayList<>(Arrays.asList(-3, -4, 5));\n        int k1 = 3;\n        System.out.println(solution.maximum(arr1, k1)); // Output: [-4, -3, 5]\n\n        List<Integer> arr2 = new ArrayList<>(Arrays.asList(4, -4, 4));\n        int k2 = 2;\n        System.out.println(solution.maximum(arr2, k2)); // Output: [4, 4]\n\n        List<Integer> arr3 = new ArrayList<>(Arrays.asList(-3, 2, 1, 2, -1, -2, 1));\n        int k3 = 1;\n        System.out.println(solution.maximum(arr3, k3)); // Output: [2]\n    }\n}"}
{"task_id": "Java/120", "generation": "        // Create a priority queue to store the elements in descending order\n        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());\n        \n        // Add all elements from the array to the priority queue\n        for (int num : arr) {\n            pq.offer(num);\n        }\n        \n        // Create a list to store the maximum k numbers\n        List<Integer> result = new ArrayList<>();\n        \n        // Poll k elements from the priority queue and add them to the result list\n        for (int i = 0; i < k; i++) {\n            if (!pq.isEmpty()) {\n                result.add(pq.poll());\n            }\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/121", "generation": "        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 1 && lst.get(i) % 2 == 1) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/121", "generation": "        int sum = 0;\n        \n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 1 && lst.get(i) % 2 == 1) {\n                sum += lst.get(i);\n            }\n        }\n        \n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> lst1 = Arrays.asList(5, 8, 7, 1);\n        System.out.println(solution.solution(lst1)); // Output should be 12\n\n        List<Integer> lst2 = Arrays.asList(3, 3, 3, 3, 3);\n        System.out.println(solution.solution(lst2)); // Output should be 9\n\n        List<Integer> lst3 = Arrays.asList(30, 13, 24, 321);\n        System.out.println(solution.solution(lst3)); // Output should be 0\n    }\n}"}
{"task_id": "Java/121", "generation": "        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 1 && lst.get(i) % 2 == 1) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/121", "generation": "        int sum = 0;\n        for(int i=0; i<lst.size(); i++){\n            if(i%2 == 1 && lst.get(i)%2 == 1){\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/121", "generation": "        int sum = 0;\n        for (int i = 0; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.solution(Arrays.asList(5, 8, 7, 1))); // 12\n        System.out.println(solution.solution(Arrays.asList(3, 3, 3, 3, 3))); // 9\n        System.out.println(solution.solution(Arrays.asList(30, 13, 24, 321))); // 0\n    }\n}"}
{"task_id": "Java/122", "generation": "        int sum = 0;\n\n        for (int i = 0; i < k && i < arr.size(); i++) {\n            if (Math.abs(arr.get(i)) >= 10 && Math.abs(arr.get(i)) < 100) {\n                sum += arr.get(i);\n            }\n        }\n\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Example 1\n        List<Integer> arr1 = Arrays.asList(111, 21, 3, 4000, 5, 6, 7, 8, 9);\n        int k1 = 4;\n        System.out.println(solution.addElements(arr1, k1)); // Output: 24\n\n        // Additional test cases\n        List<Integer> arr2 = Arrays.asList(1, 11, 22, -33, 0);\n        int k2 = 3;\n        System.out.println(solution.addElements(arr2, k2)); // Output: 33\n\n        List<Integer> arr3 = Arrays.asList(10, 20, 30, 40, 50);\n        int k3 = 5;\n        System.out.println(solution.addElements(arr3, k3)); // Output: 100\n    }\n}"}
{"task_id": "Java/122", "generation": "        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i) >= 10 && arr.get(i) <= 99) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/122", "generation": "        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (Math.abs(arr.get(i)) >= 10 && Math.abs(arr.get(i)) < 100) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> arr = new ArrayList<>();\n        arr.add(111);\n        arr.add(21);\n        arr.add(3);\n        arr.add(4000);\n        arr.add(5);\n        arr.add(6);\n        arr.add(7);\n        arr.add(8);\n        arr.add(9);\n\n        int k = 4;\n        System.out.println(solution.addElements(arr, k)); // Output: 24\n    }\n}"}
{"task_id": "Java/122", "generation": "        // Sort the first k elements of the array\n        Collections.sort(arr.subList(0, k));\n\n        int sum = 0;\n\n        // Iterate through the first k elements and add the elements with at most two digits\n        for (int i = 0; i < k; i++) {\n            if (Math.abs(arr.get(i)) < 100) {\n                sum += arr.get(i);\n            }\n        }\n\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test the addElements function\n        List<Integer> arr = new ArrayList<>(Arrays.asList(111, 21, 3, 4000, 5, 6, 7, 8, 9));\n        int k = 4;\n        System.out.println(solution.addElements(arr, k)); // Output: 24\n    }\n}"}
{"task_id": "Java/122", "generation": "        int sum = 0;\n        int count = 0;\n        \n        for (int i = 0; i < k; i++) {\n            if (Math.abs(arr.get(i)) < 100) {\n                sum += arr.get(i);\n                count++;\n            }\n        }\n        \n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> arr = Arrays.asList(111,21,3,4000,5,6,7,8,9);\n        int k = 4;\n\n        System.out.println(solution.addElements(arr, k)); // Output: 24\n    }\n}"}
{"task_id": "Java/123", "generation": "        List<Integer> result = new ArrayList<>();\n        result.add(1); // Add 1 to the list as it is always present in the collatz sequence\n        getCollatzSequence(n, result);\n        \n        List<Integer> oddNumbers = new ArrayList<>();\n        for (int num : result) {\n            if (num % 2 != 0) {\n                oddNumbers.add(num);\n            }\n        }\n        \n        Collections.sort(oddNumbers);\n        \n        return oddNumbers;\n    }\n    \n    private void getCollatzSequence(int n, List<Integer> result) {\n        if (n <= 1) {\n            return;\n        }\n        \n        if (n % 2 == 0) {\n            n = n / 2;\n        } else {\n            n = 3 * n + 1;\n        }\n        \n        result.add(n);\n        getCollatzSequence(n, result);\n    }\n}"}
{"task_id": "Java/123", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        if (n < 1) {\n            return result;\n        }\n        \n        while (n != 1) {\n            if (n % 2 != 0) {\n                result.add(n);\n            }\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n        }\n        result.add(1);\n        \n        return result;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the example given in the problem\n        List<Integer> result = solution.getOddCollatz(5);\n        System.out.println(\"Odd Collatz sequence for n=5: \" + result);\n    }\n}"}
{"task_id": "Java/123", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        while (n != 1) {\n            if (n % 2 != 0) {\n                result.add(n);\n            }\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n        }\n        result.add(1); // Add 1 as it is always included in Collatz sequence\n        \n        Collections.sort(result);\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test case 1\n        int n1 = 5;\n        System.out.println(solution.getOddCollatz(n1)); // Output: [1, 5]\n        \n        // Test case 2\n        int n2 = 10;\n        System.out.println(solution.getOddCollatz(n2)); // Output: [1]\n    }\n}"}
{"task_id": "Java/123", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        Set<Integer> visited = new HashSet<>();\n        visited.add(n);\n        \n        while (n != 1) {\n            if (n % 2 == 0) {\n                n /= 2;\n            } else {\n                n = 3 * n + 1;\n                if (n % 2 != 0) {\n                    visited.add(n);\n                }\n            }\n        }\n        \n        result.addAll(visited);\n        \n        Collections.sort(result);\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test the method with example\n        System.out.println(solution.getOddCollatz(5)); // Output: [1, 5]\n    }\n}"}
{"task_id": "Java/123", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i <= n; i++) {\n            List<Integer> collatzSeq = new ArrayList<>();\n            collatzSeq.add(i);\n            int num = i;\n            \n            while (num != 1) {\n                if (num % 2 == 0) {\n                    num /= 2;\n                } else {\n                    num = 3 * num + 1;\n                }\n                collatzSeq.add(num);\n            }\n            \n            for (int j : collatzSeq) {\n                if (j % 2 != 0 && !result.contains(j)) {\n                    result.add(j);\n                }\n            }\n        }\n        \n        Collections.sort(result);\n        return result;\n    }\n}"}
{"task_id": "Java/124", "generation": "        // Check if the date string is empty\n        if(date == null || date.isEmpty()) {\n            return false;\n        }\n\n        // Split the date string into its components\n        String[] components = date.split(\"-\");\n\n        // Check if the date string has correct number of components\n        if(components.length != 3){\n            return false;\n        }\n\n        // Extract day, month, and year from components\n        int month, day, year;\n        try {\n            month = Integer.parseInt(components[0]);\n            day = Integer.parseInt(components[1]);\n            year = Integer.parseInt(components[2]);\n        } catch (NumberFormatException e) {\n            return false;\n        }\n\n        // Check if month is between 1 and 12\n        if(month < 1 || month > 12) {\n            return false;\n        }\n\n        // Check if day is in valid range based on month\n        if((month == 1 || month == 3 || month == 5 || month == 7 ||\n            month == 8 || month == 10 || month == 12) && (day < 1 || day > 31)) {\n            return false;\n        } else if((month == 4 || month == 6 || month == 9 || month == 11) && (day < 1 || day > 30)) {\n            return false;\n        } else if(month == 2) {\n            if(year % 4 == 0 && (year % 100 != 0 || year % 400 == 0)) {\n                if(day < 1 || day > 29) {\n                    return false;\n                }\n            } else {\n                if(day < 1 || day > 28) {\n                    return false;\n                }\n            }\n        }\n        \n        // Check if year is a positive number\n        if(year < 1) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.validDate(\"03-11-2000\")); // true\n        System.out.println(solution.validDate(\"15-01-2012\")); // false\n        System.out.println(solution.validDate(\"04-0-2040\")); // false\n        System.out.println(solution.validDate(\"06-04-2020\")); // true\n        System.out.println(solution.validDate(\"06/04/2020\")); // false\n    }\n}"}
{"task_id": "Java/124", "generation": "        if(date == null || date.isEmpty()) {\n            return false;\n        }\n        \n        String[] parts = date.split(\"-\");\n        \n        if(parts.length != 3) {\n            return false;\n        }\n        \n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n        \n        if(month < 1 || month > 12) {\n            return false;\n        }\n        \n        if(day < 1 || (day > 31 && (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)) || \n           (day > 30 && (month == 4 || month == 6 || month == 9 || month == 11)) ||\n           (day > 29 && month == 2)) {\n            return false;\n        }\n        \n        return true;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.validDate(\"03-11-2000\")); // true\n        System.out.println(solution.validDate(\"15-01-2012\")); // false\n        System.out.println(solution.validDate(\"04-0-2040\")); // false\n        System.out.println(solution.validDate(\"06-04-2020\")); // true\n        System.out.println(solution.validDate(\"06/04/2020\")); // false\n    }\n}"}
{"task_id": "Java/124", "generation": "        if (date.isEmpty()) {\n            return false;\n        }\n\n        String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n            return false;\n        }\n\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        if (day < 1 || (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) && day > 31 || (month == 4 || month == 6 || month == 9 || month == 11) && day > 30 || (month == 2 && isLeapYear(year) && day > 29) || (month == 2 && !isLeapYear(year) && day > 28)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    // Helper function to check if a year is a leap year\n    private boolean isLeapYear(int year) {\n        if (year % 400 == 0) {\n            return true;\n        } else if (year % 100 == 0) {\n            return false;\n        } else if (year % 4 == 0) {\n            return true;\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.validDate(\"03-11-2000\")); // true\n        System.out.println(solution.validDate(\"15-01-2012\")); // false\n        System.out.println(solution.validDate(\"04-0-2040\")); // false\n        System.out.println(solution.validDate(\"06-04-2020\")); // true\n        System.out.println(solution.validDate(\"06/04/2020\")); // false\n    }\n}"}
{"task_id": "Java/124", "generation": "        if (date.isEmpty()) {\n            return false;\n        }\n\n        String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n            return false;\n        }\n\n        int month = Integer.parseInt(parts[0]);\n        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        if (day < 1 || day > 31) {\n            return false;\n        }\n\n        if ((month == 4 || month == 6 || month == 9 || month == 11) && day > 30) {\n            return false;\n        }\n\n        if (month == 2) {\n            if (day > 29) {\n                return false;\n            }\n            if (year % 4 != 0 && day > 28) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.validDate(\"03-11-2000\")); // true\n        System.out.println(solution.validDate(\"15-01-2012\")); // false\n        System.out.println(solution.validDate(\"04-0-2040\")); // false\n        System.out.println(solution.validDate(\"06-04-2020\")); // true\n        System.out.println(solution.validDate(\"06/04/2020\")); // false\n    }\n}"}
{"task_id": "Java/124", "generation": "        // Check if the date string is not empty\n        if (date == null || date.isEmpty()) {\n            return false;\n        }\n\n        // Check if the date format is correct\n        if (!date.matches(\"\\\\d{2}-\\\\d{2}-\\\\d{4}\")) {\n            return false;\n        }\n\n        // Extract month, day and year from the date string\n        String[] dateParts = date.split(\"-\");\n        int month = Integer.parseInt(dateParts[0]);\n        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\n        // Check if the month is valid\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        // Check if the day is valid based on the month\n        if (day < 1 || day > 31) {\n            return false;\n        }\n\n        if ((month == 4 || month == 6 || month == 9 || month == 11) && day > 30) {\n            return false;\n        }\n\n        if (month == 2) {\n            if (year % 4 == 0) {\n                if (day > 29) {\n                    return false;\n                }\n            } else {\n                if (day > 28) {\n                    return false;\n                }\n            }\n        }\n\n        // All checks passed, date is valid\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.validDate(\"03-11-2000\")); // true\n        System.out.println(solution.validDate(\"15-01-2012\")); // false\n        System.out.println(solution.validDate(\"04-0-2040\")); // false\n        System.out.println(solution.validDate(\"06-04-2020\")); // true\n        System.out.println(solution.validDate(\"06/04/2020\")); // false\n    }\n}"}
{"task_id": "Java/125", "generation": "        List<String> result = new ArrayList<>();\n        if (txt.contains(\" \")) {\n            result = Arrays.asList(txt.split(\"\\\\s+\"));\n        } else if (txt.contains(\",\")) {\n            result = Arrays.asList(txt.split(\",\"));\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c)) {\n                    if ((c - 'a') % 2 != 0) {\n                        count++;\n                    }\n                }\n            }\n            return count;\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.splitWords(\"Hello world!\"));\n        System.out.println(solution.splitWords(\"Hello,world!\"));\n        System.out.println(solution.splitWords(\"abcdef\"));\n    }\n}"}
{"task_id": "Java/125", "generation": "        List<String> result = new ArrayList<>();\n        String[] words = txt.split(\"\\\\s+\");\n        \n        for (String word : words) {\n            if (word.contains(\",\")) {\n                String[] splitWords = word.split(\",\");\n                result.addAll(Arrays.asList(splitWords));\n            } else {\n                result.add(word);\n            }\n        }\n        \n        if (result.size() == 1 && result.get(0).equals(txt)) {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && ((int)c - 'a') % 2 != 0) {\n                    count++;\n                }\n            }\n            return count;\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.splitWords(\"Hello world!\")); // [\"Hello\", \"world!\"]\n        System.out.println(solution.splitWords(\"Hello,world!\")); // [\"Hello\", \"world!\"]\n        System.out.println(solution.splitWords(\"abcdef\")); // 3\n    }\n}"}
{"task_id": "Java/125", "generation": "        List<String> wordsList = new ArrayList<>();\n        boolean containsWhitespace = txt.contains(\" \");\n        boolean containsComma = txt.contains(\",\");\n\n        if (containsWhitespace) {\n            String[] words = txt.split(\" \");\n            wordsList.addAll(Arrays.asList(words));\n        } else if (containsComma) {\n            String[] words = txt.split(\",\");\n            wordsList.addAll(Arrays.asList(words));\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c)) {\n                    int index = (int) (c - 'a');\n                    if (index % 2 != 0) {\n                        count++;\n                    }\n                }\n            }\n            return count;\n        }\n\n        return wordsList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.splitWords(\"Hello world!\")); // Output: [\"Hello\", \"world!\"]\n        System.out.println(solution.splitWords(\"Hello,world!\")); // Output: [\"Hello\", \"world!\"]\n        System.out.println(solution.splitWords(\"abcdef\")); // Output: 3\n    }\n}"}
{"task_id": "Java/125", "generation": "        List<String> result = new ArrayList<>();\n        \n        // Check if the text contains whitespace\n        if (txt.contains(\" \")) {\n            result = Arrays.asList(txt.split(\" \"));\n        }\n        // Check if the text contains commas\n        else if (txt.contains(\",\")) {\n            result = Arrays.asList(txt.split(\",\"));\n        }\n        // Otherwise count number of lowercase letters with odd order in the alphabet\n        else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c)) {\n                    int asciiValue = (int) c;\n                    if ((asciiValue - 97) % 2 != 0) {\n                        count++;\n                    }\n                }\n            }\n            return count;\n        }\n        \n        return result;\n    }\n} \n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.splitWords(\"Hello world!\")); // [\"Hello\", \"world!\"]\n        System.out.println(solution.splitWords(\"Hello,world!\")); // [\"Hello\", \"world!\"]\n        System.out.println(solution.splitWords(\"abcdef\")); // 3\n    }\n}"}
{"task_id": "Java/125", "generation": "        List<String> words = new ArrayList<>();\n        if (txt.contains(\" \")) {\n            String[] splitBySpace = txt.split(\" \");\n            words.addAll(Arrays.asList(splitBySpace));\n        } else if (txt.contains(\",\")) {\n            String[] splitByComma = txt.split(\",\");\n            words.addAll(Arrays.asList(splitByComma));\n        } else {\n            int oddLowercaseCount = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && (c - 'a') % 2 != 0) {\n                    oddLowercaseCount++;\n                }\n            }\n            return oddLowercaseCount;\n        }\n        return words;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.splitWords(\"Hello world!\")); // [\"Hello\", \"world!\"]\n        System.out.println(solution.splitWords(\"Hello,world!\")); // [\"Hello\", \"world!\"]\n        System.out.println(solution.splitWords(\"abcdef\")); // 3\n    }\n}"}
{"task_id": "Java/126", "generation": "        Set<Integer> set = new HashSet<>();\n        \n        for (int i = 0; i < lst.size(); i++) {\n            if (set.contains(lst.get(i))) {\n                return false;\n            }\n            set.add(lst.get(i));\n            \n            if (i > 0 && lst.get(i) < lst.get(i - 1)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.isSorted(Arrays.asList(5))); // true\n        System.out.println(solution.isSorted(Arrays.asList(1, 2, 3, 4, 5))); // true\n        System.out.println(solution.isSorted(Arrays.asList(1, 3, 2, 4, 5))); // false\n        System.out.println(solution.isSorted(Arrays.asList(1, 2, 3, 4, 5, 6))); // true\n        System.out.println(solution.isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7))); // true\n        System.out.println(solution.isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7))); // false\n        System.out.println(solution.isSorted(Arrays.asList(1, 2, 2, 3, 3, 4))); // true\n        System.out.println(solution.isSorted(Arrays.asList(1, 2, 2, 2, 3, 4))); // false\n    }\n}"}
{"task_id": "Java/126", "generation": "        // Check for duplicates\n        Set<Integer> set = new HashSet<>();\n        for (int num : lst) {\n            if (set.contains(num)) {\n                return false;\n            }\n            set.add(num);\n        }\n        \n        // Check if list is sorted in ascending order\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < lst.get(i - 1)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}"}
{"task_id": "Java/126", "generation": "        Set<Integer> set = new HashSet<>();\n        \n        int prev = Integer.MIN_VALUE;\n        for (int num : lst) {\n            if (num < prev) {\n                return false;\n            }\n            if (!set.add(num)) {\n                return false;\n            }\n            prev = num;\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        \n        System.out.println(sol.isSorted(Arrays.asList(5))); // true\n        System.out.println(sol.isSorted(Arrays.asList(1, 2, 3, 4, 5))); // true\n        System.out.println(sol.isSorted(Arrays.asList(1, 3, 2, 4, 5))); // false\n        System.out.println(sol.isSorted(Arrays.asList(1, 2, 3, 4, 5, 6))); // true\n        System.out.println(sol.isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7))); // true\n        System.out.println(sol.isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7))); // false\n        System.out.println(sol.isSorted(Arrays.asList(1, 2, 2, 3, 3, 4))); // true\n        System.out.println(sol.isSorted(Arrays.asList(1, 2, 2, 2, 3, 4))); // false\n    }\n}"}
{"task_id": "Java/126", "generation": "        // Check if the list is empty or has only 1 element\n        if (lst.size() <= 1) {\n            return true;\n        }\n\n        boolean sorted = true;\n        int prev = lst.get(0);\n        int duplicateCount = 1;\n\n        for (int i = 1; i < lst.size(); i++) {\n            int current = lst.get(i);\n\n            // Check if current number is equal to previous number\n            if (current == prev) {\n                duplicateCount++;\n\n                // If more than 1 duplicate, list is not sorted\n                if (duplicateCount > 1) {\n                    sorted = false;\n                    break;\n                }\n            } else {\n                duplicateCount = 1;\n                \n                // If current number is smaller than previous, list is not sorted\n                if (current < prev) {\n                    sorted = false;\n                    break;\n                }\n            }\n\n            prev = current;\n        }\n\n        return sorted;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.isSorted(Arrays.asList(5))); // true\n        System.out.println(solution.isSorted(Arrays.asList(1, 2, 3, 4, 5))); // true\n        System.out.println(solution.isSorted(Arrays.asList(1, 3, 2, 4, 5))); // false\n        System.out.println(solution.isSorted(Arrays.asList(1, 2, 3, 4, 5, 6))); // true\n        System.out.println(solution.isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7))); // true\n        System.out.println(solution.isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7))); // false\n        System.out.println(solution.isSorted(Arrays.asList(1, 2, 2, 3, 3, 4))); // true\n        System.out.println(solution.isSorted(Arrays.asList(1, 2, 2, 2, 3, 4))); // false\n    }\n}"}
{"task_id": "Java/126", "generation": "        Map<Integer, Integer> map = new HashMap<>();\n        for (int num : lst) {\n            map.put(num, map.getOrDefault(num, 0) + 1);\n            if (map.get(num) > 1) {\n                return false;\n            }\n        }\n        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i) > lst.get(i + 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.isSorted(Arrays.asList(5))); // true\n        System.out.println(solution.isSorted(Arrays.asList(1, 2, 3, 4, 5))); // true\n        System.out.println(solution.isSorted(Arrays.asList(1, 3, 2, 4, 5))); // false\n        System.out.println(solution.isSorted(Arrays.asList(1, 2, 3, 4, 5, 6))); // true\n        System.out.println(solution.isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7))); // true\n        System.out.println(solution.isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7))); // false\n        System.out.println(solution.isSorted(Arrays.asList(1, 2, 2, 3, 3, 4))); // true\n        System.out.println(solution.isSorted(Arrays.asList(1, 2, 2, 2, 3, 4))); // false\n    }\n}"}
{"task_id": "Java/127", "generation": "        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n\n        // Check if the intervals intersect\n        if (start1 > end2 || start2 > end1) {\n            return \"NO\"; // No intersection\n        }\n\n        // Find the length of the intersection\n        int intersectionStart = Math.max(start1, start2);\n        int intersectionEnd = Math.min(end1, end2);\n        int intersectionLength = intersectionEnd - intersectionStart + 1;\n\n        // Check if the length of the intersection is a prime number\n        if (isPrime(intersectionLength)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    // Helper method to check if a number is prime\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> interval1 = Arrays.asList(1, 2);\n        List<Integer> interval2 = Arrays.asList(2, 3);\n        System.out.println(solution.intersection(interval1, interval2)); // NO\n\n        interval1 = Arrays.asList(-1, 1);\n        interval2 = Arrays.asList(0, 4);\n        System.out.println(solution.intersection(interval1, interval2)); // NO\n\n        interval1 = Arrays.asList(-3, -1);\n        interval2 = Arrays.asList(-5, 5);\n        System.out.println(solution.intersection(interval1, interval2)); // YES\n    }\n}"}
{"task_id": "Java/127", "generation": "        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n\n        if (start1 > end2 || start2 > end1) {\n            return \"NO\";\n        }\n\n        int intersectionStart = Math.max(start1, start2);\n        int intersectionEnd = Math.min(end1, end2);\n        int length = intersectionEnd - intersectionStart + 1;\n\n        if (isPrime(length)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> interval1 = Arrays.asList(1, 2);\n        List<Integer> interval2 = Arrays.asList(2, 3);\n        System.out.println(solution.intersection(interval1, interval2)); // Should return \"NO\"\n\n        interval1 = Arrays.asList(-1, 1);\n        interval2 = Arrays.asList(0, 4);\n        System.out.println(solution.intersection(interval1, interval2)); // Should return \"NO\"\n\n        interval1 = Arrays.asList(-3, -1);\n        interval2 = Arrays.asList(-5, 5);\n        System.out.println(solution.intersection(interval1, interval2)); // Should return \"YES\"\n    }\n}"}
{"task_id": "Java/127", "generation": "        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n        \n        int intersectionStart = Math.max(start1, start2);\n        int intersectionEnd = Math.min(end1, end2);\n        \n        if (intersectionStart > intersectionEnd) {\n            return \"NO\";\n        } else {\n            int length = intersectionEnd - intersectionStart;\n            if (isPrime(length)) {\n                return \"YES\";\n            } else {\n                return \"NO\";\n            }\n        }\n    }\n    \n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n// Test cases\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> interval1 = new ArrayList<>(Arrays.asList(1, 2));\n        List<Integer> interval2 = new ArrayList<>(Arrays.asList(2, 3));\n        System.out.println(solution.intersection(interval1, interval2)); // \"NO\"\n        \n        interval1 = new ArrayList<>(Arrays.asList(-1, 1));\n        interval2 = new ArrayList<>(Arrays.asList(0, 4));\n        System.out.println(solution.intersection(interval1, interval2)); // \"NO\"\n        \n        interval1 = new ArrayList<>(Arrays.asList(-3, -1));\n        interval2 = new ArrayList<>(Arrays.asList(-5, 5));\n        System.out.println(solution.intersection(interval1, interval2)); // \"YES\"\n    }\n}"}
{"task_id": "Java/127", "generation": "        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n\n        int intersectionStart = Math.max(start1, start2);\n        int intersectionEnd = Math.min(end1, end2);\n\n        if (intersectionStart > intersectionEnd) {\n            return \"NO\";\n        }\n\n        int length = intersectionEnd - intersectionStart;\n\n        if (isPrime(length)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> interval1 = Arrays.asList(1, 2);\n        List<Integer> interval2 = Arrays.asList(2, 3);\n        System.out.println(solution.intersection(interval1, interval2));\n\n        interval1 = Arrays.asList(-1, 1);\n        interval2 = Arrays.asList(0, 4);\n        System.out.println(solution.intersection(interval1, interval2));\n\n        interval1 = Arrays.asList(-3, -1);\n        interval2 = Arrays.asList(-5, 5);\n        System.out.println(solution.intersection(interval1, interval2));\n    }\n}"}
{"task_id": "Java/127", "generation": "        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n\n        int start = Math.max(start1, start2);\n        int end = Math.min(end1, end2);\n\n        if (start > end) {\n            return \"NO\";\n        }\n\n        int length = end - start + 1;\n\n        if (isPrime(length)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n\n    // Helper function to check if a number is prime\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.intersection(Arrays.asList(1, 2), Arrays.asList(2, 3))); // \"NO\"\n        System.out.println(solution.intersection(Arrays.asList(-1, 1), Arrays.asList(0, 4))); // \"NO\"\n        System.out.println(solution.intersection(Arrays.asList(-3, -1), Arrays.asList(-5, 5))); // \"YES\"\n    }\n}"}
{"task_id": "Java/128", "generation": "        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int product = 1;\n        int sum = 0;\n\n        for (int num : arr) {\n            product *= num == 0 ? 0 : num / Math.abs(num);\n            sum += Math.abs(num);\n        }\n\n        return Optional.of(product * sum);\n    }\n}"}
{"task_id": "Java/128", "generation": "        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        int product = 1;\n        int sum = 0;\n\n        for (int num : arr) {\n            if (num > 0) {\n                product *= 1;\n            } else if (num < 0) {\n                product *= -1;\n            } else {\n                product *= 0;\n            }\n\n            sum += Math.abs(num);\n        }\n\n        return Optional.of(product * sum);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.prodSigns(Arrays.asList(1, 2, 2, -4))); // Output: -9\n        System.out.println(solution.prodSigns(Arrays.asList(0, 1))); // Output: 0\n        System.out.println(solution.prodSigns(Arrays.asList())); // Output: Optional.empty\n    }\n}"}
{"task_id": "Java/128", "generation": "        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int product = 1;\n        int sum = 0;\n\n        for (int num : arr) {\n            product *= num == 0 ? 0 : num / Math.abs(num);\n            sum += Math.abs(num);\n        }\n\n        return Optional.of(product * sum);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> arr1 = Arrays.asList(1, 2, 2, -4);\n        List<Integer> arr2 = Arrays.asList(0, 1);\n        List<Integer> arr3 = new ArrayList<>();\n\n        System.out.println(solution.prodSigns(arr1).orElse(null)); // Output: -9\n        System.out.println(solution.prodSigns(arr2).orElse(null)); // Output: 0\n        System.out.println(solution.prodSigns(arr3).orElse(null)); // Output: None\n    }\n}"}
{"task_id": "Java/128", "generation": "        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        int product = 1;\n        int sum = 0;\n        \n        for (int num : arr) {\n            if (num > 0) {\n                product *= 1;\n            } else if (num < 0) {\n                product *= -1;\n            }\n            \n            sum += Math.abs(num);\n        }\n        \n        return Optional.of(product * sum);\n    }\n}"}
{"task_id": "Java/128", "generation": "        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n\n        int signProduct = 1;\n        int sumOfMagnitudes = 0;\n\n        for (int num : arr) {\n            if (num > 0) {\n                signProduct *= 1;\n            } else if (num < 0) {\n                signProduct *= -1;\n            }\n\n            sumOfMagnitudes += Math.abs(num);\n        }\n\n        return Optional.of(signProduct * sumOfMagnitudes);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> arr1 = Arrays.asList(1, 2, 2, -4);\n        System.out.println(solution.prodSigns(arr1)); // Output: -9\n\n        List<Integer> arr2 = Arrays.asList(0, 1);\n        System.out.println(solution.prodSigns(arr2)); // Output: 0\n\n        List<Integer> arr3 = Arrays.asList();\n        System.out.println(solution.prodSigns(arr3)); // Output: None\n    }\n}"}
{"task_id": "Java/129", "generation": "        int n = grid.size();\n        int[][] dirs = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}}; // Possible directions to move\n\n        PriorityQueue<Node> pq = new PriorityQueue<>((a, b) -> a.val - b.val); // Priority queue to store nodes\n\n        // Initialize the priority queue with all possible starting points\n        for (int i = 0; i < n; i++) {\n            pq.offer(new Node(grid.get(i).get(0), i, 0, new ArrayList<>(Arrays.asList(grid.get(i).get(0))));\n        }\n\n        HashSet<String> visited = new HashSet<>(); // Set to keep track of visited nodes\n\n        while (k > 0) {\n            Node curr = pq.poll(); // Get the node with the smallest value\n            k--;\n\n            for (int[] dir : dirs) {\n                int newX = curr.row + dir[0];\n                int newY = curr.col + dir[1];\n\n                if (newX >= 0 && newX < n && newY >= 0 && newY < n) {\n                    String key = newX + \",\" + newY;\n\n                    // Check if the new cell has been visited before\n                    if (!visited.contains(key)) {\n                        List<Integer> newPath = new ArrayList<>(curr.path);\n                        newPath.add(grid.get(newX).get(newY));\n                        pq.offer(new Node(grid.get(newX).get(newY), newX, newY, newPath);\n                        visited.add(key);\n                    }\n                }\n            }\n        }\n\n        return pq.poll().path;\n    }\n\n    class Node {\n        int val;\n        int row;\n        int col;\n        List<Integer> path;\n\n        public Node(int val, int row, int col, List<Integer> path) {\n            this.val = val;\n            this.row = row;\n            this.col = col;\n            this.path = path;\n        }\n    }\n}"}
{"task_id": "Java/129", "generation": "        List<Integer> result = new ArrayList<>();\n        if (grid == null || grid.size() == 0 || k <= 0) {\n            return result;\n        }\n        \n        int n = grid.size();\n        int minRow = 0, minCol = 0;\n        for (int i = 1; i <= k; i++) {\n            result.add(grid.get(minRow).get(minCol));\n            if (i % 2 == 1) {\n                if (minCol == n - 1) {\n                    minRow++;\n                } else {\n                    minCol++;\n                }\n            } else {\n                if (minRow == n - 1) {\n                    minCol++;\n                } else {\n                    minRow++;\n                }\n            }\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/129", "generation": "        int n = grid.size();\n        int m = grid.get(0).size();\n        \n        // Initialize a priority queue to store the possible paths\n        PriorityQueue<Path> pq = new PriorityQueue<>((a, b) -> {\n            for (int i = 0; i < k; i++) {\n                if (a.path.get(i) != b.path.get(i)) {\n                    return a.path.get(i) - b.path.get(i);\n                }\n            }\n            return 0;\n        });\n        \n        // Initialize the starting point\n        pq.offer(new Path(new ArrayList<>(Arrays.asList(grid.get(0).get(0))), 0, 0, 0));\n        \n        // Initialize a visited set to avoid duplicating paths\n        Set<String> visited = new HashSet<>();\n        \n        while (!pq.isEmpty()) {\n            Path curr = pq.poll();\n            \n            if (curr.len == k) {\n                return curr.path;\n            }\n            \n            String key = curr.row + \"-\" + curr.col + \"-\" + curr.len;\n            if (visited.contains(key)) {\n                continue;\n            }\n            visited.add(key);\n            \n            // Add the neighbors of the current cell to the queue\n            for (int[] dir : new int[][] {{1, 0}, {0, 1}, {-1, 0}, {0, -1}}) {\n                int nextRow = curr.row + dir[0];\n                int nextCol = curr.col + dir[1];\n                \n                if (nextRow >= 0 && nextRow < n && nextCol >= 0 && nextCol < m) {\n                    List<Integer> nextPath = new ArrayList<>(curr.path);\n                    nextPath.add(grid.get(nextRow).get(nextCol));\n                    \n                    pq.offer(new Path(nextPath, nextRow, nextCol, curr.len + 1));\n                }\n            }\n        }\n        \n        return new ArrayList<>();\n    }\n}\n\nclass Path {\n    List<Integer> path;\n    int row;\n    int col;\n    int len;\n    \n    public Path(List<Integer> path, int row, int col, int len) {\n        this.path = path;\n        this.row = row;\n        this.col = col;\n        this.len = len;\n    }\n}"}
{"task_id": "Java/129", "generation": "        int n = grid.size();\n        if (n == 0) {\n            return new ArrayList<>();\n        }\n\n        int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n        PriorityQueue<Node> pq = new PriorityQueue<>();\n        Set<String> visited = new HashSet<>();\n\n        pq.offer(new Node(0, 0, grid.get(0).get(0), Arrays.asList(grid.get(0).get(0)), 0));\n        visited.add(\"0,0\");\n\n        while (!pq.isEmpty()) {\n            Node curr = pq.poll();\n\n            if (curr.path.size() == k) {\n                return curr.path;\n            }\n\n            for (int[] dir : directions) {\n                int newRow = curr.row + dir[0];\n                int newCol = curr.col + dir[1];\n\n                if (newRow >= 0 && newRow < n && newCol >= 0 && newCol < n && !visited.contains(newRow + \",\" + newCol)) {\n                    List<Integer> newPath = new ArrayList<>(curr.path);\n                    newPath.add(grid.get(newRow).get(newCol));\n                    pq.offer(new Node(newRow, newCol, grid.get(newRow).get(newCol), newPath, curr.moves + 1));\n                    visited.add(newRow + \",\" + newCol);\n                }\n            }\n        }\n\n        return new ArrayList<>();\n    }\n\n    class Node implements Comparable<Node> {\n        int row;\n        int col;\n        int value;\n        List<Integer> path;\n        int moves;\n\n        public Node(int row, int col, int value, List<Integer> path, int moves) {\n            this.row = row;\n            this.col = col;\n            this.value = value;\n            this.path = path;\n            this.moves = moves;\n        }\n\n        @Override\n        public int compareTo(Node other) {\n            return this.path.compareTo(other.path);\n        }\n    }\n}"}
{"task_id": "Java/129", "generation": "        int n = grid.size();\n        int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n        \n        PriorityQueue<Cell> pq = new PriorityQueue<>(new Comparator<Cell>() {\n            @Override\n            public int compare(Cell c1, Cell c2) {\n                return grid.get(c1.x).get(c1.y) - grid.get(c2.x).get(c2.y);\n            }\n        });\n        \n        for (int i = 0; i < n; i++) {\n            pq.offer(new Cell(i, 0));\n            pq.offer(new Cell(i, n-1));\n            pq.offer(new Cell(0, i));\n            pq.offer(new Cell(n-1, i));\n        }\n        \n        while (k > 1) {\n            Cell cell = pq.poll();\n            for (int[] dir : directions) {\n                int x = cell.x + dir[0];\n                int y = cell.y + dir[1];\n                if (x >= 0 && x < n && y >= 0 && y < n) {\n                    pq.offer(new Cell(x, y));\n                }\n            }\n            k--;\n        }\n        \n        List<Integer> path = new ArrayList<>();\n        Cell finalCell = pq.poll();\n        path.add(grid.get(finalCell.x).get(finalCell.y));\n        \n        return path;\n    }\n    \n    static class Cell {\n        int x;\n        int y;\n        \n        public Cell(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n    }\n}"}
{"task_id": "Java/130", "generation": "        List<Integer> tribonacci = new ArrayList<>();\n        \n        tribonacci.add(3);\n        if (n == 0) return tribonacci;\n        \n        if (n >= 1) tribonacci.add(1);\n        if (n == 1) return tribonacci;\n        \n        for (int i = 2; i <= n; i++) {\n            int triValue;\n            if (i % 2 == 0) {\n                triValue = 1 + i / 2;\n            } else {\n                triValue = tribonacci.get(i - 1) + tribonacci.get(i - 2) + tribonacci.get(i + 1);\n            }\n            tribonacci.add(triValue);\n        }\n        \n        return tribonacci;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the tri method\n        System.out.println(solution.tri(3)); // [3, 1, 2, 8]\n        System.out.println(solution.tri(5)); // [3, 1, 2, 8, 3, 9]\n    }\n}"}
{"task_id": "Java/130", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        if (n == 0) {\n            result.add(0);\n        } else if (n == 1) {\n            result.add(1);\n        } else if (n == 2) {\n            result.add(1);\n            result.add(1);\n        } else {\n            result.add(1);\n            result.add(1);\n            result.add(3);\n            \n            for (int i = 3; i <= n; i++) {\n                if (i % 2 == 0) {\n                    result.add(1 + i / 2);\n                } else {\n                    result.add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n                }\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        System.out.println(sol.tri(3)); // Output: [1, 3, 2, 8]\n    }\n}"}
{"task_id": "Java/130", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        // Base case\n        if (n == 0) {\n            return result;\n        }\n        \n        // Initialize the first three elements of the Tribonacci sequence\n        result.add(0);\n        result.add(1);\n        result.add(1);\n        \n        // Calculate the rest of the Tribonacci sequence\n        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(1 + i / 2);\n            } else {\n                result.add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n            }\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/130", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        // Base case\n        if (n == 0) {\n            result.add(0);\n            return result;\n        }\n        if (n == 1) {\n            result.add(1);\n            return result;\n        }\n        if (n == 2) {\n            result.add(2);\n            return result;\n        }\n        if (n == 3) {\n            result.add(1);\n            result.add(3);\n            result.add(2);\n            return result;\n        }\n        \n        // Initialize the sequence\n        int[] sequence = new int[n+1];\n        sequence[0] = 0;\n        sequence[1] = 1;\n        sequence[2] = 2;\n        sequence[3] = 1;\n        \n        // Generate the rest of the sequence\n        for (int i = 4; i <= n; i++) {\n            if (i % 2 == 0) {\n                sequence[i] = 1 + i / 2;\n            } else {\n                sequence[i] = sequence[i - 1] + sequence[i - 2] + sequence[i + 1];\n            }\n        }\n        \n        // Add the sequence to the result list\n        for (int num : sequence) {\n            result.add(num);\n        }\n        \n        return result;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.tri(3)); // [0, 1, 2]\n        System.out.println(solution.tri(4)); // [0, 1, 2, 2, 4]\n        System.out.println(solution.tri(5)); // [0, 1, 2, 2, 4, 5]\n    }\n}"}
{"task_id": "Java/130", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        if (n == 0) {\n            return result;\n        }\n        \n        result.add(3);\n        if (n >= 1) {\n            result.add(1 + n / 2);\n        }\n        \n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(1 + i / 2);\n            } else {\n                result.add(result.get(i - 1) + result.get(i - 2) + result.get(i + 1));\n            }\n        }\n        \n        return result;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.tri(3)); // [1, 3, 2, 8]\n    }\n}"}
{"task_id": "Java/131", "generation": "        int product = 1;\n        \n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                product *= digit;\n            }\n            n /= 10;\n        }\n        \n        if (product == 1) {\n            return 0;\n        }\n        \n        return product;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.digits(1)); // 1\n        System.out.println(solution.digits(4)); // 0\n        System.out.println(solution.digits(235)); // 15\n    }\n}"}
{"task_id": "Java/131", "generation": "        int product = 1;\n        \n        while(n > 0) {\n            int digit = n % 10;\n            if(digit % 2 != 0) {\n                product *= digit;\n            }\n            n /= 10;\n        }\n        \n        if(product == 1) {\n            return 0;\n        }\n        \n        return product;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.digits(1)); // 1\n        System.out.println(solution.digits(4)); // 0\n        System.out.println(solution.digits(235)); // 15\n    }\n}"}
{"task_id": "Java/131", "generation": "        String numString = String.valueOf(n);\n        int product = 1;\n        \n        for (int i = 0; i < numString.length(); i++) {\n            int digit = Character.getNumericValue(numString.charAt(i));\n            if (digit % 2 != 0) {\n                product *= digit;\n            }\n        }\n        \n        if (product == 1) {\n            return 0;\n        } else {\n            return product;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.digits(1)); // 1\n        System.out.println(solution.digits(4)); // 0\n        System.out.println(solution.digits(235)); // 15\n    }\n}"}
{"task_id": "Java/131", "generation": "        String numStr = Integer.toString(n);\n        int product = 1;\n        \n        for (int i = 0; i < numStr.length(); i++) {\n            int digit = Character.getNumericValue(numStr.charAt(i));\n            if (digit % 2 != 0) {\n                product *= digit;\n            }\n        }\n        \n        if (product == 1) {\n            return 0;\n        } else {\n            return product;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.digits(1));    // 1\n        System.out.println(solution.digits(4));    // 0\n        System.out.println(solution.digits(235));  // 15\n    }\n}"}
{"task_id": "Java/131", "generation": "        // Initialize result variable to store the product of odd digits\n        int result = 1;\n        \n        // Loop through each digit of the number\n        while (n > 0) {\n            // Get the last digit of the number\n            int digit = n % 10;\n            \n            // If the digit is odd, multiply it with the result\n            if (digit % 2 != 0) {\n                result *= digit;\n            }\n            \n            // Remove the last digit from the number\n            n /= 10;\n        }\n        \n        // If the result is still 1, it means all digits were even, return 0\n        if (result == 1) {\n            return 0;\n        }\n        \n        // Return the product of odd digits\n        return result;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.digits(1));   // Output: 1\n        System.out.println(solution.digits(4));   // Output: 0\n        System.out.println(solution.digits(235)); // Output: 15\n    }\n}"}
{"task_id": "Java/132", "generation": "        Stack<Character> stack = new Stack<>();\n\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']' && !stack.isEmpty()) {\n                char top = stack.pop();\n                if (top == '[') {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n}"}
{"task_id": "Java/132", "generation": "        Stack<Character> stack = new Stack<>();\n        \n        for(char c : string.toCharArray()) {\n            if(c == '[') {\n                stack.push(c);\n            } else if(c == ']' && !stack.isEmpty()) {\n                if(stack.peek() == '[') {\n                    return true;\n                }\n            }\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.isNested(\"[[]]\")); // true\n        System.out.println(solution.isNested(\"[]]]]]]][[[[[]\")); // false\n        System.out.println(solution.isNested(\"[][]\")); // false\n        System.out.println(solution.isNested(\"[]\")); // false\n        System.out.println(solution.isNested(\"[[][]]\")); // true\n        System.out.println(solution.isNested(\"[[]][[\")); // true\n    }\n}"}
{"task_id": "Java/132", "generation": "        Stack<Character> stack = new Stack<>();\n\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (!stack.isEmpty() && stack.peek() == '[') {\n                    stack.pop();\n                }\n            }\n        }\n\n        return stack.size() > 1;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.isNested(\"[[]]\")); // true\n        System.out.println(solution.isNested(\"[]]]]]]][[[[[]\")); // false\n        System.out.println(solution.isNested(\"[][]\")); // false\n        System.out.println(solution.isNested(\"[]\")); // false\n        System.out.println(solution.isNested(\"[[][]]\")); // true\n        System.out.println(solution.isNested(\"[[]][[\")); // true\n    }\n}"}
{"task_id": "Java/132", "generation": "        Stack<Character> stack = new Stack<>();\n\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (!stack.isEmpty() && stack.peek() == '[') {\n                    stack.pop();\n                } else {\n                    stack.push(c);\n                }\n            }\n        }\n\n        return stack.size() < string.length() && stack.size() > 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.isNested(\"[[]]\")); // true\n        System.out.println(solution.isNested(\"[]]]]]]][[[[[]\")); // false\n        System.out.println(solution.isNested(\"[][]\")); // false\n        System.out.println(solution.isNested(\"[]\")); // false\n        System.out.println(solution.isNested(\"[[][]]\")); // true\n        System.out.println(solution.isNested(\"[[]][[\")); // true\n    }\n}"}
{"task_id": "Java/132", "generation": "        Stack<Character> stack = new Stack<>();\n\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (!stack.isEmpty() && stack.peek() == '[') {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.isNested(\"[[]]\")); // true\n        System.out.println(solution.isNested(\"[]]]]]]][[[[[]\")); // false\n        System.out.println(solution.isNested(\"[][]\")); // false\n        System.out.println(solution.isNested(\"[]\")); // false\n        System.out.println(solution.isNested(\"[[][]]\")); // true\n        System.out.println(solution.isNested(\"[[]][[\")); // true\n    }\n}"}
{"task_id": "Java/133", "generation": "        int sum = 0;\n        for (double num : lst) {\n            int roundedNum = (int) Math.ceil(num);\n            sum += roundedNum * roundedNum;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Double> lst1 = Arrays.asList(1.0, 2.0, 3.0);\n        List<Double> lst2 = Arrays.asList(1.0, 4.0, 9.0);\n        List<Double> lst3 = Arrays.asList(1.0, 3.0, 5.0, 7.0);\n        List<Double> lst4 = Arrays.asList(1.4, 4.2, 0.0);\n        List<Double> lst5 = Arrays.asList(-2.4, 1.0, 1.0);\n\n        System.out.println(solution.sumSquares(lst1)); // Output should be 14\n        System.out.println(solution.sumSquares(lst2)); // Output should be 98\n        System.out.println(solution.sumSquares(lst3)); // Output should be 84\n        System.out.println(solution.sumSquares(lst4)); // Output should be 29\n        System.out.println(solution.sumSquares(lst5)); // Output should be 6\n    }\n}"}
{"task_id": "Java/133", "generation": "        int sum = 0;\n        \n        for (double num : lst) {\n            int roundedNum = (int)Math.ceil(num);\n            sum += (roundedNum * roundedNum);\n        }\n        \n        return sum;\n    }\n}"}
{"task_id": "Java/133", "generation": "        int sum = 0;\n        for (double num : lst) {\n            int rounded = (int) Math.ceil(num);\n            sum += rounded * rounded;\n        }\n        return sum;\n    }\n}\n\nclass Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Double> lst1 = Arrays.asList(1.0, 2.0, 3.0);\n        System.out.println(solution.sumSquares(lst1)); // Output should be 14\n\n        List<Double> lst2 = Arrays.asList(1.0, 4.0, 9.0);\n        System.out.println(solution.sumSquares(lst2)); // Output should be 98\n\n        List<Double> lst3 = Arrays.asList(1.0, 3.0, 5.0, 7.0);\n        System.out.println(solution.sumSquares(lst3)); // Output should be 84\n\n        List<Double> lst4 = Arrays.asList(1.4, 4.2, 0.0);\n        System.out.println(solution.sumSquares(lst4)); // Output should be 29\n\n        List<Double> lst5 = Arrays.asList(-2.4, 1.0, 1.0);\n        System.out.println(solution.sumSquares(lst5)); // Output should be 6\n    }\n}"}
{"task_id": "Java/133", "generation": "        int sum = 0;\n        for (double num : lst) {\n            sum += Math.ceil(num) * Math.ceil(num);\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/133", "generation": "        // Initialize the sum variable to hold the total sum of squared numbers\n        int sum = 0;\n        \n        // Iterate over each element in the list\n        for (Double num : lst) {\n            // Round the element to the nearest upper integer\n            int roundedNum = (int) Math.ceil(num);\n            // Square the rounded number and add it to the sum\n            sum += roundedNum * roundedNum;\n        }\n        \n        // Return the total sum of squared numbers\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Double> lst1 = Arrays.asList(1.0, 2.0, 3.0);\n        System.out.println(solution.sumSquares(lst1)); // Output: 14\n        \n        List<Double> lst2 = Arrays.asList(1.0, 4.0, 9.0);\n        System.out.println(solution.sumSquares(lst2)); // Output: 98\n        \n        List<Double> lst3 = Arrays.asList(1.0, 3.0, 5.0, 7.0);\n        System.out.println(solution.sumSquares(lst3)); // Output: 84\n        \n        List<Double> lst4 = Arrays.asList(1.4, 4.2, 0.0);\n        System.out.println(solution.sumSquares(lst4)); // Output: 29\n        \n        List<Double> lst5 = Arrays.asList(-2.4, 1.0, 1.0);\n        System.out.println(solution.sumSquares(lst5)); // Output: 6\n    }\n}"}
{"task_id": "Java/134", "generation": "        if (txt.length() == 0) {\n            return false;\n        }\n\n        char lastChar = txt.charAt(txt.length() - 1);\n\n        if(Character.isLetter(lastChar)) {\n            if(txt.endsWith(\" \")) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.checkIfLastCharIsALetter(\"apple pie\")); // false\n        System.out.println(solution.checkIfLastCharIsALetter(\"apple pi e\")); // true\n        System.out.println(solution.checkIfLastCharIsALetter(\"apple pi e \")); // false\n        System.out.println(solution.checkIfLastCharIsALetter(\"\")); // false\n    }\n}"}
{"task_id": "Java/134", "generation": "        if (txt.length() == 0) {\n            return false;\n        }\n        \n        char lastChar = txt.charAt(txt.length() - 1);\n        \n        if (Character.isLetter(lastChar)) {\n            if (txt.length() == 1) {\n                return true;\n            } else {\n                char secondLastChar = txt.charAt(txt.length() - 2);\n                if (Character.isWhitespace(secondLastChar)) {\n                    return true;\n                }\n            }\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.checkIfLastCharIsALetter(\"apple pie\")); // false\n        System.out.println(solution.checkIfLastCharIsALetter(\"apple pi e\")); // true\n        System.out.println(solution.checkIfLastCharIsALetter(\"apple pi e \")); // false\n        System.out.println(solution.checkIfLastCharIsALetter(\"\")); // false\n    }\n}"}
{"task_id": "Java/134", "generation": "        if (txt == null || txt.isEmpty()) {\n            return false;\n        }\n        \n        char lastChar = txt.charAt(txt.length() - 1);\n        \n        if (Character.isLetter(lastChar)) {\n            if (txt.length() == 1) {\n                return true;\n            } else {\n                char secondLastChar = txt.charAt(txt.length() - 2);\n                return Character.isWhitespace(secondLastChar);\n            }\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.checkIfLastCharIsALetter(\"apple pie\")); // false\n        System.out.println(solution.checkIfLastCharIsALetter(\"apple pi e\")); // true\n        System.out.println(solution.checkIfLastCharIsALetter(\"apple pi e \")); // false\n        System.out.println(solution.checkIfLastCharIsALetter(\"\")); // false\n    }\n}"}
{"task_id": "Java/134", "generation": "        if (txt.isEmpty()) {\n            return false;\n        }\n        \n        char lastChar = txt.charAt(txt.length() - 1);\n        \n        if (!Character.isLetter(lastChar)) {\n            return false;\n        }\n        \n        String[] words = txt.split(\" \");\n        if (words.length == 0) {\n            return true;\n        }\n        \n        String lastWord = words[words.length - 1];\n        return !lastWord.contains(String.valueOf(lastChar));\n    }\n}\n\nclass Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.checkIfLastCharIsALetter(\"apple pie\")); // false\n        System.out.println(solution.checkIfLastCharIsALetter(\"apple pi e\")); // true\n        System.out.println(solution.checkIfLastCharIsALetter(\"apple pi e \")); // false\n        System.out.println(solution.checkIfLastCharIsALetter(\"\")); // false\n    }\n}"}
{"task_id": "Java/134", "generation": "        if (txt.length() == 0) {\n            return false;\n        }\n        \n        char lastChar = txt.charAt(txt.length() - 1);\n        \n        if (!Character.isLetter(lastChar)) {\n            return false;\n        }\n        \n        if (txt.lastIndexOf(\" \") < txt.lastIndexOf(lastChar)) {\n            return true;\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.checkIfLastCharIsALetter(\"apple pie\")); // false\n        System.out.println(solution.checkIfLastCharIsALetter(\"apple pi e\")); // true\n        System.out.println(solution.checkIfLastCharIsALetter(\"apple pi e \")); // false\n        System.out.println(solution.checkIfLastCharIsALetter(\"\")); // false\n    }\n}"}
{"task_id": "Java/135", "generation": "        int n = arr.size();\n        int maxIndex = -1;\n        \n        for (int i = 1; i < n; i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                maxIndex = i - 1;\n            }\n        }\n        \n        return maxIndex;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test case 1\n        List<Integer> arr1 = Arrays.asList(1, 2, 4, 3, 5);\n        System.out.println(solution.canArrange(arr1)); // Output should be 3\n        \n        // Test case 2\n        List<Integer> arr2 = Arrays.asList(1, 2, 3);\n        System.out.println(solution.canArrange(arr2)); // Output should be -1\n    }\n}"}
{"task_id": "Java/135", "generation": "        int largestIndex = -1;\n\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                largestIndex = i - 1;\n            }\n        }\n\n        return largestIndex;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.canArrange(Arrays.asList(1,2,4,3,5))); // Output should be 3\n        System.out.println(solution.canArrange(Arrays.asList(1,2,3))); // Output should be -1\n    }\n}"}
{"task_id": "Java/135", "generation": "        int result = -1;\n        \n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                result = i - 1;\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.canArrange(Arrays.asList(1, 2, 4, 3, 5))); // Output should be 3\n        System.out.println(solution.canArrange(Arrays.asList(1, 2, 3))); // Output should be -1\n    }\n}"}
{"task_id": "Java/135", "generation": "        int largestIndex = -1;\n\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                largestIndex = i - 1;\n            }\n        }\n\n        return largestIndex;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Example 1\n        List<Integer> arr1 = Arrays.asList(1, 2, 4, 3, 5);\n        System.out.println(solution.canArrange(arr1)); // Output should be 3\n\n        // Example 2\n        List<Integer> arr2 = Arrays.asList(1, 2, 3);\n        System.out.println(solution.canArrange(arr2)); // Output should be -1\n    }\n}"}
{"task_id": "Java/135", "generation": "        int largestIndex = -1;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                largestIndex = i - 1;\n            }\n        }\n        return largestIndex;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> arr1 = Arrays.asList(1, 2, 4, 3, 5);\n        List<Integer> arr2 = Arrays.asList(1, 2, 3);\n\n        System.out.println(solution.canArrange(arr1)); // Output should be 3\n        System.out.println(solution.canArrange(arr2)); // Output should be -1\n    }\n}"}
{"task_id": "Java/136", "generation": "        List<Optional<Integer>> result = new ArrayList<>();\n        List<Integer> negativeIntegers = new ArrayList<>();\n        List<Integer> positiveIntegers = new ArrayList<>();\n\n        for (int num : lst) {\n            if (num < 0) {\n                negativeIntegers.add(num);\n            } else if (num > 0) {\n                positiveIntegers.add(num);\n            }\n        }\n\n        if (negativeIntegers.isEmpty()) {\n            result.add(Optional.empty());\n        } else {\n            int maxNegative = Collections.max(negativeIntegers);\n            result.add(Optional.of(maxNegative));\n        }\n\n        if (positiveIntegers.isEmpty()) {\n            result.add(Optional.empty());\n        } else {\n            int minPositive = Collections.min(positiveIntegers);\n            result.add(Optional.of(minPositive));\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7))); // (Optional.empty(), Optional.of(1))\n        System.out.println(solution.largestSmallestIntegers(Arrays.asList())); // (Optional.empty(), Optional.empty())\n        System.out.println(solution.largestSmallestIntegers(Arrays.asList(0))); // (Optional.empty(), Optional.empty())\n    }\n}"}
{"task_id": "Java/136", "generation": "        List<Integer> negativeIntegers = new ArrayList<>();\n        List<Integer> positiveIntegers = new ArrayList<>();\n\n        for (Integer num : lst) {\n            if (num < 0) {\n                negativeIntegers.add(num);\n            } else if (num > 0) {\n                positiveIntegers.add(num);\n            }\n        }\n\n        Optional<Integer> largestNegative = negativeIntegers.isEmpty() ? Optional.empty() : Optional.of(Collections.max(negativeIntegers));\n        Optional<Integer> smallestPositive = positiveIntegers.isEmpty() ? Optional.empty() : Optional.of(Collections.min(positiveIntegers));\n\n        return Arrays.asList(largestNegative, smallestPositive);\n    }\n}"}
{"task_id": "Java/136", "generation": "        Optional<Integer> largestNegative = Optional.empty();\n        Optional<Integer> smallestPositive = Optional.empty();\n\n        for (Integer num : lst) {\n            if (num < 0 && (!largestNegative.isPresent() || num > largestNegative.get())) {\n                largestNegative = Optional.of(num);\n            } else if (num > 0 && (!smallestPositive.isPresent() || num < smallestPositive.get())) {\n                smallestPositive = Optional.of(num);\n            }\n        }\n\n        List<Optional<Integer>> result = new ArrayList<>();\n        result.add(largestNegative);\n        result.add(smallestPositive);\n        \n        return result;\n    }\n}"}
{"task_id": "Java/136", "generation": "        List<Integer> negativeIntegers = new ArrayList<>();\n        List<Integer> positiveIntegers = new ArrayList<>();\n\n        for (Integer num : lst) {\n            if (num < 0) {\n                negativeIntegers.add(num);\n            } else if (num > 0) {\n                positiveIntegers.add(num);\n            }\n        }\n\n        Optional<Integer> largestNegative = negativeIntegers.stream().max(Comparator.naturalOrder());\n        Optional<Integer> smallestPositive = positiveIntegers.stream().min(Comparator.naturalOrder());\n\n        return Arrays.asList(largestNegative, smallestPositive);\n    }\n}"}
{"task_id": "Java/136", "generation": "        List<Optional<Integer>> result = new ArrayList<>();\n        \n        Optional<Integer> maxNegative = lst.stream()\n                                    .filter(num -> num < 0)\n                                    .max(Comparator.naturalOrder());\n        \n        Optional<Integer> minPositive = lst.stream()\n                                    .filter(num -> num > 0)\n                                    .min(Comparator.naturalOrder());\n        \n        result.add(maxNegative.isPresent() ? maxNegative : Optional.empty());\n        result.add(minPositive.isPresent() ? minPositive : Optional.empty());\n        \n        return result;\n    }\n}"}
{"task_id": "Java/137", "generation": "        // Convert objects to strings for comparison\n        String strA = a.toString();\n        String strB = b.toString();\n\n        // Check if both strings are numeric\n        if (strA.matches(\"-?\\\\d+(\\\\.\\\\d+)?\") && strB.matches(\"-?\\\\d+(\\\\.\\\\d+)?\")) {\n            // Check if both strings are equal\n            if (Double.parseDouble(strA) == Double.parseDouble(strB)) {\n                return Optional.empty();\n            }\n\n            // Convert strings to doubles for comparison\n            double numA = Double.parseDouble(strA);\n            double numB = Double.parseDouble(strB);\n\n            // Return the larger number as double\n            if (numA > numB) {\n                return Optional.of(numA);\n            } else {\n                return Optional.of(numB);\n            }\n        } else {\n            // Return the larger string\n            if (strA.compareTo(strB) > 0) {\n                return Optional.of(strA);\n            } else if (strB.compareTo(strA) > 0) {\n                return Optional.of(strB);\n            } else {\n                return Optional.empty();\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.compareOne(1, 2.5)); // Optional.of(2.5)\n        System.out.println(solution.compareOne(1, \"2,3\")); // Optional.of(\"2,3\")\n        System.out.println(solution.compareOne(\"5,1\", \"6\")); // Optional.of(\"6\")\n        System.out.println(solution.compareOne(\"1\", 1)); // Optional.empty()\n    }\n}"}
{"task_id": "Java/137", "generation": "        if (a instanceof Integer && b instanceof Integer) {\n            if ((Integer) a > (Integer) b) {\n                return Optional.of(a);\n            } else if ((Integer) b > (Integer) a) {\n                return Optional.of(b);\n            }\n        } else if ((a instanceof Integer && b instanceof Float) || (a instanceof Float && b instanceof Integer) ||\n                (a instanceof Integer && b instanceof String) || (a instanceof String && b instanceof Integer) ||\n                (a instanceof Float && b instanceof String) || (a instanceof String && b instanceof Float)) {\n            float aFloat = a instanceof String ? Float.parseFloat(((String) a).replace(\",\", \".\")) : (float) a;\n            float bFloat = b instanceof String ? Float.parseFloat(((String) b).replace(\",\", \".\")) : (float) b;\n            if (aFloat > bFloat) {\n                return Optional.of(a);\n            } else if (bFloat > aFloat) {\n                return Optional.of(b);\n            }\n        } else if (a instanceof Float && b instanceof Float) {\n            if ((Float) a > (Float) b) {\n                return Optional.of(a);\n            } else if ((Float) b > (Float) a) {\n                return Optional.of(b);\n            }\n        } else if (a instanceof String && b instanceof String) {\n            if (((String) a).replace(\",\", \".\").equals(((String) b).replace(\",\", \".\"))) {\n                return Optional.empty();\n            } else if (Float.parseFloat(((String) a).replace(\",\", \".\")) > Float.parseFloat(((String) b).replace(\",\", \".\"))) {\n                return Optional.of(a);\n            } else {\n                return Optional.of(b);\n            }\n        }\n        return Optional.empty();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.compareOne(1, 2.5));\n        System.out.println(solution.compareOne(1, \"2,3\"));\n        System.out.println(solution.compareOne(\"5,1\", \"6\"));\n        System.out.println(solution.compareOne(\"1\", 1));\n        System.out.println(solution.compareOne(\"2.3\", \"2,3\"));\n        System.out.println(solution.compareOne(3, 3.0));\n    }\n}"}
{"task_id": "Java/137", "generation": "        // Check if both variables are equal\n        if (a.equals(b)) {\n            return Optional.empty();\n        }\n\n        // Compare the variables and return the larger one\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(Math.max((int)a, (int)b));\n        } else if (a instanceof Float && b instanceof Float) {\n            return Optional.of(Math.max((float)a, (float)b));\n        } else if ((a instanceof Float && b instanceof Integer) || (a instanceof Integer && b instanceof Float)) {\n            return Optional.of(Math.max(Float.parseFloat(a.toString().replace(\",\", \".\")), Float.parseFloat(b.toString().replace(\",\", \".\")));\n        } else {\n            return Optional.of(a.toString().compareTo(b.toString()) > 0 ? a : b);\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.compareOne(1, 2.5)); // Optional[2.5]\n        System.out.println(solution.compareOne(1, \"2,3\")); // Optional[\"2,3\"]\n        System.out.println(solution.compareOne(\"5,1\", \"6\")); // Optional[\"6\"]\n        System.out.println(solution.compareOne(\"1\", 1)); // Optional.empty()\n    }\n}"}
{"task_id": "Java/137", "generation": "        if (a instanceof Integer && b instanceof Integer) {\n            int intA = (int) a;\n            int intB = (int) b;\n            if (intA > intB) {\n                return Optional.of(intA);\n            } else if (intA < intB) {\n                return Optional.of(intB);\n            } else {\n                return Optional.empty();\n            }\n        } else if ((a instanceof Integer || a instanceof Float) && (b instanceof Integer || b instanceof Float)) {\n            float floatA = Float.parseFloat(a.toString().replace(\",\", \".\"));\n            float floatB = Float.parseFloat(b.toString().replace(\",\", \".\"));\n            if (floatA > floatB) {\n                return Optional.of(floatA);\n            } else if (floatA < floatB) {\n                return Optional.of(floatB);\n            } else {\n                return Optional.empty();\n            }\n        } else {\n            return Optional.of(b);\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.compareOne(1, 2.5)); // Optional[2.5]\n        System.out.println(solution.compareOne(1, \"2,3\")); // Optional[2,3]\n        System.out.println(solution.compareOne(\"5,1\", \"6\")); // Optional[6]\n        System.out.println(solution.compareOne(\"1\", 1)); // Optional.empty()\n    }\n}"}
{"task_id": "Java/137", "generation": "        if (a instanceof Integer && b instanceof Integer) {\n            Integer intA = (Integer) a;\n            Integer intB = (Integer) b;\n            if (intA > intB) {\n                return Optional.of(intA);\n            } else if (intB > intA) {\n                return Optional.of(intB);\n            } else {\n                return Optional.empty();\n            }\n        } else if (a instanceof Float && b instanceof Float) {\n            Float floatA = (Float) a;\n            Float floatB = (Float) b;\n            if (floatA > floatB) {\n                return Optional.of(floatA);\n            } else if (floatB > floatA) {\n                return Optional.of(floatB);\n            } else {\n                return Optional.empty();\n            }\n        } else if (a instanceof String && b instanceof String) {\n            String strA = (String) a;\n            String strB = (String) b;\n            double doubleA = Double.parseDouble(strA.replace(',', '.'));\n            double doubleB = Double.parseDouble(strB.replace(',', '.'));\n            if (doubleA > doubleB) {\n                return Optional.of(strA);\n            } else if (doubleB > doubleA) {\n                return Optional.of(strB);\n            } else {\n                return Optional.empty();\n            }\n        }\n        return Optional.empty();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.compareOne(1, 2.5)); // Optional[2.5]\n        System.out.println(solution.compareOne(1, \"2,3\")); // Optional[\"2,3\"]\n        System.out.println(solution.compareOne(\"5,1\", \"6\")); // Optional[\"6\"]\n        System.out.println(solution.compareOne(\"1\", 1)); // Optional.empty()\n    }\n}"}
{"task_id": "Java/138", "generation": "        // Check if n can be expressed as sum of 4 even numbers\n        if (n % 2 != 0 || n < 8) {\n            return false;\n        }\n        \n        // Min sum of 4 even numbers for n to be expressed as such is 8\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.isEqualToSumEven(4)); // false\n        System.out.println(solution.isEqualToSumEven(6)); // false\n        System.out.println(solution.isEqualToSumEven(8)); // true\n    }\n}"}
{"task_id": "Java/138", "generation": "        if (n % 2 != 0) {\n            return false;\n        }\n        \n        int count = 0;\n        \n        for (int i = 2; i <= n / 2; i += 2) {\n            if (n - i >= 2 && (n - i) % 2 == 0) {\n                count++;\n            }\n        }\n        \n        return count == 4;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.isEqualToSumEven(4)); // false\n        System.out.println(solution.isEqualToSumEven(6)); // false\n        System.out.println(solution.isEqualToSumEven(8)); // true\n    }\n}"}
{"task_id": "Java/138", "generation": "        // Check if n is less than 8 or odd, it cannot be written as the sum of 4 positive even numbers\n        if (n < 8 || n % 2 != 0) {\n            return false;\n        }\n        \n        // Check if n is a multiple of 4, in which case it can be written as the sum of 4 positive even numbers\n        if (n % 4 == 0) {\n            return true;\n        }\n        \n        // Check if n-4 is a multiple of 4 and greater than 0, in which case it can be written as the sum of 4 positive even numbers\n        if ((n-4) % 4 == 0 && n-4 > 0) {\n            return true;\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.isEqualToSumEven(4)); // false\n        System.out.println(solution.isEqualToSumEven(6)); // false\n        System.out.println(solution.isEqualToSumEven(8)); // true\n    }\n}"}
{"task_id": "Java/138", "generation": "        // Check if n is less than 8, as it needs to be at least 8 to be represented as sum of 4 even numbers\n        if (n < 8) {\n            return false;\n        }\n        \n        // Check if n is divisible by 4 as sum of 4 even numbers will always be divisible by 4\n        if (n % 4 != 0) {\n            return false;\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.isEqualToSumEven(4)); // false\n        System.out.println(solution.isEqualToSumEven(6)); // false\n        System.out.println(solution.isEqualToSumEven(8)); // true\n    }\n}"}
{"task_id": "Java/138", "generation": "        // Return false if n is less than 8 or if n is odd\n        if (n < 8 || n % 2 != 0) {\n            return false;\n        }\n        \n        // Return true if n is a multiple of 4\n        if (n % 4 == 0) {\n            return true;\n        }\n        \n        // Return true if n can be written as the sum of two even numbers\n        for (int i = 1; i <= n / 2; i++) {\n            if (i % 2 == 0 && (n - i) % 2 == 0) {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n}"}
{"task_id": "Java/139", "generation": "        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            long factorial = factorial(i);\n            result *= factorial;\n        }\n        return result;\n    }\n\n    public long factorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int n = 4;\n        System.out.println(solution.specialFactorial(n)); // Output: 288\n    }\n}"}
{"task_id": "Java/139", "generation": "        if (n == 0 || n == 1) {\n            return 1;\n        }\n\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= factorial(i);\n        }\n\n        return result;\n    }\n\n    private long factorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.specialFactorial(4)); // Output: 288\n    }\n}"}
{"task_id": "Java/139", "generation": "      if (n <= 0) {\n            return 0;\n        }\n\n        long result = 1;\n\n        for (int i = n; i > 0; i--) {\n            long factorial = 1;\n            for (int j = i; j > 0; j--) {\n                factorial *= j;\n            }\n            result *= factorial;\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.specialFactorial(4)); // should return 288\n        System.out.println(solution.specialFactorial(0)); // should return 0\n        System.out.println(solution.specialFactorial(1)); // should return 1\n        System.out.println(solution.specialFactorial(5)); // should return 34560\n    }\n}"}
{"task_id": "Java/139", "generation": "        long result = 1;\n        \n        for(int i=1; i<=n; i++){\n            result *= factorial(i);\n        }\n        \n        return result;\n    }\n    \n    public long factorial(int n){\n        long result = 1;\n        \n        for(int i=1; i<=n; i++){\n            result *= i;\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.specialFactorial(4)); // Output should be 288\n    }\n}"}
{"task_id": "Java/139", "generation": "        long result = 1;\n        for (int i = n; i > 0; i--){\n            long factorial = 1;\n            for (int j = i; j > 0; j--){\n                factorial *= j;\n            }\n            result *= factorial;\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.specialFactorial(4)); // Output should be 288\n    }\n}"}
{"task_id": "Java/140", "generation": "        StringBuilder sb = new StringBuilder();\n        boolean prevSpace = false;\n        int spaceCount = 0;\n        \n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            \n            if (c == ' ') {\n                spaceCount++;\n                if (spaceCount > 2) {\n                    if (!prevSpace) {\n                        sb.append(\"-\");\n                        prevSpace = true;\n                    }\n                } else {\n                    if (!prevSpace) {\n                        sb.append(\"_\");\n                        prevSpace = true;\n                    }\n                }\n            } else {\n                sb.append(c);\n                prevSpace = false;\n                spaceCount = 0;\n            }\n        }\n        \n        return sb.toString();\n    }\n}"}
{"task_id": "Java/140", "generation": "        text = text.trim(); // Remove leading and trailing spaces\n        char[] charArray = text.toCharArray();\n        int consecutiveSpaceCount = 0;\n        StringBuilder sb = new StringBuilder();\n        \n        for(char c : charArray){\n            if(c == ' '){\n                consecutiveSpaceCount++;\n                if(consecutiveSpaceCount > 2){\n                    sb.append('-');\n                } else {\n                    sb.append('_');\n                }\n            } else {\n                consecutiveSpaceCount = 0;\n                sb.append(c);\n            }\n        }\n        \n        return sb.toString();\n    }\n} \n\n//Example\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fixSpaces(\"Example\")); // Output: Example\n        System.out.println(solution.fixSpaces(\"Example 1\")); // Output: Example_1\n        System.out.println(solution.fixSpaces(\" Example 2\")); // Output: _Example_2\n        System.out.println(solution.fixSpaces(\" Example   3\")); // Output: _Example-3\n    }\n}"}
{"task_id": "Java/140", "generation": "        StringBuilder result = new StringBuilder();\n        int consecutiveSpaces = 0;\n        \n        for (char c : text.toCharArray()) {\n            if (c == ' ') {\n                consecutiveSpaces++;\n                if (consecutiveSpaces > 2) {\n                    result.append('-');\n                } else {\n                    result.append('_');\n                }\n            } else {\n                result.append(c);\n                consecutiveSpaces = 0;\n            }\n        }\n        \n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.fixSpaces(\"Example\")); // Example\n        System.out.println(solution.fixSpaces(\"Example 1\")); // Example_1\n        System.out.println(solution.fixSpaces(\" Example 2\")); // _Example_2\n        System.out.println(solution.fixSpaces(\" Example   3\")); // _Example-3\n    }\n}"}
{"task_id": "Java/140", "generation": "        // Replace all spaces with underscores\n        text = text.replaceAll(\" \", \"_\");\n\n        // Replace all consecutive spaces with -\n        text = text.replaceAll(\" {2,}\", \"-\");\n\n        return text;\n    }\n}\n\nclass Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.fixSpaces(\"Example\")); // \"Example\"\n        System.out.println(solution.fixSpaces(\"Example 1\")); // \"Example_1\"\n        System.out.println(solution.fixSpaces(\" Example 2\")); // \"_Example_2\"\n        System.out.println(solution.fixSpaces(\" Example   3\")); // \"_Example-3\"\n    }\n}"}
{"task_id": "Java/140", "generation": "        // Remove leading and trailing spaces\n        text = text.trim();\n        \n        // Replace all spaces with underscores\n        text = text.replace(\" \", \"_\");\n        \n        // Replace consecutive spaces with -\n        text = text.replaceAll(\" {2,}\", \"-\");\n        \n        return text;\n    }\n}"}
{"task_id": "Java/141", "generation": "        // Check for the presence of more than three digits\n        int digitCount = 0;\n        for (char c : file_name.toCharArray()) {\n            if (Character.isDigit(c)) {\n                digitCount++;\n            }\n        }\n        if (digitCount > 3) {\n            return \"No\";\n        }\n\n        // Check for the presence of exactly one dot\n        if (file_name.indexOf('.') == -1 || file_name.indexOf('.') != file_name.lastIndexOf('.')) {\n            return \"No\";\n        }\n\n        // Split the file name into name and extension\n        String[] parts = file_name.split(\"\\\\.\");\n        if (parts.length != 2) {\n            return \"No\";\n        }\n\n        // Check the name part\n        String name = parts[0];\n        if (name.isEmpty() || !Character.isLetter(name.charAt(0))) {\n            return \"No\";\n        }\n\n        // Check the extension part\n        String extension = parts[1];\n        List<String> validExtensions = Arrays.asList(\"txt\", \"exe\", \"dll\");\n        if (!validExtensions.contains(extension)) {\n            return \"No\";\n        }\n\n        return \"Yes\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.filenameCheck(\"example.txt\")); // \"Yes\"\n        System.out.println(solution.filenameCheck(\"1example.dll\")); // \"No\"\n    }\n}"}
{"task_id": "Java/141", "generation": "        // Check if the file name has more than three digits\n        if (countDigits(file_name) > 3) {\n            return \"No\";\n        }\n        \n        // Check if the file name contains exactly one dot\n        if (file_name.indexOf('.') == -1 || file_name.indexOf('.') != file_name.lastIndexOf('.')) {\n            return \"No\";\n        }\n        \n        // Split the file name into name and extension parts\n        String[] parts = file_name.split(\"\\\\.\");\n        if (parts.length != 2) {\n            return \"No\";\n        }\n        \n        // Check if the name part starts with a letter\n        char firstChar = parts[0].charAt(0);\n        if (!Character.isLetter(firstChar)) {\n            return \"No\";\n        }\n        \n        // Check if the extension part is valid\n        String extension = parts[1];\n        if (extension.equals(\"txt\") || extension.equals(\"exe\") || extension.equals(\"dll\")) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n    \n    // Helper method to count the number of digits in the file name\n    private int countDigits(String file_name) {\n        int count = 0;\n        for (char c : file_name.toCharArray()) {\n            if (Character.isDigit(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.filenameCheck(\"example.txt\")); // Output: Yes\n        System.out.println(solution.filenameCheck(\"1example.dll\")); // Output: No\n    }\n}"}
{"task_id": "Java/141", "generation": "        if (file_name == null || file_name.isEmpty()) {\n            return \"No\";\n        }\n        \n        // Count the number of digits in the file name\n        int digitCount = 0;\n        for (char c : file_name.toCharArray()) {\n            if (Character.isDigit(c)) {\n                digitCount++;\n            }\n        }\n        \n        // Check if there are more than three digits\n        if (digitCount > 3) {\n            return \"No\";\n        }\n        \n        // Split the file name by the dot '.'\n        String[] parts = file_name.split(\"\\\\.\");\n        \n        // Check if there is only one dot in the file name\n        if (parts.length != 2) {\n            return \"No\";\n        }\n        \n        String prefix = parts[0];\n        String extension = parts[1];\n        \n        // Check if the prefix is not empty and starts with a letter\n        if (prefix.isEmpty() || !Character.isLetter(prefix.charAt(0))) {\n            return \"No\";\n        }\n        \n        // Check if the extension is valid\n        List<String> validExtensions = Arrays.asList(\"txt\", \"exe\", \"dll\");\n        if (!validExtensions.contains(extension)) {\n            return \"No\";\n        }\n        \n        // If all conditions pass, return \"Yes\"\n        return \"Yes\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.filenameCheck(\"example.txt\")); // => \"Yes\"\n        System.out.println(solution.filenameCheck(\"1example.dll\")); // => \"No\"\n    }\n}"}
{"task_id": "Java/141", "generation": "        // Count the number of digits in the file's name\n        int digitCount = 0;\n        \n        for (char c : file_name.toCharArray()) {\n            if (Character.isDigit(c)) {\n                digitCount++;\n            }\n        }\n        \n        // Check if number of digits is not more than three\n        if (digitCount > 3) {\n            return \"No\";\n        }\n        \n        // Split the file name into name and extension\n        String[] parts = file_name.split(\"\\\\.\");\n        if (parts.length != 2) {\n            return \"No\";\n        }\n        \n        String name = parts[0];\n        String extension = parts[1];\n        \n        // Check if the name starts with a letter\n        if (!Character.isLetter(name.charAt(0))) {\n            return \"No\";\n        }\n        \n        // Check if the extension is one of [\"txt\", \"exe\", \"dll\"]\n        if (extension.equals(\"txt\") || extension.equals(\"exe\") || extension.equals(\"dll\")) {\n            return \"Yes\";\n        }\n        \n        return \"No\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.filenameCheck(\"example.txt\")); // Yes\n        System.out.println(solution.filenameCheck(\"1example.dll\")); // No\n        System.out.println(solution.filenameCheck(\"filename.exe\")); // Yes\n        System.out.println(solution.filenameCheck(\"file.name.txt\")); // No\n    }\n}"}
{"task_id": "Java/141", "generation": "        // Count the number of digits in the file name\n        int digitCount = 0;\n\n        // Check if the file name contains exactly one dot '.'\n        int dotCount = 0;\n\n        // Check if the file name contains a dot and split it into two parts\n        String[] parts = file_name.split(\"\\\\.\");\n        if (parts.length != 2) {\n            return \"No\";\n        }\n\n        // Check if the file name starts with a letter from the Latin alphabet\n        char firstChar = parts[0].charAt(0);\n        if (!((firstChar >= 'a' && firstChar <= 'z') || (firstChar >= 'A' && firstChar <= 'Z'))) {\n            return \"No\";\n        }\n\n        // Check if the substring after the dot is one of [\"txt\", \"exe\", \"dll\"]\n        String extension = parts[1];\n        List<String> validExtensions = Arrays.asList(\"txt\", \"exe\", \"dll\");\n        if (!validExtensions.contains(extension)) {\n            return \"No\";\n        }\n\n        // Count the number of digits in the file name\n        for (char c : file_name.toCharArray()) {\n            if (Character.isDigit(c)) {\n                digitCount++;\n            }\n        }\n\n        // Check if there are more than three digits in the file name\n        if (digitCount > 3) {\n            return \"No\";\n        }\n\n        return \"Yes\";\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.filenameCheck(\"example.txt\")); // => \"Yes\"\n        System.out.println(solution.filenameCheck(\"1example.dll\")); // => \"No\"\n    }\n}"}
{"task_id": "Java/142", "generation": "        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n            } else {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> lst1 = new ArrayList<>(Arrays.asList(1, 2, 3));\n        System.out.println(solution.sumSquares(lst1)); // Output should be 6\n\n        List<Integer> lst2 = new ArrayList<>();\n        System.out.println(solution.sumSquares(lst2)); // Output should be 0\n\n        List<Integer> lst3 = new ArrayList<>(Arrays.asList(-1, -5, 2, -1, -5));\n        System.out.println(solution.sumSquares(lst3)); // Output should be -126\n    }\n}"}
{"task_id": "Java/142", "generation": "        int sum = 0;\n        \n        for (int i = 0; i < lst.size(); i++) {\n            if ((i + 1) % 3 == 0) {\n                lst.set(i, lst.get(i) * lst.get(i)); // square the integer entry if index is a multiple of 3\n            } else if ((i + 1) % 4 == 0 && (i + 1) % 3 != 0) {\n                lst.set(i, lst.get(i) * lst.get(i) * lst.get(i)); // cube the integer entry if index is a multiple of 4 and not 3\n            }\n            sum += lst.get(i); // add the updated entry to the sum\n        }\n        \n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> lst1 = new ArrayList<>(Arrays.asList(1, 2, 3));\n        System.out.println(solution.sumSquares(lst1)); // Output: 6\n\n        List<Integer> lst2 = new ArrayList<>();\n        System.out.println(solution.sumSquares(lst2)); // Output: 0\n\n        List<Integer> lst3 = new ArrayList<>(Arrays.asList(-1, -5, 2, -1, -5));\n        System.out.println(solution.sumSquares(lst3)); // Output: -126\n    }\n}"}
{"task_id": "Java/142", "generation": "        int sum = 0;\n        \n        for (int i = 0; i < lst.size(); i++) {\n            if ((i + 1) % 3 == 0) {\n                lst.set(i, lst.get(i) * lst.get(i));\n            }\n            if ((i + 1) % 4 == 0 && (i + 1) % 3 != 0) {\n                lst.set(i, lst.get(i) * lst.get(i) * lst.get(i));\n            }\n            sum += lst.get(i);\n        }\n        \n        return sum;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        List<Integer> lst1 = new ArrayList<>(Arrays.asList(1, 2, 3));\n        List<Integer> lst2 = new ArrayList<>(Arrays.asList());\n        List<Integer> lst3 = new ArrayList<>(Arrays.asList(-1, -5, 2, -1, -5));\n        \n        System.out.println(solution.sumSquares(lst1)); // Output: 6\n        System.out.println(solution.sumSquares(lst2)); // Output: 0\n        System.out.println(solution.sumSquares(lst3)); // Output: -126\n    }\n}"}
{"task_id": "Java/142", "generation": "        if(lst == null || lst.size() == 0) {\n            return 0;\n        }\n        \n        int sum = 0;\n        \n        for(int i = 0; i < lst.size(); i++) {\n            if(i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if(i % 4 == 0 && i % 3 != 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n            } else {\n                sum += lst.get(i);\n            }\n        }\n        \n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> lst1 = Arrays.asList(1, 2, 3);\n        System.out.println(solution.sumSquares(lst1)); // Output should be 6\n\n        List<Integer> lst2 = Arrays.asList();\n        System.out.println(solution.sumSquares(lst2)); // Output should be 0\n\n        List<Integer> lst3 = Arrays.asList(-1, -5, 2, -1, -5);\n        System.out.println(solution.sumSquares(lst3)); // Output should be -126\n    }\n}"}
{"task_id": "Java/142", "generation": "        int sum = 0;\n\n        for (int i = 0; i < lst.size(); i++) {\n            if ((i + 1) % 3 == 0) {\n                sum += lst.get(i) * lst.get(i); // square the entry\n            } else if ((i + 1) % 4 == 0 && (i + 1) % 3 != 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i); // cube the entry\n            } else {\n                sum += lst.get(i); // add the entry as is\n            }\n        }\n\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        List<Integer> lst1 = new ArrayList<>(Arrays.asList(1, 2, 3));\n        System.out.println(solution.sumSquares(lst1)); // Output: 6\n        \n        List<Integer> lst2 = new ArrayList<>();\n        System.out.println(solution.sumSquares(lst2)); // Output: 0\n        \n        List<Integer> lst3 = new ArrayList<>(Arrays.asList(-1, -5, 2, -1, -5));\n        System.out.println(solution.sumSquares(lst3)); // Output: -126\n    }\n}"}
{"task_id": "Java/143", "generation": "        StringBuilder result = new StringBuilder();\n        String[] words = sentence.split(\" \");\n\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                result.append(word).append(\" \");\n            }\n        }\n\n        result.setLength(result.length() - 1); // remove the extra space at the end\n        return result.toString();\n    }\n\n    /**\n     * Check whether a number is prime or not\n     */\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.wordsInSentence(\"This is a test\")); // Output: is\n        System.out.println(solution.wordsInSentence(\"lets go for swimming\")); // Output: go for\n    }\n}"}
{"task_id": "Java/143", "generation": "        StringBuilder result = new StringBuilder();\n\n        String[] words = sentence.split(\" \");\n\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                result.append(word).append(\" \");\n            }\n        }\n\n        return result.toString().trim();\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        String sentence1 = \"This is a test\";\n        String sentence2 = \"lets go for swimming\";\n\n        System.out.println(solution.wordsInSentence(sentence1)); // Output: is\n        System.out.println(solution.wordsInSentence(sentence2)); // Output: go for\n    }\n}"}
{"task_id": "Java/143", "generation": "        String[] words = sentence.split(\" \");\n        StringBuilder result = new StringBuilder();\n\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                result.append(word).append(\" \");\n            }\n        }\n\n        return result.toString().trim();\n    }\n\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.wordsInSentence(\"This is a test\")); // Output: \"is\"\n        System.out.println(solution.wordsInSentence(\"lets go for swimming\")); // Output: \"go for\"\n    }\n}"}
{"task_id": "Java/143", "generation": "        // Create a list to store the words with prime lengths\n        List<String> primeWords = new ArrayList<>();\n        \n        // Split the sentence into words\n        String[] words = sentence.split(\" \");\n        \n        // Check if the length of each word is a prime number\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                primeWords.add(word);\n            }\n        }\n        \n        // Join the prime words into a new string\n        String result = String.join(\" \", primeWords);\n        \n        return result;\n    }\n    \n    // Helper method to check if a number is prime\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.wordsInSentence(\"This is a test\")); // Output: \"is\"\n        System.out.println(solution.wordsInSentence(\"lets go for swimming\")); // Output: \"go for\"\n    }\n}"}
{"task_id": "Java/143", "generation": "        String[] words = sentence.split(\" \");\n        StringBuilder result = new StringBuilder();\n\n        for (String word : words) {\n            if (isPrime(word.length())) {\n                result.append(word).append(\" \");\n            }\n        }\n\n        return result.toString().trim();\n    }\n\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/144", "generation": "        // Parse the fractions\n        String[] xParts = x.split(\"/\");\n        String[] nParts = n.split(\"/\");\n        \n        int xNumer = Integer.parseInt(xParts[0]);\n        int xDenom = Integer.parseInt(xParts[1]);\n        \n        int nNumer = Integer.parseInt(nParts[0]);\n        int nDenom = Integer.parseInt(nParts[1]);\n        \n        // Perform the multiplication\n        int resultNumer = xNumer * nNumer;\n        int resultDenom = xDenom * nDenom;\n        \n        // Check if the result is a whole number\n        return resultDenom % resultNumer == 0;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.simplify(\"1/5\", \"5/1\")); // true\n        System.out.println(solution.simplify(\"1/6\", \"2/1\")); // false\n        System.out.println(solution.simplify(\"7/10\", \"10/2\")); // false\n    }\n}"}
{"task_id": "Java/144", "generation": "        // Parse the numerator and denominator for x and n\n        String[] xParts = x.split(\"/\");\n        String[] nParts = n.split(\"/\");\n        \n        int xNumerator = Integer.parseInt(xParts[0]);\n        int xDenominator = Integer.parseInt(xParts[1]);\n        \n        int nNumerator = Integer.parseInt(nParts[0]);\n        int nDenominator = Integer.parseInt(nParts[1]);\n        \n        // Calculate the product of x and n\n        int productNumerator = xNumerator * nNumerator;\n        int productDenominator = xDenominator * nDenominator;\n        \n        // Check if the product is a whole number\n        return productDenominator % productNumerator == 0;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.simplify(\"1/5\", \"5/1\")); // true\n        System.out.println(solution.simplify(\"1/6\", \"2/1\")); // false\n        System.out.println(solution.simplify(\"7/10\", \"10/2\")); // false\n    }\n}"}
{"task_id": "Java/144", "generation": "        // Parse the fractions\n        String[] fraction1 = x.split(\"/\");\n        String[] fraction2 = n.split(\"/\");\n        \n        int num1 = Integer.parseInt(fraction1[0]);\n        int den1 = Integer.parseInt(fraction1[1]);\n        \n        int num2 = Integer.parseInt(fraction2[0]);\n        int den2 = Integer.parseInt(fraction2[1]);\n        \n        // Check if the multiplication results in a whole number\n        if ((num1 * num2) % (den1 * den2) == 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}"}
{"task_id": "Java/144", "generation": "        // Split the fractions into numerators and denominators\n        String[] xParts = x.split(\"/\");\n        int xNum = Integer.parseInt(xParts[0]);\n        int xDenom = Integer.parseInt(xParts[1]);\n        \n        String[] nParts = n.split(\"/\");\n        int nNum = Integer.parseInt(nParts[0]);\n        int nDenom = Integer.parseInt(nParts[1]);\n        \n        // Calculate the product of fractions\n        int productNum = xNum * nNum;\n        int productDenom = xDenom * nDenom;\n        \n        // Check if the product is a whole number\n        return productDenom % productNum == 0;\n    }\n}"}
{"task_id": "Java/144", "generation": "        // Convert the strings to fractions\n        String[] xParts = x.split(\"/\");\n        String[] nParts = n.split(\"/\");\n        \n        int xNumerator = Integer.parseInt(xParts[0]);\n        int xDenominator = Integer.parseInt(xParts[1]);\n        \n        int nNumerator = Integer.parseInt(nParts[0]);\n        int nDenominator = Integer.parseInt(nParts[1]);\n        \n        // Calculate the product of x and n\n        int productNumerator = xNumerator * nNumerator;\n        int productDenominator = xDenominator * nDenominator;\n        \n        // Check if the product is a whole number\n        return productNumerator % productDenominator == 0;\n    }\n}"}
{"task_id": "Java/145", "generation": "        if(nums == null || nums.size() == 0) {\n            return Collections.emptyList();\n        }\n\n        Collections.sort(nums, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer num1, Integer num2) {\n                int sum1 = sumOfDigits(num1);\n                int sum2 = sumOfDigits(num2);\n\n                if(sum1 == sum2) {\n                    return nums.indexOf(num1) - nums.indexOf(num2);\n                }\n\n                return sum1 - sum2;\n            }\n        });\n\n        return nums;\n    }\n\n    private int sumOfDigits(int num) {\n        int sum = 0;\n        num = Math.abs(num);\n\n        while(num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> nums1 = Arrays.asList(1, 11, -1, -11, -12);\n        System.out.println(solution.orderByPoints(nums1)); // [-1, -11, 1, -12, 11]\n\n        List<Integer> nums2 = Arrays.asList();\n        System.out.println(solution.orderByPoints(nums2)); // []\n    }\n}"}
{"task_id": "Java/145", "generation": "        if (nums == null || nums.isEmpty()) {\n            return new ArrayList<>();\n        }\n        \n        Collections.sort(nums, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer a, Integer b) {\n                int sumA = getDigitSum(a);\n                int sumB = getDigitSum(b);\n                \n                if (sumA == sumB) {\n                    return nums.indexOf(a) - nums.indexOf(b);\n                }\n                \n                return sumA - sumB;\n            }\n            \n            private int getDigitSum(int num) {\n                int sum = 0;\n                int temp = Math.abs(num);\n                while (temp > 0) {\n                    sum += temp % 10;\n                    temp /= 10;\n                }\n                return sum;\n            }\n        });\n        \n        return nums;\n    }\n}"}
{"task_id": "Java/145", "generation": "        if (nums == null || nums.size() == 0) {\n            return new ArrayList<Integer>();\n        }\n\n        Collections.sort(nums, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer num1, Integer num2) {\n                int sum1 = getSumOfDigits(num1);\n                int sum2 = getSumOfDigits(num2);\n\n                if (sum1 == sum2) {\n                    return nums.indexOf(num1) - nums.indexOf(num2);\n                }\n                return sum1 - sum2;\n            }\n        });\n\n        return nums;\n    }\n\n    private int getSumOfDigits(int num) {\n        int sum = 0;\n        num = Math.abs(num);\n\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> nums1 = Arrays.asList(1, 11, -1, -11, -12);\n        List<Integer> result1 = solution.orderByPoints(nums1);\n        System.out.println(result1); // [-1, -11, 1, -12, 11]\n\n        List<Integer> nums2 = Arrays.asList();\n        List<Integer> result2 = solution.orderByPoints(nums2);\n        System.out.println(result2); // []\n    }\n}"}
{"task_id": "Java/145", "generation": "        Collections.sort(nums, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer num1, Integer num2) {\n                int sumOfDigits1 = getSumOfDigits(num1);\n                int sumOfDigits2 = getSumOfDigits(num2);\n\n                if (sumOfDigits1 == sumOfDigits2) {\n                    return nums.indexOf(num1) - nums.indexOf(num2);\n                }\n\n                return sumOfDigits1 - sumOfDigits2;\n            }\n        });\n\n        return nums;\n    }\n\n    private int getSumOfDigits(int num) {\n        int sum = 0;\n        num = Math.abs(num);\n\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> nums1 = Arrays.asList(1, 11, -1, -11, -12);\n        System.out.println(solution.orderByPoints(nums1)); // Output: [-1, -11, 1, -12, 11]\n\n        List<Integer> nums2 = Arrays.asList();\n        System.out.println(solution.orderByPoints(nums2)); // Output: []\n    }\n}"}
{"task_id": "Java/145", "generation": "        // Create a custom comparator to sort the integers based on the sum of their digits\n        Comparator<Integer> comparator = (a, b) -> {\n            int sumA = getSumOfDigits(a);\n            int sumB = getSumOfDigits(b);\n            if (sumA == sumB) {\n                return nums.indexOf(a) - nums.indexOf(b);\n            }\n            return sumA - sumB;\n        };\n\n        // Sort the list of integers based on the custom comparator\n        nums.sort(comparator);\n\n        return nums;\n    }\n\n    private int getSumOfDigits(int num) {\n        int sum = 0;\n        num = Math.abs(num);\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test the examples in the prompt\n        List<Integer> test1 = Arrays.asList(1, 11, -1, -11, -12);\n        List<Integer> result1 = solution.orderByPoints(test1);\n        System.out.println(result1);\n\n        List<Integer> test2 = Arrays.asList();\n        List<Integer> result2 = solution.orderByPoints(test2);\n        System.out.println(result2);\n    }\n}"}
{"task_id": "Java/146", "generation": "        int count = 0;\n        \n        for (int num : nums) {\n            if (Math.abs(num) > 10 && isOdd(num % 10) && isOdd(getFirstDigit(num))) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n    \n    private boolean isOdd(int num) {\n        return num % 2 != 0;\n    }\n    \n    private int getFirstDigit(int num) {\n        while (num >= 10) {\n            num /= 10;\n        }\n        return Math.abs(num);\n    }\n}"}
{"task_id": "Java/146", "generation": "        int count = 0;\n        \n        for (int num : nums) {\n            if (num > 10 && isOdd(num % 10) && isOdd(getFirstDigit(num))) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n    \n    public boolean isOdd(int num) {\n        return num % 2 != 0;\n    }\n    \n    public int getFirstDigit(int num) {\n        num = Math.abs(num);\n        while (num >= 10) {\n            num /= 10;\n        }\n        return num;\n    }\n} \n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.specialFilter(Arrays.asList(15, -73, 14, -15))); // 1\n        System.out.println(solution.specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109))); // 2\n    }\n}"}
{"task_id": "Java/146", "generation": "        int count = 0;\n        \n        for (int num : nums) {\n            if (num > 10 && isOdd(num % 10) && isOdd(getFirstDigit(num))) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n    \n    private boolean isOdd(int digit) {\n        return digit % 2 != 0;\n    }\n    \n    private int getFirstDigit(int num) {\n        while (num >= 10) {\n            num /= 10;\n        }\n        return Math.abs(num);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> nums1 = Arrays.asList(15, -73, 14, -15);\n        List<Integer> nums2 = Arrays.asList(33, -2, -3, 45, 21, 109);\n        \n        System.out.println(solution.specialFilter(nums1)); // Output: 1\n        System.out.println(solution.specialFilter(nums2)); // Output: 2\n    }\n}"}
{"task_id": "Java/146", "generation": "        int count = 0;\n        \n        for (int num : nums) {\n            if (num > 10 && isFirstAndLastDigitsOdd(num)) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n    \n    private boolean isFirstAndLastDigitsOdd(int num) {\n        String numStr = String.valueOf(num);\n        char firstDigit = numStr.charAt(0);\n        char lastDigit = numStr.charAt(numStr.length() - 1);\n        \n        return isOddDigit(firstDigit) && isOddDigit(lastDigit);\n    }\n    \n    private boolean isOddDigit(char digit) {\n        return digit == '1' || digit == '3' || digit == '5' || digit == '7' || digit == '9';\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.specialFilter(Arrays.asList(15, -73, 14, -15))); // 1\n        System.out.println(solution.specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)); // 2\n    }\n}"}
{"task_id": "Java/146", "generation": "        int count = 0;\n        \n        for(int num : nums) {\n            if(num > 10) {\n                int firstDigit = Math.abs(num);\n                while(firstDigit >= 10) {\n                    firstDigit /= 10;\n                }\n                \n                int lastDigit = Math.abs(num) % 10;\n                \n                if(isOdd(firstDigit) && isOdd(lastDigit)) {\n                    count++;\n                }\n            }\n        }\n        \n        return count;\n    }\n    \n    private boolean isOdd(int num) {\n        return num % 2 != 0;\n    }\n}"}
{"task_id": "Java/147", "generation": "        int[] a = new int[n];\n        int count = 0;\n\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n\n        for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.getMaxTriples(5)); // Output: 1\n    }\n}"}
{"task_id": "Java/147", "generation": "        // Create the array 'a'\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n\n        // Count the number of triples\n        int count = 0;\n        for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        int n1 = 5;\n        System.out.println(solution.getMaxTriples(n1)); // Output: 1\n\n        // Test case 2\n        int n2 = 6;\n        System.out.println(solution.getMaxTriples(n2)); // Output: 3\n    }\n}"}
{"task_id": "Java/147", "generation": "        int count = 0;\n        int[] a = new int[n];\n        \n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        \n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        \n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        int n = 5;\n        System.out.println(solution.getMaxTriples(n)); // 1\n    }\n}"}
{"task_id": "Java/147", "generation": "        int count = 0;\n        int[] a = new int[n];\n        \n        // Calculate the values of a[i]\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        \n        // Count the number of triples that sum up to a multiple of 3\n        for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        \n        return count;\n    }\n}"}
{"task_id": "Java/147", "generation": "        int count = 0;\n        int[] a = new int[n];\n        \n        for (int i = 1; i <= n; i++) {\n            a[i - 1] = i * i - i + 1;\n        }\n        \n        for (int i = 0; i < n-2; i++) {\n            for (int j = i + 1; j < n-1; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        \n        return count;\n    }\n}"}
{"task_id": "Java/148", "generation": "        String[] planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n        List<String> result = new ArrayList<>();\n        \n        int index1 = -1;\n        int index2 = -1;\n        \n        for (int i = 0; i < planets.length; i++) {\n            if (planets[i].equals(planet1)) {\n                index1 = i;\n            }\n            if (planets[i].equals(planet2)) {\n                index2 = i;\n            }\n        }\n        \n        if (index1 == -1 || index2 == -1) {\n            return result;\n        }\n        \n        int start = Math.min(index1, index2);\n        int end = Math.max(index1, index2);\n        \n        for (int i = start + 1; i < end; i++) {\n            result.add(planets[i]);\n        }\n        \n        return result;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.bf(\"Jupiter\", \"Neptune\")); // Expected: [\"Saturn\", \"Uranus\"]\n        System.out.println(solution.bf(\"Earth\", \"Mercury\")); // Expected: [\"Venus\"]\n        System.out.println(solution.bf(\"Mercury\", \"Uranus\")); // Expected: [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n    }\n}"}
{"task_id": "Java/148", "generation": "        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        List<String> result = new ArrayList<>();\n        \n        if (!planets.contains(planet1) || !planets.contains(planet2)) {\n            return result;\n        }\n        \n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n        \n        int start = Math.min(index1, index2);\n        int end = Math.max(index1, index2);\n        \n        for (int i = start + 1; i < end; i++) {\n            result.add(planets.get(i));\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/148", "generation": "        List<String> planetNames = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        List<String> result = new ArrayList<>();\n        \n        if (!planetNames.contains(planet1) || !planetNames.contains(planet2)) {\n            return result;\n        }\n        \n        int index1 = planetNames.indexOf(planet1);\n        int index2 = planetNames.indexOf(planet2);\n        \n        int start = Math.min(index1, index2);\n        int end = Math.max(index1, index2);\n        \n        for (int i = start + 1; i < end; i++) {\n            result.add(planetNames.get(i));\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.bf(\"Jupiter\", \"Neptune\")); // Output: [\"Saturn\", \"Uranus\"]\n        System.out.println(solution.bf(\"Earth\", \"Mercury\")); // Output: [\"Venus\"]\n        System.out.println(solution.bf(\"Mercury\", \"Uranus\")); // Output: [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n    }\n}"}
{"task_id": "Java/148", "generation": "        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        \n        // Check if planet1 and planet2 are valid planet names\n        if (!planets.contains(planet1) || !planets.contains(planet2)) {\n            return new ArrayList<String>();\n        }\n        \n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n        \n        List<String> result = new ArrayList<>();\n        if (index1 < index2) {\n            result = planets.subList(index1+1, index2);\n        } else {\n            result = planets.subList(index2+1, index1);\n            Collections.reverse(result);\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.bf(\"Jupiter\", \"Neptune\")); // [\"Saturn\", \"Uranus\"]\n        System.out.println(solution.bf(\"Earth\", \"Mercury\")); // [\"Venus\"]\n        System.out.println(solution.bf(\"Mercury\", \"Uranus\")); // [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n    }\n}"}
{"task_id": "Java/148", "generation": "        List<String> planets = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n\n        int index1 = planets.indexOf(planet1);\n        int index2 = planets.indexOf(planet2);\n\n        if (index1 == -1 || index2 == -1) {\n            return new ArrayList<>();\n        }\n\n        int start = Math.min(index1, index2);\n        int end = Math.max(index1, index2);\n\n        List<String> result = new ArrayList<>();\n\n        for (int i = start + 1; i < end; i++) {\n            result.add(planets.get(i));\n        }\n\n        return result;\n    }\n}"}
{"task_id": "Java/149", "generation": "        // Create a new list to store the filtered strings\n        List<String> filteredList = new ArrayList<>();\n        \n        // Iterate through the input list and remove strings with odd lengths\n        for (String str : lst) {\n            if (str.length() % 2 == 0) {\n                filteredList.add(str);\n            }\n        }\n        \n        // Sort the filteredList by length and then alphabetically\n        Collections.sort(filteredList, (a, b) -> {\n            if (a.length() == b.length()) {\n                return a.compareTo(b);\n            } else {\n                return Integer.compare(a.length(), b.length());\n            }\n        });\n        \n        return filteredList;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<String> test1 = Arrays.asList(\"aa\", \"a\", \"aaa\");\n        System.out.println(solution.listSort(test1)); // [\"aa\"]\n        \n        List<String> test2 = Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\");\n        System.out.println(solution.listSort(test2)); // [\"ab\", \"cd\"]\n    }\n}"}
{"task_id": "Java/149", "generation": "        List<String> result = new ArrayList<>();\n        \n        for(String str : lst) {\n            if(str.length() % 2 == 0) {\n                result.add(str);\n            }\n        }\n        \n        Collections.sort(result, new Comparator<String>() {\n            @Override\n            public int compare(String s1, String s2) {\n                if(s1.length() != s2.length()) {\n                    return s1.length() - s2.length();\n                } else {\n                    return s1.compareTo(s2);\n                }\n            }\n        });\n        \n        return result;\n    }\n}"}
{"task_id": "Java/149", "generation": "        lst.removeIf(str -> str.length() % 2 != 0);\n        Collections.sort(lst, (a, b) -> {\n            if (a.length() == b.length()) {\n                return a.compareTo(b);\n            } else {\n                return a.length() - b.length();\n            }\n        });\n        return lst;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<String> lst1 = Arrays.asList(\"aa\", \"a\", \"aaa\");\n        System.out.println(solution.listSort(lst1)); // Output: [aa]\n\n        List<String> lst2 = Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\");\n        System.out.println(solution.listSort(lst2)); // Output: [ab, cd]\n    }\n}"}
{"task_id": "Java/149", "generation": "        List<String> evenLengthWords = new ArrayList<>();\n        \n        // Filter out words with odd lengths\n        for (String word : lst) {\n            if (word.length() % 2 == 0) {\n                evenLengthWords.add(word);\n            }\n        }\n        \n        // Sort the list first by length, then alphabetically\n        Collections.sort(evenLengthWords, (a, b) -> {\n            if (a.length() != b.length()) {\n                return Integer.compare(a.length(), b.length());\n            } else {\n                return a.compareTo(b);\n            }\n        });\n        \n        return evenLengthWords;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<String> test1 = Arrays.asList(\"aa\", \"a\", \"aaa\");\n        System.out.println(solution.listSort(test1)); // [\"aa\"]\n        \n        List<String> test2 = Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\");\n        System.out.println(solution.listSort(test2)); // [\"ab\", \"cd\"]\n    }\n}"}
{"task_id": "Java/149", "generation": "        List<String> result = new ArrayList<>();\n\n        for (String word : lst) {\n            if (word.length() % 2 == 0) {\n                result.add(word);\n            }\n        }\n\n        Collections.sort(result, (a, b) -> {\n            if (a.length() != b.length()) {\n                return Integer.compare(a.length(), b.length());\n            } else {\n                return a.compareTo(b);\n            }\n        });\n\n        return result;\n    }\n}\n\nclass Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<String> lst1 = Arrays.asList(\"aa\", \"a\", \"aaa\");\n        List<String> result1 = solution.listSort(lst1);\n        System.out.println(result1);\n\n        // Test case 2\n        List<String> lst2 = Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\");\n        List<String> result2 = solution.listSort(lst2);\n        System.out.println(result2);\n    }\n}"}
{"task_id": "Java/150", "generation": "        if (n <= 1) {\n            return y;\n        }\n\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n\n        return x;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.xOrY(7, 34, 12)); // should return 34\n        System.out.println(solution.xOrY(15, 8, 5)); // should return 5\n    }\n}"}
{"task_id": "Java/150", "generation": "        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    // Helper function to check if a number is prime\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n == 2 || n == 3) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // Main function to test examples\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.xOrY(7, 34, 12)); // Should return 34\n        System.out.println(solution.xOrY(15, 8, 5)); // Should return 5\n    }\n}"}
{"task_id": "Java/150", "generation": "        if (n <= 1) {\n            return y;\n        }\n        \n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        \n        return x;\n    }\n}"}
{"task_id": "Java/150", "generation": "        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.xOrY(7, 34, 12)); // Output: 34\n        System.out.println(solution.xOrY(15, 8, 5)); // Output: 5\n    }\n}"}
{"task_id": "Java/150", "generation": "        if (isPrime(n)) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n    \n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.xOrY(7, 34, 12)); // 34\n        System.out.println(solution.xOrY(15, 8, 5)); // 5\n    }\n}"}
{"task_id": "Java/151", "generation": "        int sum = 0;\n        \n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int num = (int) obj;\n                if (num > 0 && num % 2 != 0) {\n                    sum += num * num;\n                }\n            }\n        }\n        \n        return sum * 2;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.doubleTheDifference(Arrays.asList(1, 3, 2, 0))); // Output: 10\n        System.out.println(solution.doubleTheDifference(Arrays.asList(-1, -2, 0))); // Output: 0\n        System.out.println(solution.doubleTheDifference(Arrays.asList(9, -2))); // Output: 81\n        System.out.println(solution.doubleTheDifference(Arrays.asList(0))); // Output: 0\n    }\n}"}
{"task_id": "Java/151", "generation": "        int sum = 0;\n\n        for (Object num : lst) {\n            if (num instanceof Integer && (int)num > 0 && (int)num % 2 != 0) {\n                sum += (int)num * (int)num;\n            }\n        }\n\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.doubleTheDifference(Arrays.asList(1, 3, 2, 0))); // 10\n        System.out.println(solution.doubleTheDifference(Arrays.asList(-1, -2, 0))); // 0\n        System.out.println(solution.doubleTheDifference(Arrays.asList(9, -2))); // 81\n        System.out.println(solution.doubleTheDifference(Arrays.asList(0))); // 0\n    }\n}"}
{"task_id": "Java/151", "generation": "        int sum = 0;\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int num = (int) obj;\n                if (num > 0 && num % 2 == 1) {\n                    sum += num * num;\n                }\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.doubleTheDifference(Arrays.asList(1, 3, 2, 0))); // 10\n        System.out.println(solution.doubleTheDifference(Arrays.asList(-1, -2, 0))); // 0\n        System.out.println(solution.doubleTheDifference(Arrays.asList(9, -2))); // 81\n        System.out.println(solution.doubleTheDifference(Arrays.asList(0))); // 0\n    }\n}"}
{"task_id": "Java/151", "generation": "        int sum = 0;\n        for (Object num : lst) {\n            if (num instanceof Integer && (int)num > 0) {\n                if ((int)num % 2 != 0) {\n                    sum += ((int)num * (int)num);\n                }\n            }\n        }\n        return sum * 2;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Object> lst1 = Arrays.asList(1, 3, 2, 0);\n        System.out.println(solution.doubleTheDifference(lst1)); // Output: 10\n\n        List<Object> lst2 = Arrays.asList(-1, -2, 0);\n        System.out.println(solution.doubleTheDifference(lst2)); // Output: 0\n\n        List<Object> lst3 = Arrays.asList(9, -2);\n        System.out.println(solution.doubleTheDifference(lst3)); // Output: 81\n\n        List<Object> lst4 = Arrays.asList(0);\n        System.out.println(solution.doubleTheDifference(lst4)); // Output: 0\n    }\n}"}
{"task_id": "Java/151", "generation": "        int sum = 0;\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                int num = (int) obj;\n                if (num > 0 && num % 2 != 0) {\n                    sum += num * num;\n                }\n            }\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Object> lst1 = Arrays.asList(1, 3, 2, 0);\n        List<Object> lst2 = Arrays.asList(-1, -2, 0);\n        List<Object> lst3 = Arrays.asList(9, -2);\n        List<Object> lst4 = Arrays.asList(0);\n\n        System.out.println(solution.doubleTheDifference(lst1)); // Output: 10\n        System.out.println(solution.doubleTheDifference(lst2)); // Output: 0\n        System.out.println(solution.doubleTheDifference(lst3)); // Output: 81\n        System.out.println(solution.doubleTheDifference(lst4)); // Output: 0\n    }\n}"}
{"task_id": "Java/152", "generation": "        List<Integer> result = new ArrayList<>();\n\n        for (int i = 0; i < game.size(); i++) {\n            int diff = Math.abs(game.get(i) - guess.get(i));\n            result.add(diff);\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test the compare method\n        System.out.println(solution.compare(Arrays.asList(1, 2, 3, 4, 5, 1), Arrays.asList(1, 2, 3, 4, 2, -2))); // [0, 0, 0, 0, 3, 3]\n        System.out.println(solution.compare(Arrays.asList(0, 5, 0, 0, 0, 4), Arrays.asList(4, 1, 1, 0, 0, -2))); // [4, 4, 1, 0, 0, 6]\n    }\n}"}
{"task_id": "Java/152", "generation": "        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            int diff = Math.abs(game.get(i) - guess.get(i));\n            result.add(diff);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test the compare method\n        System.out.println(solution.compare(Arrays.asList(1, 2, 3, 4, 5, 1), Arrays.asList(1, 2, 3, 4, 2, -2)));\n        System.out.println(solution.compare(Arrays.asList(0, 5, 0, 0, 0, 4), Arrays.asList(4, 1, 1, 0, 0, -2)));\n    }\n}"}
{"task_id": "Java/152", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 0; i < game.size(); i++) {\n            int diff = Math.abs(game.get(i) - guess.get(i));\n            result.add(diff);\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2))); // [0,0,0,0,3,3]\n        System.out.println(solution.compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2))); // [4,4,1,0,0,6]\n    }\n}"}
{"task_id": "Java/152", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 0; i < game.size(); i++) {\n            int diff = Math.abs(game.get(i) - guess.get(i));\n            result.add(diff);\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the compare method\n        System.out.println(solution.compare(Arrays.asList(1,2,3,4,5,1), Arrays.asList(1,2,3,4,2,-2))); // [0,0,0,0,3,3]\n        System.out.println(solution.compare(Arrays.asList(0,5,0,0,0,4), Arrays.asList(4,1,1,0,0,-2))); // [4,4,1,0,0,6]\n    }\n}"}
{"task_id": "Java/152", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 0; i < game.size(); i++) {\n            int diff = Math.abs(game.get(i) - guess.get(i));\n            result.add(diff);\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/153", "generation": "        String strongestExtension = \"\";\n        double maxStrength = Integer.MIN_VALUE;\n\n        for (String extension : extensions) {\n            int uppercaseCount = 0;\n            int lowercaseCount = 0;\n\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    uppercaseCount++;\n                } else if (Character.isLowerCase(c)) {\n                    lowercaseCount++;\n                }\n            }\n\n            double strength = uppercaseCount - lowercaseCount;\n            if (strength > maxStrength || (strength == maxStrength && strongestExtension.isEmpty())) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n\n        return class_name + \".\" + strongestExtension;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<String> extensions = new ArrayList<>(Arrays.asList(\"AA\", \"Be\", \"CC\"));\n        System.out.println(solution.StrongestExtension(\"my_class\", extensions)); // should return \"my_class.AA\"\n    }\n}"}
{"task_id": "Java/153", "generation": "        if (extensions == null || extensions.isEmpty()) {\n            return class_name;\n        }\n\n        String strongestExtension = \"\";\n        int maxStrength = Integer.MIN_VALUE;\n\n        for (String extension : extensions) {\n            int capCount = 0;\n            int smCount = 0;\n\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    capCount++;\n                } else if (Character.isLowerCase(c)) {\n                    smCount++;\n                }\n            }\n\n            int strength = capCount - smCount;\n\n            if (strength > maxStrength || (strength == maxStrength && extension.compareTo(strongestExtension) < 0)) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n\n        return class_name + \".\" + strongestExtension;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Example 1\n        String class1 = \"my_class\";\n        List<String> extensions1 = Arrays.asList(\"AA\", \"Be\", \"CC\");\n        System.out.println(solution.StrongestExtension(class1, extensions1)); // should return \"my_class.AA\"\n        \n        // Additional test cases\n        String class2 = \"Slices\";\n        List<String> extensions2 = Arrays.asList(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\");\n        System.out.println(solution.StrongestExtension(class2, extensions2)); // should return \"Slices.SErviNGSliCes\"\n    }\n}"}
{"task_id": "Java/153", "generation": "        String strongestExtension = \"\";\n        double maxStrength = Double.NEGATIVE_INFINITY;\n\n        for (String extension : extensions) {\n            int CAP = 0;\n            int SM = 0;\n\n            for (char ch : extension.toCharArray()) {\n                if (Character.isUpperCase(ch)) {\n                    CAP++;\n                } else if (Character.isLowerCase(ch)) {\n                    SM++;\n                }\n            }\n\n            double strength = CAP - SM;\n\n            if (strength > maxStrength || (strength == maxStrength && extensions.indexOf(extension) < extensions.indexOf(strongestExtension))) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n\n        return class_name + \".\" + strongestExtension;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<String> extensions1 = Arrays.asList(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\");\n        System.out.println(solution.StrongestExtension(\"Slices\", extensions1)); // Slices.SErviNGSliCes\n\n        List<String> extensions2 = Arrays.asList(\"AA\", \"Be\", \"CC\");\n        System.out.println(solution.StrongestExtension(\"my_class\", extensions2)); // my_class.AA\n    }\n}"}
{"task_id": "Java/153", "generation": "        String strongestExtension = \"\";\n        double maxStrength = Double.NEGATIVE_INFINITY;\n\n        for (String extension : extensions) {\n            int CAP = 0;\n            int SM = 0;\n\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    CAP++;\n                } else if (Character.isLowerCase(c)) {\n                    SM++;\n                }\n            }\n\n            double strength = CAP - SM;\n            if (strength > maxStrength || (strength == maxStrength && extensions.indexOf(extension) < extensions.indexOf(strongestExtension))) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n\n        return class_name + '.' + strongestExtension;\n    }\n}\n\nclass Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<String> extensions = new ArrayList<>();\n        extensions.add(\"SErviNGSliCes\");\n        extensions.add(\"Cheese\");\n        extensions.add(\"StuFfed\");\n\n        System.out.println(solution.StrongestExtension(\"Slices\", extensions)); // Output: Slices.SErviNGSliCes\n    }\n}"}
{"task_id": "Java/153", "generation": "        if (extensions.isEmpty()) {\n            return class_name + \".NoExtensions\";\n        }\n        \n        String strongestExtension = extensions.get(0);\n        int maxStrength = calculateStrength(extensions.get(0));\n\n        for (int i = 1; i < extensions.size(); i++) {\n            int currentStrength = calculateStrength(extensions.get(i));\n            if (currentStrength > maxStrength || (currentStrength == maxStrength && i < extensions.indexOf(strongestExtension))) {\n                strongestExtension = extensions.get(i);\n                maxStrength = currentStrength;\n            }\n        }\n\n        return class_name + \".\" + strongestExtension;\n    }\n\n    private int calculateStrength(String extension) {\n        int CAP = 0;\n        int SM = 0;\n\n        for (char c : extension.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                CAP++;\n            } else if (Character.isLowerCase(c)) {\n                SM++;\n            }\n        }\n\n        return CAP - SM;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.StrongestExtension(\"my_class\", Arrays.asList(\"AA\", \"Be\", \"CC\"))); // my_class.AA\n        System.out.println(solution.StrongestExtension(\"Slices\", Arrays.asList(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"))); // Slices.SErviNGSliCes\n    }\n}"}
{"task_id": "Java/154", "generation": "        if (a.length() != b.length()) {\n            return false;\n        }\n        \n        // Concatenate the first word with itself to check for rotations\n        String combined = a + a;\n        \n        // Check if the second word is a substring of the combined word\n        if (combined.contains(b)) {\n            return true;\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.cycpatternCheck(\"abcd\", \"abd\")); // false\n        System.out.println(solution.cycpatternCheck(\"hello\", \"ell\")); // true\n        System.out.println(solution.cycpatternCheck(\"whassup\", \"psus\")); // false\n        System.out.println(solution.cycpatternCheck(\"abab\", \"baa\")); // true\n        System.out.println(solution.cycpatternCheck(\"efef\", \"eeff\")); // false\n        System.out.println(solution.cycpatternCheck(\"himenss\", \"simen\")); // true\n    }\n}"}
{"task_id": "Java/154", "generation": "        if(a.length() != b.length()){\n            return false;\n        }\n        \n        String combined = a + a;\n        \n        return combined.contains(b);\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.cycpatternCheck(\"abcd\", \"abd\")); // false\n        System.out.println(solution.cycpatternCheck(\"hello\", \"ell\")); // true\n        System.out.println(solution.cycpatternCheck(\"whassup\", \"psus\")); // false\n        System.out.println(solution.cycpatternCheck(\"abab\", \"baa\")); // true\n        System.out.println(solution.cycpatternCheck(\"efef\", \"eeff\")); // false\n        System.out.println(solution.cycpatternCheck(\"himenss\", \"simen\")); // true\n    }\n}"}
{"task_id": "Java/154", "generation": "        // Check if b is a substring of a\n        if (a.contains(b)) {\n            return true;\n        }\n\n        // Check for rotations of b\n        for (int i = 0; i < b.length(); i++) {\n            String rotated = b.substring(i) + b.substring(0, i);\n            if (a.contains(rotated)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.cycpatternCheck(\"abcd\", \"abd\")); // false\n        System.out.println(solution.cycpatternCheck(\"hello\", \"ell\")); // true\n        System.out.println(solution.cycpatternCheck(\"whassup\", \"psus\")); // false\n        System.out.println(solution.cycpatternCheck(\"abab\", \"baa\")); // true\n        System.out.println(solution.cycpatternCheck(\"efef\", \"eeff\")); // false\n        System.out.println(solution.cycpatternCheck(\"himenss\", \"simen\")); // true\n    }\n}"}
{"task_id": "Java/154", "generation": "        if (a.length() != b.length()) {\n            return false;\n        }\n        \n        String combinedStr = a + a;\n        \n        return combinedStr.contains(b);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.cycpatternCheck(\"abcd\", \"abd\")); // false\n        System.out.println(solution.cycpatternCheck(\"hello\", \"ell\")); // true\n        System.out.println(solution.cycpatternCheck(\"whassup\", \"psus\")); // false\n        System.out.println(solution.cycpatternCheck(\"abab\", \"baa\")); // true\n        System.out.println(solution.cycpatternCheck(\"efef\", \"eeff\")); // false\n        System.out.println(solution.cycpatternCheck(\"himenss\", \"simen\")); // true\n    }\n}"}
{"task_id": "Java/154", "generation": "        if (a.length() != b.length()) {\n            return false;\n        }\n        \n        String doubleA = a + a;\n        \n        if (doubleA.contains(b)) {\n            return true;\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        \n        // Test cases\n        System.out.println(sol.cycpatternCheck(\"abcd\", \"abd\")); // false\n        System.out.println(sol.cycpatternCheck(\"hello\", \"ell\")); // true\n        System.out.println(sol.cycpatternCheck(\"whassup\", \"psus\")); // false\n        System.out.println(sol.cycpatternCheck(\"abab\", \"baa\")); // true\n        System.out.println(sol.cycpatternCheck(\"efef\", \"eeff\")); // false\n        System.out.println(sol.cycpatternCheck(\"himenss\", \"simen\")); // true\n    }\n}"}
{"task_id": "Java/155", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        int evenCount = 0;\n        int oddCount = 0;\n        \n        while(num != 0){\n            // Extract the last digit\n            int digit = num % 10;\n            // Check if the digit is even or odd\n            if(digit % 2 == 0){\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n            // Remove the last digit\n            num = num / 10;\n        }\n        \n        result.add(evenCount);\n        result.add(oddCount);\n        \n        return result;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.evenOddCount(-12)); // (1, 1)\n        System.out.println(solution.evenOddCount(123)); // (1, 2)\n    }\n}"}
{"task_id": "Java/155", "generation": "        List<Integer> result = new ArrayList<>();\n        int evenCount = 0;\n        int oddCount = 0;\n        \n        String numString = String.valueOf(Math.abs(num));\n        \n        for (int i = 0; i < numString.length(); i++) {\n            int digit = Character.getNumericValue(numString.charAt(i));\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n        \n        result.add(evenCount);\n        result.add(oddCount);\n        \n        return result;\n    }\n}\n\nclass Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.evenOddCount(-12)); // Output: [1, 1]\n        System.out.println(solution.evenOddCount(123)); // Output: [1, 2]\n    }\n}"}
{"task_id": "Java/155", "generation": "        // Initialize count for even and odd digits\n        int evenCount = 0;\n        int oddCount = 0;\n        \n        // Convert the number to a string to iterate through its digits\n        String strNum = String.valueOf(Math.abs(num));\n        \n        // Iterate through each digit of the number\n        for (int i = 0; i < strNum.length(); i++) {\n            // Get the individual digit\n            int digit = Character.getNumericValue(strNum.charAt(i));\n            \n            // Check if the digit is even or odd and increment the respective count\n            if (digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n        \n        // Create a list to store the counts and return it\n        List<Integer> result = new ArrayList<>();\n        result.add(evenCount);\n        result.add(oddCount);\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.evenOddCount(-12)); // Output: [1, 1]\n        System.out.println(solution.evenOddCount(123)); // Output: [1, 2]\n    }\n}"}
{"task_id": "Java/155", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        int evenCount = 0;\n        int oddCount = 0;\n        \n        // Convert integer to string\n        String strNum = String.valueOf(Math.abs(num));\n        \n        for(int i = 0; i < strNum.length(); i++) {\n            int digit = strNum.charAt(i) - '0';\n            \n            if(digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n        \n        result.add(evenCount);\n        result.add(oddCount);\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.evenOddCount(-12)); // (1, 1)\n        System.out.println(solution.evenOddCount(123)); // (1, 2)\n    }\n}"}
{"task_id": "Java/155", "generation": "        List<Integer> result = new ArrayList<>();\n        if(num < 0) {\n            num = Math.abs(num);\n        }\n        \n        int evenCount = 0;\n        int oddCount = 0;\n        \n        while(num > 0) {\n            int digit = num % 10;\n            if(digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n            num = num / 10;\n        }\n        \n        result.add(evenCount);\n        result.add(oddCount);\n        \n        return result;\n    }\n}"}
{"task_id": "Java/156", "generation": "        if (number < 1 || number > 1000) {\n            throw new IllegalArgumentException(\"Number must be between 1 and 1000\");\n        }\n        \n        StringBuilder result = new StringBuilder();\n        int[] nums = {1000,900,500,400,100,90,50,40,10,9,5,4,1};\n        String[] romans = {\"M\",\"CM\",\"D\",\"CD\",\"C\",\"XC\",\"L\",\"XL\",\"X\",\"IX\",\"V\",\"IV\",\"I\"};\n        \n        for (int i = 0; i < nums.length; i++) {\n            while (number >= nums[i]) {\n                result.append(romans[i]);\n                number -= nums[i];\n            }\n        }\n        \n        return result.toString().toLowerCase();\n    }\n}"}
{"task_id": "Java/156", "generation": "        if (number < 1 || number > 1000) {\n            throw new IllegalArgumentException(\"Number must be between 1 and 1000\");\n        }\n\n        String[] romanNumerals = {\"i\", \"iv\", \"v\", \"ix\", \"x\", \"xl\", \"l\", \"xc\", \"c\", \"cd\", \"d\", \"cm\", \"m\"};\n        int[] values = {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n\n        StringBuilder result = new StringBuilder();\n\n        for (int i = values.length - 1; i >= 0; i--) {\n            while (number >= values[i]) {\n                result.append(romanNumerals[i]);\n                number -= values[i];\n            }\n        }\n\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.intToMiniRoman(19)); // Output: xix\n        System.out.println(solution.intToMiniRoman(152)); // Output: clii\n        System.out.println(solution.intToMiniRoman(426)); // Output: cdxxvi\n    }\n}"}
{"task_id": "Java/156", "generation": "        if (number < 1 || number > 1000) {\n            return \"Number out of range\";\n        }\n\n        String[] romanNumerals = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\" ,\"I\"};\n        int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n\n        StringBuilder sb = new StringBuilder();\n\n        for (int i = 0; i < values.length; i++) {\n            while (number >= values[i]) {\n                sb.append(romanNumerals[i]);\n                number -= values[i];\n            }\n        }\n\n        return sb.toString().toLowerCase();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.intToMiniRoman(19)); // Output: xix\n        System.out.println(solution.intToMiniRoman(152)); // Output: clii\n        System.out.println(solution.intToMiniRoman(426)); // Output: cdxxvi\n    }\n}"}
{"task_id": "Java/156", "generation": "        // Create a mapping of integer values to roman numeral characters\n        Map<Integer, String> numeralMap = new TreeMap<>();\n        numeralMap.put(1, \"i\");\n        numeralMap.put(4, \"iv\");\n        numeralMap.put(5, \"v\");\n        numeralMap.put(9, \"ix\");\n        numeralMap.put(10, \"x\");\n        numeralMap.put(40, \"xl\");\n        numeralMap.put(50, \"l\");\n        numeralMap.put(90, \"xc\");\n        numeralMap.put(100, \"c\");\n        numeralMap.put(400, \"cd\");\n        numeralMap.put(500, \"d\");\n        numeralMap.put(900, \"cm\");\n        numeralMap.put(1000, \"m\");\n\n        // Initialize result string\n        String romanNumeral = \"\";\n\n        // Iterate through the numeralMap in descending order\n        for (int key : numeralMap.keySet()) {\n            // Calculate the number of times the current key should be added to the result\n            int count = number / key;\n            // Append the corresponding roman numeral character \"count\" times to the result string\n            romanNumeral += numeralMap.get(key).repeat(count);\n            // Update the remaining number\n            number %= key;\n        }\n\n        // Convert the result to lowercase and return\n        return romanNumeral.toLowerCase();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.intToMiniRoman(19)); // Output: xix\n        System.out.println(solution.intToMiniRoman(152)); // Output: clii\n        System.out.println(solution.intToMiniRoman(426)); // Output: cdxxvi\n    }\n}"}
{"task_id": "Java/156", "generation": "        String[] romanNumerals = {\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"};\n        int[] numeralValues = {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n\n        StringBuilder result = new StringBuilder();\n\n        int index = numeralValues.length - 1;\n\n        while (number > 0) {\n            if (number >= numeralValues[index]) {\n                result.append(romanNumerals[index]);\n                number -= numeralValues[index];\n            } else {\n                index--;\n            }\n        }\n\n        return result.toString().toLowerCase();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.intToMiniRoman(19)); // \"xix\"\n        System.out.println(solution.intToMiniRoman(152)); // \"clii\"\n        System.out.println(solution.intToMiniRoman(426)); // \"cdxxvi\"\n    }\n}"}
{"task_id": "Java/157", "generation": "        int max = Math.max(a, Math.max(b, c));\n        int sum = a + b + c;\n\n        if (max == a) {\n            return a * a == (b * b + c * c) && sum - max > max;\n        } else if (max == b) {\n            return b * b == (a * a + c * c) && sum - max > max;\n        } else {\n            return c * c == (a * a + b * b) && sum - max > max;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.rightAngleTriangle(3, 4, 5)); // true\n        System.out.println(solution.rightAngleTriangle(1, 2, 3)); // false\n        System.out.println(solution.rightAngleTriangle(5, 12, 13)); // true\n    }\n}"}
{"task_id": "Java/157", "generation": "        List<Integer> sides = new ArrayList<>(Arrays.asList(a, b, c));\n        Collections.sort(sides);\n\n        // Pythagorean theorem: c^2 = a^2 + b^2\n        return Math.pow(sides.get(2), 2) == Math.pow(sides.get(0), 2) + Math.pow(sides.get(1), 2);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.rightAngleTriangle(3, 4, 5)); // true\n        System.out.println(solution.rightAngleTriangle(1, 2, 3)); // false\n    }\n}"}
{"task_id": "Java/157", "generation": "        // Sort the sides in ascending order\n        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n\n        // Check if the sides form a right-angled triangle\n        return sides[0]*sides[0] + sides[1]*sides[1] == sides[2]*sides[2];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.rightAngleTriangle(3, 4, 5)); // true\n        System.out.println(solution.rightAngleTriangle(1, 2, 3)); // false\n    }\n}"}
{"task_id": "Java/157", "generation": "        // Sort the sides in ascending order\n        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n\n        // Check if the Pythagorean theorem holds (a^2 + b^2 = c^2)\n        return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) == Math.pow(sides[2], 2);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.rightAngleTriangle(3, 4, 5)); // true\n        System.out.println(solution.rightAngleTriangle(1, 2, 3)); // false\n    }\n}"}
{"task_id": "Java/157", "generation": "        // Sort the sides in ascending order\n        int[] sides = {a, b, c};\n        Arrays.sort(sides);\n\n        // Check if the sides form a right-angled triangle\n        if (sides[2] * sides[2] == sides[0] * sides[0] + sides[1] * sides[1]) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.rightAngleTriangle(3, 4, 5)); // true\n        System.out.println(solution.rightAngleTriangle(1, 2, 3)); // false\n    }\n}"}
{"task_id": "Java/158", "generation": "        String maxWord = \"\";\n        int maxUniqueChars = 0;\n\n        for (String word : words) {\n            int uniqueChars = countUniqueCharacters(word);\n            if (uniqueChars > maxUniqueChars) {\n                maxUniqueChars = uniqueChars;\n                maxWord = word;\n            } else if (uniqueChars == maxUniqueChars && word.compareTo(maxWord) < 0) {\n                maxWord = word;\n            }\n        }\n\n        return maxWord;\n    }\n\n    private int countUniqueCharacters(String word) {\n        Set<Character> uniqueChars = new HashSet<>();\n        for (int i = 0; i < word.length(); i++) {\n            uniqueChars.add(word.charAt(i));\n        }\n        return uniqueChars.size();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<String> words1 = Arrays.asList(\"name\", \"of\", \"string\");\n        List<String> words2 = Arrays.asList(\"name\", \"enam\", \"game\");\n        List<String> words3 = Arrays.asList(\"aaaaaaa\", \"bb\", \"cc\");\n\n        System.out.println(solution.findMax(words1)); // Output: \"string\"\n        System.out.println(solution.findMax(words2)); // Output: \"enam\"\n        System.out.println(solution.findMax(words3)); // Output: \"aaaaaaa\"\n    }\n}"}
{"task_id": "Java/158", "generation": "        // Initialize variables to store the word with maximum unique characters and its count\n        String maxWord = \"\";\n        int maxCount = 0;\n\n        // Iterate through each word in the list\n        for (String word : words) {\n            // Create a set to store unique characters in the word\n            Set<Character> uniqueChars = new HashSet<>();\n\n            // Iterate through each character in the word\n            for (char ch : word.toCharArray()) {\n                uniqueChars.add(ch);\n            }\n\n            // Check if the current word has more unique characters than the previous maximum\n            if (uniqueChars.size() > maxCount || (uniqueChars.size() == maxCount && word.compareTo(maxWord) < 0)) {\n                maxWord = word;\n                maxCount = uniqueChars.size();\n            }\n        }\n\n        return maxWord;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.findMax(Arrays.asList(\"name\", \"of\", \"string\"))); // \"string\"\n        System.out.println(solution.findMax(Arrays.asList(\"name\", \"enam\", \"game\"))); // \"enam\"\n        System.out.println(solution.findMax(Arrays.asList(\"aaaaaaa\", \"bb\", \"cc\"))); // \"aaaaaaa\"\n    }\n}"}
{"task_id": "Java/158", "generation": "        String result = \"\";\n        int maxUniqueChars = 0;\n\n        for (String word : words) {\n            int uniqueChars = countUniqueChars(word);\n            if (uniqueChars > maxUniqueChars || (uniqueChars == maxUniqueChars && word.compareTo(result) < 0)) {\n                maxUniqueChars = uniqueChars;\n                result = word;\n            }\n        }\n\n        return result;\n    }\n\n    private int countUniqueChars(String word) {\n        Set<Character> uniqueChars = new HashSet<>();\n        for (char c : word.toCharArray()) {\n            uniqueChars.add(c);\n        }\n        return uniqueChars.size();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<String> words1 = Arrays.asList(\"name\", \"of\", \"string\");\n        List<String> words2 = Arrays.asList(\"name\", \"enam\", \"game\");\n        List<String> words3 = Arrays.asList(\"aaaaaaa\", \"bb\", \"cc\");\n\n        System.out.println(solution.findMax(words1)); // \"string\"\n        System.out.println(solution.findMax(words2)); // \"enam\"\n        System.out.println(solution.findMax(words3)); // \"aaaaaaa\"\n    }\n}"}
{"task_id": "Java/158", "generation": "        int maxUnique = 0;\n        String maxWord = \"\";\n\n        for (String word : words) {\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char ch : word.toCharArray()) {\n                uniqueChars.add(ch);\n            }\n            if (uniqueChars.size() > maxUnique || (uniqueChars.size() == maxUnique && word.compareTo(maxWord) < 0)) {\n                maxUnique = uniqueChars.size();\n                maxWord = word;\n            }\n        }\n\n        return maxWord;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.findMax(Arrays.asList(\"name\", \"of\", \"string\"))); // \"string\"\n        System.out.println(solution.findMax(Arrays.asList(\"name\", \"enam\", \"game\"))); // \"enam\"\n        System.out.println(solution.findMax(Arrays.asList(\"aaaaaaa\", \"bb\", \"cc\"))); // \"aaaaaaa\"\n    }\n}"}
{"task_id": "Java/158", "generation": "        int maxUnique = 0;\n        String maxWord = \"\";\n\n        for (String word : words) {\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : word.toCharArray()) {\n                uniqueChars.add(c);\n            }\n            if (uniqueChars.size() > maxUnique ||\n                    (uniqueChars.size() == maxUnique && word.compareTo(maxWord) < 0)) {\n                maxUnique = uniqueChars.size();\n                maxWord = word;\n            }\n        }\n\n        return maxWord;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<String> words1 = Arrays.asList(\"name\", \"of\", \"string\");\n        System.out.println(solution.findMax(words1)); // should print \"string\"\n\n        List<String> words2 = Arrays.asList(\"name\", \"enam\", \"game\");\n        System.out.println(solution.findMax(words2)); // should print \"enam\"\n\n        List<String> words3 = Arrays.asList(\"aaaaaaa\", \"bb\", \"cc\");\n        System.out.println(solution.findMax(words3)); // should print \"aaaaaaa\"\n    }\n}"}
{"task_id": "Java/159", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        int totalCarrots = number + need;\n        int eatenCarrots = 0;\n\n        if (totalCarrots >= remaining) {\n            eatenCarrots = totalCarrots + remaining;\n            remaining = 0;\n        } else {\n            eatenCarrots = totalCarrots;\n            remaining -= need;\n        }\n\n        result.add(eatenCarrots);\n        result.add(remaining);\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.eat(5, 6, 10)); // [11, 4]\n        System.out.println(solution.eat(4, 8, 9)); // [12, 1]\n        System.out.println(solution.eat(1, 10, 10)); // [11, 0]\n        System.out.println(solution.eat(2, 11, 5)); // [7, 0]\n    }\n}"}
{"task_id": "Java/159", "generation": "        int totalCarrots = number + need;\n        int eatenCarrots = 0;\n        \n        if (remaining >= need) {\n            // If there are enough remaining carrots, eat all need carrots\n            eatenCarrots = number + need;\n            remaining -= need;\n        } else {\n            // If there are not enough remaining carrots, eat all remaining carrots\n            eatenCarrots = number + remaining;\n            remaining = 0;\n        }\n        \n        List<Integer> result = new ArrayList<>();\n        result.add(eatenCarrots);\n        result.add(remaining);\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.eat(5, 6, 10)); // [11, 4]\n        System.out.println(solution.eat(4, 8, 9)); // [12, 1]\n        System.out.println(solution.eat(1, 10, 10)); // [11, 0]\n        System.out.println(solution.eat(2, 11, 5)); // [7, 0]\n    }\n}"}
{"task_id": "Java/159", "generation": "        int totalCarrots = number + need;\n        int carrotsLeft = Math.max(0, totalCarrots - remaining);\n        \n        List<Integer> result = new ArrayList<>();\n        result.add(totalCarrots);\n        result.add(carrotsLeft);\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.eat(5, 6, 10)); // [11, 4]\n        System.out.println(solution.eat(4, 8, 9)); // [12, 1]\n        System.out.println(solution.eat(1, 10, 10)); // [11, 0]\n        System.out.println(solution.eat(2, 11, 5)); // [7, 0]\n    }\n}"}
{"task_id": "Java/159", "generation": "        int totalCarrots = number + need;\n        int eatenCarrots = Math.min(totalCarrots, remaining);\n        int leftCarrots = Math.max(0, totalCarrots - remaining);\n\n        List<Integer> result = new ArrayList<>();\n        result.add(eatenCarrots);\n        result.add(leftCarrots);\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.eat(5, 6, 10)); // [11, 4]\n        System.out.println(solution.eat(4, 8, 9)); // [12, 1]\n        System.out.println(solution.eat(1, 10, 10)); // [11, 0]\n        System.out.println(solution.eat(2, 11, 5)); // [7, 0]\n    }\n}"}
{"task_id": "Java/159", "generation": "        int totalEaten = number + need; // total number of eaten carrots after meals\n        int carrotsLeft = Math.max(remaining - need, 0); // number of carrots left after meals\n\n        List<Integer> result = new ArrayList<>();\n        result.add(totalEaten);\n        result.add(carrotsLeft);\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.eat(5, 6, 10)); // [11, 4]\n        System.out.println(solution.eat(4, 8, 9)); // [12, 1]\n        System.out.println(solution.eat(1, 10, 10)); // [11, 0]\n        System.out.println(solution.eat(2, 11, 5)); // [7, 0]\n    }\n}"}
{"task_id": "Java/160", "generation": "        // Initialize the result with the first operand\n        int result = operand.get(0);\n        \n        // Iterate over the operators and operands to build the algebraic expression\n        for (int i = 0; i < operator.size(); i++) {\n            String op = operator.get(i);\n            int num = operand.get(i + 1);\n            \n            // Apply the corresponding operation based on the operator\n            switch (op) {\n                case \"+\":\n                    result += num;\n                    break;\n                case \"-\":\n                    result -= num;\n                    break;\n                case \"*\":\n                    result *= num;\n                    break;\n                case \"/\":\n                    result /= num;\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, num);\n                    break;\n                default:\n                    System.out.println(\"Invalid operator\");\n                    break;\n            }\n        }\n        \n        // Return the final result of the algebraic expression\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Example 1\n        List<String> operator1 = new ArrayList<>(Arrays.asList(\"+\", \"*\", \"-\"));\n        List<Integer> operand1 = new ArrayList<>(Arrays.asList(2, 3, 4, 5));\n        System.out.println(solution.doAlgebra(operator1, operand1)); // Output: 9\n        \n        // Example 2\n        List<String> operator2 = new ArrayList<>(Arrays.asList(\"*\", \"/\", \"+\"));\n        List<Integer> operand2 = new ArrayList<>(Arrays.asList(4, 2, 5, 3));\n        System.out.println(solution.doAlgebra(operator2, operand2)); // Output: 8\n    }\n}"}
{"task_id": "Java/160", "generation": "        // Initialize the result with the first operand\n        int result = operand.get(0);\n\n        // Iterate through the operators and operands\n        for (int i = 0; i < operator.size(); i++) {\n            // Get the operator and the next operand\n            String op = operator.get(i);\n            int num = operand.get(i + 1);\n\n            // Perform the corresponding operation\n            if (op.equals(\"+\")) {\n                result += num;\n            } else if (op.equals(\"-\")) {\n                result -= num;\n            } else if (op.equals(\"*\")) {\n                result *= num;\n            } else if (op.equals(\"/\")) {\n                result /= num;\n            } else if (op.equals(\"**\")) {\n                result = (int) Math.pow(result, num);\n            }\n        }\n\n        // Return the final result\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<String> operators = new ArrayList<>(Arrays.asList(\"+\", \"*\", \"-\"));\n        List<Integer> operands = new ArrayList<>(Arrays.asList(2, 3, 4, 5));\n\n        int result = solution.doAlgebra(operators, operands);\n        System.out.println(\"Result: \" + result);\n    }\n}"}
{"task_id": "Java/160", "generation": "        // Initialize the result to the first operand\n        int result = operand.get(0);\n\n        // Iterate through the operator list and perform the corresponding operation\n        for (int i = 0; i < operator.size(); i++) {\n            String op = operator.get(i);\n            int num = operand.get(i + 1);\n            \n            switch (op) {\n                case \"+\":\n                    result += num;\n                    break;\n                case \"-\":\n                    result -= num;\n                    break;\n                case \"*\":\n                    result *= num;\n                    break;\n                case \"/\":\n                    result /= num;\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, num);\n                    break;\n                default:\n                    System.out.println(\"Invalid operator: \" + op);\n            }\n        }\n\n        // Return the final result\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<String> operator = new ArrayList<>();\n        operator.add(\"+\");\n        operator.add(\"*\");\n        operator.add(\"-\");\n\n        List<Integer> operand = new ArrayList<>();\n        operand.add(2);\n        operand.add(3);\n        operand.add(4);\n        operand.add(5);\n\n        System.out.println(solution.doAlgebra(operator, operand)); // Output: 9\n    }\n}"}
{"task_id": "Java/160", "generation": "        // Initialize the result as the first operand\n        int result = operand.get(0);\n        \n        // Loop through the operators and operands\n        for (int i = 0; i < operator.size(); i++) {\n            String op = operator.get(i);\n            int opd = operand.get(i+1);\n            \n            // Perform the operation based on the operator\n            switch(op) {\n                case \"+\":\n                    result += opd;\n                    break;\n                case \"-\":\n                    result -= opd;\n                    break;\n                case \"*\":\n                    result *= opd;\n                    break;\n                case \"/\":\n                    result /= opd;\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, opd);\n                    break;\n            }\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/160", "generation": "        // Initialize result with first operand\n        int result = operand.get(0);\n\n        // Iterate through the operators list\n        for (int i = 0; i < operator.size(); i++) {\n            // Get the next operand\n            int nextOperand = operand.get(i + 1);\n\n            // Apply the operator to the result and next operand\n            switch (operator.get(i)) {\n                case \"+\":\n                    result += nextOperand;\n                    break;\n                case \"-\":\n                    result -= nextOperand;\n                    break;\n                case \"*\":\n                    result *= nextOperand;\n                    break;\n                case \"/\":\n                    result /= nextOperand;\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, nextOperand);\n                    break;\n                default:\n                    System.out.println(\"Invalid operator: \" + operator.get(i));\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<String> operator = new ArrayList<>(Arrays.asList(\"+\", \"*\", \"-\"));\n        List<Integer> operand = new ArrayList<>(Arrays.asList(2, 3, 4, 5));\n\n        System.out.println(solution.doAlgebra(operator, operand)); // Output: 9\n    }\n}"}
{"task_id": "Java/161", "generation": "        char[] chars = s.toCharArray();\n        boolean containsLetter = false;\n        \n        // Check if the string contains at least one letter\n        for(char c : chars) {\n            if(Character.isLetter(c)) {\n                containsLetter = true;\n                break;\n            }\n        }\n        \n        // If no letters are found, reverse the string\n        if(!containsLetter) {\n            return new StringBuilder(s).reverse().toString();\n        }\n        \n        // Reverse the case of letters\n        for(int i = 0; i < chars.length; i++) {\n            char c = chars[i];\n            if(Character.isLetter(c)) {\n                if(Character.isUpperCase(c)) {\n                    chars[i] = Character.toLowerCase(c);\n                } else {\n                    chars[i] = Character.toUpperCase(c);\n                }\n            }\n        }\n        \n        return new String(chars);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.solve(\"1234\")); // Output: \"4321\"\n        System.out.println(solution.solve(\"ab\")); // Output: \"AB\"\n        System.out.println(solution.solve(\"#a@C\")); // Output: \"#A@c\"\n    }\n}"}
{"task_id": "Java/161", "generation": "        char[] chars = s.toCharArray();\n        boolean containsLetters = false;\n\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLetter(chars[i])) {\n                containsLetters = true;\n                if (Character.isUpperCase(chars[i])) {\n                    chars[i] = Character.toLowerCase(chars[i]);\n                } else {\n                    chars[i] = Character.toUpperCase(chars[i]);\n                }\n            }\n        }\n\n        if (!containsLetters) {\n            // reverse the string\n            int left = 0;\n            int right = chars.length - 1;\n            while (left < right) {\n                char temp = chars[left];\n                chars[left] = chars[right];\n                chars[right] = temp;\n                left++;\n                right--;\n            }\n        }\n\n        return new String(chars);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.solve(\"1234\")); // Output: \"4321\"\n        System.out.println(solution.solve(\"ab\")); // Output: \"AB\"\n        System.out.println(solution.solve(\"#a@C\")); // Output: \"#A@c\"\n    }\n}"}
{"task_id": "Java/161", "generation": "        StringBuilder sb = new StringBuilder();\n        \n        boolean containsLetters = false;\n        \n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                containsLetters = true;\n                if (Character.isUpperCase(c)) {\n                    sb.append(Character.toLowerCase(c));\n                } else {\n                    sb.append(Character.toUpperCase(c));\n                }\n            } else {\n                sb.append(c);\n            }\n        }\n        \n        if (!containsLetters) {\n            return sb.reverse().toString();\n        }\n        \n        return sb.toString();\n    }\n}"}
{"task_id": "Java/161", "generation": "        // Convert the string into a character array\n        char[] chars = s.toCharArray();\n        \n        // Create a stack to store letters for reversal\n        Stack<Character> stack = new Stack<>();\n        for(char c : chars){\n            if(Character.isLetter(c)){\n                stack.push(c);\n            }\n        }\n        \n        // Reverse the case of letters in the stack\n        while(!stack.isEmpty()){\n            char c = stack.pop();\n            if(Character.isLowerCase(c)){\n                c = Character.toUpperCase(c);\n            } else {\n                c = Character.toLowerCase(c);\n            }\n            stack.push(c);\n        }\n        \n        // Replace letters in the string with reversed case from the stack\n        for(int i=0; i<chars.length; i++){\n            if(Character.isLetter(chars[i])){\n                chars[i] = stack.pop();\n            }\n        }\n        \n        // Reverse the whole string if it contains no letters\n        if(stack.isEmpty()){\n            int left = 0, right = s.length() - 1;\n            while(left < right){\n                char temp = chars[left];\n                chars[left] = chars[right];\n                chars[right] = temp;\n                left++;\n                right--;\n            }\n        }\n        \n        // Convert the character array back to a string\n        return new String(chars);\n    }\n}"}
{"task_id": "Java/161", "generation": "        char[] charArray = s.toCharArray();\n        boolean hasLetters = false;\n\n        for (int i = 0; i < charArray.length; i++) {\n            if (Character.isLetter(charArray[i])) {\n                hasLetters = true;\n                if (Character.isUpperCase(charArray[i])) {\n                    charArray[i] = Character.toLowerCase(charArray[i]);\n                } else {\n                    charArray[i] = Character.toUpperCase(charArray[i]);\n                }\n            }\n        }\n\n        if (!hasLetters) {\n            int start = 0;\n            int end = charArray.length - 1;\n            while (start < end) {\n                char temp = charArray[start];\n                charArray[start] = charArray[end];\n                charArray[end] = temp;\n                start++;\n                end--;\n            }\n        }\n\n        return new String(charArray);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.solve(\"1234\")); // \"4321\"\n        System.out.println(solution.solve(\"ab\")); // \"AB\"\n        System.out.println(solution.solve(\"#a@C\")); // \"#A@c\"\n    }\n}"}
{"task_id": "Java/162", "generation": "        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] messageDigest = md.digest(text.getBytes());\n        \n        // Convert byte array to signum representation\n        BigInteger no = new BigInteger(1, messageDigest);\n        \n        // Convert message digest value to hex value\n        String hashtext = no.toString(16);\n        \n        // Add leading zeros to make it a 32-character string\n        while (hashtext.length() < 32) {\n            hashtext = \"0\" + hashtext;\n        }\n        \n        return Optional.of(hashtext);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        String text = \"Hello world\";\n        Optional<String> result = solution.stringToMd5(text);\n        \n        if (result.isPresent()) {\n            System.out.println(result.get());\n        } else {\n            System.out.println(\"Input string is empty.\");\n        }\n    }\n}"}
{"task_id": "Java/162", "generation": "        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        \n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        \n        String md5Hash = bigInt.toString(16);\n        \n        // Add padding if necessary\n        while (md5Hash.length() < 32) {\n            md5Hash = \"0\" + md5Hash;\n        }\n        \n        return Optional.of(md5Hash);\n    }\n}"}
{"task_id": "Java/162", "generation": "        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        \n        byte[] digest = md.digest();\n        \n        BigInteger bigInt = new BigInteger(1, digest);\n        String md5Hash = bigInt.toString(16);\n        \n        while (md5Hash.length() < 32) {\n            md5Hash = \"0\" + md5Hash;\n        }\n        \n        return Optional.of(md5Hash);\n    }\n}"}
{"task_id": "Java/162", "generation": "        if(text.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        \n        byte[] digest = md.digest();\n        \n        BigInteger no = new BigInteger(1, digest);\n        String hashText = no.toString(16);\n        \n        while(hashText.length() < 32) {\n            hashText = \"0\" + hashText;\n        }\n        \n        return Optional.of(hashText);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        String text = \"Hello world\";\n        try {\n            Optional<String> result = solution.stringToMd5(text);\n            if (result.isPresent()) {\n                System.out.println(result.get());\n            } else {\n                System.out.println(\"Empty string!\");\n            }\n        } catch (NoSuchAlgorithmException e) {\n            System.out.println(\"MD5 algorithm not found.\");\n        }\n    }\n}"}
{"task_id": "Java/162", "generation": "        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        \n        BigInteger bigInt = new BigInteger(1, digest);\n        String hashText = bigInt.toString(16);\n        \n        while (hashText.length() < 32) {\n            hashText = \"0\" + hashText;\n        }\n        \n        return Optional.of(hashText);\n    }\n}"}
{"task_id": "Java/163", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        // Swap a and b if a is greater than b\n        if (a > b) {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n        \n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/163", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for(int i = Math.min(a, b); i <= Math.max(a, b); i++) {\n            if(i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.generateIntegers(2, 8)); // [2, 4, 6, 8]\n        System.out.println(solution.generateIntegers(8, 2)); // [2, 4, 6, 8]\n        System.out.println(solution.generateIntegers(10, 14)); // []\n    }\n}"}
{"task_id": "Java/163", "generation": "        List<Integer> evenDigits = new ArrayList<>();\n        \n        if (a > b) {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n        \n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                evenDigits.add(i);\n            }\n        }\n        \n        return evenDigits;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.generateIntegers(2, 8)); // [2, 4, 6, 8]\n        System.out.println(solution.generateIntegers(8, 2)); // [2, 4, 6, 8]\n        System.out.println(solution.generateIntegers(10, 14)); // []\n    }\n}"}
{"task_id": "Java/163", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        // Swap values if a is greater than b\n        if (a > b) {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n        \n        // Iterate through the range of numbers from a to b\n        for (int i = a; i <= b; i++) {\n            // Check if the number is even and add it to the result list\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.generateIntegers(2, 8)); // [2, 4, 6, 8]\n        System.out.println(solution.generateIntegers(8, 2)); // [2, 4, 6, 8]\n        System.out.println(solution.generateIntegers(10, 14)); // []\n    }\n}"}
{"task_id": "Java/163", "generation": "        List<Integer> result = new ArrayList<>();\n\n        // Swap a and b if a is greater than b\n        if (a > b) {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n\n        // Iterate from a to b and add even digits to the result list\n        for (int i = a; i <= b; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.generateIntegers(2, 8)); // [2, 4, 6, 8]\n        System.out.println(solution.generateIntegers(8, 2)); // [2, 4, 6, 8]\n        System.out.println(solution.generateIntegers(10, 14)); // []\n    }\n}"}
