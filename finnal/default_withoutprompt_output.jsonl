{"task_id": "Java/0", "generation": "        // Sort the list of numbers\n        Collections.sort(numbers);\n        \n        // Iterate through the list to find close elements\n        for(int i=0; i<numbers.size()-1; i++) {\n            double diff = Math.abs(numbers.get(i) - numbers.get(i+1));\n            if(diff <= threshold) {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Double> numbers = new ArrayList<>(Arrays.asList(1.0, 2.0, 3.0, 5.0));\n        double threshold = 0.5;\n        \n        boolean result = solution.hasCloseElements(numbers, threshold);\n        \n        if(result) {\n            System.out.println(\"Close elements exist within the threshold.\");\n        } else {\n            System.out.println(\"No close elements exist within the threshold.\");\n        }\n    }\n}"}
{"task_id": "Java/1", "generation": "        List<String> groups = new ArrayList<>();\n        \n        StringBuilder group = new StringBuilder();\n        int balance = 0;\n        \n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                balance++;\n            } else if (c == ')') {\n                balance--;\n            }\n            \n            group.append(c);\n            \n            if (balance == 0) {\n                groups.add(group.toString());\n                group.setLength(0);\n            }\n        }\n        \n        return groups;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        String paren_string = \"(a(bc)de(fg))\";\n        List<String> groups = solution.separateParenGroups(paren_string);\n        \n        for (String group : groups) {\n            System.out.println(group);\n        }\n    }\n}"}
{"task_id": "Java/2", "generation": "        // Convert the number to a string\n        String numberStr = String.valueOf(number);\n        \n        // Find the index of the decimal point\n        int decimalIndex = numberStr.indexOf('.');\n        \n        // Check if the decimal point exists in the number\n        if(decimalIndex != -1) {\n            // Truncate the decimal part of the number\n            numberStr = numberStr.substring(0, decimalIndex);\n        }\n        \n        // Convert the truncated string back to a double\n        double truncatedNumber = Double.parseDouble(numberStr);\n        \n        return truncatedNumber;\n    }\n}\n\nclass Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        double number = 15.67;\n        System.out.println(\"Original number: \" + number);\n        \n        double truncatedNumber = solution.truncateNumber(number);\n        System.out.println(\"Truncated number: \" + truncatedNumber);\n    }\n}"}
{"task_id": "Java/3", "generation": "        int sum = 0;\n\n        for (int op : operations) {\n            sum += op;\n            if (sum < 0) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> operations = new ArrayList<>(Arrays.asList(1, -2, 3, -4, 5));\n        boolean result = solution.belowZero(operations);\n        \n        if (result) {\n            System.out.println(\"Sum went below zero at some point.\");\n        } else {\n            System.out.println(\"Sum never went below zero.\");\n        }\n    }\n}"}
{"task_id": "Java/4", "generation": "        // Calculate the mean\n        double sum = 0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n\n        // Calculate the absolute deviations\n        double absoluteDeviationsSum = 0;\n        for (double num : numbers) {\n            absoluteDeviationsSum += Math.abs(num - mean);\n        }\n\n        // Calculate the mean absolute deviation\n        double meanAbsoluteDeviation = absoluteDeviationsSum / numbers.size();\n\n        return meanAbsoluteDeviation;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Double> numbers = new ArrayList<>();\n        numbers.add(1.0);\n        numbers.add(2.0);\n        numbers.add(3.0);\n        numbers.add(4.0);\n        numbers.add(5.0);\n\n        System.out.println(solution.meanAbsoluteDeviation(numbers));\n    }\n}"}
{"task_id": "Java/5", "generation": "        List<Integer> result = new ArrayList<>();\n\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n\n        return result;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        List<Integer> numbers1 = new ArrayList<>(Arrays.asList(1, 2, 3, 4));\n        int delimiter1 = 0;\n        List<Integer> result1 = solution.intersperse(numbers1, delimiter1);\n        System.out.println(result1); // Output: [1, 0, 2, 0, 3, 0, 4]\n\n        // Test case 2\n        List<Integer> numbers2 = new ArrayList<>(Arrays.asList(5, 6, 7));\n        int delimiter2 = 9;\n        List<Integer> result2 = solution.intersperse(numbers2, delimiter2);\n        System.out.println(result2); // Output: [5, 9, 6, 9, 7]\n\n        // Test case 3\n        List<Integer> numbers3 = new ArrayList<>(Arrays.asList(8));\n        int delimiter3 = 10;\n        List<Integer> result3 = solution.intersperse(numbers3, delimiter3);\n        System.out.println(result3); // Output: [8]\n    }\n}"}
{"task_id": "Java/6", "generation": "        List<Integer> result = new ArrayList<>();\n        Stack<Integer> stack = new Stack<>();\n        \n        for(int i=0; i<paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            \n            if(c == '(') {\n                stack.push(i);\n            } else if(c == ')') {\n                if(!stack.isEmpty()) {\n                    int start = stack.pop();\n                    result.add(start);\n                    result.add(i);\n                }\n            }\n        }\n        \n        if(!stack.isEmpty()) {\n            return new ArrayList<>();\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/7", "generation": "        List<String> filteredStrings = new ArrayList<>();\n        \n        for (String s : strings) {\n            if (s.contains(substring)) {\n                filteredStrings.add(s);\n            }\n        }\n        \n        return filteredStrings;\n    }\n}"}
{"task_id": "Java/8", "generation": "        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        int product = 1;\n\n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n\n        result.add(sum);\n        result.add(product);\n\n        return result;\n    }\n}"}
{"task_id": "Java/9", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        Deque<Integer> queue = new LinkedList<>();\n        \n        int max = Integer.MIN_VALUE;\n        \n        for (int i = 0; i < numbers.size(); i++) {\n            int curr = numbers.get(i);\n            queue.offer(curr);\n            \n            if (queue.size() > 3) {\n                queue.poll();\n            }\n            \n            max = curr;\n            for (int num : queue) {\n                max = Math.max(max, num);\n            }\n            \n            result.add(max);\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/10", "generation": "        if (isPalindrome(string)) {\n            return string;\n        }\n        \n        String reverseString = new StringBuilder(string).reverse().toString();\n        String palindrome = string + reverseString.substring(1);\n        \n        return palindrome;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        String testString1 = \"racecar\";\n        String testString2 = \"hello\";\n        \n        System.out.println(\"Test if '\" + testString1 + \"' is a palindrome: \" + solution.isPalindrome(testString1));\n        System.out.println(\"Test if '\" + testString2 + \"' is a palindrome: \" + solution.isPalindrome(testString2));\n        \n        System.out.println(\"Make palindrome of '\" + testString1 + \"': \" + solution.makePalindrome(testString1));\n        System.out.println(\"Make palindrome of '\" + testString2 + \"': \" + solution.makePalindrome(testString2));\n    }\n}"}
{"task_id": "Java/11", "generation": "        // If the lengths of the strings are different, return an empty string\n        if (a.length() != b.length()) {\n            return \"\";\n        }\n        \n        StringBuilder result = new StringBuilder();\n        \n        // Perform XOR operation on each character's ASCII value\n        for (int i = 0; i < a.length(); i++) {\n            char charA = a.charAt(i);\n            char charB = b.charAt(i);\n            \n            // XOR operation\n            int xorResult = charA ^ charB;\n            result.append((char) xorResult);\n        }\n        \n        return result.toString();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        String a = \"hello\";\n        String b = \"world\";\n        System.out.println(solution.stringXor(a, b)); // Output should be \"\\u0001\\u0005\\u0012\\u0012\\r\"\n        \n        a = \"apple\";\n        b = \"banana\";\n        System.out.println(solution.stringXor(a, b)); // Output should be \"\\u0001\\u0003\\u0003\\u0003\\u0001\"\n        \n        a = \"12345\";\n        b = \"abcde\";\n        System.out.println(solution.stringXor(a, b)); // Output should be \"\\u0006\\u0004\\u0004\\u0004\\u0005\"\n    }\n}"}
{"task_id": "Java/12", "generation": "        if(strings == null || strings.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        String longestString = strings.get(0);\n        \n        for(String str : strings) {\n            if(str.length() > longestString.length()) {\n                longestString = str;\n            }\n        }\n        \n        return Optional.of(longestString);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        List<String> strings = new ArrayList<>(Arrays.asList(\"cat\", \"dog\", \"elephant\", \"lion\", \"tiger\"));\n        \n        Solution solution = new Solution();\n        Optional<String> longestString = solution.longest(strings);\n        \n        if(longestString.isPresent()) {\n            System.out.println(\"Longest string: \" + longestString.get());\n        } else {\n            System.out.println(\"No strings found\");\n        }\n    }\n}"}
{"task_id": "Java/13", "generation": "        if (b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(b, a % b);\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        int a = 12;\n        int b = 18;\n        System.out.println(\"Greatest common divisor of \" + a + \" and \" + b + \" is: \" + solution.greatestCommonDivisor(a, b));\n        \n        a = 15;\n        b = 25;\n        System.out.println(\"Greatest common divisor of \" + a + \" and \" + b + \" is: \" + solution.greatestCommonDivisor(a, b));\n        \n        a = 30;\n        b = 45;\n        System.out.println(\"Greatest common divisor of \" + a + \" and \" + b + \" is: \" + solution.greatestCommonDivisor(a, b));\n    }\n}"}
{"task_id": "Java/14", "generation": "        List<String> prefixes = new ArrayList<>();\n        if (string == null || string.isEmpty()) {\n            return prefixes;\n        }\n        \n        for (int i = 1; i <= string.length(); i++) {\n            prefixes.add(string.substring(0, i));\n        }\n        \n        return prefixes;\n    }\n}"}
{"task_id": "Java/15", "generation": "        if (n <= 0) {\n            return \"\";\n        }\n\n        StringBuilder sb = new StringBuilder();\n        Queue<String> queue = new LinkedList<>();\n        queue.add(\"1\");\n\n        for (int i = 1; i <= n; i++) {\n            String curr = queue.poll();\n            sb.append(curr).append(\" \");\n\n            String next = curr + \"0\";\n            queue.add(next);\n\n            next = curr + \"1\";\n            queue.add(next);\n        }\n\n        return sb.toString().trim();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int n = 5;\n        System.out.println(solution.stringSequence(n));\n    }\n}"}
{"task_id": "Java/16", "generation": "        Set<Character> set = new HashSet<>();\n        for (int i = 0; i < string.length(); i++) {\n            set.add(string.charAt(i));\n        }\n        return set.size();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        String string = \"hello\";\n        System.out.println(\"Input: \" + string);\n        System.out.println(\"Number of distinct characters: \" + solution.countDistinctCharacters(string));\n        \n        string = \"banana\";\n        System.out.println(\"\\nInput: \" + string);\n        System.out.println(\"Number of distinct characters: \" + solution.countDistinctCharacters(string));\n    }\n}"}
{"task_id": "Java/17", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        // Split the string into tokens based on space\n        String[] tokens = string.split(\" \");\n\n        // Iterating through each token to find the integer value\n        for (String token : tokens) {\n            try {\n                int num = Integer.parseInt(token);\n                result.add(num);\n            } catch (NumberFormatException e) {\n                // If the token is not an integer, ignore it\n                continue;\n            }\n        }\n        \n        return result;\n    }\n} \n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test input string\n        String input = \"10 Beep 20 Boop 30 Bop\";\n        \n        // Call the parseMusic method and store the result\n        List<Integer> result = solution.parseMusic(input);\n        \n        // Print the result\n        System.out.println(result);\n    }\n}"}
{"task_id": "Java/18", "generation": "        if (string == null || substring == null || string.isEmpty() || substring.isEmpty()) {\n            return 0;\n        }\n\n        int count = 0;\n        int index = 0;\n\n        while (index != -1) {\n            index = string.indexOf(substring, index);\n            if (index != -1) {\n                count++;\n                index += substring.length();\n            }\n        }\n\n        return count;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String string = \"ababababababab\";\n        String substring = \"aba\";\n        int result = solution.howManyTimes(string, substring);\n        System.out.println(\"The substring '\" + substring + \"' appears \" + result + \" times in the given string.\");\n    }\n}"}
{"task_id": "Java/19", "generation": "        String result = \"\";\n        \n        // Convert the input string to a list of integers\n        List<Integer> nums = new ArrayList<>();\n        String[] numberArr = numbers.split(\" \");\n        for (String numStr : numberArr) {\n            nums.add(Integer.parseInt(numStr));\n        }\n        \n        // Sort the list of integers in ascending order\n        Collections.sort(nums);\n        \n        // Convert the sorted list of integers back to a string\n        for (int i = 0; i < nums.size(); i++) {\n            if (i == nums.size() - 1) {\n                result += Integer.toString(nums.get(i));\n            } else {\n                result += Integer.toString(nums.get(i)) + \" \";\n            }\n        }\n        \n        return result;\n    }\n}\n\nclass Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        String numbers1 = \"5 2 8 6 1 3 7 4\";\n        System.out.println(solution.sortNumbers(numbers1)); // Output: \"1 2 3 4 5 6 7 8\"\n        \n        String numbers2 = \"4 1 7 3 2 8 5 6\";\n        System.out.println(solution.sortNumbers(numbers2)); // Output: \"1 2 3 4 5 6 7 8\"\n    }\n}"}
{"task_id": "Java/20", "generation": "        List<Double> result = new ArrayList<>();\n        \n        // Sort the list of numbers in ascending order\n        Collections.sort(numbers);\n        \n        // Find the closest elements by comparing the absolute difference between each pair of adjacent elements\n        double minDiff = Double.MAX_VALUE;\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = Math.abs(numbers.get(i) - numbers.get(i+1));\n            if (diff < minDiff) {\n                minDiff = diff;\n            }\n        }\n        \n        // Add the closest elements to the result list\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i+1)) == minDiff) {\n                result.add(numbers.get(i));\n                result.add(numbers.get(i+1));\n            }\n        }\n        \n        return result;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Double> numbers = new ArrayList<>();\n        numbers.add(1.0);\n        numbers.add(2.0);\n        numbers.add(4.0);\n        numbers.add(7.0);\n        numbers.add(9.0);\n        \n        Solution solution = new Solution();\n        List<Double> closestElements = solution.findClosestElements(numbers);\n        \n        System.out.println(\"Closest elements: \" + closestElements);\n    }\n}"}
{"task_id": "Java/21", "generation": "        List<Double> rescaledNumbers = new ArrayList<>();\n\n        if (numbers == null || numbers.size() == 0) {\n            return rescaledNumbers;\n        }\n\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n\n        for (double num : numbers) {\n            double rescaledNum = (num - min) / (max - min);\n            rescaledNumbers.add(rescaledNum);\n        }\n\n        return rescaledNumbers;\n    }\n}"}
{"task_id": "Java/22", "generation": "List<Integer> integers = new ArrayList<>();\n\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                integers.add((Integer) value);\n            }\n        }\n\n        return integers;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Object> values = new ArrayList<>();\n        values.add(1);\n        values.add(\"apple\");\n        values.add(2);\n        values.add(\"orange\");\n        values.add(3);\n\n        List<Integer> integers = solution.filterIntergers(values);\n\n        System.out.println(\"Integers: \" + integers);\n    }\n}"}
{"task_id": "Java/23", "generation": "        // Initialize a variable to keep track of the length of the string\n        int length = 0;\n\n        // Iterate through each character in the string and increment the length variable\n        for (int i = 0; i < string.length(); i++) {\n            length++;\n        }\n\n        // Return the final length of the string\n        return length;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        String inputString = \"Hello, World!\";\n        int length = solution.strlen(inputString);\n        System.out.println(\"Length of the string is: \" + length);\n    }\n}"}
{"task_id": "Java/24", "generation": "        Set<Integer> divisors = new HashSet<>();\n        \n        for (int i = 1; i <= n; i++) {\n            if (n % i == 0) {\n                divisors.add(i);\n            }\n        }\n        \n        List<Integer> divisorList = new ArrayList<>(divisors);\n        Collections.sort(divisorList, Collections.reverseOrder());\n        \n        return divisorList.get(1);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.largestDivisor(12)); // Output: 6\n        System.out.println(solution.largestDivisor(30)); // Output: 15\n        System.out.println(solution.largestDivisor(49)); // Output: 7\n        System.out.println(solution.largestDivisor(81)); // Output: 27\n    }\n}"}
{"task_id": "Java/25", "generation": "        // Initialize an arraylist to store the factors\n        List<Integer> factors = new ArrayList<>();\n        \n        // Loop through all numbers from 1 to sqrt(n)\n        for (int i = 1; i*i <= n; i++) {\n            // If i divides n, add i to the factors list\n            if (n % i == 0) {\n                factors.add(i);\n                \n                // If i is not the square root of n, add n/i to the factors list\n                if (n / i != i) {\n                    factors.add(n / i);\n                }\n            }\n        }\n        \n        // Sort the factors list\n        Collections.sort(factors);\n        \n        return factors;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create an instance of the Solution class\n        Solution solution = new Solution();\n        \n        // Test the factorize method\n        int n = 36;\n        List<Integer> factors = solution.factorize(n);\n        \n        System.out.println(\"Factors of \" + n + \" are: \");\n        for (int factor : factors) {\n            System.out.print(factor + \" \");\n        }\n    }\n}"}
{"task_id": "Java/26", "generation": "        Set<Integer> set = new LinkedHashSet<>(numbers);\n        List<Integer> uniqueNumbers = new ArrayList<>(set);\n        return uniqueNumbers;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> numbers = new ArrayList<>(Arrays.asList(1, 2, 2, 3, 4, 4, 5));\n        System.out.println(\"Original numbers: \" + numbers);\n\n        List<Integer> uniqueNumbers = solution.removeDuplicates(numbers);\n        System.out.println(\"Unique numbers: \" + uniqueNumbers);\n    }\n}"}
{"task_id": "Java/27", "generation": "        // Initialize a StringBuilder to store the converted string\n        StringBuilder sb = new StringBuilder();\n        \n        // Iterate through each character in the input string\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            \n            // Check if the character is an uppercase letter\n            if (Character.isUpperCase(c)) {\n                // Convert the uppercase letter to lowercase and append to the StringBuilder\n                sb.append(Character.toLowerCase(c));\n            } else if (Character.isLowerCase(c)) {\n                // Convert the lowercase letter to uppercase and append to the StringBuilder\n                sb.append(Character.toUpperCase(c));\n            } else {\n                // If the character is not a letter, simply append it to the StringBuilder\n                sb.append(c);\n            }\n        }\n        \n        // Convert the StringBuilder to a string and return\n        return sb.toString();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        String test1 = \"Hello World\";\n        System.out.println(solution.flipCase(test1)); // Output: hELLO wORLD\n        \n        String test2 = \"Java Programming\";\n        System.out.println(solution.flipCase(test2)); // Output: jAVA pROGRAMMING\n        \n        String test3 = \"12345\";\n        System.out.println(solution.flipCase(test3)); // Output: 12345\n    }\n}"}
{"task_id": "Java/28", "generation": "        StringBuilder result = new StringBuilder();\n        for (String s : strings) {\n            result.append(s);\n        }\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        List<String> strings = new ArrayList<>();\n        strings.add(\"Hello\");\n        strings.add(\"World\");\n        strings.add(\"!\");\n        \n        Solution solution = new Solution();\n        String concatenatedString = solution.concatenate(strings);\n        \n        System.out.println(concatenatedString);\n    }\n}"}
{"task_id": "Java/29", "generation": "        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        List<String> strings = Arrays.asList(\"apple\", \"banana\", \"pear\", \"orange\", \"peach\");\n        String prefix = \"p\";\n        \n        Solution solution = new Solution();\n        List<String> filteredStrings = solution.filterByPrefix(strings, prefix);\n        \n        System.out.println(\"Original strings: \" + strings);\n        System.out.println(\"Filtered strings with prefix '\" + prefix + \"': \" + filteredStrings);\n    }\n}"}
{"task_id": "Java/30", "generation": "        List<Integer> positiveNumbers = l.stream()\n                                        .filter(num -> num > 0)\n                                        .collect(Collectors.toList());\n        return positiveNumbers;\n    }\n}"}
{"task_id": "Java/31", "generation": "        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n} \n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a number: \");\n        int n = scanner.nextInt();\n        \n        if (solution.isPrime(n)) {\n            System.out.println(n + \" is a prime number.\");\n        } else {\n            System.out.println(n + \" is not a prime number.\");\n        }\n    }\n}"}
{"task_id": "Java/32", "generation": "        // Initialize starting guess for the zero\n        double x = 0.0;\n        \n        // Initialize step size for updating the guess\n        double step = 0.1;\n        \n        // Set the threshold for convergence\n        double epsilon = 0.0001;\n        \n        // Iterate until the difference between consecutive guesses is less than epsilon\n        while (true) {\n            double nextX = x - poly(xs, x) / polyDerivative(xs, x);\n            if (Math.abs(nextX - x) < epsilon) {\n                return nextX;\n            }\n            x = nextX;\n        }\n    }\n    \n    /**\n    Evaluates derivative of polynomial with coefficients xs at point x.\n    return xs[1] + 2 * xs[2] * x + 3 * xs[3] * x^2 + .... n * xs[n] * x^(n-1)\n     */\n    public double polyDerivative(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 1; i < xs.size(); i++) {\n            double coefficient = i * xs.get(i);\n            result += coefficient * Math.pow(x, i - 1);\n        }\n        return result;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Double> coefficients = new ArrayList<>(Arrays.asList(1.0, -2.0, 1.0)); // x^2 - 2x + 1\n        \n        double zero = solution.findZero(coefficients);\n        System.out.println(\"Zero of the polynomial: \" + zero);\n    }\n}"}
{"task_id": "Java/33", "generation": "        // Separate odd and even numbers from the list\n        List<Integer> oddList = new ArrayList<>();\n        List<Integer> evenList = new ArrayList<>();\n        \n        for (int num : l) {\n            if (num % 2 == 0) {\n                evenList.add(num);\n            } else {\n                oddList.add(num);\n            }\n        }\n        \n        // Sort the odd numbers\n        Collections.sort(oddList);\n        \n        // Sort the even numbers in descending order\n        Collections.sort(evenList, Collections.reverseOrder());\n        \n        // Combine the odd and even lists\n        List<Integer> sortedList = new ArrayList<>();\n        sortedList.addAll(oddList);\n        sortedList.addAll(evenList);\n        \n        return sortedList;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> list = new ArrayList<>(Arrays.asList(4, 5, 2, 9, 8, 7));\n        \n        Solution sol = new Solution();\n        \n        System.out.println(\"Original List: \" + list);\n        List<Integer> sortedList = sol.sortThird(list);\n        System.out.println(\"Sorted List: \" + sortedList);\n    }\n} \n\n//Output\n//Original List: [4, 5, 2, 9, 8, 7]\n//Sorted List: [5, 7, 9, 8, 4, 2]"}
{"task_id": "Java/34", "generation": "        Set<Integer> set = new HashSet<>();\n        List<Integer> uniqueList = new ArrayList<>();\n        \n        for (int num : l) {\n            if (!set.contains(num)) {\n                set.add(num);\n                uniqueList.add(num);\n            }\n        }\n        \n        return uniqueList;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> list = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 3, 2, 1, 5));\n        Solution solution = new Solution();\n        \n        List<Integer> uniqueList = solution.unique(list);\n        \n        System.out.println(\"Original List: \" + list);\n        System.out.println(\"Unique List: \" + uniqueList);\n    }\n}"}
{"task_id": "Java/35", "generation": "        // Check if the list is empty\n        if (l.isEmpty()) {\n            return 0;\n        }\n\n        // Initialize a variable to store the maximum element\n        int max = Integer.MIN_VALUE;\n\n        // Iterate through the list to find the maximum element\n        for (int num : l) {\n            if (num > max) {\n                max = num;\n            }\n        }\n\n        return max;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a list of integers\n        List<Integer> list = new ArrayList<>();\n        list.add(5);\n        list.add(10);\n        list.add(3);\n        list.add(8);\n\n        // Create an instance of the Solution class\n        Solution solution = new Solution();\n\n        // Call the maxElement method and print the result\n        System.out.println(solution.maxElement(list)); // Output: 10\n    }\n}"}
{"task_id": "Java/36", "generation": "        List<String> ans = new ArrayList<>();\n        \n        for (int i = 1; i <= n; i++) {\n            if (i % 3 == 0 && i % 5 == 0) {\n                ans.add(\"FizzBuzz\");\n            } else if (i % 3 == 0) {\n                ans.add(\"Fizz\");\n            } else if (i % 5 == 0) {\n                ans.add(\"Buzz\");\n            } else {\n                ans.add(String.valueOf(i));\n            }\n        }\n        \n        for (String str : ans) {\n            System.out.println(str);\n        }\n        \n        return 0;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        solution.fizzBuzz(15);\n    }\n}"}
{"task_id": "Java/37", "generation": "        List<Integer> evenList = new ArrayList<>();\n        \n        for (Integer num : l) {\n            if (num % 2 == 0) {\n                evenList.add(num);\n            }\n        }\n        \n        Collections.sort(evenList);\n        \n        return evenList;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> inputList = new ArrayList<>(Arrays.asList(6, 3, 8, 2, 10, 4));\n        \n        Solution solution = new Solution();\n        List<Integer> sortedEvenList = solution.sortEven(inputList);\n        \n        System.out.println(\"Sorted even numbers: \" + sortedEvenList);\n    }\n}"}
{"task_id": "Java/38", "generation": "        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // decycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test encodeCyclic\n        String input1 = \"abcdefg\";\n        System.out.println(\"Encoded: \" + solution.encodeCyclic(input1)); // Output: \"bcdefga\"\n        \n        // Test decodeCyclic\n        String input2 = \"bcdefga\";\n        System.out.println(\"Decoded: \" + solution.decodeCyclic(input2)); // Output: \"abcdefg\"\n    }\n}"}
{"task_id": "Java/39", "generation": "        List<Integer> primes = new ArrayList<>();\n        List<Integer> fib = new ArrayList<>();\n        \n        // Generate prime numbers up to n\n        for (int i = 2; i <= n; i++) {\n            boolean isPrime = true;\n            for (int j = 2; j*j <= i; j++) {\n                if (i % j == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                primes.add(i);\n            }\n        }\n        \n        // Generate Fibonacci sequence up to n\n        int a = 0;\n        int b = 1;\n        while (a <= n) {\n            fib.add(a);\n            int next = a + b;\n            a = b;\n            b = next;\n        }\n        \n        // Find the prime Fibonacci numbers\n        int count = 0;\n        for (int num : fib) {\n            if (primes.contains(num)) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int n = 10;\n        System.out.println(solution.primeFib(n)); // Output: 3\n    }\n}"}
{"task_id": "Java/40", "generation": "        // Sort the list\n        Collections.sort(l);\n\n        // Iterate through the list\n        for (int i = 0; i < l.size() - 2; i++) {\n            int start = i + 1;\n            int end = l.size() - 1;\n            \n            while (start < end) {\n                int sum = l.get(i) + l.get(start) + l.get(end);\n                \n                // Check if the sum is zero\n                if (sum == 0) {\n                    return true;\n                } else if (sum < 0) {\n                    start++;\n                } else {\n                    end--;\n                }\n            }\n        }\n        \n        // No triplets sum to zero\n        return false;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> list = new ArrayList<>(Arrays.asList(-1, 0, 1, 2, -1, -4));\n        Solution solution = new Solution();\n        System.out.println(solution.triplesSumToZero(list));\n    }\n}"}
{"task_id": "Java/41", "generation": "        int count = 0;\n        Random rand = new Random();\n\n        for (int i = 0; i < n; i++) {\n            double speed = rand.nextDouble() * 100;\n            double distance = speed;\n            int time = 0;\n\n            while (distance < 100) {\n                time++;\n                distance += speed;\n\n                double otherCarSpeed = rand.nextDouble() * 100;\n                double otherCarDistance = otherCarSpeed * time;\n\n                if (distance >= otherCarDistance) {\n                    count++;\n                    break;\n                }\n            }\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int n = 10000;\n        int collisions = solution.carRaceCollision(n);\n        System.out.println(\"Number of collisions in \" + n + \" races: \" + collisions);\n    }\n}"}
{"task_id": "Java/42", "generation": "        return l.stream()\n                .map(num -> num + 1)\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Create a list of integers\n        List<Integer> list = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5));\n        \n        // Print the original list\n        System.out.println(\"Original List: \" + list);\n        \n        // Increment each element in the list by 1\n        List<Integer> incrList = solution.incrList(list);\n        \n        // Print the incremented list\n        System.out.println(\"Incremented List: \" + incrList);\n    }\n}"}
{"task_id": "Java/43", "generation": "        Set<Integer> set = new HashSet<>();\n        \n        for (int num : l) {\n            if (set.contains(-num)) {\n                return true;\n            }\n            set.add(num);\n        }\n        \n        return false;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> l1 = Arrays.asList(2, -4, 6, 8, -2, 10);\n        List<Integer> l2 = Arrays.asList(1, 3, 5, -3, -1);\n        \n        System.out.println(solution.pairsSumToZero(l1)); // true\n        System.out.println(solution.pairsSumToZero(l2)); // true\n    }\n}"}
{"task_id": "Java/44", "generation": "        // Check if base is smaller than 2 or greater than 16\n        if (base < 2 || base > 16) {\n            return \"Invalid base\";\n        }\n        \n        // Handle zero case\n        if (x == 0) {\n            return \"0\";\n        }\n        \n        // Define the characters for digits greater than 9\n        char[] digits = \"0123456789ABCDEF\".toCharArray();\n        \n        // Create a stack to store remainders\n        Stack<Character> stack = new Stack<>();\n        \n        // Convert to target base\n        while (x != 0) {\n            stack.push(digits[x % base]);\n            x /= base;\n        }\n        \n        // Create a string from the stack\n        StringBuilder sb = new StringBuilder();\n        while (!stack.isEmpty()) {\n            sb.append(stack.pop());\n        }\n        \n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.changeBase(10, 2)); // Output: \"1010\"\n        System.out.println(solution.changeBase(15, 16)); // Output: \"F\"\n        System.out.println(solution.changeBase(255, 8)); // Output: \"377\"\n    }\n}"}
{"task_id": "Java/45", "generation": "        return 0.5 * a * h;\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"Enter the base length of the triangle:\");\n        double base = scanner.nextDouble();\n        System.out.println(\"Enter the height of the triangle:\");\n        double height = scanner.nextDouble();\n\n        Solution solution = new Solution();\n        double area = solution.triangleArea(base, height);\n\n        System.out.println(\"The area of the triangle is: \" + area);\n    }\n}"}
{"task_id": "Java/46", "generation": "        if (n <= 1) {\n            return n;\n        }\n        \n        int[] dp = new int[n+1];\n        dp[0] = 0;\n        dp[1] = 1;\n        \n        for (int i = 2; i <= n; i++) {\n            dp[i] = dp[i-1] + dp[i-2];\n        }\n        \n        return dp[n];\n    }\n}"}
{"task_id": "Java/47", "generation": "        Collections.sort(l);\n        \n        int n = l.size();\n        if (n % 2 == 0) {\n            int mid1 = l.get(n/2);\n            int mid2 = l.get(n/2 - 1);\n            return (double)(mid1 + mid2) / 2;\n        } else {\n            return (double)l.get(n/2);\n        }\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> numbers1 = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5));\n        System.out.println(solution.median(numbers1)); // Expected output: 3.0\n        \n        List<Integer> numbers2 = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 6));\n        System.out.println(solution.median(numbers2)); // Expected output: 3.5\n    }\n}"}
{"task_id": "Java/48", "generation": "        text = text.toLowerCase(); // convert text to lowercase\n        text = text.replaceAll(\"[^a-zA-Z0-9]\", \"\"); // remove all non-alphanumeric characters\n\n        int left = 0;\n        int right = text.length() - 1;\n\n        while (left < right) {\n            if (text.charAt(left) != text.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        String text1 = \"A man, a plan, a canal, Panama\";\n        System.out.println(solution.isPalindrome(text1)); // true\n\n        String text2 = \"race a car\";\n        System.out.println(solution.isPalindrome(text2)); // false\n\n        String text3 = \"Madam, in Eden I'm Adam\";\n        System.out.println(solution.isPalindrome(text3)); // true\n    }\n}"}
{"task_id": "Java/49", "generation": "        if (n < 0) {\n            n = ((n % p) + p) % p;\n        } else {\n            n = n % p;\n        }\n        \n        return n;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter the value of n: \");\n        int n = scanner.nextInt();\n        System.out.print(\"Enter the value of p: \");\n        int p = scanner.nextInt();\n        \n        int result = solution.modp(n, p);\n        System.out.println(\"Result: \" + result);\n    }\n}"}
{"task_id": "Java/50", "generation": "        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 5 - 'a' + 26) % 26));\n        }\n        return sb.toString();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        String originalString = \"hello\";\n        String encodedString = solution.encodeShift(originalString);\n        String decodedString = solution.decodeShift(encodedString);\n        \n        System.out.println(\"Original String: \" + originalString);\n        System.out.println(\"Encoded String: \" + encodedString);\n        System.out.println(\"Decoded String: \" + decodedString);\n    }\n}"}
{"task_id": "Java/51", "generation": "        // Create a list to store the vowels\n        List<Character> vowels = Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U');\n        \n        // Create a StringBuilder to store the result\n        StringBuilder result = new StringBuilder();\n        \n        // Iterate through each character in the input text\n        for (int i = 0; i < text.length(); i++) {\n            char currentChar = text.charAt(i);\n            \n            // Check if the character is not a vowel\n            if (!vowels.contains(currentChar)) {\n                // If it is not a vowel, add it to the result\n                result.append(currentChar);\n            }\n        }\n        \n        // Convert the StringBuilder to a String and return it\n        return result.toString();\n    }\n}"}
{"task_id": "Java/52", "generation": "        int sum = 0;\n        for (int num : l) {\n            sum += num;\n        }\n        \n        return sum < t;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> list1 = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5));\n        int threshold1 = 20;\n        System.out.println(solution.belowThreshold(list1, threshold1)); // Output: true\n        \n        List<Integer> list2 = new ArrayList<>(Arrays.asList(10, 20, 30, 40, 50));\n        int threshold2 = 100;\n        System.out.println(solution.belowThreshold(list2, threshold2)); // Output: false\n    }\n}"}
{"task_id": "Java/53", "generation": "        // Iterate until there is no carry\n        while (y != 0) {\n            // Carry now contains common set bits of x and y\n            int carry = x & y;\n\n            // Sum of bits of x and y where at least one of the bits is not set\n            x = x ^ y;\n\n            // Carry is shifted by one so that adding it to x gives the required sum\n            y = carry << 1;\n        }\n\n        return x;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int x = 5;\n        int y = 7;\n        System.out.println(\"Sum: \" + solution.add(x, y));\n    }\n}"}
{"task_id": "Java/54", "generation": "        // Check if the lengths of both strings are equal\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        \n        // Create frequency maps for both strings\n        Map<Character, Integer> freqMap0 = new HashMap<>();\n        Map<Character, Integer> freqMap1 = new HashMap<>();\n        \n        // Populate frequency map for first string\n        for (char c : s0.toCharArray()) {\n            freqMap0.put(c, freqMap0.getOrDefault(c, 0) + 1);\n        }\n        \n        // Populate frequency map for second string\n        for (char c : s1.toCharArray()) {\n            freqMap1.put(c, freqMap1.getOrDefault(c, 0) + 1);\n        }\n        \n        // Compare the frequency maps for equality\n        return freqMap0.equals(freqMap1);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        String s0 = \"hello\";\n        String s1 = \"holle\";\n        System.out.println(solution.sameChars(s0, s1)); // Output: true\n\n        String s2 = \"abc\";\n        String s3 = \"def\";\n        System.out.println(solution.sameChars(s2, s3)); // Output: false\n    }\n}"}
{"task_id": "Java/55", "generation": "        if (n <= 1) {\n            return n;\n        }\n        \n        int[] fibArr = new int[n+1];\n        fibArr[0] = 0;\n        fibArr[1] = 1;\n        \n        for (int i = 2; i <= n; i++) {\n            fibArr[i] = fibArr[i-1] + fibArr[i-2];\n        }\n        \n        return fibArr[n];\n    }\n}"}
{"task_id": "Java/56", "generation": "        Stack<Character> stack = new Stack<>();\n        \n        for (char bracket : brackets.toCharArray()) {\n            if (bracket == '(' || bracket == '[' || bracket == '{') {\n                stack.push(bracket);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                \n                char top = stack.pop();\n                \n                if ((bracket == ')' && top != '(') || \n                    (bracket == ']' && top != '[') || \n                    (bracket == '}' && top != '{')) {\n                    return false;\n                }\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n}"}
{"task_id": "Java/57", "generation": "        // Check if the list is monotonically increasing\n        boolean increasing = true;\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < l.get(i - 1)) {\n                increasing = false;\n                break;\n            }\n        }\n        \n        // Check if the list is monotonically decreasing\n        boolean decreasing = true;\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > l.get(i - 1)) {\n                decreasing = false;\n                break;\n            }\n        }\n        \n        // Return true if either increasing or decreasing is true\n        return increasing || decreasing;\n    }\n}\n\n// Test the solution\nclass Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> l1 = Arrays.asList(1, 2, 3, 4, 5);\n        List<Integer> l2 = Arrays.asList(5, 4, 3, 2, 1);\n        List<Integer> l3 = Arrays.asList(1, 1, 1, 1, 1);\n        \n        System.out.println(solution.monotonic(l1)); // Should return true\n        System.out.println(solution.monotonic(l2)); // Should return true\n        System.out.println(solution.monotonic(l3)); // Should return true\n    }\n}"}
{"task_id": "Java/58", "generation": "        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        \n        List<Integer> commonElements = new ArrayList<>();\n        \n        for(Integer num : set1) {\n            if(set2.contains(num)) {\n                commonElements.add(num);\n            }\n        }\n        \n        return commonElements;\n    }\n}\n\nclass Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> l1 = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5));\n        List<Integer> l2 = new ArrayList<>(Arrays.asList(3, 4, 5, 6, 7));\n        \n        List<Integer> commonElements = solution.common(l1, l2);\n        System.out.println(\"Common elements: \" + commonElements);\n    }\n}"}
{"task_id": "Java/59", "generation": "        int largestPrime = 0;\n        // Divide n by 2 until it is odd\n        while (n % 2 == 0) {\n            largestPrime = 2;\n            n /= 2;\n        }\n        // Check for other prime factors\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                largestPrime = i;\n                n /= i;\n            }\n        }\n        // If n is greater than 2, it is a prime factor\n        if (n > 2) {\n            largestPrime = n;\n        }\n        return largestPrime;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int n = 13195;\n        System.out.println(\"Largest prime factor of \" + n + \" is: \" + solution.largestPrimeFactor(n));\n    }\n}"}
{"task_id": "Java/60", "generation": "        if (n <= 0) {\n            return 0;\n        }\n        \n        return (n*(n+1))/2;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.sumToN(5)); // 15\n        System.out.println(solution.sumToN(10)); // 55\n        System.out.println(solution.sumToN(0)); // 0\n        System.out.println(solution.sumToN(-5)); // 0\n    }\n}"}
{"task_id": "Java/61", "generation": "        Stack<Character> stack = new Stack<>();\n        \n        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n            \n            if (c == '(' || c == '[' || c == '{') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n\n                char top = stack.pop();\n                if ((c == ')' && top != '(') || (c == ']' && top != '[') || (c == '}' && top != '{')) {\n                    return false;\n                }\n            }\n        }\n        \n        return stack.isEmpty();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        String brackets1 = \"()[]{}\";\n        System.out.println(solution.correctBracketing(brackets1)); // true\n        \n        String brackets2 = \"([{}])\";\n        System.out.println(solution.correctBracketing(brackets2)); // true\n        \n        String brackets3 = \"{[)}\";\n        System.out.println(solution.correctBracketing(brackets3)); // false\n        \n        String brackets4 = \"]\";\n        System.out.println(solution.correctBracketing(brackets4)); // false\n    }\n}"}
{"task_id": "Java/62", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) - xs.get(i-1));\n        }\n        \n        return result;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> xs = new ArrayList<>(Arrays.asList(1, 3, 5, 7, 9));\n        \n        List<Integer> result = solution.derivative(xs);\n        \n        System.out.println(\"Original list: \" + xs);\n        System.out.println(\"Derivative list: \" + result);\n    }\n}"}
{"task_id": "Java/63", "generation": "        if (n <= 1) {\n            return n;\n        }\n        \n        int a = 0;\n        int b = 1;\n        \n        for (int i = 2; i <= n; i++) {\n            int temp = b;\n            b = a + b;\n            a = temp;\n        }\n        \n        return b;\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.fibfib(0)); // Output: 0\n        System.out.println(solution.fibfib(1)); // Output: 1\n        System.out.println(solution.fibfib(2)); // Output: 1\n        System.out.println(solution.fibfib(5)); // Output: 5\n        System.out.println(solution.fibfib(10)); // Output: 55\n    }\n}"}
{"task_id": "Java/64", "generation": "        // Initialize a set of vowels\n        Set<Character> vowels = new HashSet<>();\n        vowels.add('a');\n        vowels.add('e');\n        vowels.add('i');\n        vowels.add('o');\n        vowels.add('u');\n\n        // Initialize a count variable\n        int count = 0;\n\n        // Iterate through the input string and count the number of vowels\n        for (char c : s.toCharArray()) {\n            if (vowels.contains(Character.toLowerCase(c))) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test the vowelsCount method\n        String input = \"Hello World\";\n        int result = solution.vowelsCount(input);\n        System.out.println(\"Number of vowels in '\" + input + \"': \" + result);\n    }\n}"}
{"task_id": "Java/65", "generation": "        // Convert the integer x to a binary string\n        String binaryString = Integer.toBinaryString(x);\n\n        // Calculate the length of the binary string\n        int length = binaryString.length();\n\n        // Calculate the actual shift value based on the length of the binary string\n        int actualShift = shift % length;\n\n        // Perform circular shift by actualShift amount\n        String shiftedBinaryString = binaryString.substring(length - actualShift) + binaryString.substring(0, length - actualShift);\n\n        // Convert the shifted binary string back to an integer\n        int shiftedInt = Integer.parseInt(shiftedBinaryString, 2);\n\n        return String.valueOf(shiftedInt);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test case 1\n        int x1 = 23;\n        int shift1 = 3;\n        String result1 = solution.circularShift(x1, shift1);\n        System.out.println(\"Circular shift of \" + x1 + \" by \" + shift1 + \" is: \" + result1);\n\n        // Test case 2\n        int x2 = 45;\n        int shift2 = 5;\n        String result2 = solution.circularShift(x2, shift2);\n        System.out.println(\"Circular shift of \" + x2 + \" by \" + shift2 + \" is: \" + result2);\n    }\n}"}
{"task_id": "Java/66", "generation": "        // Remove any non-digit characters from the string\n        String digitsOnly = s.replaceAll(\"[^0-9]\", \"\");\n        \n        // Initialize sum variable to store the sum of digits\n        int sum = 0;\n        \n        // Iterate through each digit character in the string and add it to the sum\n        for(int i = 0; i < digitsOnly.length(); i++) {\n            sum += Character.getNumericValue(digitsOnly.charAt(i));\n        }\n        \n        return sum;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.digitSum(\"abc12def3ghi45\")); // Output: 15\n        System.out.println(solution.digitSum(\"12345\")); // Output: 15\n        System.out.println(solution.digitSum(\"a1b2c3\")); // Output: 6\n        System.out.println(solution.digitSum(\"1a2b3c\")); // Output: 6\n    }\n}"}
{"task_id": "Java/67", "generation": "        // Store the count of fruits in a HashMap\n        Map<Character, Integer> map = new HashMap<>();\n        \n        int i = 0; // Start of the window\n        int maxFruits = 0; // Initialize the maximum count of fruits\n        int distinctFruitsCount = 0; // Count of distinct fruits in the window\n        \n        // Iterate through the string\n        for(int j = 0; j < s.length(); j++) {\n            char c = s.charAt(j);\n            map.put(c, map.getOrDefault(c, 0) + 1);\n            \n            // Increase the distinctFruitsCount if a new fruit is added\n            if(map.get(c) == 1) {\n                distinctFruitsCount++;\n            }\n            \n            // Shrink the window if the distinct fruit count exceeds n\n            while(distinctFruitsCount > n) {\n                char leftChar = s.charAt(i);\n                map.put(leftChar, map.get(leftChar) - 1);\n                \n                // Decrease the distinctFruitsCount if a fruit count is 0 after shrinking the window\n                if(map.get(leftChar) == 0) {\n                    distinctFruitsCount--;\n                }\n                \n                i++; // Move the start of the window to the right\n            }\n            \n            // Update the maximum count of fruits in the window\n            maxFruits = Math.max(maxFruits, j - i + 1);\n        }\n        \n        return maxFruits; // Return the maximum count of fruits that can be distributed\n    }\n}\n\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.fruitDistribution(\"abaccc\", 2)); // Output: 5\n        System.out.println(solution.fruitDistribution(\"abcbbbbcccbdddadacb\", 2)); // Output: 7\n        System.out.println(solution.fruitDistribution(\"a\", 1)); // Output: 1\n    }\n}"}
{"task_id": "Java/68", "generation": "        List<Integer> pluckedList = new ArrayList<>();\n        \n        if(arr.size() < 3) {\n            return pluckedList;\n        }\n        \n        pluckedList.add(arr.get(0));\n        pluckedList.add(arr.get(arr.size() - 1));\n        return pluckedList;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> arr = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5));\n        List<Integer> pluckedList = solution.pluck(arr);\n        \n        System.out.println(\"Original List: \" + arr);\n        System.out.println(\"Plucked List: \" + pluckedList);\n    }\n}"}
{"task_id": "Java/69", "generation": "        int n = lst.size();\n        int left = 0;\n        int right = n - 1;\n\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n\n            if (lst.get(mid) == mid) {\n                return mid;\n            } else if (lst.get(mid) < mid) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n\n        return -1;\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        List<Integer> lst = new ArrayList<>();\n\n        System.out.println(\"Enter the size of the list: \");\n        int n = scanner.nextInt();\n        System.out.println(\"Enter the elements of the list: \");\n        for (int i = 0; i < n; i++) {\n            int num = scanner.nextInt();\n            lst.add(num);\n        }\n\n        Solution sol = new Solution();\n        int result = sol.search(lst);\n        System.out.println(\"Fixed Point in the list is at index: \" + result);\n    }\n}"}
{"task_id": "Java/70", "generation": "        // Create a map to store the original index of each element in the list\n        Map<Integer, Integer> indexMap = new HashMap<>();\n        for (int i = 0; i < lst.size(); i++) {\n            indexMap.put(lst.get(i), i);\n        }\n        \n        // Sort the list\n        Collections.sort(lst, (a, b) -> {\n            if (a % 2 != b % 2) {\n                return Integer.compare(a % 2, b % 2);\n            } else {\n                return Integer.compare(indexMap.get(a), indexMap.get(b));\n            }\n        });\n        \n        return lst;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Example input\n        List<Integer> lst = Arrays.asList(3, 2, 5, 1, 4, 6);\n        \n        // Sort the list using the strange sort algorithm\n        List<Integer> result = solution.strangeSortList(lst);\n        \n        // Print the sorted list\n        System.out.println(result);\n    }\n}"}
{"task_id": "Java/71", "generation": "        // calculate the semi-perimeter\n        double s = (a + b + c) / 2;\n        \n        // calculate the area using Heron's formula\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        \n        return area;\n    }\n}"}
{"task_id": "Java/72", "generation": "        Collections.sort(q);\n        \n        int n = q.size();\n        long sum = 0;\n        for (int i = 0; i < n-1; i++) {\n            sum += q.get(i);\n            if (sum >= w) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        List<Integer> q = new ArrayList<>();\n        q.add(1);\n        q.add(2);\n        q.add(3);\n        \n        int w = 4;\n        \n        System.out.println(sol.willItFly(q, w));\n    }\n}"}
{"task_id": "Java/73", "generation": "        // Sort the array in non-decreasing order\n        Collections.sort(arr);\n        \n        // Initialize the smallestChange variable to hold the maximum integer value\n        int smallestChange = Integer.MAX_VALUE;\n        \n        // Iterate through the array\n        for(int i=0; i<arr.size()-1; i++) {\n            // Calculate the difference between adjacent elements\n            int diff = arr.get(i+1) - arr.get(i);\n            \n            // Update the smallestChange variable if the difference is smaller\n            if(diff < smallestChange) {\n                smallestChange = diff;\n            }\n        }\n        \n        // Return the smallestChange\n        return smallestChange;\n    }\n}\n\nclass Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> arr = new ArrayList<>(Arrays.asList(1, 3, 6, 10, 15)); // Example input\n        \n        System.out.println(solution.smallestChange(arr)); // Output: 2\n    }\n}"}
{"task_id": "Java/74", "generation": "        // Create a set to store unique elements from both lists\n        Set<String> set = new HashSet<>();\n        \n        // Add all elements from lst1 to the set\n        set.addAll(lst1);\n        \n        // Add all elements from lst2 to the set\n        set.addAll(lst2);\n        \n        // Convert the set to a list\n        List<String> result = new ArrayList<>(set);\n        \n        // Sort the list in alphabetical order\n        Collections.sort(result);\n        \n        return result;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<String> lst1 = new ArrayList<>(Arrays.asList(\"apple\", \"banana\", \"orange\"));\n        List<String> lst2 = new ArrayList<>(Arrays.asList(\"banana\", \"grapes\", \"pineapple\"));\n        \n        List<String> result = solution.totalMatch(lst1, lst2);\n        \n        System.out.println(result);\n    }\n}"}
{"task_id": "Java/75", "generation": "        if (a <= 1) {\n            return false;\n        }\n\n        for (int i = 2; i <= Math.sqrt(a); i++) {\n            if (a % i == 0) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}"}
{"task_id": "Java/76", "generation": "        if (x <= 0 || n <= 0) {\n            return false;\n        }\n        \n        double result = Math.pow(x, 1.0 / n);\n        \n        return result == Math.round(result);\n    }\n    \n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.isSimplePower(8, 2)); // true\n        System.out.println(solution.isSimplePower(27, 3)); // true\n        System.out.println(solution.isSimplePower(16, 2)); // true\n        System.out.println(solution.isSimplePower(5, 2)); // false\n        System.out.println(solution.isSimplePower(0, 2)); // false\n        System.out.println(solution.isSimplePower(8, 0)); // false\n    }\n}"}
{"task_id": "Java/77", "generation": "        // Find the cube root of the given number\n        double cubeRoot = Math.cbrt(a);\n        \n        // Check if the cube root is an integer\n        if ((int) cubeRoot == cubeRoot) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        \n        // Input the number\n        System.out.println(\"Enter a number: \");\n        int num = sc.nextInt();\n        \n        Solution sol = new Solution();\n        \n        // Check if the number is a cube\n        boolean result = sol.iscube(num);\n        \n        if (result) {\n            System.out.println(num + \" is a cube number\");\n        } else {\n            System.out.println(num + \" is not a cube number\");\n        }\n    }\n}"}
{"task_id": "Java/78", "generation": "        // Convert the hex string to uppercase\n        num = num.toUpperCase();\n        \n        // Initialize a map to store the hex values\n        Map<Character, Integer> hexMap = new HashMap<>();\n        hexMap.put('0', 0);\n        hexMap.put('1', 1);\n        hexMap.put('2', 2);\n        hexMap.put('3', 3);\n        hexMap.put('4', 4);\n        hexMap.put('5', 5);\n        hexMap.put('6', 6);\n        hexMap.put('7', 7);\n        hexMap.put('8', 8);\n        hexMap.put('9', 9);\n        hexMap.put('A', 10);\n        hexMap.put('B', 11);\n        hexMap.put('C', 12);\n        hexMap.put('D', 13);\n        hexMap.put('E', 14);\n        hexMap.put('F', 15);\n        \n        // Initialize a variable to store the result\n        int result = 0;\n        \n        // Iterate through the hex string and calculate the decimal value\n        for (int i = 0; i < num.length(); i++) {\n            char c = num.charAt(i);\n            int value = hexMap.get(c);\n            result = result * 16 + value;\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test the hexKey method\n        String hexNum = \"1A\";\n        int result = solution.hexKey(hexNum);\n        System.out.println(\"Decimal value of \" + hexNum + \" is: \" + result);\n    }\n}"}
{"task_id": "Java/79", "generation": "        // Handle edge case when decimal is 0\n        if (decimal == 0) {\n            return \"0\";\n        }\n        \n        // Initialize a StringBuilder to store the binary representation\n        StringBuilder binary = new StringBuilder();\n        \n        // Convert the decimal to binary\n        while (decimal > 0) {\n            int remainder = decimal % 2;\n            binary.insert(0, remainder); // Insert remainder at the beginning of StringBuilder\n            decimal = decimal / 2;\n        }\n        \n        return binary.toString();\n    }\n}\n\nclass Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        int decimal1 = 10;\n        System.out.println(\"Binary representation of \" + decimal1 + \" is: \" + solution.decimalToBinary(decimal1));\n        \n        int decimal2 = 23;\n        System.out.println(\"Binary representation of \" + decimal2 + \" is: \" + solution.decimalToBinary(decimal2));\n        \n        int decimal3 = 56;\n        System.out.println(\"Binary representation of \" + decimal3 + \" is: \" + solution.decimalToBinary(decimal3));\n    }\n}"}
{"task_id": "Java/80", "generation": "        Set<Integer> set = new HashSet<>();\n        int num = Integer.parseInt(s);\n\n        while(num != 1){\n            if(set.contains(num)){\n                return false;\n            }\n            set.add(num);\n            num = getNextNumber(num);\n        }\n\n        return true;\n    }\n\n    private int getNextNumber(int num){\n        int result = 0;\n        while(num > 0){\n            int digit = num % 10;\n            result += digit * digit;\n            num = num / 10;\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.isHappy(\"19\")); // true\n        System.out.println(solution.isHappy(\"2\")); // false\n    }\n}"}
{"task_id": "Java/81", "generation": "        List<String> letterGrades = new ArrayList<>();\n\n        for (Double grade : grades) {\n            if (grade >= 90) {\n                letterGrades.add(\"A\");\n            } else if (grade >= 80) {\n                letterGrades.add(\"B\");\n            } else if (grade >= 70) {\n                letterGrades.add(\"C\");\n            } else if (grade >= 60) {\n                letterGrades.add(\"D\");\n            } else {\n                letterGrades.add(\"F\");\n            }\n        }\n\n        return letterGrades;\n    }\n\n    public static void main(String[] args) {\n        List<Double> grades = new ArrayList<>(Arrays.asList(87.5, 91.2, 65.8, 78.3, 53.7));\n        Solution solution = new Solution();\n        List<String> letterGrades = solution.numericalLetterGrade(grades);\n        System.out.println(\"Numerical Grades: \" + grades);\n        System.out.println(\"Letter Grades: \" + letterGrades);\n    }\n}"}
{"task_id": "Java/82", "generation": "        // Create a list to store prime numbers\n        List<Integer> primes = new ArrayList<>();\n        \n        // Check if each substring is a prime number\n        for (int i = 1; i <= string.length(); i++) {\n            String substring = string.substring(0, i);\n            \n            if (isPrime(substring.length())) {\n                primes.add(i);\n            }\n        }\n        \n        // Check if the last prime number is equal to the length of the string\n        return primes.size() > 0 && primes.get(primes.size() - 1) == string.length();\n    }\n    \n    // Helper method to check if a number is prime\n    private boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.primeLength(\"abc\")); // Output: true\n        System.out.println(solution.primeLength(\"xyz\")); // Output: false\n    }\n}"}
{"task_id": "Java/83", "generation": "        // Count of numbers that start with 1\n        int countStart = 0;\n        \n        // Loop through numbers from 1 to n\n        for (int i = 1; i <= n; i++) {\n            String strNum = String.valueOf(i);\n            // Check if the number starts with 1\n            if (strNum.charAt(0) == '1') {\n                countStart++;\n            }\n        }\n        \n        return countStart;\n    }\n}"}
{"task_id": "Java/84", "generation": "        // Check if N is even\n        if (N % 2 == 0) {\n            return \"Even\";\n        } else {\n            return \"Odd\";\n        }\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int N = sc.nextInt();\n        \n        Solution solution = new Solution();\n        String result = solution.solve(N);\n        \n        System.out.println(result);\n    }\n}"}
{"task_id": "Java/85", "generation": "        int sum = 0;\n        for (int num : lst) {\n            sum += num;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> lst = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5));\n        Solution sol = new Solution();\n        int sum = sol.add(lst);\n        System.out.println(\"Sum of the list: \" + sum);\n    }\n}"}
{"task_id": "Java/86", "generation": "        char[] arr = s.toCharArray();\n        int n = arr.length;\n        \n        // Sort the characters of string 's' alphabetically\n        Arrays.sort(arr);\n        \n        // Constructing the original string by interleaving the sorted characters\n        // from s with the characters from the middle of the original string in reverse order\n        StringBuilder original = new StringBuilder();\n        int mid = (n+1) / 2;\n        for (int i = 0, j = mid; i < mid; i++, j++) {\n            original.append(arr[i]);\n            if (j < n) {\n                original.append(arr[j]);\n            }\n        }\n        \n        return original.toString();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        String s1 = \"lloeh\";\n        String s2 = \"aobnnaacbdbo\";\n        \n        System.out.println(\"Original string for s1: \" + solution.antiShuffle(s1));\n        System.out.println(\"Original string for s2: \" + solution.antiShuffle(s2));\n    }\n}"}
{"task_id": "Java/87", "generation": "        if (x == 0) {\n            List<Integer> firstRow = new ArrayList<>();\n            firstRow.add(1);\n            lst.add(firstRow);\n        } else {\n            List<Integer> prevRow = lst.get(x - 1);\n            List<Integer> newRow = new ArrayList<>();\n            newRow.add(1);\n            for (int i = 1; i < prevRow.size(); i++) {\n                int sum = prevRow.get(i) + prevRow.get(i - 1);\n                newRow.add(sum);\n            }\n            newRow.add(1);\n            lst.add(newRow);\n        }\n        return lst;\n    }\n\n    public List<List<Integer>> generate(int numRows) {\n        List<List<Integer>> triangle = new ArrayList<>();\n        for (int i = 0; i < numRows; i++) {\n            triangle = getRow(triangle, i);\n        }\n        return triangle;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<List<Integer>> result = solution.generate(5);\n        for (List<Integer> row : result) {\n            System.out.println(row);\n        }\n    }\n}"}
{"task_id": "Java/88", "generation": "        // Sort the array using Collections.sort() method\n        Collections.sort(array);\n        \n        // Return the sorted array\n        return array;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Create a list of integers\n        List<Integer> array = new ArrayList<>(Arrays.asList(3, 1, 4, 1, 5, 9, 2, 6));\n        \n        // Call the sortArray() method to sort the array\n        List<Integer> sortedArray = solution.sortArray(array);\n        \n        // Print the sorted array\n        System.out.println(\"Original array: \" + array);\n        System.out.println(\"Sorted array: \" + sortedArray);\n    }\n}"}
{"task_id": "Java/89", "generation": "        if (s == null || s.length() == 0) {\n            return \"\";\n        }\n        \n        char[] chars = s.toCharArray();\n        int n = s.length();\n        int mid = n / 2;\n        char[] encrypted = new char[n];\n        \n        int left = 0;\n        int right = n - 1;\n        \n        for (int i = 0; i < n; i++) {\n            if (i % 2 == 0) {\n                encrypted[left] = chars[i];\n                left++;\n            } else {\n                encrypted[right] = chars[i];\n                right--;\n            }\n        }\n        \n        return new String(encrypted);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String s = \"hello\";\n        System.out.println(solution.encrypt(s)); // Output: \"hleol\"\n    }\n}"}
{"task_id": "Java/90", "generation": "        if (lst == null || lst.size() == 0) {\n            return Optional.empty();\n        }\n\n        int n = lst.size();\n        int i = n - 2;\n\n        while (i >= 0 && lst.get(i) >= lst.get(i + 1)) {\n            i--;\n        }\n\n        if (i < 0) {\n            return Optional.empty();\n        }\n\n        int j = n - 1;\n        while (lst.get(j) <= lst.get(i)) {\n            j--;\n        }\n\n        Collections.swap(lst, i, j);\n        Collections.reverse(lst.subList(i + 1, n));\n\n        int result = 0;\n        for (int num : lst) {\n            result = result * 10 + num;\n        }\n\n        return Optional.of(result);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> lst = new ArrayList<>(Arrays.asList(1, 2, 3));\n\n        System.out.println(\"Original List: \" + lst);\n        Optional<Integer> nextSmallest = solution.nextSmallest(lst);\n        if (nextSmallest.isPresent()) {\n            System.out.println(\"Next smallest number: \" + nextSmallest.get());\n        } else {\n            System.out.println(\"No smaller number exists\");\n        }\n    }\n}"}
{"task_id": "Java/91", "generation": "        if (S.length() < 3) {\n            return 0;\n        }\n\n        int count = 1;\n        for (int i = 2; i < S.length(); i++) {\n            if (S.charAt(i) == S.charAt(i-1) && S.charAt(i) == S.charAt(i-2)) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        String S1 = \"abbcccdda\";\n        String S2 = \"aabbaabb\";\n        String S3 = \"abcabcabc\";\n\n        System.out.println(solution.isBored(S1)); // Output: 1\n        System.out.println(solution.isBored(S2)); // Output: 0\n        System.out.println(solution.isBored(S3)); // Output: 2\n    }\n}"}
{"task_id": "Java/92", "generation": "        return x instanceof Integer || y instanceof Integer || z instanceof Integer;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        System.out.println(solution.anyInt(5, \"hello\", true)); // true\n        System.out.println(solution.anyInt(\"world\", false, 10)); // true\n        System.out.println(solution.anyInt(\"foo\", \"bar\", \"baz\")); // false\n    }\n}"}
{"task_id": "Java/93", "generation": "        Map<String, Integer> dictionary = new HashMap<>();\n        for (int i = 0; i < 256; i++) {\n            dictionary.put(String.valueOf((char)i), i);\n        }\n        \n        String[] splitMessage = message.split(\"\");\n        String current = \"\";\n        String result = \"\";\n        \n        for (int i = 0; i < splitMessage.length; i++) {\n            String symbol = splitMessage[i];\n            if (dictionary.containsKey(current + symbol)) {\n                current += symbol;\n            } else {\n                result += dictionary.get(current) + \"/\";\n                dictionary.put(current + symbol, dictionary.size());\n                current = symbol;\n            }\n        }\n        \n        if (!current.equals(\"\")) {\n            result += dictionary.get(current);\n        }\n        \n        return result;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        String message = \"abracadabra\";\n        System.out.println(\"Original Message: \" + message);\n        \n        String encodedMessage = solution.encode(message);\n        System.out.println(\"Encoded Message: \" + encodedMessage);\n    }\n}"}
{"task_id": "Java/94", "generation": "        // Sort the list in non-decreasing order\n        Collections.sort(lst);\n\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) { // If index is even, add the element to the sum\n                sum += lst.get(i);\n            }\n        }\n\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        List<Integer> lst = new ArrayList<>(Arrays.asList(3, 1, 4, 1, 5, 9, 2, 6, 5, 3));\n        System.out.println(sol.skjkasdkd(lst)); // Output: 23\n    }\n}"}
{"task_id": "Java/95", "generation": "        for (Object key : dict.keySet()) {\n            if (key instanceof String) {\n                String keyStr = (String) key;\n                if (Character.isUpperCase(keyStr.charAt(0))) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}"}
{"task_id": "Java/96", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i <= n; i++) {\n            result.add(i);\n        }\n        \n        return result;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        int n = 10;\n        List<Integer> countList = solution.countUpTo(n);\n        \n        System.out.println(\"Count up to \" + n + \": \");\n        for (int num : countList) {\n            System.out.print(num + \" \");\n        }\n    }\n}"}
{"task_id": "Java/97", "generation": "        return a * b;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        System.out.println(\"Enter two numbers to multiply: \");\n        int a = sc.nextInt();\n        int b = sc.nextInt();\n\n        Solution sol = new Solution();\n        int result = sol.multiply(a, b);\n        System.out.println(\"Result of multiplication: \" + result);\n    }\n}"}
{"task_id": "Java/98", "generation": "        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner sc = new Scanner(System.in);\n        System.out.println(\"Enter a string: \");\n        String s = sc.nextLine();\n        System.out.println(\"Number of uppercase letters in the string: \" + solution.countUpper(s));\n    }\n}"}
{"task_id": "Java/99", "generation": "        int count = 0;\n        for (int i = 0; i < value.length(); i++) {\n            char c = value.charAt(i);\n            if (Character.isUpperCase(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Scanner scanner = new Scanner(System.in);\n        \n        System.out.println(\"Enter a string: \");\n        String value = scanner.nextLine();\n        \n        int result = solution.countUpper(value);\n        System.out.println(\"Number of uppercase letters in the string: \" + result);\n    }\n}"}
{"task_id": "Java/100", "generation": "        List<Integer> pile = new ArrayList<>();\n        \n        int current = 1;\n        while (n > 0) {\n            if (n >= current) {\n                pile.add(current);\n                n -= current;\n                current++;\n            } else {\n                pile.add(n);\n                break;\n            }\n        }\n        \n        return pile;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int n = 10;\n        List<Integer> pile = solution.makeAPile(n);\n        System.out.println(\"Pile of size \" + n + \" is \" + pile);\n    }\n}"}
{"task_id": "Java/101", "generation": "        List<String> wordStrings = new ArrayList<>();\n        String[] words = s.split(\" \");\n\n        for (String word : words) {\n            wordStrings.add(word);\n        }\n\n        return wordStrings;\n    }\n}"}
{"task_id": "Java/102", "generation": "        if (x == y) {\n            return -1;\n        }\n        \n        int a = x, b = y;\n        \n        while (a != b) {\n            if (a > b) {\n                a = a - b;\n            } else {\n                b = b - a;\n            }\n        }\n        \n        return a;\n    }\n}"}
{"task_id": "Java/103", "generation": "        double avg = (double) (n + m) / 2;\n        return Math.round(avg);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        \n        System.out.println(\"Enter two numbers:\");\n        int n = scanner.nextInt();\n        int m = scanner.nextInt();\n        \n        Solution solution = new Solution();\n        Object result = solution.roundedAvg(n, m);\n        \n        System.out.println(\"Rounded average: \" + result);\n    }\n}"}
{"task_id": "Java/104", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int num : x) {\n            Set<Integer> uniqueDigits = new HashSet<>();\n            int temp = num;\n            \n            while (temp > 0) {\n                int digit = temp % 10;\n                uniqueDigits.add(digit);\n                temp = temp / 10;\n            }\n            \n            if (uniqueDigits.size() == String.valueOf(num).length()) {\n                result.add(num);\n            }\n        }\n        \n        return result;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> nums = new ArrayList<>();\n        nums.add(123);\n        nums.add(456);\n        nums.add(789);\n        nums.add(112);\n        nums.add(222);\n        nums.add(345);\n        \n        List<Integer> unique = solution.uniqueDigits(nums);\n        \n        System.out.println(\"Numbers with unique digits: \" + unique);\n    }\n}"}
{"task_id": "Java/105", "generation": "        // Create a HashMap to store numbers based on their length\n        Map<Integer, List<String>> map = new HashMap<>();\n        \n        // Iterate through the list of numbers\n        for (int num : arr) {\n            // Convert the number to a string\n            String str = String.valueOf(num);\n            \n            // Get the length of the number\n            int length = str.length();\n            \n            // Check if the length already exists in the map\n            if (map.containsKey(length)) {\n                // Add the number to the list of numbers with the same length\n                map.get(length).add(str);\n            } else {\n                // Create a new list for this length and add the number to it\n                List<String> list = new ArrayList<>();\n                list.add(str);\n                map.put(length, list);\n            }\n        }\n        \n        // Create a list to store the result\n        List<String> result = new ArrayList<>();\n        \n        // Iterate through the map and add numbers to the result list\n        for (int key : map.keySet()) {\n            List<String> list = map.get(key);\n            for (String str : list) {\n                result.add(str);\n            }\n        }\n        \n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> arr = new ArrayList<>(Arrays.asList(123, 45, 67, 890, 12, 3456));\n        \n        List<String> result = solution.byLength(arr);\n        \n        System.out.println(result);\n    }\n}"}
{"task_id": "Java/106", "generation": "        List<Integer> res = new ArrayList<>();\n        \n        for (int i = 1; i <= n; i++) {\n            if (i % 3 == 0 && i % 5 == 0) {\n                res.add(i);\n            }\n        }\n        \n        return res;\n    }\n}"}
{"task_id": "Java/107", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i) && isEvenOddPalindrome(i)) {\n                result.add(i);\n            }\n        }\n        \n        return result;\n    }\n    \n    public boolean isPalindrome(int num) {\n        String str = String.valueOf(num);\n        int left = 0;\n        int right = str.length() - 1;\n        \n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        \n        return true;\n    }\n    \n    public boolean isEvenOddPalindrome(int num) {\n        String str = String.valueOf(num);\n        \n        int evenSum = 0;\n        int oddSum = 0;\n        \n        for (int i = 0; i < str.length(); i++) {\n            int digit = str.charAt(i) - '0'; // Convert character to integer\n            \n            if (i % 2 == 0) {\n                evenSum += digit;\n            } else {\n                oddSum += digit;\n            }\n        }\n        \n        return (evenSum == oddSum);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        System.out.println(solution.evenOddPalindrome(1000));\n    }\n}"}
{"task_id": "Java/108", "generation": "        // Initialize a map to store the frequency of each number in the list\n        Map<Integer, Integer> freqMap = new HashMap<>();\n        \n        // Iterate through the list and update the frequency map\n        for (int num : arr) {\n            freqMap.put(num, freqMap.getOrDefault(num, 0) + 1);\n        }\n        \n        // Initialize a variable to count the number of unique numbers\n        int count = 0;\n        \n        // Iterate through the frequency map and count the number of unique numbers\n        for (int freq : freqMap.values()) {\n            if (freq == 1) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}"}
{"task_id": "Java/109", "generation": "        int numBalls = arr.size();\n        \n        // Count the number of balls on each side\n        int leftBalls = 0;\n        int rightBalls = 0;\n        \n        for (int i = 0; i < numBalls; i++) {\n            if (arr.get(i) == 0) {\n                leftBalls++;\n            } else {\n                rightBalls++;\n            }\n        }\n        \n        // Check if only one ball needs to be moved\n        if (leftBalls == rightBalls + 1 || leftBalls == rightBalls - 1) {\n            return true;\n        }\n        \n        return false;\n    }\n}"}
{"task_id": "Java/110", "generation": "        StringBuilder sb = new StringBuilder();\n        \n        int i = 0;\n        int j = 0;\n        \n        while(i < lst1.size() && j < lst2.size()) {\n            sb.append(lst1.get(i)).append(\" \");\n            sb.append(lst2.get(j)).append(\" \");\n            i++;\n            j++;\n        }\n        \n        while(i < lst1.size()) {\n            sb.append(lst1.get(i)).append(\" \");\n            i++;\n        }\n        \n        while(j < lst2.size()) {\n            sb.append(lst2.get(j)).append(\" \");\n            j++;\n        }\n        \n        return sb.toString().trim();\n    }\n}"}
{"task_id": "Java/111", "generation": "        Map<String, Integer> map = new HashMap<>();\n\n        for (char c : test.toCharArray()) {\n            String key = Character.toString(c);\n            if (map.containsKey(key)) {\n                map.put(key, map.get(key) + 1);\n            } else {\n                map.put(key, 1);\n            }\n        }\n\n        return map;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String test = \"hello\";\n        Map<String, Integer> result = solution.histogram(test);\n        System.out.println(result);\n    }\n}"}
{"task_id": "Java/112", "generation": "        List<Object> result = new ArrayList<>();\n        \n        // Step 1: Reverse the string\n        StringBuilder reversedString = new StringBuilder(s);\n        reversedString.reverse();\n        \n        // Step 2: Delete all occurrences of the character c\n        String finalString = reversedString.toString().replaceAll(c, \"\");\n        \n        // Step 3: Return the reversed and modified string along with the count of characters removed\n        result.add(finalString);\n        result.add(s.length() - finalString.length());\n        \n        return result;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        String s = \"abcdeabcde\";\n        String c = \"d\"; \n        \n        List<Object> result = solution.reverseDelete(s, c);\n        \n        System.out.println(\"Modified String: \" + result.get(0));\n        System.out.println(\"Count of Characters Removed: \" + result.get(1));\n    }\n}"}
{"task_id": "Java/113", "generation": "        List<String> oddLengthWords = new ArrayList<>();\n\n        for (String word : lst) {\n            if (word.length() % 2 != 0) {\n                oddLengthWords.add(word);\n            }\n        }\n\n        return oddLengthWords;\n    }\n}"}
{"task_id": "Java/114", "generation": "        if (nums == null || nums.size() == 0) {\n            return 0;\n        }\n        \n        int n = nums.size();\n        int minSum = Integer.MAX_VALUE;\n        \n        for (int i = 0; i < n; i++) {\n            int sum = 0;\n            for (int j = i; j < n; j++) {\n                sum += nums.get(j);\n                if (sum < minSum) {\n                    minSum = sum;\n                }\n            }\n        }\n        \n        return minSum;\n    }\n}\n\nclass Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> nums = new ArrayList<>(Arrays.asList(2, 3, 1, 2, 4, 3));\n        System.out.println(solution.minSubArraySum(nums)); // Output: 1\n        \n        nums = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5));\n        System.out.println(solution.minSubArraySum(nums)); // Output: 1\n        \n        nums = new ArrayList<>(Arrays.asList(5, 1, 2, 3, 4));\n        System.out.println(solution.minSubArraySum(nums)); // Output: 1\n    }\n}"}
{"task_id": "Java/115", "generation": "        int m = grid.size();\n        if (m == 0) {\n            return 0;\n        }\n        int n = grid.get(0).size();\n        \n        int maxFill = 0;\n        \n        // Create a 2D DP array to store the maximum fill at each cell\n        int[][] dp = new int[m][n];\n        \n        // Initialize the first cell\n        dp[0][0] = Math.min(grid.get(0).get(0), capacity);\n        \n        // Fill the first row\n        for (int j = 1; j < n; j++) {\n            dp[0][j] = Math.min(grid.get(0).get(j), dp[0][j-1]);\n        }\n        \n        // Fill the first column\n        for (int i = 1; i < m; i++) {\n            dp[i][0] = Math.min(grid.get(i).get(0), dp[i-1][0]);\n        }\n        \n        // Fill the rest of the grid\n        for (int i = 1; i < m; i++) {\n            for (int j = 1; j < n; j++) {\n                int fill = Math.min(Math.min(dp[i-1][j], dp[i][j-1]), grid.get(i).get(j));\n                dp[i][j] = Math.min(fill, capacity);\n            }\n        }\n        \n        // Find the maximum fill\n        maxFill = dp[m-1][n-1];\n        \n        return maxFill;\n    }\n}"}
{"task_id": "Java/116", "generation": "        Collections.sort(arr);\n        return arr;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> arr = new ArrayList<>(Arrays.asList(5, 2, 9, 1, 5, 6));\n        \n        System.out.println(\"Original List: \" + arr);\n        \n        List<Integer> sortedArr = solution.sortArray(arr);\n        \n        System.out.println(\"Sorted List: \" + sortedArr);\n    }\n}"}
{"task_id": "Java/117", "generation": "        List<String> words = new ArrayList<>();\n        \n        String[] tokens = s.split(\" \");\n        \n        for (String token : tokens) {\n            if (token.length() == n) {\n                words.add(token);\n            }\n        }\n        \n        return words;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        String s = \"Hello world, how are you doing today?\";\n        int n = 5;\n        \n        List<String> selectedWords = solution.selectWords(s, n);\n        \n        System.out.println(\"Words with length \" + n + \": \" + selectedWords);\n    }\n}"}
{"task_id": "Java/118", "generation": "        // Create a set to store all the vowels\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u'));\n\n        // Initialize a variable to store the closest vowel\n        char closestVowel = ' ';\n        \n        // Initialize a variable to store the minimum difference\n        int minDiff = Integer.MAX_VALUE;\n\n        // Iterate through each character in the word\n        for (char c : word.toCharArray()) {\n            // Check if the character is a vowel\n            if (vowels.contains(Character.toLowerCase(c))) {\n                return String.valueOf(c);\n            } else {\n                // Calculate the absolute difference between the ASCII value of the character and the ASCII value of each vowel\n                for (char vowel : vowels) {\n                    int diff = Math.abs((int) c - (int) vowel);\n                    if (diff < minDiff) {\n                        minDiff = diff;\n                        closestVowel = vowel;\n                    }\n                }\n            }\n        }\n\n        return String.valueOf(closestVowel);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        String word1 = \"hello\";\n        System.out.println(solution.getClosestVowel(word1)); // Output: \"e\"\n\n        String word2 = \"world\";\n        System.out.println(solution.getClosestVowel(word2)); // Output: \"o\"\n        \n        String word3 = \"apple\";\n        System.out.println(solution.getClosestVowel(word3)); // Output: \"a\"\n    }\n}"}
{"task_id": "Java/119", "generation": "        Stack<Character> stack = new Stack<>();\n        StringBuilder result = new StringBuilder();\n        \n        for (String str : lst) {\n            stack.clear();\n            int openCount = 0;\n            for (char c : str.toCharArray()) {\n                if (c == '(') {\n                    stack.push(c);\n                    openCount++;\n                } else if (c == ')') {\n                    if (openCount > 0) {\n                        stack.pop();\n                        openCount--;\n                    } else {\n                        stack.push(c);\n                    }\n                }\n            }\n            while (!stack.isEmpty()) {\n                result.append(stack.pop());\n            }\n        }\n        \n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<String> lst = new ArrayList<>();\n        lst.add(\"Hello (World)\");\n        lst.add(\"()\");\n        lst.add(\"((()))\");\n        lst.add(\"(())\");\n        lst.add(\")(\");\n        \n        System.out.println(solution.matchParens(lst)); // Output: ()(())\n    }\n}"}
{"task_id": "Java/120", "generation": "        List<Integer> result = new ArrayList<>();\n\n        Deque<Integer> deque = new ArrayDeque<>();\n\n        for (int i = 0; i < arr.size(); i++) {\n            // Remove elements from the front of the queue that are out of the current window\n            while (!deque.isEmpty() && deque.peekFirst() < i - k + 1) {\n                deque.pollFirst();\n            }\n\n            // Remove elements from the back of the queue that are less than the current element\n            while (!deque.isEmpty() && arr.get(deque.peekLast()) < arr.get(i)) {\n                deque.pollLast();\n            }\n\n            // Add current element index to the deque\n            deque.offerLast(i);\n\n            // Add maximum element to the result list\n            if (i >= k - 1) {\n                result.add(arr.get(deque.peekFirst()));\n            }\n        }\n\n        return result;\n    }\n}"}
{"task_id": "Java/121", "generation": "        // Create a map to store the frequency of each element in the list\n        Map<Integer, Integer> map = new HashMap<>();\n        \n        // Iterate through the list and update the frequency of elements in the map\n        for (int num : lst) {\n            map.put(num, map.getOrDefault(num, 0) + 1);\n        }\n        \n        // Find the element with the highest frequency\n        int maxFreq = 0;\n        int result = 0;\n        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n            if (entry.getValue() > maxFreq) {\n                maxFreq = entry.getValue();\n                result = entry.getKey();\n            }\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/122", "generation": "        // Sort the list\n        Collections.sort(arr);\n        \n        int count = 0;\n        int left = 0;\n        int right = arr.size() - 1;\n        \n        // Two pointer approach\n        while (left < right) {\n            int sum = arr.get(left) + arr.get(right);\n            \n            if (sum == k) {\n                count++;\n                left++;\n                right--;\n            } else if (sum < k) {\n                left++;\n            } else {\n                right--;\n            }\n        }\n        \n        return count;\n    }\n}"}
{"task_id": "Java/123", "generation": "        List<Integer> list = new ArrayList<>();\n        list.add(n);\n        \n        while (n != 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n            \n            if (n % 2 != 0) {\n                list.add(n);\n            }\n        }\n        \n        return list;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> oddCollatz = solution.getOddCollatz(10);\n        System.out.println(\"Odd Collatz sequence starting from 10: \" + oddCollatz);\n        \n        oddCollatz = solution.getOddCollatz(7);\n        System.out.println(\"Odd Collatz sequence starting from 7: \" + oddCollatz);\n    }\n}"}
{"task_id": "Java/124", "generation": "        // Check if date is in valid format\n        if (!date.matches(\"\\\\d{4}-\\\\d{2}-\\\\d{2}\")) {\n            return false;\n        }\n        \n        // Split the date into year, month, and day\n        String[] parts = date.split(\"-\");\n        int year = Integer.parseInt(parts[0]);\n        int month = Integer.parseInt(parts[1]);\n        int day = Integer.parseInt(parts[2]);\n        \n        // Check if year is valid\n        if (year < 1 || year > 9999) {\n            return false;\n        }\n        \n        // Check if month is valid\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        \n        // Check if day is valid\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        \n        // Check for valid number of days in each month\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day > 30) {\n                return false;\n            }\n        } else if (month == 2) {\n            if (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0)) {\n                if (day > 29) {\n                    return false;\n                }\n            } else {\n                if (day > 28) {\n                    return false;\n                }\n            }\n        }\n        \n        // If all checks pass, return true\n        return true;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.validDate(\"2021-01-15\")); // true\n        System.out.println(solution.validDate(\"2021-02-30\")); // false\n        System.out.println(solution.validDate(\"1999-12-31\")); // true\n        System.out.println(solution.validDate(\"2020-02-29\")); // true\n        System.out.println(solution.validDate(\"2000-02-29\")); // true\n        System.out.println(solution.validDate(\"2100-02-29\")); // false\n    }\n}"}
{"task_id": "Java/125", "generation": "        if (txt == null || txt.isEmpty()) {\n            return null;\n        }\n        \n        List<String> words = new ArrayList<>();\n        String word = \"\";\n        \n        for (int i = 0; i < txt.length(); i++) {\n            char c = txt.charAt(i);\n            if (Character.isLetter(c)) {\n                word += c;\n            } else {\n                if (!word.isEmpty()) {\n                    words.add(word);\n                    word = \"\";\n                }\n            }\n        }\n        \n        if (!word.isEmpty()) {\n            words.add(word);\n        }\n        \n        return words;\n    }\n}"}
{"task_id": "Java/126", "generation": "        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i) > lst.get(i + 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> list1 = Arrays.asList(1, 2, 3, 4, 5);\n        List<Integer> list2 = Arrays.asList(5, 4, 3, 2, 1);\n\n        System.out.println(solution.isSorted(list1)); // Output: true\n        System.out.println(solution.isSorted(list2)); // Output: false\n    }\n}"}
{"task_id": "Java/127", "generation": "        int start = Math.max(interval1.get(0), interval2.get(0));\n        int end = Math.min(interval1.get(1), interval2.get(1));\n        \n        if (start <= end) {\n            return \"[\" + start + \", \" + end + \"]\";\n        } else {\n            return \"No Intersection\";\n        }\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> interval1 = new ArrayList<>(Arrays.asList(0, 5));\n        List<Integer> interval2 = new ArrayList<>(Arrays.asList(3, 7));\n        \n        String result = solution.intersection(interval1, interval2);\n        \n        System.out.println(\"Intersection: \" + result);\n    }\n}"}
{"task_id": "Java/128", "generation": "        Optional<Integer> result = Optional.empty();\n        \n        if (arr == null || arr.size() < 2) {\n            return result;\n        }\n        \n        int negativeCount = 0;\n        for (int num : arr) {\n            if (num < 0) {\n                negativeCount++;\n            }\n        }\n        \n        if (negativeCount % 2 == 0) {\n            result = Optional.of(1);\n        } else {\n            result = Optional.of(-1);\n        }\n        \n        return result;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> arr = new ArrayList<>(Arrays.asList(-1, 2, -3, 4, -5));\n        \n        Optional<Integer> result = solution.prodSigns(arr);\n        \n        if (result.isPresent()) {\n            System.out.println(\"Product sign is: \" + result.get());\n        } else {\n            System.out.println(\"Not enough elements in the list\");\n        }\n    }\n}"}
{"task_id": "Java/129", "generation": "        int m = grid.size();\n        int n = grid.get(0).size();\n\n        int[][] dp = new int[m][n];\n        for (int[] arr : dp) {\n            Arrays.fill(arr, Integer.MAX_VALUE);\n        }\n\n        Queue<int[]> queue = new LinkedList<>();\n        queue.add(new int[]{0, 0, k, 0});\n        dp[0][0] = 0;\n\n        int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n\n        while (!queue.isEmpty()) {\n            int[] curr = queue.poll();\n            int x = curr[0];\n            int y = curr[1];\n            int remainingK = curr[2];\n            int steps = curr[3];\n\n            if (x == m - 1 && y == n - 1) {\n                return Arrays.asList(steps);\n            }\n\n            for (int[] dir : directions) {\n                int newX = x + dir[0];\n                int newY = y + dir[1];\n\n                if (newX >= 0 && newX < m && newY >= 0 && newY < n) {\n                    int newK = grid.get(newX).get(newY) == 1 ? remainingK - 1 : remainingK;\n\n                    if (newK >= 0 && steps + 1 < dp[newX][newY]) {\n                        dp[newX][newY] = steps + 1;\n                        queue.add(new int[]{newX, newY, newK, steps + 1});\n                    }\n                }\n            }\n        }\n\n        return Arrays.asList(-1);\n    }\n\n    public static void main(String[] args) {\n        List<List<Integer>> grid = new ArrayList<>();\n        grid.add(Arrays.asList(0, 1, 0));\n        grid.add(Arrays.asList(0, 1, 0));\n        grid.add(Arrays.asList(0, 0, 0));\n\n        Solution solution = new Solution();\n        List<Integer> result = solution.minPath(grid, 1);\n        System.out.println(result);\n    }\n}"}
{"task_id": "Java/130", "generation": "        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 1; i <= n; i++) {\n            result.add(i*(i+1)/2);\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/131", "generation": "        if(n == 0) {\n            return 0;\n        }\n        \n        return (int)(Math.log10(n) + 1);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.digits(123)); // Output: 3\n        System.out.println(solution.digits(456789)); // Output: 6\n        System.out.println(solution.digits(0)); // Output: 0\n        System.out.println(solution.digits(999999999)); // Output: 9\n    }\n}"}
{"task_id": "Java/132", "generation": "        Stack<Character> stack = new Stack<>();\n\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char opening = stack.pop();\n                if ((c == ')' && opening != '(') || (c == '}' && opening != '{') || (c == ']' && opening != '[')) {\n                    return false;\n                }\n            }\n        }\n\n        return stack.isEmpty();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        String test1 = \"{[()]}\";\n        System.out.println(solution.isNested(test1)); // true\n\n        String test2 = \"{[()]\";\n        System.out.println(solution.isNested(test2)); // false\n\n        String test3 = \"[(])\";\n        System.out.println(solution.isNested(test3)); // false\n    }\n}"}
{"task_id": "Java/133", "generation": "        int sum = 0;\n        for (Double num : lst) {\n            sum += Math.pow(num, 2);\n        }\n        return sum;\n    }\n}"}
{"task_id": "Java/134", "generation": "        int n = txt.length();\n        if(n == 0)\n            return false;\n\n        char lastChar = txt.charAt(n-1);\n        return Character.isLetter(lastChar);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        String txt1 = \"Hello world!\";\n        System.out.println(solution.checkIfLastCharIsALetter(txt1)); // true\n\n        String txt2 = \"Hello world123\";\n        System.out.println(solution.checkIfLastCharIsALetter(txt2)); // false\n\n        String txt3 = \"\";\n        System.out.println(solution.checkIfLastCharIsALetter(txt3)); // false\n    }\n}"}
{"task_id": "Java/135", "generation": "        // Create a hashmap to store the count of remainders\n        Map<Integer, Integer> remainders = new HashMap<>();\n        \n        // Count the remainders when divided by 10 and store in the hashmap\n        for(int num : arr) {\n            int remainder = num % 10;\n            remainders.put(remainder, remainders.getOrDefault(remainder, 0) + 1);\n        }\n        \n        // Loop through the hashmap and check if pairs of remainders add up to 10\n        for(Map.Entry<Integer, Integer> entry : remainders.entrySet()) {\n            int remainder = entry.getKey();\n            int count = entry.getValue();\n            \n            if(remainder == 0) {\n                if(count % 2 != 0) {\n                    return 0;\n                }\n            } else {\n                if(remainders.getOrDefault(10 - remainder, 0) != count) {\n                    return 0;\n                }\n            }\n        }\n        \n        return 1;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        List<Integer> arr1 = Arrays.asList(10, 3, 7, 4, 12, 8);\n        System.out.println(solution.canArrange(arr1)); // Output: 3\n\n        List<Integer> arr2 = Arrays.asList(11, 6, 7, 3, 4, 12, 8, 2);\n        System.out.println(solution.canArrange(arr2)); // Output: 1\n    }\n}"}
{"task_id": "Java/136", "generation": "        List<Optional<Integer>> result = new ArrayList<>();\n        \n        if(lst == null || lst.isEmpty()) {\n            return result;\n        }\n        \n        int largest = Integer.MIN_VALUE;\n        int smallest = Integer.MAX_VALUE;\n        \n        for(Integer num : lst) {\n            if(num > largest) {\n                largest = num;\n            }\n            if(num < smallest) {\n                smallest = num;\n            }\n        }\n        \n        result.add(Optional.of(largest));\n        result.add(Optional.of(smallest));\n        \n        return result;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<Integer> lst = Arrays.asList(4, 2, 7, 1, 9);\n        \n        List<Optional<Integer>> result = solution.largestSmallestIntegers(lst);\n        \n        System.out.println(\"Largest Integer: \" + result.get(0).orElse(null));\n        System.out.println(\"Smallest Integer: \" + result.get(1).orElse(null));\n    }\n}"}
{"task_id": "Java/137", "generation": "        // Compare a and b if they are of the same type\n        if (a.getClass() == b.getClass()) {\n            // Compare integers\n            if (a instanceof Integer) {\n                Integer num1 = (Integer) a;\n                Integer num2 = (Integer) b;\n                \n                if (num1.equals(num2)) {\n                    return Optional.of(\"Equal\");\n                } else {\n                    return Optional.of(\"Not Equal\");\n                }\n            }\n            \n            // Compare strings\n            if (a instanceof String) {\n                String str1 = (String) a;\n                String str2 = (String) b;\n                \n                if (str1.equals(str2)) {\n                    return Optional.of(\"Equal\");\n                } else {\n                    return Optional.of(\"Not Equal\");\n                }\n            }\n            \n            // Compare doubles\n            if (a instanceof Double) {\n                Double dbl1 = (Double) a;\n                Double dbl2 = (Double) b;\n                \n                if (dbl1.equals(dbl2)) {\n                    return Optional.of(\"Equal\");\n                } else {\n                    return Optional.of(\"Not Equal\");\n                }\n            }\n            \n            // Add more cases for other data types if needed\n        } else {\n            return Optional.empty();\n        }\n        \n        return Optional.empty();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        // Test cases\n        System.out.println(solution.compareOne(10, 10)); // Equal\n        System.out.println(solution.compareOne(\"hello\", \"world\")); // Not Equal\n        System.out.println(solution.compareOne(3.14, 3.14)); // Equal\n        System.out.println(solution.compareOne(10, \"10\")); // Not Equal\n    }\n}"}
{"task_id": "Java/138", "generation": "        // Check if the number is equal to the sum of its even digits\n        int sum = 0;\n        int originalNum = n;\n        \n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 == 0) {\n                sum += digit;\n            }\n            n = n / 10;\n        }\n        \n        return originalNum == sum;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.isEqualToSumEven(246)); // true\n        System.out.println(solution.isEqualToSumEven(135)); // false\n        System.out.println(solution.isEqualToSumEven(8822)); // true\n    }\n}"}
{"task_id": "Java/139", "generation": "        if (n == 0) {\n            return 1;\n        }\n        \n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        \n        return result * specialFactorial(n - 1);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test case 1\n        int n1 = 5;\n        System.out.println(\"specialFactorial(\" + n1 + \") = \" + solution.specialFactorial(n1));\n        \n        // Test case 2\n        int n2 = 3;\n        System.out.println(\"specialFactorial(\" + n2 + \") = \" + solution.specialFactorial(n2));\n    }\n}"}
{"task_id": "Java/140", "generation": "        // Remove extra spaces at the beginning and end of the text\n        text = text.trim();\n        \n        // Replace multiple spaces with a single space\n        text = text.replaceAll(\"\\\\s+\", \" \");\n        \n        return text;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        String text = \"   Hello  world!  How    are  you?   \";\n        String fixedText = solution.fixSpaces(text);\n        \n        System.out.println(\"Original text: \" + text);\n        System.out.println(\"Fixed text: \" + fixedText);\n    }\n}"}
{"task_id": "Java/141", "generation": "        // Split the file name into name and extension\n        String[] parts = file_name.split(\"\\\\.\");\n\n        // Check if the file name has at least two parts\n        if (parts.length < 2) {\n            return \"Invalid\";\n        }\n\n        // Check if the name and extension are valid\n        if (isValidName(parts[0]) && isValidExtension(parts[1])) {\n            return \"Valid\";\n        } else {\n            return \"Invalid\";\n        }\n    }\n\n    // Method to check if the name is valid\n    private boolean isValidName(String name) {\n        // Name should only contain alphanumeric characters and underscores\n        return name.matches(\"^[a-zA-Z0-9_]*$\");\n    }\n\n    // Method to check if the extension is valid\n    private boolean isValidExtension(String extension) {\n        // Extension should only contain lowercase letters and be at most 3 characters long\n        return extension.matches(\"^[a-z]{1,3}$\");\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String file1 = \"document.txt\";\n        String file2 = \"image.jpg\";\n        System.out.println(solution.filenameCheck(file1)); // Valid\n        System.out.println(solution.filenameCheck(file2)); // Valid\n        System.out.println(solution.filenameCheck(\"data.csv\")); // Invalid\n        System.out.println(solution.filenameCheck(\"file.\")); // Invalid\n    }\n}"}
{"task_id": "Java/142", "generation": "        int sum = 0;\n        for (int num : lst) {\n            sum += num * num;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> lst = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5));\n        Solution sol = new Solution();\n        System.out.println(\"Sum of squares: \" + sol.sumSquares(lst));\n    }\n}"}
{"task_id": "Java/143", "generation": "        if (sentence == null || sentence.isEmpty()) {\n            return \"\";\n        }\n        \n        String[] words = sentence.split(\" \");\n        List<String> sortedWords = new ArrayList<>();\n        \n        for (String word : words) {\n            sortedWords.add(sortWord(word));\n        }\n        \n        return String.join(\" \", sortedWords);\n    }\n    \n    private String sortWord(String word) {\n        char[] chars = word.toCharArray();\n        Arrays.sort(chars);\n        return new String(chars);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        String sentence = \"hello world how are you\";\n        System.out.println(solution.wordsInSentence(sentence));\n        \n        sentence = \"programming is fun\";\n        System.out.println(solution.wordsInSentence(sentence));\n    }\n}"}
{"task_id": "Java/144", "generation": "        int numerator = Integer.parseInt(x);\n        int denominator = Integer.parseInt(n);\n        \n        int gcd = findGCD(numerator, denominator);\n        \n        numerator /= gcd;\n        denominator /= gcd;\n        \n        if (denominator < 0) {\n            numerator *= -1;\n            denominator *= -1;\n        }\n        \n        return (numerator == Integer.parseInt(x) && denominator == Integer.parseInt(n));\n    }\n    \n    public int findGCD(int a, int b) {\n        if (b == 0) {\n            return a;\n        } else {\n            return findGCD(b, a % b);\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        String x = \"2\";\n        String n = \"4\";\n        \n        boolean result = solution.simplify(x, n);\n        System.out.println(result);\n    }\n}"}
{"task_id": "Java/145", "generation": "        // Create a map to store the points and corresponding counts\n        Map<Integer, Integer> pointsCount = new HashMap<>();\n        \n        // Count the occurrences of each number and store it in the map\n        for (int num : nums) {\n            pointsCount.put(num, pointsCount.getOrDefault(num, 0) + 1);\n        }\n        \n        // Create a list to store the unique points\n        List<Integer> uniquePoints = new ArrayList<>(pointsCount.keySet());\n        \n        // Sort the unique points based on their counts in descending order\n        Collections.sort(uniquePoints, (a, b) -> pointsCount.get(b) - pointsCount.get(a));\n        \n        // Create a list to store the final result based on the order of points\n        List<Integer> result = new ArrayList<>();\n        \n        // Iterate through the unique points and add them to the result list based on their counts\n        for (int point : uniquePoints) {\n            int count = pointsCount.get(point);\n            for (int i = 0; i < count; i++) {\n                result.add(point);\n            }\n        }\n        \n        return result;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test case 1\n        List<Integer> nums1 = new ArrayList<>(Arrays.asList(3, 2, 5, 3, 7, 2, 5, 3));\n        System.out.println(solution.orderByPoints(nums1)); // Output: [3, 3, 3, 5, 5, 2, 2, 7]\n        \n        // Test case 2\n        List<Integer> nums2 = new ArrayList<>(Arrays.asList(1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4));\n        System.out.println(solution.orderByPoints(nums2)); // Output: [4, 4, 4, 4, 3, 3, 3, 1, 1, 1, 2, 2]\n    }\n}"}
{"task_id": "Java/146", "generation": "        int sum = 0;\n        for (int num : nums) {\n            if (num % 2 == 0) {\n                sum += num;\n            } else {\n                sum -= num;\n            }\n        }\n        return sum;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> nums = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9));\n        System.out.println(solution.specialFilter(nums)); // Output: 0\n    }\n}"}
{"task_id": "Java/147", "generation": "        int count = 0;\n        \n        // Iterate from 1 to n\n        for (int i = 1; i <= n; i++) {\n            // Check if the number is a multiple of 3\n            if (i % 3 == 0) {\n                // Increment count by 1\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        \n        System.out.print(\"Enter a number: \");\n        int n = sc.nextInt();\n        \n        Solution sol = new Solution();\n        int result = sol.getMaxTriples(n);\n        \n        System.out.println(\"The number of multiples of 3 from 1 to \" + n + \" is: \" + result);\n    }\n}   \n\n\nThe code defines a class `Solution` with a method `getMaxTriples` that takes an integer `n` as input and returns the number of multiples of 3 from 1 to `n`. In the `main` method, the user is prompted to enter a number, the `getMaxTriples` method is called with the input number, and the result is printed to the console."}
{"task_id": "Java/148", "generation": "        List<String> path = new ArrayList<>();\n        Map<String, String> parent = new HashMap<>();\n        \n        Queue<String> queue1 = new LinkedList<>();\n        Queue<String> queue2 = new LinkedList<>();\n        \n        queue1.add(planet1);\n        queue2.add(planet2);\n        \n        while (!queue1.isEmpty() || !queue2.isEmpty()) {\n            if (!queue1.isEmpty()) {\n                String current1 = queue1.poll();\n                if (parent.containsKey(current1)) {\n                    return mergePaths(parent, current1);\n                }\n                List<String> neighbors1 = getNeighbors(current1);\n                for (String neighbor : neighbors1) {\n                    if (!parent.containsKey(neighbor)) {\n                        parent.put(neighbor, current1);\n                        queue1.add(neighbor);\n                    }\n                }\n            }\n            \n            if (!queue2.isEmpty()) {\n                String current2 = queue2.poll();\n                if (parent.containsKey(current2)) {\n                    return mergePaths(parent, current2);\n                }\n                List<String> neighbors2 = getNeighbors(current2);\n                for (String neighbor : neighbors2) {\n                    if (!parent.containsKey(neighbor)) {\n                        parent.put(neighbor, current2);\n                        queue2.add(neighbor);\n                    }\n                }\n            }\n        }\n        \n        return path;\n    }\n    \n    private List<String> getNeighbors(String planet) {\n        // Implementation for getting neighbors of a planet\n        return new ArrayList<>();\n    }\n    \n    private List<String> mergePaths(Map<String, String> parent, String intersection) {\n        List<String> path1 = new ArrayList<>();\n        List<String> path2 = new ArrayList<>();\n        \n        String current = intersection;\n        while (current != null) {\n            path1.add(current);\n            current = parent.get(current);\n        }\n        \n        current = intersection;\n        while (current != null) {\n            path2.add(current);\n            current = parent.get(current);\n        }\n        \n        Collections.reverse(path1);\n        path2.remove(path2.size() - 1); // Remove the intersection node\n        \n        path1.addAll(path2);\n        return path1;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        String planet1 = \"Earth\";\n        String planet2 = \"Mars\";\n        \n        List<String> path = solution.bf(planet1, planet2);\n        \n        if (path.isEmpty()) {\n            System.out.println(\"No path found between \" + planet1 + \" and \" + planet2);\n        } else {\n            System.out.println(\"Path between \" + planet1 + \" and \" + planet2 + \": \" + path);\n        }\n    }\n}"}
{"task_id": "Java/149", "generation": "        Collections.sort(lst);\n        return lst;\n    }\n\n    public static void main(String[] args) {\n        List<String> lst = new ArrayList<>();\n        lst.add(\"banana\");\n        lst.add(\"apple\");\n        lst.add(\"cherry\");\n        lst.add(\"date\");\n        \n        Solution sol = new Solution();\n        List<String> sortedList = sol.listSort(lst);\n        \n        System.out.println(sortedList);\n    }\n}"}
{"task_id": "Java/150", "generation": "        int count = 0;\n        \n        for (int i = 0; i < n; i++) {\n            if (((i % x) == 0) && ((i % y) != 0)) {\n                count++;\n            } else if (((i % x) != 0) && ((i % y) == 0)) {\n                count++;\n            }\n        }\n        \n        return count;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        int n = 10;\n        int x = 2;\n        int y = 3;\n        \n        System.out.println(solution.xOrY(n, x, y)); // Output should be 5\n    }\n}"}
{"task_id": "Java/151", "generation": "        int sum = 0;\n        int doubleDiff = 0;\n        \n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) instanceof Integer) {\n                sum += (int)lst.get(i);\n            } else if (lst.get(i) instanceof List) {\n                doubleDiff += 2 * (int)lst.get(i);\n            }\n        }\n        \n        return doubleDiff - sum;\n    }\n\n    public static void main(String[] args) {\n        List<Object> lst = Arrays.asList(1, 2, Arrays.asList(3, 4), 5);\n        Solution sol = new Solution();\n        System.out.println(sol.doubleTheDifference(lst));\n    }\n}"}
{"task_id": "Java/152", "generation": "        List<Integer> result = new ArrayList<>();\n        int[] gameArr = new int[game.size()];\n        int[] guessArr = new int[guess.size()];\n        \n        // Convert List to arrays\n        for (int i = 0; i < game.size(); i++) {\n            gameArr[i] = game.get(i);\n        }\n        \n        for (int i = 0; i < guess.size(); i++) {\n            guessArr[i] = guess.get(i);\n        }\n        \n        // Find the number of correct guesses\n        int correct = 0;\n        for (int i = 0; i < gameArr.length; i++) {\n            if (gameArr[i] == guessArr[i]) {\n                correct++;\n            }\n        }\n        \n        // Add the number of correct guesses to the result list\n        result.add(correct);\n        \n        // Find the number of misplaced guesses\n        int misplaced = 0;\n        Set<Integer> gameSet = new HashSet<>();\n        for (int num : gameArr) {\n            gameSet.add(num);\n        }\n        \n        for (int i = 0; i < guessArr.length; i++) {\n            if (gameSet.contains(guessArr[i])) {\n                misplaced++;\n                gameSet.remove(guessArr[i]);\n            }\n        }\n        \n        // Subtract the number of correct guesses from the number of misplaced guesses\n        misplaced -= correct;\n        \n        // Add the number of misplaced guesses to the result list\n        result.add(misplaced);\n        \n        return result;\n    }\n}"}
{"task_id": "Java/153", "generation": "        String strongestExtension = \"\";\n        int maxStrength = Integer.MIN_VALUE;\n\n        for (String extension : extensions) {\n            int strength = calculateStrength(class_name, extension);\n            if (strength > maxStrength) {\n                maxStrength = strength;\n                strongestExtension = extension;\n            }\n        }\n\n        return strongestExtension;\n    }\n\n    private int calculateStrength(String s1, String s2) {\n        int strength = 0;\n\n        int maxLength = Math.min(s1.length(), s2.length());\n        for (int i = 0; i < maxLength; i++) {\n            if (s1.charAt(i) == s2.charAt(i)) {\n                strength++;\n            } else {\n                break;\n            }\n        }\n\n        return strength;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<String> extensions = new ArrayList<>();\n        extensions.add(\"com.example.MyClass\");\n        extensions.add(\"com.example.MyClassImpl\");\n        extensions.add(\"com.example.MyClassUtil\");\n        \n        System.out.println(solution.StrongestExtension(\"com.example.MyClass\", extensions));\n    }\n}"}
{"task_id": "Java/154", "generation": "        if (a.length() != b.length()) {\n            return false;\n        }\n        \n        String combined = a + a;\n        \n        return combined.contains(b);\n    }\n}"}
{"task_id": "Java/155", "generation": "        List<Integer> count = new ArrayList<>();\n        int evenCount = 0;\n        int oddCount = 0;\n        \n        while(num > 0) {\n            int digit = num % 10;\n            if(digit % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n            num = num / 10;\n        }\n        \n        count.add(evenCount);\n        count.add(oddCount);\n        \n        return count;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        int num = 123456;\n        List<Integer> counts = solution.evenOddCount(num);\n        \n        System.out.println(\"Even Count: \" + counts.get(0));\n        System.out.println(\"Odd Count: \" + counts.get(1));\n    }\n}"}
{"task_id": "Java/156", "generation": "        if (number <= 0) {\n            return \"Invalid Number\";\n        }\n        \n        // Create a mapping of numbers to roman numerals\n        int[] nums = {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n        String[] romanNumerals = {\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"};\n        \n        // Initialize result\n        StringBuilder result = new StringBuilder();\n        \n        // Iterate through the nums array in reverse order\n        for (int i = nums.length - 1; i >= 0; i--) {\n            // Continue subtracting the largest possible value from the number until it becomes negative\n            while (number >= nums[i]) {\n                result.append(romanNumerals[i]);\n                number -= nums[i];\n            }\n        }\n        \n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.intToMiniRoman(99)); // XCIX\n        System.out.println(solution.intToMiniRoman(357)); // CCCLVII\n        System.out.println(solution.intToMiniRoman(2000)); // MM\n        System.out.println(solution.intToMiniRoman(0)); // Invalid Number\n    }\n}"}
{"task_id": "Java/157", "generation": "        // Check if the sum of squares of two sides is equal to the square of the third side\n        if(a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c == a*a){\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        System.out.println(solution.rightAngleTriangle(3, 4, 5)); // true\n        System.out.println(solution.rightAngleTriangle(5, 12, 13)); // true\n        System.out.println(solution.rightAngleTriangle(1, 2, 3)); // false\n    }\n}"}
{"task_id": "Java/158", "generation": "        // Sort the list of words in non-increasing order based on their length\n        Collections.sort(words, (a, b) -> b.length() - a.length());\n        \n        // Get the first longest word from the sorted list\n        return words.get(0);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a list of words\n        List<String> words = new ArrayList<>();\n        words.add(\"apple\");\n        words.add(\"banana\");\n        words.add(\"orange\");\n        words.add(\"kiwi\");\n        \n        // Create an instance of Solution class\n        Solution solution = new Solution();\n        \n        // Find the longest word\n        String longestWord = solution.findMax(words);\n        \n        // Print the longest word\n        System.out.println(\"The longest word is: \" + longestWord);\n    }\n}"}
{"task_id": "Java/159", "generation": "        List<Integer> result = new ArrayList<>();\n        if (need > remaining) {\n            result.add(remaining);\n            return result;\n        }\n        \n        int eatAmount = Math.min(number, need);\n        result.add(eatAmount);\n        \n        if (eatAmount == number) {\n            result.addAll(eat(number, need - number, remaining - number));\n        } else {\n            result.addAll(eat(number, 0, remaining - eatAmount));\n        }\n        \n        return result;\n    }\n}"}
{"task_id": "Java/160", "generation": "        int result = operand.get(0);\n        \n        for (int i = 0; i < operator.size(); i++) {\n            String op = operator.get(i);\n            int num = operand.get(i+1);\n            \n            if (op.equals(\"+\")) {\n                result += num;\n            } else if (op.equals(\"-\")) {\n                result -= num;\n            } else if (op.equals(\"*\")) {\n                result *= num;\n            } else if (op.equals(\"/\")) {\n                result /= num;\n            }\n        }\n        \n        return result;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        List<String> operator = new ArrayList<>(Arrays.asList(\"+\", \"*\", \"/\"));\n        List<Integer> operand = new ArrayList<>(Arrays.asList(5, 3, 2, 8));\n        \n        int result = solution.doAlgebra(operator, operand);\n        \n        System.out.println(\"Result: \" + result);\n    }\n}"}
{"task_id": "Java/161", "generation": "        // Create a map to store the frequency of each character in the string\n        Map<Character, Integer> map = new HashMap<>();\n        \n        // Iterate over each character in the string and update the frequency in the map\n        for (char c : s.toCharArray()) {\n            map.put(c, map.getOrDefault(c, 0) + 1);\n        }\n        \n        // Sort the characters by frequency in descending order\n        List<Character> characters = new ArrayList<>(map.keySet());\n        Collections.sort(characters, (a, b) -> map.get(b) - map.get(a));\n        \n        // Append the characters in sorted order to create the result string\n        StringBuilder result = new StringBuilder();\n        for (char c : characters) {\n            int frequency = map.get(c);\n            for (int i = 0; i < frequency; i++) {\n                result.append(c);\n            }\n        }\n        \n        return result.toString();\n    }\n}\n\nclass Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        // Test cases\n        String s1 = \"tree\";\n        System.out.println(solution.solve(s1)); // Output: eert\n        \n        String s2 = \"cccaaa\";\n        System.out.println(solution.solve(s2)); // Output: aaaccc\n        \n        String s3 = \"Aabb\";\n        System.out.println(solution.solve(s3)); // Output: bbAa\n    }\n}"}
{"task_id": "Java/162", "generation": "        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] messageDigest = md.digest(text.getBytes());\n\n        BigInteger no = new BigInteger(1, messageDigest);\n\n        StringBuilder hashText = new StringBuilder(no.toString(16));\n\n        while (hashText.length() < 32) {\n            hashText.insert(0, \"0\");\n        }\n\n        return Optional.of(hashText.toString());\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String text = \"Hello, World!\";\n        try {\n            Optional<String> md5 = solution.stringToMd5(text);\n            if (md5.isPresent()) {\n                System.out.println(\"MD5 hash of \\\"\" + text + \"\\\" is: \" + md5.get());\n            } else {\n                System.out.println(\"Error calculating MD5 hash.\");\n            }\n        } catch (NoSuchAlgorithmException e) {\n            System.out.println(\"NoSuchAlgorithmException caught: \" + e.getMessage());\n        }\n    }\n}"}
{"task_id": "Java/163", "generation": "        List<Integer> integers = new ArrayList<>();\n        \n        if (a <= b) {\n            for (int i = a; i <= b; i++) {\n                integers.add(i);\n            }\n        } else {\n            for (int i = a; i >= b; i--) {\n                integers.add(i);\n            }\n        }\n        \n        return integers;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        int a = 1;\n        int b = 5;\n        List<Integer> integers = solution.generateIntegers(a, b);\n        \n        System.out.println(\"Integers between \" + a + \" and \" + b + \": \" + integers);\n    }\n}"}
